{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"development/bounties/","title":"Libretro open source bounties","text":"<p>What is an Open Source Bounty?</p> <p>Bounties are usually offered as an incentive for fixing software bugs or implementing minor features. Bounty driven development is one of the Business models for open-source software. The compensation offered for an open-source bounty is usually small. Source: Wikipedia</p>"},{"location":"development/bounties/#stages-of-the-bounty-process","title":"Stages of the bounty process","text":"<ol> <li>Users fund bounties on open github issues or feature requests they want to see addressed.</li> <li>Developers create solutions which closes the issues and claim the corresponding bounties on Bountysource.</li> <li>Backers can accept or reject the claims.</li> <li>If accepted, Bountysource pays the bounties to the developer.</li> </ol>"},{"location":"development/bounties/#what-is-bountysource","title":"What is Bountysource?","text":"<p>Bountysource is a funding platform for open-source software which allows users and developers to create bounties from any existing github issue. Libretro has no formal partnership with Bountysource and there is no requirement to use the Bountysource service.</p>"},{"location":"development/bounties/#who-can-post-a-bounty","title":"Who can post a bounty?","text":"<p>Anybody with PayPal, Bitcoin, or funds in a Bountysource account (such as earning money from a previous bounty).</p>"},{"location":"development/bounties/#what-does-it-cost-to-post-a-bounty","title":"What does it cost to post a bounty?","text":"<p>There are no fees associated with posting a bounty. For example, to post a $5 bounty, you will be charged $5. For a $500 bounty, you will be charged $500.</p>"},{"location":"development/bounties/#do-i-have-to-be-affiliated-with-libretro-in-order-to-put-a-bounty-on-an-issue","title":"Do I have to be affiliated with libretro in order to put a bounty on an issue?","text":"<p>No. Anybody can put a bounty on any issue, regardless of their relationship with the project.</p>"},{"location":"development/bounties/#do-i-have-to-be-affiliated-libretro-in-order-to-claim-a-bounty-on-an-issue","title":"Do I have to be affiliated libretro in order to claim a bounty on an issue?","text":"<p>No.</p>"},{"location":"development/bounties/#can-several-people-claim-the-same-bounty","title":"Can several people claim the same bounty?","text":"<p>Yes. When there are multiple claims on a bounty, the people who funded the bounty decide which of the solutions gets the bounty.</p> <p>When a bounty claim is submitted by a developer, the claim is put into a two week verification period. Backers are notified by email and can then accept or reject the claim.</p> <ul> <li>If all Backers vote to accept the claim, it is processed immediately and the developer is awarded the bounty.</li> <li>If any Backer fails to accept the claim, it remains in the two week waiting period.</li> <li>If any Backer has an issue with the claim, they can reject it. Claims cannot be paid out until the dispute is resolved and the rejected status is lifted.</li> </ul>"},{"location":"development/bounties/#further-bountysource-information","title":"Further Bountysource information","text":"<p>You can find a more comprehensive version of this information and more directly from Bountysource.</p>"},{"location":"development/coding-standards/","title":"Libretro Coding Standards","text":"<p>Scope</p> <p>These standards are intended to apply to frontends, cores, and other projects that are maintained as part of the Libretro organization. These standards are not enforced on independent projects making use of the Libretro API or other open technologies.</p>"},{"location":"development/coding-standards/#standards-for-retroarch","title":"Standards for RetroArch","text":""},{"location":"development/coding-standards/#c89-compatibility","title":"C89 Compatibility","text":"<p>All code contributed to RetroArch must be compliant with the \"C89\" coding standard established by ANSI X3.159-1989.</p>"},{"location":"development/coding-standards/#variable-declaration","title":"Variable declaration","text":"<p>To maintain C89 compatibility, declare all local variables at the beginning of their respective scope blocks, rather than inline at the time of their first use.</p>"},{"location":"development/coding-standards/#comments","title":"Comments","text":"<p>To maintain C89 compatibility, comments should be written in legacy using <code>/*</code> at the beginning and <code>*/</code> and the end.</p> <p>Sometimes it is useful to incorporate a lengthy comment in source. For example:  - providing specifications for a function preceding its declaration  - to explain a complex or unintuitive algorithm  - to explain the history or special circumstances of a section of code  - </p> <p>Comments use a maximum column width of 80 characters, and each new line of a multiline comment should begin with a space and an asterisk:</p> <pre><code>/**\n  * Retrieves the sensor state associated with the provided port and ID. This\n  * function pointer may be set to NULL if retreiving sensor state is not\n  * supported.\n  * \n  * @param data  The input state struct\n  * @param port\n  * @param id    Sensor ID\n  * \n  * @return The current state associated with the port and ID as a float\n **/\nfloat (*get_sensor_input)(void *data, unsigned port, unsigned id);\n</code></pre>"},{"location":"development/coding-standards/#indentation","title":"Indentation","text":"<p>Indentation is three spaces.</p>"},{"location":"development/coding-standards/#braces","title":"Braces","text":"<p>Brace usage follows \"Allman style\". The brace associated with a control statement is placed on the following line, indented to the same level as the control statement. Statements within the braces are indented to the next level.</p> <pre><code>while (x == y)\n{\n   something();\n   somethingelse();\n}\n\nfinalthing();\n</code></pre>"},{"location":"development/coding-standards/#single-line-if-conditional-statements","title":"Single-line <code>if</code> conditional statements","text":"<p><code>if</code> and <code>else</code> conditionals with single-line statements should be spaced with the conditional on one line and the statement below it, indented, with no braces:</p> <pre><code>if (time &gt; launch_date)\n   initiate_probe_communication();\nelse\n   generate_prelaunch_report();\n</code></pre>"},{"location":"development/coding-standards/#whitespace-and-alignment","title":"Whitespace and alignment","text":"<p>When possible, use whitespace to improve the readability of code that makes many assignment statements in a row, uses complex conditionals, or passes a large number of parameters to a function.</p> <p>Example of aligning successive assignment statements:</p> <pre><code>if (seq == 1157460427127406720ULL)\n{\n   content_ctx_info_t content_info;\n   content_info.argc                   = 0;\n   content_info.argv                   = NULL;\n   content_info.args                   = NULL;\n   content_info.environ_get            = NULL;\n}\n</code></pre> <p>Example of aligning a complex parameter list:</p> <pre><code>if (recording_driver_get_data_ptr())\n{\n   runloop_msg_queue_push(\n         msg_hash_to_str(MSG_RESTARTING_RECORDING_DUE_TO_DRIVER_REINIT),\n         2, 180, false,\n         NULL, MESSAGE_QUEUE_ICON_DEFAULT, MESSAGE_QUEUE_CATEGORY_INFO);\n\n   command_event(CMD_EVENT_RECORD_DEINIT, NULL);\n   command_event(CMD_EVENT_RECORD_INIT, NULL);\n}\n</code></pre>"},{"location":"development/coding-standards/#naming-conventions","title":"Naming conventions","text":""},{"location":"development/coding-standards/#naming-typedefs","title":"naming typedefs","text":"<p>typedefs should have the suffix <code>_t</code>. For example, the case of using <code>typedef</code> with a <code>struct</code>:</p> <pre><code>typedef struct input_driver_state\n{\n   input_driver_t *current_driver;\n   void *current_input_data;\n} input_driver_state_t;\n</code></pre>"},{"location":"development/coding-standards/#common-retroarch-source-abbreviations","title":"Common RetroArch source abbreviations","text":"Abbreviation Meaning ra, rarch RetroArch av Audio-Visual cb Callback ctx Context gfx Graphics hw Hardware idx Index ptr Pointer st State sw Software ui User interface"},{"location":"development/coding-standards/#vim-configuration-for-libretro-style","title":"vim configuration for Libretro style","text":"<p>Coders who use the vim editor can create a <code>vimrc</code> configuration file with the following settings in order to pre-set RetroArch indentation style.</p> <pre><code>set tabstop=3\nset shiftwidth=3\nset expandtab\nset textwidth=80\n</code></pre>"},{"location":"development/coding-standards/#standards-for-libretro-cores","title":"Standards for Libretro cores","text":"<p>Cores and other projects that are maintained by the Libretro organization can be considered as three categories:</p> <ul> <li>New, original software</li> <li>Ports and enhancements of third-party software that is still maintained</li> <li>Ports and enhancements of third-party software that is not maintained</li> </ul> <p>New cores and other projects that are maintained by the Libretro organization should be coded as closely to the Libretro/RetroArch standard as possible based on the language used by the core. Cores that are based on existing software should generally conform to whatever standards and style were used in the original software, unless the original software is no longer maintained. In that case the coding style may be changed to Libretro/RetroArch at the discretion of the involved Libretro developers and leadership.</p>"},{"location":"development/frontends/","title":"Frontend Development","text":"<p>Libretro frontends are programs that have implemented the libretro API specification. If fully implemented, this allows the program to run any libretro core that has been developed.</p>"},{"location":"development/frontends/#frontend-development-guides","title":"Frontend Development Guides","text":"<ul> <li>A Libretro retrospective - Developer Emery Hemingway's detailed look back on implementing a new libretro frontend for the Genode Operating System.</li> </ul>"},{"location":"development/frontends/#reference-frontend","title":"Reference frontend","text":"<p>RetroArch is the official reference libretro frontend, developed in-house. It is usually the first in implementing new features added to the libretro API. Written almost entirely in C, targets a large amount of platforms.</p> Name Author(s) Description Anarchy Arcade Elijah Newman-Gomez AArcade is a virtual reality 3D desktop that launches shortcuts to absolutely anything you like. Arcan Letoram Powerful development framework for creating virtually anything from user interfaces for specialized embedded applications all the way to full-blown standalone desktop environments. BizHawk BizHawk Experimental libretro player support for the BizHawk multi-platform emulator. Emutest kivutar A headless libretro frontend to test libretro cores. EmuVR Hackable console leiradel Debugging tool for libretro cores. Haiyajan deltabeard A tiny and fast libretro entertainment application. KRetro Seshan Ravikumar libretro emulation frontend for Plasma. Ludo kivutar libretro frontend written in Go. Lemuroid Swordfish90 All in 1 emulator on Android. Merton Snowcone Ltd. Merton is a work-in-progress emulator frontend for libretro built with libmatoya. Mininal reference fronted bparker06 This is a barebones minimal reference frontend for the libretro API. minir Alcaro WIMP interface (Windows, Icons, Menus and Pointers), and only cares about the major desktop OSes. Drops flexibility in favor of improved out-of-the-box experience. minir test fronts Alcaro Three different fronts, none of which has IO drivers: retroprofile just runs the core, intended for performance tests and PGO; retrorepeat runs the core twice, expecting identical output; retrostateverify traces the entire core and verifies whether its savestates are perfect. miniretro davidgfnet This is a small (Linux only for now) CLI libretro frontend for automated testing of libretro cores. nanoarch heuripedes Small frontend providing video, audio and basic input features to run non-libretro-GL cores. Built on GLFW. New Retro Arcade Digital Cyber Cherries noarch RobLoach Minimalist frontend which does not provide video, audio or even basic input. It loads a libretro core, runs an iteration, and then exits. Good for unit testing. picoarch neonloop picoarch uses libpicofe and SDL to create a small frontend to libretro cores. It's designed for small (320x240 2.0-2.4\") screen, low-powered devices like the Trimui Model S (PowKiddy A66). Phoenix Phoenix Upcoming libretro frontend written with the Qt5 cross-platform application framework. raylib-libretro RobLoach Libretro frontend using raylib. retro_frontend Ehmry Frontend for the Genode operating system framework. Following the Genode philosophy this frontend strives to be a minimal implemention that is extensible via the abstract OS services provided to it. RePlay OS RTA Upcoming libretro based frontend optimized for use with Raspberry Pi boards using both LCD and CRT screens. replay avojak Native Linux multi-system emulator built in Vala and GTK for elementary OS. Retrobot Ross Squires A self-hosted Discord bot that allows friends to play games over chat. RetroPlayer Kodi-Game Also known as Kodi-Game, RetroPlayer is a libretro compatibility layer for Kodi. sdlarch heuripedes Small frontend providing video, audio and basic input to run basic libretro cores. Built on SDL. URetro Nintendo WiiU frontend Vintage Simulator runvnc 3D Lua-programmable libretro frontend supporting many 3D formats, some Cairo graphics, physics, emulation control with scripts ZMZ Alcaro Abandoned"},{"location":"development/input-api/","title":"Libretro Input API","text":""},{"location":"development/input-api/#overview","title":"Overview","text":"<p>Libretro's input system is based on abstracted input device types which are polled via callbacks provided by the libretro API. For core developers, the value of these abstractions is that cores can be coded with an 'ideal' input type abstraction in mind while giving frontend developers and users the freedom to map that abstraction to any number of hardware or software input sources.</p> <p>For example, native libretro cores and source ports could be written to poll the RetroPad, the gamepad abstraction, while the frontend allows the user to map the RetroPad to their physical keyboard or mouse. This is also an advantage for emulator cores, where the input abstraction is selected to match the type or types of input available on the emulated system. For example, the libretro pointer abstraction is available for emulating input for systems like the Nintendo DS; frontends can allow the user to map a mouse or other suitable input device in addition to a hardware touchscreen. Meanwhile, on platforms like smartphones and tablets, the user can utilize their touch hardware for a more authentic emulation experience without as much code for the core to maintain.</p> <p>Libretro input device abstractions include:</p> <ul> <li>RetroPad<ul> <li>Digital Gamepad or Joystick</li> <li>Digital Gamepad or Joystick with Analog Controls</li> </ul> </li> <li>Mouse</li> <li>Pointer</li> <li>Keyboard</li> <li>Lightgun</li> </ul>"},{"location":"development/input-api/#reference-implementations","title":"Reference implementations","text":"<p>The <code>libretro-test</code> core provides a reference implementation in the C programming language for many aspects of the libretro input API. As of March 2021, <code>libretro-test</code> does not yet incorporate the latest additions to the input API, but still serves as an important resource.</p>"},{"location":"development/input-api/#input-abstractions","title":"Input Abstractions","text":""},{"location":"development/input-api/#retropad","title":"RetroPad","text":"<p>The RetroPad is a controller abstraction interface defined by the Libretro API. It is the primary input device for a libretro frontend. Unless a core absolutely requires the use of a keyboard with no possible fallback for gamepad-type controls, a [[Libretro core]] should always be implemented as such that it is directly controllable by the RetroPad.</p> <p></p> <p>In terms of button layout and functionality, the RetroPad is based on the original PlayStation gamepad and the Super Nintendo gamepad.</p> <p> Above: An example of the RetroPad gamepad abstraction mapped to the Megadrive 6-Button gamepad.</p>"},{"location":"development/input-api/#digital-retropad","title":"Digital RetroPad","text":"<p><code>RETRO_DEVICE_JOYPAD</code>: A RetroPad abstraction with all digital controls can be used. The conceptual arrangement for the buttons for the RetroPad is inspired by the Super Nintendo controller and the Sony Playstation DualShock.</p> <p>The minimum implementation required for the digital RetroPad abstraction:</p> <ul> <li>At least two shoulder buttons</li> <li>At least four face buttons</li> <li>At least one D-pad</li> <li>A <code>Start</code> button and a <code>Select</code>/<code>Back</code> button.</li> </ul>"},{"location":"development/input-api/#analog-retropad","title":"Analog RetroPad","text":"<p><code>RETRO_DEVICE_ANALOG</code>: An analog subtype of the RetroPad abstraction with one or more analog inputs can be used. Conceptually inspired by the Sony DualShock2, this adds two analog sticks to the digital RetroPad and allows all buttons to return analog values in the range of <code>[-0x7fff, 0x7fff]</code>, although some devices may return <code>-0x8000</code>. Positive X axis is right. Positive Y axis is down. Buttons are returned in the range <code>[0, 0x7fff]</code>.</p> <p>hiddenasbestos, author of the current revision of the analog RetroPad API, provides a reference implementation in C that checks for analog button values before falling back to the digital <code>RETRO_DEVICE_JOYPAD</code>. This approach supports frontends that do not implement the analog input API. <pre><code>static uint16_t get_analog_button( retro_input_state_t input_state_cb,\n                                   int player_index,\n                                   int id )\n{\n    uint16_t button;\n\n    // NOTE: Not all front-ends support analog buttons (or pre-date it) \n    // so we need to handle this in a graceful way.\n\n    // First, try and get an analog value using the new libretro API constant\n    button = input_state_cb( player_index,\n                             RETRO_DEVICE_ANALOG,\n                             RETRO_DEVICE_INDEX_ANALOG_BUTTON,\n                             id );\n\n    if ( button == 0 )\n    {\n        // If we got exactly zero, we're either not pressing the button, or the front-end\n        // is not reporting analog values. We need to do a second check using the classic\n        // digital API method, to at least get some response - better than nothing.\n\n        // NOTE: If we're honestly just not holding the button, we're still going to get zero.\n\n        button = input_state_cb( player_index,\n                                 RETRO_DEVICE_JOYPAD,\n                                 0,\n                                 id ) ? 0x7FFF : 0;\n    }\n\n    return button;\n}\n</code></pre></p>"},{"location":"development/input-api/#mouse-input","title":"Mouse Input","text":"<p><code>RETRO_DEVICE_MOUSE</code>: X and Y coordinates are reported relatively to last poll (poll callback) and it is up to the core to keep track of where the pointer coordinates with respect to the display.</p>"},{"location":"development/input-api/#pointer-input","title":"Pointer Input","text":"<p><code>RETRO_DEVICE_POINTER</code>: The pointer abstraction represents pen, stylus, touch and other input devices for emulated devices that use absolute coordinates with respect to the screen.</p> <p>Coordinates in X and Y are reported as <code>[-0x7fff, 0x7fff]</code>: <code>-0x7fff</code> corresponds to the far left/top of the screen, <code>0x7fff</code> to the far right/bottom of the screen. The \"screen\" is defined as area that is passed to the frontend and later displayed on the monitor. The frontend is free to scale/resize this screen as it sees fit but <code>(X, Y) = (-0x7fff, -0x7fff)</code> will always correspond to the top-left pixel of the display.</p>"},{"location":"development/input-api/#keyboard-input","title":"Keyboard Input","text":"<p><code>RETRO_DEVICE_KEYBOARD</code>: The libretro API allows a core to poll the frontend for the raw current pressed state of keys. There is also a callback available which is called by the frontend in response to keyboard events. <code>down</code> is set if the key is being pressed and <code>false</code> if it is being released.</p> <p>Even though the frontend should try to synchronize keypresses with keycode events, cores should assume that multiple characters can be generated from a single keypress. In other words, keycode events should be treated separately from character events. Similarily if only a keycode event is generated with no corresponding character, the character should be <code>0</code>.</p>"},{"location":"development/input-api/#lightgun-input","title":"Lightgun Input","text":"<p><code>RETRO_DEVICE_LIGHTGUN</code>: The libretro lightgun abstraction reports X/Y coordinates in screen space (similar to the pointer) in the range <code>[-0x8000, 0x7fff]</code> in both axes, with zero being center and <code>-0x8000</code> being out of bounds. The core an query the on/off screen state of the lightgun. It features a trigger, start/select buttons, auxiliary action buttons and a directional pad. A forced off-screen shot can be requested for auto-reloading function in some games.</p>"},{"location":"development/libretro-overview/","title":"Libretro Development Overview","text":"<p>The Libretro API is a lightweight C-based Application Programming Interface (API) that exposes generic audio, video, and input callbacks.</p>"},{"location":"development/libretro-overview/#frontends-and-cores","title":"Frontends and cores","text":"<p>There are two sides to Libretro development:</p> <ul> <li>frontends are programs that can run libretro-compatible cores.</li> <li>cores are program (such as a game, emulator, or media player) that has been ported to the libretro API so that it can be executed by libretro frontends.</li> </ul> <p>Developers of cores such as standalone games, game emulators, media players, and other applications don\u2019t have to worry about writing different video drivers for Direct3D, OpenGL or worrying about catering to all possible input APIs, sound APIs, gamepads, etc.</p> <p>Cores are built as a single library file which can be executed by any frontend that supports the libretro API. The frontend's responsibility is to provide all the implementation-specific details. The core's responsibility is solely to provide the main program.</p>"},{"location":"development/libretro-overview/#libretroh","title":"libretro.h","text":"<p>The libretro API consists of several functions outlined in libretro.h, found in the RetroArch source package. The API header is compatible with C99 and C++. From C99, the bool type and <code>&lt;stdint.h&gt;</code> are used. The latest version of this file can be found in <code>libretro-common</code>.</p>"},{"location":"development/libretro-overview/#core-development-resources","title":"Core development resources","text":"<p>You can see a partial list of the cores which are maintained as part of libretro's github repositories in the section <code>For Users &gt; Core Documentation</code>.</p>"},{"location":"development/libretro-overview/#core-development-overview","title":"Core development overview","text":"<p>Visit the overview on libretro core development.</p>"},{"location":"development/libretro-overview/#frontend-development-resources","title":"Frontend development resources","text":"<p>A growing list of libretro frontends is available, reflecting a variety of host systems and use cases.</p>"},{"location":"development/libretro-overview/#retroarch-reference-frontend","title":"RetroArch Reference Frontend","text":"<p>RetroArch is the libretro \"reference frontend\" and is available across a wide range of host platforms. Learn more about RetroARch development in the section <code>For Developers &gt; RetroArch Development</code>.</p>"},{"location":"development/libretro-overview/#libretro-powered-operating-systems","title":"Libretro-powered operating systems","text":"<p>Lakka, based on LibreELEC, is Libretro's reference operating system distribution.</p> <p>Below is a partial list of external distributions that also use libretro or RetroArch as part of their backend technology:</p> <ul> <li>Batocera.linux</li> <li>RetroPie</li> <li>Recalbox</li> </ul> <p>Licensing</p> <p>Libretro is an open specification that is 100% free to implement, with no licensing fees or strings attached. Our reference frontend is RetroArch. The two projects are not the same, and this is reflected in the licensing. RetroArch is licensed via GPLv3 whereas the libretro API is a MIT-licensed API.</p>"},{"location":"development/licenses/","title":"Licenses","text":"<p>There is software behind RetroArch and Lakka that is protected by Non-Commercial licenses.</p> <p>It is important to respect the wishes of the developers and people behind the respective projects.</p> <p>See below for a summary of the licenses behind RetroArch and its cores:</p>"},{"location":"development/licenses/#non-commercial","title":"Non-commercial","text":"<p>SOFTWARE LISTED IN THE TABLE BELOW ARE PROTECTED BY NON-COMMERCIAL LICENSES. EVERY ENTRY HAS A HYPERLINK FOR PROOF OF THE SOFTWARE'S LICENSE</p> <p>SOFTWARE LISTED IN THE TABLE BELOW MAY NOT BE SOLD, NOR MAY THEY BE USED IN A COMMERCIAL PRODUCT OR ACTIVITY WITHOUT COPYRIGHT HOLDERS' APPROVAL.</p> Software License Non-commercial Lakka Non-commercial Non-commercial Opera Non-commercial Non-commercial Cannonball Non-commercial Non-commercial Dinothawr Non-commercial Non-commercial FB Alpha Non-commercial Non-commercial FB Alpha 2012 Non-commercial Non-commercial FB Alpha 2012 CPS-1 Non-commercial Non-commercial FB Alpha 2012 CPS-2 Non-commercial Non-commercial FB Alpha 2012 CPS-3 Non-commercial Non-commercial FB Alpha 2012 Neo Geo Non-commercial Non-commercial fMSX Non-commercial Non-commercial Genesis Plus GX Non-commercial Non-commercial MAME 2000 MAME (Non-commercial) Non-commercial MAME 2003 MAME (Non-commercial) Non-commercial MAME 2003 Midway MAME (Non-commercial) Non-commercial MAME 2003-Plus MAME (Non-commercial) Non-commercial MAME 2009 MAME (Non-commercial) Non-commercial MAME 2010 MAME (Non-commercial) Non-commercial MAME 2014 MAME (Non-commercial) Non-commercial MESS 2014 MAME (Non-commercial) Non-commercial PicoDrive MAME (Non-commercial) Non-commercial Snes9x Non-commercial Non-commercial Snes9x 2002 Non-commercial Non-commercial Snes9x 2005 Non-commercial Non-commercial Snes9x 2005 Plus Non-commercial Non-commercial Snes9x 2010 Non-commercial Non-commercial UME 2014 MAME (Non-commercial) Non-commercial"},{"location":"development/licenses/#libretro","title":"Libretro","text":"Libretro License Non-commercial LibRetro API MIT RetroArch GPLv3 Lakka Non-commercial Non-commercial libretro/docs MIT libretro/retroarch-assets Attribution 4.0 International (CC BY 4.0)"},{"location":"development/licenses/#cores","title":"Cores","text":"Core License Non-commercial 3D Engine GPLv3 2048 Public Domain Anarch CC0 Ardens MIT Atari800 GPLv2 Beetle bsnes GPLv2 Beetle Cygne GPLv2 Beetle GBA GPLv2 Beetle Lynx zlib, GPLv2 Beetle NeoPop GPLv2 Beetle PC-FX GPLv2 Beetle PCE FAST GPLv2 Beetle PSX GPLv2 Beetle PSX HW GPLv2 Beetle Saturn GPLv2 Beetle SGX GPLv2 Beetle VB GPLv2 blueMSX GPLv2 bnes GPLv3 bsnes-mercury Accuracy GPLv3 bsnes-mercury Balanced GPLv3 bsnes-mercury Performance GPLv3 bsnes Accuracy GPLv3 bsnes Balanced GPLv3 bsnes C++98 (v085) GPLv3 bsnes Performance GPLv3 Caprice32 GPLv2 ChaiLove MIT Citra GPLv2 Citra Canary/Experimental GPLv2 ClownMDEmu AGPLv3 Craft MIT CrocoDS MIT DeSmuME 2015 GPLv2 DeSmuME GPLv2 DICE GPLv3 Dinothawr Non-commercial Non-commercial Dolphin GPLv2 DOSBox GPLv2 DOSBox Pure GPLv2 doukutsu-rs MIT Dummy Core MIT Dungeon Crawl Stone Soup GPLv2+ EasyRPG GPLv3 EightyOne GPLv3 Elektronika - BK-0010/BK-0011 BSD EmuSCV GPLv2 Emux CHIP-8 GPLv2 Emux GB GPLv2 Emux NES GPLv2 Emux SMS GPLv2 ep128emu GPLv2 FB Alpha Non-commercial Non-commercial FB Alpha 2012 Non-commercial Non-commercial FB Alpha 2012 CPS-1 Non-commercial Non-commercial FB Alpha 2012 CPS-2 Non-commercial Non-commercial FB Alpha 2012 CPS-3 Non-commercial Non-commercial FB Alpha 2012 Neo Geo Non-commercial Non-commercial FCEUmm GPLv2 FFmpeg LGPLv2, GPLv2 Flycast GPLv2 fMSX Non-commercial Non-commercial FreeIntv GPLv3 FreeJ2ME GPLv3 Frodo GPLv2 Fuse GPLv3 GAM4980 GPLv3 Gambatte GPLv2 Game Music Emu GPLv3 Gearboy GPLv3 Gearcoleco GPLv3 Geargrafx GPLv3 Gearsystem GPLv3 Genesis Plus GX Non-commercial Non-commercial Geolith BSD-3-Clause, MIT gpSP GPLv2 GW zlib Handy zlib Holani GPLv3 Hatari GPLv2 higan Accuracy GPLv3 Imageviewer MIT JollyCV BSD-3-Clause, MIT Kronos GPLv2 LowRES NX zlib Lutro MIT M2000 GPLv3 MAME BSD-3-Clause &amp; GNU GPLv2 MAME 2000 MAME (Non-commercial) Non-commercial MAME 2003 MAME (Non-commercial) Non-commercial MAME 2003 Midway MAME (Non-commercial) Non-commercial MAME 2003-Plus MAME (Non-commercial) Non-commercial MAME 2009 MAME (Non-commercial) Non-commercial MAME 2010 MAME (Non-commercial) Non-commercial MAME 2014 MAME (Non-commercial) Non-commercial MAME 2016 BSD-3-Clause &amp; GNU GPLv2 melonDS 2021 GPLv3 melonDS DS GPLv3 Mesen GPLv3 Mesen-S GPLv3 MESS 2014 MAME (Non-commercial) Non-commercial Meteor GPLv3 mGBA MPLv2.0 MicroW8 Unlicense mkxp-z GPLv2 mpv GPLv3 Mr.Boom MIT Mupen64Plus GPLv3 Mupen64Plus GLES3 GPLv3 Neko Project II Neko Project II Kai MIT Nestopia GPLv2 Numero GPLv2 nSide Balanced GPLv3 NXEngine GPLv3 O2EM Artistic License OpenLara BSD-2-Clause Opera Non-commercial P-UAE GPLv2 ParaLLEl N64 GPLv3 PCem GPLv2 PCSX ReARMed GPLv2 PCSX ReARMed [Interpreter] GPLv2 PicoDrive MAME (Non-commercial) Non-commercial PocketCDG MIT PokeMini GPLv3 PPSSPP GPLv2 PrBoom GPLv2 ProSystem GPLv2 PX68k kero_src.txt QuickNES GPLv2 Redream (libretro fork) GPLv3 REminiscence GPLv3 RemoteJoy GPLv2 Remote RetroPad MIT RVVM GPLv3, MPLv2.0 SameBoy MIT SameDuck MIT SAME_CDI GPLv2 ScummVM GPLv2 Snes9x Non-commercial Non-commercial Snes9x 2002 Non-commercial Non-commercial Snes9x 2005 Non-commercial Non-commercial Snes9x 2005 Plus Non-commercial Non-commercial Snes9x 2010 Non-commercial Non-commercial Stella GPLv2 TempGBA GPLv2 TGB Dual GPLv2 The Powder Toy GPLv3 Theodore GPLv3 TyrQuake GPLv2 UME 2014 MAME (Non-commercial) Non-commercial Uzem GPLv3 VaporSpec MIT VBA-M GPLv2 VBA Next GPLv2 vecx GPLv3 VeMUlator GPLv3 VICE C64 GPLv2 VICE C128 GPLv2 VICE PLUS4 GPLv2 VICE VIC20 GPLv2 Video Processor BSD-2-Clause Vircon32 BSD-3-Clause Virtual Jaguar GPLv3 VirtualXT zlib XRick GPLv3 YabaSanshiro GPLv2 Yabause GPLv2"},{"location":"development/cores/core-options-translation/","title":"Adding Translations","text":""},{"location":"development/cores/core-options-translation/#setting-up-translation-with-crowdin","title":"Setting up translation with Crowdin","text":"<p>The scripts and workflows referenced here, as well as some sample <code>core_options</code> files, can be found in the RetroArch translation example.</p>"},{"location":"development/cores/core-options-translation/#requirements","title":"Requirements","text":"<p>Make sure the core is libretro conformant: both <code>libretro_core_options.h</code>, containing the English texts, and <code>libretro_core_options_intl.h</code>, containing all already existing translations, if any, must be present in the same directory.</p> <p>Please note: <code>libretro_core_options_intl.h</code> does not need to contain anything, if no translations exist or none of them should be preserved.</p> <p>The scripts are not compatible with text filled in by macros or during run time. The procedure should not fail - but those texts will not be made translatable.</p> <p>Also, please verify the existence and correct use of</p> <p><code>#ifdef HAVE_LANGEXTRA</code></p> <p>and/or</p> <p><code>#ifndef HAVE_NO_LANGEXTRA</code></p> <p>pre-compiler instructions in <code>libretro_core_options.h</code> to remove any references to additional languages on platforms which cannot handle them, e.g. due to limited RAM. For an example, refer to an up-to-date core, like gambatte-libretro.</p> <p>Make sure <code>options_intl</code> in <code>libretro_core_options.h</code> correctly references the <code>_intl</code> options, or the translations will not be applied!</p>"},{"location":"development/cores/core-options-translation/#adding-automatic-crowdin-sync","title":"Adding automatic Crowdin sync","text":"<p>Place the <code>intl</code> and <code>.github</code> folders from the sample folder, including content, into the root of the repository.</p> <p>In <code>.github/workflows</code> are two files: <code>crowdin_prep.yml</code> &amp; <code>crowdin_translate.yml</code>.</p> <p>In each of those are placeholders, which need to be replaced.</p> <p>For convenience, one can run <code>intl/activate.py</code>, which will try to find the <code>libretro_core_options.h</code> file as well as identify the core name to fill those placeholders with.</p> <p>Even then, one should still check if it produced the correct result:</p> <p>For <code>crowdin_prep.yml</code>:</p> <p>NOTE: Please verify, that this workflow watches the correct branch (e.g. main, instead of master)! Uploads happen, whenever <code>libretro_core_options.h</code> of that branch is changed.</p> <ul> <li> <p> (x2) <ul> <li>replace with the full path from the root of the repo to the        <code>libretro_core_options.h</code> file</li> </ul> <li> <p> <ul> <li>the name of the core (or repo)</li> </ul> <p>And for crowdin_translate.yml: - &lt;0-59&gt; &lt;0-23&gt;     - Minute and hour at which the sync will happen.       The script will generate a random time for this, to avoid       stressing GitHub &amp; Crowdin with many simultaneous runs.</p> <ul> <li> <p> <ul> <li>same as above</li> </ul> <li> <p> (x2) <ul> <li>replace with the full path from the root of the repo to the   'libretro_core_options_intl.h' file</li> </ul> <p>Create a Pull Request and ask a Crowdin project manager, either on Crowdin or, preferably, on Discord in the <code>retroarch-translations</code> channel, to provide you with an access token. Create an Actions repository secret on GitHub named CROWDIN_API_KEY for this access token.</p> <p>When everything is ready, run the \"Crowdin Translations Initial Setup\" workflow manually to upload the source texts and any translations to Crowdin.</p> <p>You may either disable the initial workflow or even remove it from your repository. Running it more than once is very much discouraged! That may mess with the newest translations, which are usually not yet incorporated into the repository.</p> <p>Finally, it is recommended to run the \"Crowdin Translation Sync\" workflow manually once. If a \"Permission to \\ denied\" error occurs, you might need to configure the GITHUB_TOKEN with the appropriate access rights, see here."},{"location":"development/cores/core-options-translation/#for-crowdin-project-managers-creating-an-access-token","title":"(For Crowdin project managers) Creating an access token","text":"<p>To create an access token, navigate to the account settings via your profile picture in the top right. Change to the API tab. Here you should find a <code>New Token</code> button.</p> <p>Name the token after the core/repository, which will receive it. The following permissions should be set:</p> <ul> <li>Projects</li> <li>read</li> <li>Source files &amp; strings</li> <li>read &amp; write</li> <li>Translations</li> <li>read &amp; write</li> <li>(optional) Translation status</li> <li>read</li> </ul> <p>Please provide these access tokens to the core developers in a private message and delete those after successful setup. Do not share tokens publicly or store them in plain text long term!</p>"},{"location":"development/cores/core-options-translation/#enabling-new-languages-in-cores","title":"Enabling new languages in cores","text":"<p>Adding a language to RetroArch does not automatically enable it for the core options. To do that for cores which have been added to Crowdin, follow these steps:</p> <ol> <li>Locate the <code>libretro.h</code> file and add a <code>RETRO_LANGUAGE_XXXXX</code> item to the <code>retro_language</code> enum exactly the same as was done for RetroArch.<ul> <li>Alternatively, overwrite this file with the <code>libretro-common/include/libretro.h</code> file from RetroArch's code.</li> </ul> </li> <li>Locate the <code>libretro_core_options.h</code> file and open it.<ul> <li>Add <code>&amp;options_xx,</code> at the end of the <code>options_intl</code> struct. Remember to keep the same order as in the <code>retro_language</code> enum.</li> </ul> </li> </ol>"},{"location":"development/cores/core-options-translation/#example","title":"Example","text":"<ul> <li>mgba:</li> <li>Enable Indonesian, Swedish and Ukrainian localisations</li> </ul>"},{"location":"development/cores/developing-cores/","title":"Developing Libretro Cores","text":""},{"location":"development/cores/developing-cores/#libretro-api","title":"Libretro API","text":"<p>The Libretro API is a lightweight C-based Application Programming Interface (API) that exposes generic audio, video, and input callbacks. Developers of \"cores\" such as standalone games, game emulators, media players, and other applications don\u2019t have to worry about writing different video drivers for Direct3D, OpenGL or worrying about catering to all possible input APIs, sound APIs, gamepads, etc.</p> <p>When you choose to use the libretro API, your program gets turned into a single library file (called a \u2018libretro core\u2019). A frontend that supports the libretro API can then load that library file and run the app. The frontend\u2019s responsibility is to provide all the implementation-specific details. The libretro core\u2019s responsibility is solely to provide the main program.</p> <p>Any project that is ported to work with this API can be made to run on ANY libretro frontend \u2013 now and forever. You maintain a single codebase that only deals with the main program, and you then target one single API (libretro) in order to port your program over to multiple platforms at once. A libretro core written in portable C or C++ can run seamlessly on many platforms with very little or no porting effort. Libretro bindings for other languages are growing increasingly common and comprehensive as well.</p> <p>Licensing</p> <p>Libretro is an open specification that is 100% free to implement, with no licensing fees or strings attached. Our reference frontend is RetroArch. The two projects are not the same, and this is reflected in the licensing. RetroArch is licensed via GPLv3 whereas the libretro API is a MIT-licensed API.</p>"},{"location":"development/cores/developing-cores/#resources-for-core-development","title":"Resources for core development","text":""},{"location":"development/cores/developing-cores/#canonical-libretroh","title":"Canonical <code>libretro.h</code>","text":"<p>The most current canonical copy of <code>libretro.h</code> can be found in the master branch of the libretro-common repository.</p> <p>Tip</p> <p><code>libretro.h</code> is the single most important technical reference for developers of libretro cores and frontends</p>"},{"location":"development/cores/developing-cores/#skeletor-sample-core","title":"<code>skeletor</code> sample core","text":"<p>RetroArch contributor bparker06 created <code>skeletor</code> as a minimal libretro core implementation. <code>skeletor</code> can also be useful by furnishing the stub libretro <code>Makefile</code> and <code>Makefile.common</code> files.</p>"},{"location":"development/cores/developing-cores/#development-log-of-libretro-cores","title":"Development log of Libretro cores","text":"<p>Thank you for those blog posts :</p> <p>Beardypig published a two-part guide (Part 1, Part 2) describing the process of implementing <code>libretro.h</code> as part of creating Vectrexia, an original emulator core designed for libretro from the ground up.</p> <p>James Roeder has written a seven parts blog posts entitled An Arduous Endeavor.</p> <p>Natesh has written a blog post about GameboyCore as a libretro core.</p>"},{"location":"development/cores/developing-cores/#libretro-common","title":"<code>libretro-common</code>","text":"<p><code>libretro-common</code> is a collection of essential cross-platform coding blocks useful for libretro core and frontend development, written primarily in C. Permissively licensed.</p>"},{"location":"development/cores/developing-cores/#libretro-deps","title":"<code>libretro-deps</code>","text":"<p><code>libretro-deps</code> is a collection of third-party dependencies, pre-modified for use by libretro cores.</p>"},{"location":"development/cores/developing-cores/#libretro-samples","title":"<code>libretro-samples</code>","text":"<p><code>libretro-samples</code> is a set of illustrations of the libretro API.</p>"},{"location":"development/cores/developing-cores/#opengl-hardware-accelerated-cores","title":"OpenGL hardware accelerated cores","text":"<p>A guide for developing OpenGL accelerated cores is available.</p>"},{"location":"development/cores/developing-cores/#implementing-the-api","title":"Implementing the API","text":"<p>The libretro API consists of several functions outlined in libretro.h, found in the RetroArch source package. A libretro implementation should be compiled into a dynamically loadable executable (.dll/.so/.dylib) or a static library (.a/.lib) that exports all the functions outlined in libretro.h. These will be called by the frontend. Implementations are designed to be single-instance, so global state is allowed. Should the frontend call these functions in wrong order, undefined behavior occurs. The API header is compatible with C99 and C++. From C99, the bool type and  are used. <p>The program flow of a frontend using the libretro API can be expressed as follows:</p>"},{"location":"development/cores/developing-cores/#startup","title":"Startup","text":""},{"location":"development/cores/developing-cores/#retro_api_version","title":"<code>retro_api_version()</code>","text":"<p>This function should return RETRO_API_VERSION, defined in libretro.h. It is used by the frontend to determine if ABI/API are mismatched. The ver- sion will be bumped should there be any non- compatible changes to the API. Changes to retro_* structures, as well as changes in publically visible functions and/or their arguments will warrant a bump in API version.</p>"},{"location":"development/cores/developing-cores/#retro_set_","title":"<code>retro_set_*()</code>","text":"<p>Libretro is callback based. The frontend will set all callbacks at this stage, and the implementation must store these function pointers somewhere. The frontend can, at a later stage, call these.</p>"},{"location":"development/cores/developing-cores/#retro_init","title":"<code>retro_init()</code>","text":"<p>This function is called once, and gives the implementation a chance to initialize data structures.</p>"},{"location":"development/cores/developing-cores/#environment-callback","title":"Environment callback","text":"<p>While libretro has callbacks for video, audio and input, there\u2019s a callback type dubbed the environment callback. This callback (<code>retro_environment_t</code>) is a generic way for the libretro implementation to access features of the API that are considered too obscure to deserve its own symbols. It can be extended without breaking ABI. The callback has a return type of <code>bool</code> which tells if the frontend recognized the request given to it.</p>"},{"location":"development/cores/developing-cores/#retro_set_controller_port_device","title":"<code>retro_set_controller_port_device()</code>","text":"<p>By default, gamepads will be assumed to be inserted into the implementation. If the engine is sensitive to which type of input device is plugged in, the frontend may call this function to set the device to be used for a certain player. The implementation should try to auto-detect this if possible.</p>"},{"location":"development/cores/developing-cores/#retro_get_system_info","title":"<code>retro_get_system_info()</code>","text":"<p>The frontend will typically request statically known information about the core such as the name of the implementation, version number, etc. The information returned must be allocated statically.</p>"},{"location":"development/cores/developing-cores/#retro_load_game","title":"<code>retro_load_game()</code>","text":"<p>This function will load content. If the implementation is an emulator, this would be a game ROM image, if it is a game engine, this could be packaged upassets for the game, etc. The function takes a structure that points to the path where the ROM was loaded from, as well as a memory chunk of the already loaded file.</p> <p>There are two modes of loading files with libretro. If the game engine requires to know the path of where the ROM image was loaded from, the <code>need_fullpath</code> field in <code>retro_system_info</code> must be set to true. If the path is required, the frontend will not load the file into the data/size fields, and it is up to the implementation to load the file from disk. The path might be both relative and absolute, and the implementation must check for both cases. This is useful if the ROM image is too large to load into memory at once. It is also useful if the assests consist of many smaller files, where it is necessary to know the path of a master file to infer the paths of the others.</p> <p>If <code>need_fullpath</code> is set to <code>false</code>, the frontend will load the ROM image into memory beforehand. In this mode, the path field is not guaranteed to be non-<code>NULL</code>. It should point to a valid path if the file was indeed, loaded from disk, however, it is possible that the file was loaded from <code>stdin</code>, or similar, which has no well-defined path. It is recommended that <code>need_fullpath</code> is set to <code>false</code> if possible, as it allows more features, such as soft-patching to work correctly.</p>"},{"location":"development/cores/developing-cores/#retro_get_system_av_info","title":"<code>retro_get_system_av_info()</code>","text":"<p>This function lets the frontend know essential audio/video properties of the game. As this information can depend on the game being loaded, this info will only be queried after a valid ROM image has been loaded. It is important to accurately report FPS and audio sampling rates, as FFmpeg recording relies on exact information to be able to run in sync for several hours.</p>"},{"location":"development/cores/developing-cores/#running","title":"Running","text":""},{"location":"development/cores/developing-cores/#retro_run","title":"<code>retro_run()</code>","text":"<p>After a game has been loaded successfully, retro_run() will be called repeatedly as long as the user desires. When called, the implementation will perform its inner functionality for one video frame. During this time, the implementation is free to call callbacks for video frames, audio samples, as well as polling input, and querying current input state. The requirements for the callbacks are that video callback is called exactly once, i.e. it does not have to come last. Also, input polling must be called at least once.</p>"},{"location":"development/cores/developing-cores/#input","title":"Input","text":"<p>Abstracting gamepad and other input devices is the hardest part of defining a multi-system API as it differs across every system. The libretro API therefore provides the RetroPad -- a gamepad/joystick abstraction available with digital and analog controls -- to allow cores to be written without platform-specific input code.</p> <p>Input device abstractions are also available for keyboards, mice, pointers, and lightguns.</p> <p>Learn more in the Input API docs.</p>"},{"location":"development/cores/developing-cores/#videoaudio-synchronization-considerations","title":"Video/Audio synchronization considerations","text":"<p>Libretro is based on fixed rates; video FPS and audio sampling rates are always assumed to be constant. Frontends will have control of the speed of playing, typically using VSync to obtain correctspeed. The frontend is free to \"fast-forward\", i.e. play as fast as possible without waiting, or slow-motion. For this reason, the engine should not rely on system timers to perform arbitrary synchronization. This is common and often needed in 3D games to account for varying frame rates while still maintaining a playable game.</p> <p>However, libretro targets classic systems where one can assume that 100% real-time performance will always be met, thus avoiding the need for careful timing code. By default, the libretro implementation should replace any arbitrary <code>sleep()</code> and <code>time()</code> patterns with simply calling video/audio callbacks. The frontend will make sure to apply the proper synchronization. This is mostly a problem with game ports, such as PrBoom. For the libretro port of PrBoom, which heavily relied on timers and sleeping patterns, sleeping was replaced with simply running for one frame, and calling the video callback. After that, enough audio was rendered to correspond to one frames worth of time, 1/fps seconds. All sleeping and timing patterns could be removed, and synchronization was correct.</p>"},{"location":"development/cores/developing-cores/#audio-callback-options","title":"Audio callback options","text":"<p>The libretro API has two different audio callbacks. Only one of these should be used; the implementation must choose which callback is best suited.</p> <p>One audio frame is always made up of 2 int16_t samples, corresponding to the left and right channels, respectively.</p>"},{"location":"development/cores/developing-cores/#per-sample-audio","title":"Per-sample audio","text":"<p>The first audio callback is called per-sample, but actually deals with a single audio frame. It has the prototype <code>void (*retro_audio_sample_t)(int16_t left, int16_t right)</code>. This should be used if the implementation generates a single audio frame at a time. The frontend will make sure to partition the audio data into suitable chunks to avoid incurring too much syscall overhead.</p>"},{"location":"development/cores/developing-cores/#batch-audio","title":"Batch audio","text":"<p>If audio is output in a \"batch\" fashion, i.e. 1 / fps seconds worth of audio data at a time, the batch approach should be considered. Rather than looping over all audio frames and calling the per-sample callback every time, the batch callback should be used instead. Its prototype is <code>size_t (*retro_audio_sample_batch_t)(const int16_t * samples, size_t num_frames)</code>. The number of samples should be <code>2 * num_frames</code>, with left and right channels interleaved every frame. Using the batch callback, audio will not be copied in a temporary buffer, which can buy a slight performance gain. Also, all data will be pushed to audio driver in one go, saving some slight overhead.</p> <p>It is not recommended to use the batch callback for very small (&lt; 32 frames) amounts of data. The data passed to the batch callback should, if possible, be aligned to 16 bytes (depends on platform), to allow accelerated SIMD operations on audio.</p>"},{"location":"development/cores/developing-cores/#retro_serialize_size-retro_serialize-and-retro_unserialize","title":"<code>retro_serialize_size()</code>, <code>retro_serialize()</code>, and <code>retro_unserialize()</code>","text":"<p>Serialization is optional to implement. Serialization is better known as \"save states\" in emulators, and these functions are certainly more useful in emulators which have a fixed amount of state. It allows the frontend to take a snapshot of all internal state, and later restore it. This functionality is used to implement e.g. rewind and netplay.</p> <p>Some important considerations must be taken to implement these functions well:</p> <ul> <li>If serialization is not supported, <code>retro_serialize_size()</code> should return 0. If retro_serialize_size() returns non-zero, it is assumed that serialization is properly implemented.</li> <li>The frontend should call <code>retro_serialize_size()</code> before calling <code>retro_serialize()</code> to determine the amount of memory needed to correctly serialize.</li> <li>The size eventually passed to <code>retro_serialize()</code> must be at least the size of the value returned in <code>retro_serialize_size()</code>. If too large a buffer is passed to <code>retro_serialize()</code>, the extra data should be ignored (or <code>memset</code> to 0).</li> <li>It is valid for the value returned by <code>retro_serialize_size()</code> to vary over time, however, it cannot ever increase over time. If it should ever change, it must decrease. This is rationalized by the ability to predetermined a fixed save state size right after <code>retro_load_game()</code> that will always be large enough to hold any following serialization. This certainty is fundamental to the rewind implementation. This requirement only holds between calls to <code>retro_load_game()</code> and <code>retro_unload_game()</code>.</li> </ul> <p>If possible, the implementation should attempt to serialize data at consistent offsets in the memory buffer. This will greatly help the rewind implementation in RetroArch to use less memory. Both <code>retro_serialize()</code> and <code>retro_unserialize()</code> return a boolean value to let the frontend know if the implementation succeeded in serializing or unserializing.</p>"},{"location":"development/cores/developing-cores/#tear-down","title":"Tear-down","text":""},{"location":"development/cores/developing-cores/#retro_unload_game","title":"<code>retro_unload_game()</code>","text":"<p>After the user desired to stop playing, <code>retro_unload_game()</code> will be called. This should free any internal data related to the game, and allow <code>retro_load_game()</code> to be called again.</p>"},{"location":"development/cores/developing-cores/#retro_deinit","title":"<code>retro_deinit()</code>","text":"<p>This function should free all state that was initialized during <code>retro_init()</code>. After calling this function, the frontend can again call <code>retro_init()</code>.</p>"},{"location":"development/cores/developing-cores/#thread-safety","title":"Thread safety","text":"<p>The libretro API does not make guarantees about thread safety. Therefore the core developer should assume the functions declared in the libretro header are neither reentrant nor safe to be called by multiple threads at the same time. If a core is multi-threaded then the core developer is responsible for thread safety when making libretro API calls. </p> <p>It is discouraged to do libretro API calls outside of <code>retro_run()</code> i.e. outside of the main thread.</p>"},{"location":"development/cores/developing-cores/#add-your-core-to-libretro-infrastructure","title":"Add your core to Libretro infrastructure","text":"<p>There are several steps before your core can be available to user via the Online Updater &gt; Core Downloader :</p> <ol> <li>Add your Libretro core info to libretro-super repository<ul> <li>As a test, place info file to <code>libretro_info_path</code>, load core, and validate if information shows up correctly: Information / Core Information</li> </ul> </li> <li>Add .gitlab-ci.yml to the root directory of your source code so it can be added to Libretro CI/CD.</li> <li>If you want your core to be compatible with RetroArch's playlist :<ul> <li>Add at least icons playlist and content for your core in RetroArch assets repository</li> <li>Add your games to Libretro database.</li> </ul> </li> <li>Add documentation of your core following the instructions in libretro-docs.</li> </ol>"},{"location":"development/cores/dynamic-rate-control/","title":"Dynamic Rate Control for Retro Game Emulators","text":"<p>Dynamic Rate Control allows emulator frontends to synchronize both audio and video output at the same time, even when the emulating system has a different refresh rate and audio sampling rate than the gaming system that is being emulated.</p> <p>The method works by dynamically adjusting audio resampling ratios in such ways that ideally, the audio buffer is never underrun nor overrun, thus avoiding blocking on audio. This in turn allows vertical synchronization for video. The audio pitch is adjusted when adjusting audio resampling ratios, but in practice so little, that it is inaudible to the human ear.</p> <p>Read this documentation in PDF form</p> <p>Because the formulas in this documentation have not yet been converted to markdown, please consult the original PDF version. If you can assist in the conversion, please post an issue or PR in the libretro documentation repository.</p> <p>Retro games are highly synchronous. Their audio output rates are linked directly to video refresh rates. Every video frame, the audio chip generates on average a fixed amount of audio samples. Before continuing to emulate the next frame, the generated audio samples must be pushed to an audio buffer of fixed size.</p> <p>If there is not enough space in the audio buffer, the emulator must wait (block) for the buffer to become ready for writing. This is a non-ideal situation as while the emulator is blocking on audio, a vertical refresh might be missed entirely, thus creating stuttering video.</p>"},{"location":"development/cores/dynamic-rate-control/#ideal-synchronization","title":"Ideal synchronization","text":"<p>For an emulator of a retro game system, a key factor in smooth video is vertical refresh synchronization (VSync), where each frame of the game maps to a single frame on the monitor. Audio must also be pushed to the speakers without any audio dropouts. This double synchronization requirement poses a problem as any form of synchronization to one modality will negatively affect the other.</p> <p>This is a real problem as an emulator has no way of guaranteeing perfectly equal video refresh rates and audio sampling rates as the original system.</p> <p>On conventional computer hardware, there is no perfect way of knowing the real monitor refresh rates and audio sampling rates either due to tolerances on oscillators.</p>"},{"location":"development/cores/dynamic-rate-control/#scope-of-method","title":"Scope of method","text":"<p>As this method aims to implement a method for synchronization when VSync is used, this method is only useful when game frame rate is close to monitor frame rate. If this is not the case, other methods should be employed.</p>"},{"location":"development/cores/dynamic-rate-control/#method","title":"Method","text":"<p>This method assumes that audio from the emulator is output at regular intervals, e.g. every video frame. The method also assumes that audio is resampled from the game system sampling rate to the sound cards sampling rate. The resampling ratio will be dynamically adjusted every time audio is resampled and subsequently pushed to the audio buffer.</p>"},{"location":"development/cores/dynamic-rate-control/#link-to-full-version","title":"Link to full version","text":"<p>Because the formulas in this documentation have not yet been converted to markdown, please consult the original PDF version. If you can assist in the conversion, please post an issue or PR in the libretro documentation repository.</p>"},{"location":"development/cores/opengl-cores/","title":"Use case for Libretro OpenGL API","text":""},{"location":"development/cores/opengl-cores/#what-do-most-modern-platforms-have-in-common","title":"What do most modern platforms have in common?","text":"<p>Answer: OpenGL or OpenGL ES.</p> <p>These APIs allow us to write 3D graphics-based applications:   * In a platform-agnostic way   * With hardware acceleration   * Using a standard language/API</p>"},{"location":"development/cores/opengl-cores/#what-do-these-platforms-not-have-in-common","title":"What do these platforms not have in common?","text":"<ul> <li>Audio</li> <li>Input</li> <li>Shader</li> <li>Windowing implementations</li> <li>User interfaces</li> <li>Touchscreen overlays</li> <li>Camera</li> <li>Sensors</li> <li>Development environments</li> </ul>"},{"location":"development/cores/opengl-cores/#what-is-not-portable-about-opengl","title":"What is not portable about OpenGL?","text":"<ul> <li>Symbol wrapper lookup (necessary on Windows)</li> <li>Divergent subsets of API functionality (GLES \u00bd/3, GL 1.5/\u2154/4)</li> <li>Windowing interfacing context drivers per platform</li> <li>Display frontend for each platform</li> <li>Post-processing by way of shaders</li> </ul> <p>Libretro's OpenGL implementation is designed specifically to address the practicalities of extending OpenGL and OpenGL ES hardware acceleration to the wide variety of architectures and environments supported by the libretro ecosystem.</p>"},{"location":"development/cores/opengl-cores/#implementing-opengl-accelerated-cores","title":"Implementing OpenGL accelerated cores","text":"<p>Libretro GL provides a portable solution for OpenGL-based hardware acceleration along with the rest of libretro's simple but comprehensive API. The Libretro API allows cores to use OpenGL (GL2+ or GLES2) directly in addition to frontend features, such as multi-pass shaders. This is accomplished by letting cores render to frame buffer objects (FBOs) instead of the back buffer.</p> <p>Important</p> <p>GL drivers must support render-to-texture extensions for this to work.</p>"},{"location":"development/cores/opengl-cores/#application-model","title":"Application model","text":"<p>Using OpenGL in a libretro context is somewhat different than when you use libraries like SDL, GLFW or SFML. In libretro, the frontend owns the OpenGL context. For an application using conventional libraries like SDL, the application will do this:</p> <ul> <li>Initialize, create a window of specific size</li> <li>Initialize OpenGL resources</li> <li>Per frame, handle window events (resize), handle input, render as desired, swap buffers</li> <li>Tear down context and window</li> </ul> <p>Using libretro API, platform specifics like managing windows, rendering surfaces and input are all handled by the frontend. The core will only deal with rendering to a surface. The core renders to an FBO of fixed size, determined by the core. The frontend takes this rendered data and stretches to screen as desired by the user. It can apply shaders, change aspect ratio, etc. This model is equivalent to software rendering where <code>retro_video_refresh_t_callback</code> is called.</p>"},{"location":"development/cores/opengl-cores/#using-opengl-in-libretro","title":"Using OpenGL in libretro","text":"<ul> <li>Use <code>RETRO_ENVIRONMENT_SET_PIXEL_FORMAT</code> and request a 32-bit format. This is the format that the resulting framebuffer will have. In reality, RetroArch converts all 16-bit data (<code>RETRO_PIXEL_FORMAT_RGB565</code>) to 32-bit (<code>XRGB8888</code>) when running desktop GL for performance reasons. In GLES mode, this is not done, however. Do not rely on this behavior, and be explicit about it.</li> <li>Use <code>RETRO_ENVIRONMENT_SET_HW_RENDER</code> environment callback in <code>retro_load_game()</code>, notifying frontend that core is using hardware rendering. An OpenGL 2+ or GLES2 context can be specified here. If this is not supported the callback will return false, and you can fallback to software rendering or refuse to start.</li> <li>In <code>retro_get_system_av_info()</code>, as normal, <code>max_width</code> and <code>max_height</code> fields specify the maximum resolution the core will render to.</li> <li>When the frontend has created a context or reset the context, <code>retro_hw_context_reset_t</code> is called. Here, OpenGL resources can be initialized. The frontend can reset the context at will (e.g. when changing from fullscreen to windowed mode and vice versa). The core should take this into account. It will be notified when reinitialization needs to happen.</li> <li>A callback to grab OpenGL symbols is exposed via <code>retro_hw_get_proc_address_t</code>. Use this to retrieve symbols and extensions.</li> <li>In <code>retro_run()</code>, use <code>retro_hw_get_current_framebuffer_t</code> callback to get which FBO to render to, e.g. <code>glBindFramebuffer(GL_FRAMEBUFFER, get_current_framebuffer())</code>. This is your \"backbuffer\". Do not attempt to render to the real backbuffer. You must call this every frame as it can change every frame. The dimensions of this FBO are at least as big as declared in <code>max_width</code> and <code>max_height</code>. If desired, the FBO also has a depth buffer attached (see <code>RETRO_ENVIRONMENT_SET_HW_RENDER</code>).</li> <li>When done rendering, call <code>retro_video_refresh_t</code> with the macro <code>RETRO_HW_FRAMEBUFFER_VALID</code> as argument for buffer. Width and height should be specified as well, but pitch argument is irrelevant and will be ignored. If the frame is duped (see <code>RETRO_ENVIRONMENT_CAN_DUPE</code>), the buffer argument takes<code>NULL</code> as normal.</li> </ul>"},{"location":"development/cores/opengl-cores/#important-considerations-in-the-opengl-code","title":"Important considerations in the OpenGL code","text":"<p>The frontend and libretro core share OpenGL context state. Some considerations have to be taken into account for this cooperation to work nicely.</p> <ul> <li>Don\u2019t leave buffers and global objects bound when calling <code>retro_video_refresh_t</code>. Make sure to unbind everything, i.e. VAOs, VBOs, shader programs, textures, etc. Failing to do this could potentially hit strange bugs. The frontend will also follow this rule to avoid clashes. Being tidy here is considered good practice anyway.</li> <li>The GL viewport will be modified by frontend as well as libretro core. Set this every frame.</li> <li><code>glEnable()</code> state like depth testing, etc, is likely to be disabled in frontend as it's just rendering a quad to screen. Enable this per-frame if you use depth testing. There is no need to disable this before calling <code>retro_video_refresh_t</code>.</li> <li>Avoid VAOs. They tend to break on less-than-stellar drivers, such as AMD drivers on Windows as of 2013</li> <li>Try to write code which is GLES2 as well as GL2+ (w/ extensions) compliant. This ensures maximum target surface for the libretro core.</li> <li>Libretro treats top-left as origin. OpenGL treats bottom-left as origin. To be compatible with the libretro model, top-left semantics are preserved. Rendering normally will cause the image to be flipped vertically. To avoid this, simply scale the final projection matrix by <code>[1,\u2212 1 , 1 ,1]</code>.</li> </ul>"},{"location":"development/cores/opengl-cores/#test-implementations","title":"Test implementations","text":"<ul> <li>Several OpenGL demonstrations are available in <code>libretro-samples</code></li> <li>A demonstration OpenGL core is available which uses instanced rendering of a textured cube, with FPS-style fly-by camera and libretro\u2019s mouse API as well. It is valid GLES and GL2 at the same time.</li> </ul>"},{"location":"development/cores/opengl-cores/#building-a-libretro-core","title":"Building a libretro core","text":"<p>Libretro is an interface, and not a utility library. Libretro cores are built as standalone dynamic or static libraries, and as they use GL symbols here, they must link against GL symbols themselves. An example of how this can be done is shown in the test implementation.</p>"},{"location":"development/cores/core-specific/dolphin/","title":"Nintendo Gamecube/Wii (Dolphin)","text":""},{"location":"development/cores/core-specific/dolphin/#requirements","title":"Requirements","text":"<ul> <li>CMake</li> </ul>"},{"location":"development/cores/core-specific/dolphin/#how-to-compile-for-windows-x64-visual-studio-2017","title":"How to compile (for Windows x64 - Visual Studio 2017)","text":"<p>In addition to the requirement(s) listed above, you will also need Visual Studio 2017 installed in order for the following to work.</p> <p>Enter the following commands (from the Dolphin source directory):</p> <pre><code>mkdir build\ncd build\ncmake .. -DLIBRETRO=ON -DENABLE_QT=0 -DCMAKE_BUILD_TYPE=Release -G\"Visual Studio 15 2017 Win64\"\ncmake --build . --target dolphin_libretro --config Release\n</code></pre> <p>Warning</p> <p>If it says 'Could not find named generator' or something to that effect, it means you might be using the wrong cmake version on Msys2/Mingw. Remove the regular 'cmake' package and try to install 'mingw-w64-x86_64-cmake' instead.</p>"},{"location":"development/cores/core-specific/flycast/","title":"Sega Dreamcast/NAOMI (Flycast)","text":""},{"location":"development/cores/core-specific/flycast/#requirements","title":"Requirements","text":"<ul> <li>CMake</li> </ul>"},{"location":"development/cores/core-specific/flycast/#how-to-compile-for-windows","title":"How to compile (for Windows)","text":"<p>Enter the following commands (from the Flycast source directory):</p> <pre><code>mkdir build\ncd build\ncmake -DLIBRETRO=ON -G \"MinGW Makefiles\"\n</code></pre>"},{"location":"development/cores/core-specific/flycast/#how-to-compile-for-linux","title":"How to compile (for Linux)","text":"<p>Enter the following commands (from the Flycast source directory):</p> <pre><code>mkdir build\ncd build\ncmake -DLIBRETRO=ON -DCMAKE_POSITION_INDEPENDENT_CODE=TRUE\n</code></pre>"},{"location":"development/cores/core-specific/flycast/#how-to-debug","title":"How to debug","text":"<p>To debug the Flycast core in GDB, you need to insert the following inside gdb before running RetroArch:</p> <pre><code>handle SIGSEGV nostop noprint\n</code></pre>"},{"location":"development/cores/core-specific/ishiiruka/","title":"Nintendo Gamecube/Wii (Ishiiruka)","text":""},{"location":"development/cores/core-specific/ishiiruka/#requirements","title":"Requirements","text":"<ul> <li>CMake</li> </ul>"},{"location":"development/cores/core-specific/ishiiruka/#how-to-compile-for-windows-x64-visual-studio-2017","title":"How to compile (for Windows x64 - Visual Studio 2017)","text":"<p>In addition to the requirement(s) listed above, you will also need Visual Studio 2017 installed in order for the following to work.</p> <p>Enter the following commands (from the Ishiiruka source directory):</p> <pre><code>mkdir build\ncd build\ncmake .. -DLIBRETRO=ON -DCMAKE_BUILD_TYPE=Release -G\"Visual Studio 15 2017 Win64\"\ncmake --build . --target ishiiruka_libretro --config Release\n</code></pre> <p>Warning</p> <p>If it says 'Could not find named generator' or something to that effect, it means you might be using the wrong cmake version on Msys2/Mingw. Remove the regular 'cmake' package and try to install 'mingw-w64-x86_64-cmake' instead.</p>"},{"location":"development/cores/core-specific/mame-2003-plus/","title":"MAME 2003-Plus Development","text":""},{"location":"development/cores/core-specific/mame-2003-plus/#build-environment","title":"Build environment","text":"<p>MAME 2003-Plus is generally compatible with the RetroArch build environments that can be found in the docs section <code>For Developers</code> -&gt; <code>RetroArch</code> -&gt; <code>Compilation Guides</code>.</p>"},{"location":"development/cores/core-specific/mame-2003-plus/#submitting-control-names","title":"Submitting Control Names","text":"<p>Note: This first half of this section is written for users who cannot submit code themselves so that coders have the information necessary to assist. The second half is the process written from a coding perspective.</p>"},{"location":"development/cores/core-specific/mame-2003-plus/#background-reference-controlsdat","title":"Background reference: controls.dat","text":"<p>As part of mame2003 we have an 'automated port' of the MAME 0.141 controls.dat project information. It address many, but not all games supported by mame2003-plus.</p> <p>Therefore in many cases adding new control labels can be as simple as adding the existing controls.dat metadata to a driver declaration. However as part of that process the controls.dat metadata needs to be checked in two ways before it can be added: 1. From the user perspective: are the control names actually correct 2. From the coder perspective: does the switch logic in the controls.dat naming function work as intended</p>"},{"location":"development/cores/core-specific/mame-2003-plus/#users-necessary-information","title":"Users: Necessary Information","text":""},{"location":"development/cores/core-specific/mame-2003-plus/#games-affected","title":"Games affected","text":"<p>Often clones and even different games that share the same hardware platform and operating system share the same control names. Please do as best you can to submit a complete list of all games which share the control names you are submitting so that it can be applied comprehensively.</p> <p>For example there are quite a few games in the CPS1 driver which use the same control labels as <code>sf2</code>, Street Fighter 2. In that driver, the <code>sf2</code> control labels are applied all games listed as being a clone of <code>sf2</code> or a clone of <code>sf2ce</code>.</p>"},{"location":"development/cores/core-specific/mame-2003-plus/#list-of-control-names","title":"List of control names","text":"<p>Please submit your list of control names in a plain text list following the format below with one name to a line and the control number on the left.</p>"},{"location":"development/cores/core-specific/mame-2003-plus/#naming-standard","title":"Naming standard","text":"<p>The standard we use for determining the proper text to use for the name is to refer to current MAME. That is considered the canonical reference.</p> <p>For example the button names for Street Fighter 2 would be submitted as: <pre><code>BUTTON1: \"Jab Punch\"\nBUTTON2: \"Strong Punch\"\nBUTTON3: \"Fierce Punch\"\nBUTTON4: \"Short Kick\"\nBUTTON5: \"Forward Kick\"\nBUTTON6: \"Roundhouse Kick\"\n</code></pre></p>"},{"location":"development/cores/core-specific/mame-2003-plus/#coders-implementation","title":"Coders: Implementation","text":"<p>Custom button names are added by creating a <code>ControlInfo</code> struct and a button label function in the driver such for Street Fighter 2 and its clones. Note that in the button labeler function we prefix the name of the control with a macro like <code>BTN1</code>, <code>BTN2</code>, etc. so that there is a reference to the original MAME button number still visible in the libretro frontend.</p>"},{"location":"development/cores/core-specific/mame-2003-plus/#generic-and-custom-joystick-labels","title":"Generic and custom joystick labels","text":"<p>There are two generic joystick labeling functions available for control panels with joysticks that have no game-specific labels. <code>joy2way_labels</code> returns only generic <code>Left</code> and <code>Right</code> strings. <code>joy4way_labels</code> returns only generic <code>Left</code>, <code>Right</code>, <code>Up</code>, and <code>Down</code> strings for 4-way and 8-way joysticks</p> <p>An example of game-specific 8-way joystick labels is Street Fighter 2, which uses <code>Crouch</code> instead of <code>Down</code> and <code>Jump</code> instead of <code>Up</code>. Street Fighter 2 is therefore is not suitable for the generic function.</p>"},{"location":"development/cores/core-specific/mame-2003-plus/#street-fighter-2-example","title":"Street Fighter 2 Example","text":"<p>In this case, we were able to incorporate some of the control.dat metadata which populates the <code>st2_ctrl</code> struct:</p> <pre><code>const struct ControlInfo sf2_ctrl =\n{\n  false, /* alternating_controls */\n  true,  /* mirrored_controls */\n  \"\",    /* control_details */\n  &amp;sf2_get_btn\n};\n\n\nconst char *sf2_get_btn(int type)\n{\n  switch(type)\n  {\n/* P1NumButtons=6 */\n    case (IPT_OSD_DESCRIPTION): return \"8-way Joystick+joy8way\";\n    case IPT_BUTTON1: return BTN1 \"Jab Punch\";\n    case IPT_BUTTON2: return BTN2 \"Strong Punch\";\n    case IPT_BUTTON3: return BTN3 \"Fierce Punch\";\n    case IPT_BUTTON4: return BTN4 \"Short Kick\";\n    case IPT_BUTTON5: return BTN5 \"Forward Kick\";\n    case IPT_BUTTON6: return BTN6 \"Roundhouse Kick\";\n    case IPT_JOYSTICK_UP: return \"Jump\";\n    case IPT_JOYSTICK_DOWN: return \"Crouch\";\n    case IPT_JOYSTICK_LEFT: return \"Left\";\n    case IPT_JOYSTICK_RIGHT: return \"Right\";\n  } /* end of switch */\n\n  return generic_btn_label(type);\n}\n</code></pre>"},{"location":"development/cores/core-specific/mame-2003-plus/#driver-declaration","title":"Driver Declaration","text":"<p>Then you indicate the change for the appropriate romsets by adding a new letter (<code>C</code>) to the macro name and adding a function pointer to the struct. In other words, the <code>GAME</code> driver macro becomes <code>GAMEC</code>.</p>"},{"location":"development/cores/core-specific/mame-2003-plus/#before","title":"Before:","text":"<pre><code>GAME(1991, sf2,      0,        sf2,      sf2,      cps1,     ROT0,   \"Capcom\", \"Street Fighter II - The World Warrior (World 910522)\" )\n</code></pre>"},{"location":"development/cores/core-specific/mame-2003-plus/#after","title":"After:","text":"<pre><code>GAMEC(1991, sf2,      0,        sf2,      sf2,      cps1,     ROT0,   \"Capcom\", \"Street Fighter II - The World Warrior (World 910522)\", &amp;sf2_ctrl, NULL )\n</code></pre> <p>Note that a <code>NULL</code> is also added to the end of the macro. That parameter is used for NVRAM bootstraps. The same driver macro is used for adding controls and bootstraps in order to avoid having more and more macros. If this game also had an NVRAM bootstrap, the bootstrap would be included rather than NULL.</p>"},{"location":"development/cores/core-specific/mame-2003-plus/#stone-ball-example","title":"Stone Ball Example","text":"<p>In this case we do not currently have much control metadata, so the implementation is minimal:</p> <pre><code>const struct ControlInfo stonebal_ctrl =\n{\n  false, /* alternating_controls */\n  false, /* mirrored_controls */\n  \"\",    /* control__details */\n  &amp;stonebal_get_btn\n};\n\nconst char *stonebal_get_btn(int type)\n{\n  switch(type)\n  {\n    case IPT_BUTTON1: return BTN1 \"Shoot/Fight\";\n    case IPT_BUTTON2: return BTN2 \"Pass/Tackle\";\n    case IPT_BUTTON3: return BTN3 \"Push\";\n  } /* end of switch */\n\n  return generic_btn_label(type);\n}\n</code></pre>"},{"location":"development/cores/core-specific/mame-2003-plus/#driver-declaration_1","title":"Driver Declaration","text":""},{"location":"development/cores/core-specific/mame-2003-plus/#before_1","title":"Before:","text":"<pre><code>GAME( 1994, stonebal, 0,        stonebal, stonebal, stonebal, ROT0, \"Art and Magic\", \"Stone Ball (4 Players)\" )\nGAME( 1994, stoneba2, stonebal, stonebal, stonebal, stonebal, ROT0, \"Art and Magic\", \"Stone Ball (2 Players)\" )\n</code></pre>"},{"location":"development/cores/core-specific/mame-2003-plus/#after_1","title":"After:","text":"<p><pre><code>GAMEC( 1994, stonebal, 0,        stonebal, stonebal, stonebal, ROT0, \"Art and Magic\", \"Stone Ball (4 Players)\", &amp;stonebal_ctrl, NULL )\nGAMEC( 1994, stoneba2, stonebal, stonebal, stonebal, stonebal, ROT0, \"Art and Magic\", \"Stone Ball (2 Players)\", &amp;stonebal_ctrl, NULL )\n</code></pre> Note that a <code>NULL</code> is also added to the end of the macro. That parameter is used for NVRAM bootstraps. The same driver macro is used for adding controls and bootstraps in order to avoid having more and more macros. If this game also had an NVRAM bootstrap, the bootstrap would be included rather than NULL.</p>"},{"location":"development/cores/core-specific/mame-2003-plus/#adding-an-nvram-bootstrap","title":"Adding an NVRAM Bootstrap","text":""},{"location":"development/cores/core-specific/mame-2003-plus/#purpose-and-criteria-for-bootstraps","title":"Purpose and criteria for bootstraps","text":"<p>The purpose of the NVRAM bootstrap functionality is to create a good user experience the first time a game is booted. When the behavior of a game on its first boot is impossible for a new user to tell from a crash, then a bootstrap is in order.</p> <p>More specifically, the conditions for adding a bootstrap are: * It is not clear what the user needs to do to get into the game or * It is not reasonably possible for the user to get into the game using a SNES controller or arcade control panel</p>"},{"location":"development/cores/core-specific/mame-2003-plus/#example-commit","title":"Example commit","text":"<p>This doc will use the process of adding an nvram bootstrap for the game \"Run and Gun (US ver. UAB)\" with the driver name <code>rungunu</code>.</p>"},{"location":"development/cores/core-specific/mame-2003-plus/#step-1-generate-a-working-nvram-file","title":"Step 1: Generate a working NVRAM file","text":"<p>The exact process is game-specific.</p>"},{"location":"development/cores/core-specific/mame-2003-plus/#step-2-compile-and-execute-bin2c","title":"Step 2: Compile and execute bin2c","text":"<pre><code>git clone http://github.com/libretro/mame2003-plus-libretro\ncd mame2003-plus-libretro\ncd tools/bin2c\nmake\n./bin2c -o rungunu_bootstrap.c rungunu.nv\n</code></pre>"},{"location":"development/cores/core-specific/mame-2003-plus/#output","title":"Output","text":"<p>The generated output will look like this: <pre><code>const unsigned char rungunu_nv_bytes[] = {\n    4, 38,251,217,146, 71, 85, 65, 66,  0, 16,  3,  7,  3,  0,  0,  0,  0,\n    0,  7,  7,  0,  7, 26,  1, 16, 26,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,\n};\n\nconst unsigned int rungunu_nv_length = 128;\n</code></pre></p>"},{"location":"development/cores/core-specific/mame-2003-plus/#step-3-create-a-bin2cfile","title":"Step 3: Create a bin2cFILE","text":"<p>The next step is manual -- putting the data that bin2c generated into the format that the core uses:</p> <pre><code>struct bin2cFILE {\n  const unsigned int length;\n  const unsigned char data[];\n};\n</code></pre>"},{"location":"development/cores/core-specific/mame-2003-plus/#resulting-bootstrap-structure","title":"Resulting bootstrap structure","text":"<pre><code>const struct bin2cFILE rungunu_bootstrap = {\n  128,\n {\n    4, 38,251,217,146, 71, 85, 65, 66,  0, 16,  3,  7,  3,  0,  0,  0,  0,\n    0,  7,  7,  0,  7, 26,  1, 16, 26,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,\n  }\n};\n</code></pre>"},{"location":"development/cores/core-specific/mame-2003-plus/#step-4-setup-the-various-source-files","title":"Step 4: Setup the various source files","text":"<p>Add <code>rungunu_bootstrap</code> to <code>bootstrap.c</code> and <code>bootstrap.h</code>.</p> <p>If <code>rungun.c</code> didn't already include the necessary headers from a prior bootstrap project I would have needed to add: <pre><code>#include \"bootstrap.h\"\n#include \"inptport.h\"\n</code></pre></p>"},{"location":"development/cores/core-specific/mame-2003-plus/#step-5-declare-the-bootstrap-in-the-driver","title":"Step 5: Declare the bootstrap in the driver","text":""},{"location":"development/cores/core-specific/mame-2003-plus/#original","title":"Original:","text":"<pre><code>GAMEX( 1993, rungunu,   0,      rng, rng, rng, ROT0, \"Konami\", \"Run and Gun (US ver. UAB)\", GAME_IMPERFECT_GRAPHICS | GAME_IMPERFECT_COLORS | GAME_IMPERFECT_SOUND )\n</code></pre>"},{"location":"development/cores/core-specific/mame-2003-plus/#bootstrapped","title":"Bootstrapped:","text":"<pre><code>GAMECX( 1993, rungunu,   0,      rng, rng, rng, ROT0, \"Konami\", \"Run and Gun (US ver. UAB)\", GAME_IMPERFECT_GRAPHICS | GAME_IMPERFECT_COLORS | GAME_IMPERFECT_SOUND, &amp;generic_ctrl, &amp;rungun_bootstrap )\n</code></pre> <p>Important</p> <p>The newer driver macros that support setting the bootstrap pointer also need a button labeling function pointer. If there is no existing control name function, passing <code>&amp;generic_ctrl</code> suffices.</p>"},{"location":"development/cores/core-specific/mame-2003-plus/#compiling-a-pr-for-testing","title":"Compiling a PR for testing","text":"<p>Note: For purposes of this guide, replace <code>PR_NUMBER</code> with the literal number of the github Pull Request you are interested in testing. For example, if you are interested in testing out the Pull Request which implemented the libretro analog input API, you would substitute <code>PR_NUMBER</code> below with <code>590</code>, the PR number for that request.</p>"},{"location":"development/cores/core-specific/mame-2003-plus/#nix-or-msys","title":"*nix or msys:","text":"<pre><code>git clone https://github.com/libretro/mame2003-plus-libretro.git\npatch -p1 -d  mame2003-plus-libretro &lt; &lt;(wget -qO- https://patch-diff.githubusercontent.com/raw/libretro/mame2003-plus-libretro/pull/PR_NUMBER.diff)\ncd mame2003-plus-libretro\nmake\n</code></pre> <p>Note: If you are using the standard libretro/RetroArch msys2 environment, you will first need to install <code>patch</code> with this command:</p> <pre><code>pacman -S patch\n</code></pre>"},{"location":"development/cores/core-specific/mame-2003-plus/#retropie","title":"RetroPie","text":"<pre><code>cd ~/RetroPie-Setup/\nsudo ./retropie_packages.sh lr-mame2003-plus clean\nsudo ./retropie_packages.sh lr-mame2003-plus sources\nsudo patch -p1 -d tmp/build/lr-mame2003-plus &lt; &lt;(wget -qO- https://patch-diff.githubusercontent.com/raw/libretro/mame2003-plus-libretro/pull/PR_NUMBER.diff)\nrm 590.diff\nsudo ./retropie_packages.sh lr-mame2003-plus build\nsudo ./retropie_packages.sh lr-mame2003-plus build install\n</code></pre>"},{"location":"development/cores/core-specific/mame-2016/","title":"MAME 2016 Developer Docs","text":"<p>As of 2019, this libretro port of MAME (the libretro \"OSD\" in MAME parlance) is known to be rather messy. The plan is to rewrite it eventually.</p> <p>What follows here is a technical explanation of what libretro had to do to MAME's GENie build system in order to compile it as a shared library with the appropriate API exported to be used as a libretro core.</p>"},{"location":"development/cores/core-specific/mame-2016/#the-problem-with-a-static-library-mame-osd","title":"The problem with a static library MAME OSD","text":"<p>You're not supposed to put the public API of a shared library into a static library, particularly if those symbols are \"unused\" by any other part of the shared library.  In other words, while the libretro API is contained within the retro OSD, the file containing the public API (<code>libretro.c</code>) must not be stripped by the helpful linker trying to optimize for you.</p> <p>How you do that varies quite a bit by linker, and some of them such as GNU <code>ld</code> require the options be in a specific order.  How to do that with GENie is not clear.</p> <p>To solve all of these issues at once, we leave libretro.c out of the OSD library and add it to the main MAME library directly.  This requires adding an includedirs block for the directory containing libco's header and a files block containing <code>libretro.c</code>.  These changes are near the bottom of the GENie project in <code>scripts/src/main.lua</code>.</p> <p>This is not a clean solution.  It just happens to be the one that works across platforms without jumping through hoops for every linker that comes along.</p>"},{"location":"development/cores/core-specific/mame-2016/#other-libretro-genie-mods","title":"Other libretro GENie mods","text":"<p>As mentioned above, near the bottom of <code>scripts/src/main.lua</code>, there's a chunk of libretro-related additions and overrides.  You can spot it by searching for \"BEGIN libretro overrides to MAME's GENie build\".  Most of what's there is pretty self-explanatory.  It overrides MAME to build a shared library and includes processing for ARCH and platform, the two standard libretro build target variables, and includes the <code>libretro.c</code> file mentioned above.  It could probably be split into its own file, but hasn't been thus far for simplicity.</p> <p>The only other addition is <code>scripts/src/osd/retro.lua</code> and its <code>cfg</code> file which isn't strictly necessary to be a separate file.  Pretty standard stuff in there.  The real work is in main.lua, and it's all contingent upon use of the libretro OSD to be as minimally invasive into MAME as possible.</p> <p>That's about it really.  Compared to the old system, GENie is both much simpler and more complicated for us.  More complicated because stuff is in so many different places.  Simpler because modifying GENie rules like we have done makes for an incredibly shallow fork.</p>"},{"location":"development/cores/core-specific/mame-2016/#makefilelibretro","title":"Makefile.libretro","text":"<p>There is still a pure Makefile named <code>Makefile.libretro</code>.  It guesses the <code>ARCH</code> and platform variables if they're not defined, and it passes those (renaming ARCH in the process) along with the OSD and several other useful arguments to GENie.  It's basically a major shortcut for the make command line which for our needs is pretty long.</p> <p>It's been tested building the \"arcade\" (used to be UME) and tiny targets, just pass <code>SUBTARGET=tiny</code> to <code>Makefile.libretro</code> to get the latter.</p>"},{"location":"development/cores/core-specific/mame-2016/#final-thoughts","title":"Final thoughts","text":"<p>MAME is a beast.  It compiles to a 137MB .dylib on the Mac and a 172MB <code>.so</code> on Linux.  Nonetheless, if its retro OSD weren't such a mess, it would be a good example of how to port something to libretro.  Presently it still requires a fork, but the fork is perhaps the shallowest libretro fork we've got.  And while not every decision the MAME developers have ever made could be considered optimal, the one thing they have done is insist that every external dependency they have is included in their source tree -- which is exactly what we need.</p> <p>MAME's GENie setup is complex, but that is because MAME is complex.  GENie isn't difficult to figure out if you know a bit of lua.  Indeed iKarith does not claim to fully understand GENie, but managed to modify the project to build a libretro core with only a few pointers (thanks balrog!) and a little grepping of 3rdparty/genie.</p>"},{"location":"development/cores/core-specific/mame/","title":"MAME (0.181-current) Development","text":""},{"location":"development/cores/core-specific/mame/#building-libretro-mame","title":"Building libretro-mame","text":""},{"location":"development/cores/core-specific/mame/#build-environement","title":"Build environement","text":""},{"location":"development/cores/core-specific/mame/#windows","title":"Windows","text":"<ol> <li>Install and configure the RetroArch msys2 build environment</li> <li>From the msys2 console, install python with the command <code>pacman -S python</code></li> </ol>"},{"location":"development/cores/core-specific/mame/#clone-the-repository","title":"Clone the repository","text":"<pre><code>git clone http://github.com/libretro/mame\ncd mame\n</code></pre>"},{"location":"development/cores/core-specific/mame/#general-make-syntax","title":"general <code>make</code> syntax","text":"Build type Command Complete build <code>make -f Makefile.libretro -j$(nproc)</code> Arcade-only build <code>make -f Makefile.libretro -j$(nproc) SUBTARGET=arcade</code> Softlist-only build <code>make -f Makefile.libretro -j$(nproc) SUBTARGET=mess</code>"},{"location":"development/cores/core-specific/mame/#platform-specific-make-syntax","title":"Platform-specific <code>make</code> syntax","text":"Platform Command 64-bit processors <code>make -f Makefile.libretro -j$(nproc) PTR64=1</code>"},{"location":"development/cores/core-specific/mame/#building-a-previous-version","title":"Building a previous version","text":"<p>Important</p> <p>If you want to build a previous version of MAME, begin by making sure that you can build the most recent version.</p> <p>Once you have built the most recent version of MAME to establish that your build environment is complete, reset the contents of the repository to a clean state:</p> <pre><code>make clean\ngit reset --hard\n</code></pre> <p>Warning</p> <p>These commands will delete any files in your <code>mame</code> subfolder that are not in the <code>libretro/mame</code> github repository.</p>"},{"location":"development/cores/core-specific/mame/#checkout-the-previous-version-source","title":"<code>checkout</code> the previous version source","text":"<p>See the section \"Commit hashes for previous versions\" below to find the correct commit hash. For example, if you wish to build MAME 0.205, the corresponding commit hash is <code>b691c38</code>.</p> <p>Use this commit hash and the <code>git checkout</code> command to roll back the source to your chosen version: <pre><code>git checkout b691c38\n</code></pre></p>"},{"location":"development/cores/core-specific/mame/#commit-hashes-for-previous-versions","title":"Commit hashes for previous versions","text":"Version Commit mame0216 7cf10a3 mame0207 40fc339 mame0206 cf02fe3 mame0205 b691c38 mame0204 c6150e7 mame0203 b57a140 mame0202 856478f mame0201 4dc302e mame0200 ff19cd3 mame0199 f2e805a mame0198 c5f6a62 mame0197 74293f8 mame0196 e8f2016 mame0195 e44e85b mame0194 5be2496 mame0193 bf28b34 mame0192 d771f54 mame0191 a5db728 mame0190 f57574c mame0189 2beedc5 mame0188 7b45ec1 mame0187 1d9648b mame0186 e4c6cb1 mame0185 fe01a13 mame0184 7768128 mame0183 4ee22dc mame0182 22c42ab mame0181 3a1651e"},{"location":"development/cores/core-specific/pcsx2/","title":"Sony PlayStation2 (LRPS2)","text":""},{"location":"development/cores/core-specific/pcsx2/#requirements","title":"Requirements","text":"<ul> <li>CMake</li> <li>xxd (optional)</li> </ul>"},{"location":"development/cores/core-specific/pcsx2/#how-to-compile-for-windows-x64-visual-studio-2017","title":"How to compile (for Windows x64 - Visual Studio 2017)","text":"<p>In addition to the requirement(s) listed above, you will also need Visual Studio 2017 installed in order for the following to work.</p> <p>Enter the following commands (from the PCSX2 source directory):</p> <pre><code>mkdir build\ncd build\ncmake .. -DLIBRETRO=ON -DCMAKE_BUILD_TYPE=Release -G\"Visual Studio 15 2017 Win64\"\ncmake --build . --target pcsx2_libretro --config Release\n</code></pre> <p>Warning</p> <p>If it says 'Could not find named generator' or something to that effect, it means you might be using the wrong cmake version on Msys2/Mingw. Remove the regular 'cmake' package and try to install 'mingw-w64-x86_64-cmake' instead.</p> <p>Warning</p> <p>If you get this error 'Visual Studio 15 2017 could not find any instance of Visual Studio', your installation of Visual Studio 2017 is most likely missing 'Visual C++ tools for CMake'. This can be found under 'Desktop development with C++'. Go back to Visual Studio 2017 and install this, then try again.</p>"},{"location":"development/cores/core-specific/pcsx2/#how-to-compile-for-windows-x64-visual-studio-2019","title":"How to compile (for Windows x64 - Visual Studio 2019)","text":"<p>In addition to the requirement(s) listed above, you will also need Visual Studio 2019 installed in order for the following to work.</p> <p>Enter the following commands (from the PCSX2 source directory):</p> <pre><code>mkdir build\ncd build\ncmake .. -DLIBRETRO=ON -G\"Visual Studio 16 2019\"\ncmake --build . --target pcsx2_libretro --config Release\n</code></pre> <p>Warning</p> <p>If it says 'Could not find named generator' or something to that effect, it means you might be using the wrong cmake version on Msys2/Mingw. Remove the regular 'cmake' package and try to install 'mingw-w64-x86_64-cmake' instead.</p>"},{"location":"development/cores/core-specific/pcsx2/#how-to-compile-for-windows-x64-visual-studio-2022","title":"How to compile (for Windows x64 - Visual Studio 2022)","text":"<p>In addition to the requirement(s) listed above, you will also need Visual Studio 2022 installed in order for the following to work.</p> <p>Enter the following commands (from the PCSX2 source directory):</p> <pre><code>cmake -B build -G \"Visual Studio 17 2022\" -DCMAKE_BUILD_TYPE=Release -DLIBRETRO=ON\ncmake --build build --config Release --target pcsx2_libretro\n</code></pre>"},{"location":"development/cores/core-specific/pcsx2/#how-to-compile-for-linux","title":"How to compile (for Linux)","text":"<p>Enter the following commands (from the PCSX2 source directory):</p> <pre><code>mkdir build\ncd build\ncmake ..\nmake\n</code></pre>"},{"location":"development/cores/core-specific/swanstation/","title":"Sony PlayStation (SwanStation)","text":""},{"location":"development/cores/core-specific/swanstation/#requirements","title":"Requirements","text":"<ul> <li>CMake</li> </ul>"},{"location":"development/cores/core-specific/swanstation/#how-to-compile-for-windows-x64-visual-studio-2019","title":"How to compile (for Windows x64 - Visual Studio 2019)","text":"<p>In addition to the requirement(s) listed above, you will also need Visual Studio 2019 installed in order for the following to work.</p> <p>Enter the following commands (from the SwanStation source directory):</p> <pre><code>mkdir build\ncd build\ncmake -G \"Visual Studio 16 2019\" -A \"x64\" -DCMAKE_BUILD_TYPE=Release ..\ncmake --build . --target swanstation_libretro --config Release\n</code></pre> <p>Warning</p> <p>If it says 'Could not find named generator' or something to that effect, it means you might be using the wrong cmake version on Msys2/Mingw. Remove the regular 'cmake' package and try to install 'mingw-w64-x86_64-cmake' instead.</p>"},{"location":"development/retroarch/debugging/","title":"Debugging","text":""},{"location":"development/retroarch/debugging/#drmingw","title":"Dr.MinGW","text":"<p>Windows debug builds now have an integrated crash handler. If you find any recurrent crashes you can start the retroarch_debug.exe executable, reproduce the crash and you should find a time-stamped crash log in the retroarch directory.</p>"},{"location":"development/retroarch/debugging/#gdb-all-platforms","title":"GDB (All platforms)","text":"<p>The GNU Debugger is the most widely available debugging tool for many platforms.</p> <p>Windows users</p> <p>This guide assumes you have already installed the MSYS2/MinGW environment as detailed here and that you are running in the appropriate \"MSYS2 MinGW\" (32 or 64-bit) shell (not \"MSYS2 MSYS\").</p> <p>If you observe a crash with RetroArch and would like to get more information, navigate to the folder where your RetroArch installation is and run:</p> <p>gdb retroarch</p> <p>Windows users</p> <p>If you have not compiled RetroArch yourself with debugging enabled (<code>make DEBUG=1</code>), please specify <code>retroarch_debug.exe</code> here instead of <code>retroarch</code> to use the debug version that ships with our binary package. In order to debug in Windows 10 when the D3D10 or D3D11 video drivers are in use, be sure that you have also installed Microsoft's free Windows Direct3D Graphics Tools package.</p> <p>After gdb has started, you can then start up RetroArch with <code>run</code>. If RetroArch crashes, gdb should show you a prompt with a message such as:</p> <p><code>Program received signal SIGSEGV, Segmentation fault.</code></p> <p>From here, type <code>bt full</code> to get a full backtrace of the crash. You can copy/paste this information to a pastebin site such as dpaste to get a link that you can provide to developers to help with your problem. Run <code>quit</code> when you are done to exit gdb.</p> <p>To get a full backtrace of the crash for all threads, type <code>thread apply all bt full</code>.</p> <p>For more information on using GDB, please see their online documentation here.</p>"},{"location":"development/retroarch/debugging/#asan-linuxmacbsdandroid","title":"ASAN (Linux/Mac/BSD/Android)","text":"<p>AddressSanitizer (ASAN) is a very fast memory error detector and an indispensable tool for finding issues with improper memory handling such as use-after-free, buffer overflows and general memory leaks. It is available since GCC 4.8 and Clang 3.1 for Linux (x64 and ARM) systems. Typical slowdown of runtime performance is around 2x.</p> <p>There are several ways to use RetroArch in conjunction with ASAN and there are many different options that can be combined with each other. The first step is that you need to compile ASAN directly into the RetroArch binary. Here are some simple examples:</p> <p>For detecting memory errors/leaks and undefined behavior:</p> <p>make DEBUG=1 SANITIZER=address,undefined</p> <p>For detecting threading errors such as race conditions:</p> <p>make DEBUG=1 SANITIZER=thread</p> <p>Then you can run the RetroArch binary normally with <code>./retroarch</code>. As problems are detected, they will be printed to the console either at runtime or when the program exits or crashes, depending on the type of error.</p> <p>For more information, see the gcc, Google and clang documentation.</p>"},{"location":"development/retroarch/debugging/#dr-memory-windowslinuxmacandroid","title":"Dr. Memory (Windows/Linux/Mac/Android)","text":"<p>Dr. Memory is another tool for detecting memory errors similar to ASAN. Its website can be found here: http://www.drmemory.org/</p> <p>After installation, the simplest way to use Dr. Memory with RetroArch is to open the start menu shortcut under \"Dr. Memory\" called \"Explore Dr. Memory\", and then drag the <code>retroarch_debug.exe</code> file onto the <code>drmemory.exe</code> file there. No re-compilation is necessary to use this tool. Any errors encountered will be displayed in a notepad window after the program exits or crashes.</p>"},{"location":"development/retroarch/debugging/#vulnscan-windowslinux","title":"VulnScan (Windows/Linux)","text":"<p>Also known as Microsoft Security Risk Detection, is a new memory error detection tool that is (at the time of writing) in closed beta status. For more information, please see its website here.</p>"},{"location":"development/retroarch/debugging/#valgrind-linux","title":"Valgrind (Linux)","text":"<p>Valgrind is probably the oldest and most well known memory error and leak detector available. Here is an example command-line usage to run valgrind with RetroArch to check for memory or threading errors:</p> <p>valgrind -v --tool=memcheck --leak-check=yes --track-origins=yes --show-reachable=yes ./retroarch</p> <p>No recompilation is necessary to use this tool, but make sure to run it using a debug build of RetroArch (built with <code>make DEBUG=1</code>). Some users have reported a large number of false positives with this tool, as well as much slower runtime performance, so in general we typically recommend to use ASAN instead if that is an option for you.</p>"},{"location":"development/retroarch/debugging/#rr-linux","title":"rr (Linux)","text":"<p>rr is a deterministic debugger that enhances gdb by supporting the recording and replay (and even reverse-replay) of your program's execution. Very useful for accurately reproducing a hard-to-trigger issue such as a race condition or crash that only occurs under certain conditions.</p> <p>For more information on using rr, please see their usage guide here.</p>"},{"location":"development/retroarch/debugging/#time-travel-debugging-windows","title":"Time Travel Debugging (Windows)","text":"<p>Time Travel Debugging is a Windows tool for recording and replaying a program's execution, similar to rr. For more information, please visit their website.</p>"},{"location":"development/retroarch/debugging/#android-studio-android","title":"Android Studio (Android)","text":"<p>See this file for a guide on how to build, sideload and debug a core using Android Studio.</p>"},{"location":"development/retroarch/glossary/","title":"Glossary","text":"<p>While developing RetroArch, you might find some terms which are unfamiliar to new developers. These are explained here.</p>"},{"location":"development/retroarch/glossary/#griffin","title":"Griffin","text":"<p>Most of the console platforms of RetroArch use a concept we call 'Griffin'. </p> <p>Basically:</p> <ul> <li>Every C file gets included in griffin/griffin.c.</li> <li>Every C++ file gets included in griffin/griffin_cpp.cpp.</li> <li>Every ObjectiveC file gets included in griffin_objc.m</li> <li>Glslang files get included in griffin_glslang.cpp</li> </ul> <p>The Griffin files are the only ones being built when a platform port uses Griffin.  This has a couple of benefits:</p> <ul> <li>It's a poor man's kind of link time code generation optimization pass.</li> <li>We dont have to keep editing every platform port's Makefile individually whenever we add a new file. We can simply update these Griffin files without touching any of the platform Makefiles.</li> </ul> <p>Some disadvantages (that we cater to regardless):</p> <ul> <li>Because all of the C/C++/ObjC files all get included into one source file, it is necessary that all symbols and function names are uniquely named. We make sure in RetroArch this is the case.</li> </ul>"},{"location":"development/retroarch/glossary/#salamander","title":"Salamander","text":"<p>Salamander is a small RetroArch launcher for embedded platforms with static linking. On such platforms, each core binary contains the core and the complete RetroArch frontend. Switching cores is achieved by just re-launching into a different core binary. Salamander simply launches the most recently used core (or a default one, if none is stored in the config file).</p>"},{"location":"development/retroarch/netplay/","title":"Netplay","text":"<p>RetroArch allows a second (or further) player, or spectators, to be connected via the Internet.</p> <p>RetroArch's netplay code is based on replay, and provides netplay over unreliable networks free of input latency in the default configuration. Netplay supports up to 16 players and many spectators. Netplay in RetroArch is guaranteed\u00b9 to work with perfect synchronization given a few minor constraints:</p> <ol> <li>The core is deterministic,</li> <li>The only input devices the core interacts with are the gamepad and analog sticks, and</li> <li>Both the core and the loaded content are identical on host and client.</li> </ol> <p>Cores are expected to support serialization for proper netplay behavior, but netplay will work in limited fashion with cores that do not support serialization. The experience will be far more smooth with serialization.</p> <p>Netplay in RetroArch works by expecting input to come delayed from the network, then rewinding and re-playing with the delayed input to get a consistent state. At any given time, all netplay clients may be in inconsistent states, but once they receive each other's delayed data, they invisibly rewind to the last time they were consistent, replay with the new input, and reach a new state, notionally closer to the \"correct\", canonical state than the previous one.  So long as both sides agree on which frame is which, it should be impossible for them to become de-synced, since each input event always happens at the correct frame.</p> <p>\u00b9 Guarantee not actually a guarantee.</p>"},{"location":"development/retroarch/netplay/#behavior","title":"Behavior","text":"<p>Netplay's protocol uses TCP, as reliability and in-order delivery are both mandatory for correct behavior.</p> <p>A single netplay server may have connections from multiple netplay clients. For most behavior, the server and client are equal participants, but for operations which require global synchronization, the server is canonical. In normal, running behavior, each playing client simply sends the input state of their controller every frame, and the server forwards input data between clients. Every client and the server is aware of which player slots are in use (i.e., which controllers are plugged in), and the server is aware of which client corresponds to which player slot.</p> <p>It is crucial that every player send their input data in order for every frame, and thus every client keeps in mind the frame counter for every player. If input data is received with an unexpectedly low frame number, it is ignored, and if input data is received with an unexpectedly high frame number, the connection is terminated. It is also crucial that every player agree on which frame is which, and so during initial connection the server gives a canonical frame count and a serialized save state, allowing the client to join mid-stream.</p> <p>Spectators send no input data.</p> <p>When new input data is received from a player, if it is before the currently executing frame, RetroArch will invisibly rewind and replay with the new input data, arriving at the original frame so that the local player's own input is always seemless.</p> <p>A typical, playing client sends no data other than its own input every frame. During normal play, the server sends its own input data. If the server is not playing, but spectating, it sends a special \"no input\" packet, so that clients may nonetheless no its frame count. Other spectators send no data.</p> <p>Other events coordinate on the server's frame counter, and most may therefore only be performed by the server. For instance, for a client to switch from spectating to playing, it cannot simply start sending input data, but must send a request to change modes, which the server will honor at its present frame count. The client may have to rewind to send data from earlier frames, or wait to send input data until its local frame count has reached the server's.</p> <p>In particular, resets and savestate loads are always synchronized to the server's frame count, and thus only the server may reset the core or load a savestate. Because input preceeding a savestate load is irrelevant, upon receiving a savestate load command, all frame counts are updated to be at least the server's frame count, including the local frame count if applicable. This is the only condition under which the frame count will skip at a rate greater than one frame per executed frame.</p>"},{"location":"development/retroarch/netplay/#implementation","title":"Implementation","text":"<p>Netplay is in effect a buffer of input states (implemented as a ring of buffers) and some pre- and post-frame behaviors.</p> <p>There are three important locations, each of which : self, other and unread. Each refers to a frame, and a state buffer corresponding to that frame. The state buffer contains the savestate for the frame, and the input from both the local and remote players.</p> <p>Self is where RetroArch believes itself to be, which may be ahead or behind of what it's read from the peer. Self progresses at a rate of one frame per executed frame, except when the local frame count is forced to skip ahead due to loading a state.</p> <p>Unread is the first frame at which not all players' data has been read. Typically unread is less than self, but it is possible for one client to get ahead of others.</p> <p>Other is where it was most recently in perfect sync: i.e., other-1 is the last frame from which all local and remote input have been actioned. It is never necessary to rewind farther than other in order to attain synchronization, and other is always less than or equal to both self and unread. Since the state buffer is a ring, other is the first frame that it's unsafe to overwrite.</p> <p>The server has a slightly more complicated job as it can handle multiple clients, however it is not vastly more complicated: For each connection which is playing (i.e., has a controller), it maintains a per-player unread frame, and the global unread frame is the earliest of each player unread frame. The server forwards input data: When input data is received from an earlier frame than the server's current frame, it forwards it immediately. Otherwise, it forwards it when the frame is reached. i.e., during frame n, the server may send its own and any number of other players' data for frame n, but will never send frame n+1. This is because the server's clock is the arbiter of all synchronization-related events, such as flipping players, players joining and parting, and saving/loading states.</p> <p>Pre-frame, netplay serializes the core's state, polls for local input, and polls for input from the network. If the input from the network is too far behind (i.e., unread is too far behind self), it stalls to allow the other side to catch up. To assure that this stalling does not block the UI thread, it is implemented similarly to pausing, rather than by blocking on the socket.</p> <p>If input has not been received for the other side up to the current frame (the usual case), the remote input is simulated in a simplistic manner.  Each frame's local serialized state and simulated or real input goes into the frame buffers.</p> <p>During the frame of execution, when the core requests input, it receives the input from the state buffer, both local and real or simulated remote.</p> <p>Post-frame, it checks whether it's read more than it's actioned, i.e. If read &gt; other and self &gt; other. If so, it first checks whether its simulated remote data was correct. If it was, it simply moves other up. If not, it rewinds to other (by loading the serialized state there) and runs the core in replay mode with the real data up to the least of self and read, then sets other to that.  To avoid latency building up, if the input from the network is too far ahead (i.e., unread is too far ahead of self), the frame limiter is momentarily disabled to catch up. Note that since network latency is expected, the normal case is the opposite: unread is behind self.</p> <p>When in netplay mode, the callback for receiving input is replaced by input_state_net. It is the role of input_state_net to combine the true local input (whether live or replay) with the remote input (whether true or simulated).</p> <p>Some thoughts about \"frame counts\": The frame counters act like indexes into a 0-indexed array; i.e., they refer to the first unactioned frame. So, when read_frame_count is 23, we've read 23 frames, but the last frame we read is frame 22. With self_frame_count it's slightly more complicated, since there are two relevant actions: Reading the data and emulating with the data. The frame count is only incremented after the latter, so there is a period of time during which we've actually read self_frame_count+1 frames of local input.</p> <p>Clients may come and go, and may start or stop playing even as they're connected. A client that is not playing is said to be spectating: It receives all the same data but sends none. A client may switch from spectating to playing by sending the appropriate request, at which point it is allotted a player number (see the SPECTATE, PLAY and MODE commands below).</p> <p>The server may also be in spectator mode, but as the server never sends data early (i.e., it only forwards data on the frame it's reached), it must also inform all clients of its own current frame even if it has no input. The NOINPUT command is provided for that purpose.</p>"},{"location":"development/retroarch/netplay/#protocol","title":"Protocol","text":"<p>A netplay connection involves a handshake, which assures that client and server are running the same software and brings the client to synchronization, and then an exchange of input packets.</p> <p>The handshake procedure (this part is done by both server and client): 1. Send connection header 2. Receive and verify connection header 3. Send nickname 4. Receive nickname</p> <p>For the client: 5. Send PASSWORD if applicable 4. Receive INFO 5. Send INFO 6. Receive SYNC</p> <p>For the server: 5. Receive PASSWORD if applicable 6. Send INFO 7. Receive INFO 8. Send SYNC</p> <p>Note that both the server and the client send the connection header before reading it. This is intentional. It allows either servers or clients (but not both) to generalize, by echoing the connection header of the other side.</p>"},{"location":"development/retroarch/netplay/#other-features","title":"Other features","text":"<p>Typically, it is assumed that input latency is not desired. However, input latency is an option. The benefit of input latency is that the actual execution lags behind one's frame count, and thus it is more usual that remote data is available, and rewinding is both less frequent and less expensive.  There is an additional location in the state buffer, run, used when input latency is enabled. In that case, self points to where input is being read, and run points to the frame actually being executed. Run is purely local.</p>"},{"location":"development/retroarch/netplay/#command-format","title":"Command format","text":"<p>Netplay commands consist of a 32-bit command identifier, followed by a 32-bit payload size, both in network byte order, followed by a payload. The command identifiers are listed in netplay.h. The commands are described below. Unless specified otherwise, all payload values are in network byte order.</p> <p>Command: ACK Payload: None Description:</p> <p>Acknowledgement. Not used.</p> <p>Command: NAK Payload: None Description:</p> <p>Negative Acknowledgement. If received, the connection is terminated. Sent whenever a command is malformed or otherwise not understood.</p> <p>Command: DISCONNECT Payload: None Description:</p> <p>Gracefully disconnect. Not used.</p> <p>Command: INPUT Payload:</p> <pre><code>{\n   frame number: uint32\n   is server data: 1 bit\n   player: 31 bits\n   controller input: uint32\n   analog 1 input: uint32\n   analog 2 input: uint32\n}\n</code></pre> <p>Description:</p> <p>Input state for each frame. Netplay must send an INPUT command for every frame in order to function at all. Client's player value is ignored. Server indicates which frames are its own input data because INPUT is a synchronization point: No synchronization events from the given frame may arrive after the server's input for the frame.</p> <p>Command: NOINPUT Payload:</p> <pre><code>{\n   frame number: uint32\n}\n</code></pre> <p>Description:</p> <p>Sent by the server to indicate a frame has passed when the server is not otherwise sending data.</p> <p>Command: NICK Payload:</p> <pre><code>{\n   nickname: char[32]\n}\n</code></pre> <p>Description:</p> <p>Send nickname. Mandatory handshake command.</p> <p>Command: PASSWORD Payload:</p> <pre><code>{\n   password hash: char[64]\n}\n</code></pre> <p>Description:</p> <p>Send hashed password to server. Mandatory handshake command for clients if the server demands a password.</p> <p>Command: INFO Payload</p> <pre><code>{\n   core name: char[32]\n   core version: char[32]\n   content CRC: uint32\n}\n</code></pre> <p>Description:</p> <p>Send core/content info. Mandatory handshake command. Sent by server first, then by client, and must match. Server may send INFO with no payload, in which case the client sends its own info and expects the server to load the appropriate core and content then send a new INFO command. If mutual agreement cannot be achieved, the correct solution is to simply disconnect.</p> <p>Command: SYNC Payload:</p> <pre><code>{\n   frame number: uint32\n   paused?: 1 bit\n   connected players: 31 bits\n   flip frame: uint32\n   controller devices: uint32[16]\n   client nick: char[32]\n   sram: variable\n}\n</code></pre> <p>Description:</p> <p>Initial state synchronization. Mandatory handshake command from server to client only. Connected players is a bitmap with the lowest bit being player 0. Flip frame is 0 if players aren't flipped. Controller devices are the devices plugged into each controller port, and 16 is really MAX_USERS. Client is forced to have a different nick if multiple clients have the same nick.</p> <p>Command: SPECTATE Payload: None Description:</p> <p>Request to enter spectate mode. The client should immediately consider itself to be in spectator mode and send no further input.</p> <p>Command: PLAY Payload:</p> <pre><code>{\n   reserved: 31 bits\n   as slave?: 1 bit\n}\n</code></pre> <p>Description:</p> <p>Request to enter player mode. The client must wait for a MODE command before sending input. Server may refuse or force slave connections, so the request is not necessarily honored. Payload may be elided if zero.</p> <p>Command: MODE Payload:</p> <pre><code>{\n   frame number: uint32\n   reserved: 13 bits\n   slave: 1 bit\n   playing: 1 bit\n   you: 1 bit\n   player number: uint16\n}\n</code></pre> <p>Description:</p> <p>Inform of a connection mode change (possibly of the receiving client). Only server-to-client. Frame number is the first frame in which player data is expected, or the first frame in which player data is not expected. In the case of new players the frame number must be later than the last frame of the server's own input that has been sent, and in the case of leaving players the frame number must be later than the last frame of the relevant player's input that has been transmitted.</p> <p>Command: MODE_REFUSED Payload:</p> <pre><code>{\n   reason: uint32\n}\n</code></pre> <p>Description:</p> <p>Inform a client that its request to change modes has been refused.</p> <p>Command: CRC Payload:</p> <pre><code>{\n   frame number: uint32\n   hash: uint32\n}\n</code></pre> <p>Description:</p> <p>Informs the peer of the correct CRC hash for the specified frame. If the receiver's hash doesn't match, they should send a REQUEST_SAVESTATE command.</p> <p>Command: REQUEST_SAVESTATE Payload: None Description:     Requests that the peer send a savestate.</p> <p>Command: LOAD_SAVESTATE Payload:</p> <pre><code>{\n   frame number: uint32\n   uncompressed size: uint32\n   serialized save state: blob (variable size)\n}\n</code></pre> <p>Description:</p> <p>Cause the other side to load a savestate, notionally one which the sending side has also loaded. If both sides support zlib compression, the serialized state is zlib compressed. Otherwise it is uncompressed.</p> <p>Command: PAUSE Payload:</p> <pre><code>{\n   nickname: char[32]\n}\n</code></pre> <p>Description:</p> <p>Indicates that the core is paused. The receiving peer should also pause.  The server should pass it on, using the known correct name rather than the provided name.</p> <p>Command: RESUME Payload: None Description:</p> <p>Indicates that the core is no longer paused.</p> <p>Command: STALL Payload:</p> <pre><code>{\n   frames: uint32\n}\n</code></pre> <p>Description:</p> <p>Request that a client stall for the given number of frames.</p> <p>Command: RESET Payload:</p> <pre><code>{\n   frame number: uint32\n}\n</code></pre> <p>Description:</p> <p>Indicate that the core was reset at the beginning of the given frame.</p> <p>Command: CHEATS Unused</p> <p>Command: FLIP_PLAYERS Payload:</p> <pre><code>{\n   frame number: uint32\n}\n</code></pre> <p>Description:</p> <p>Flip players at the requested frame.</p> <p>Command: CFG Unused</p> <p>Command: CFG_ACK Unused</p>"},{"location":"development/retroarch/network-control-interface/","title":"RetroArch Network Control Interface","text":""},{"location":"development/retroarch/network-control-interface/#purpose","title":"Purpose","text":"<p>Network Commands allow the control of certain parts of RetroArch over UDP.</p>"},{"location":"development/retroarch/network-control-interface/#enabling","title":"Enabling","text":"<p>Enable network commands in the settings menu, or ensure that <code>network_cmd_enable = \"true\"</code> is set in retroarch.cfg. RetroArch will listen on port 55355 by default.</p>"},{"location":"development/retroarch/network-control-interface/#sending-commands","title":"Sending commands","text":"<p>On Linux, network commands may be sent from the command line like so:</p> <pre><code>echo -n \"QUIT\" | nc -u -w1 127.0.0.1 55355\n</code></pre>"},{"location":"development/retroarch/network-control-interface/#commands","title":"Commands","text":"<p>The following commands are supported (as of Jun 11 2024): <pre><code>VERSION\nGET_STATUS\nGET_CONFIG_PARAM &lt;param name&gt;\nSHOW_MESG\n\nSET_SHADER &lt;shader path&gt;\n\nREAD_CORE_MEMORY &lt;address&gt; &lt;number of bytes&gt;\nWRITE_CORE_MEMORY &lt;address&gt; &lt;byte1&gt; &lt;byte2&gt; ...\n\nLOAD_STATE_SLOT &lt;slot number&gt;\nPLAY_REPLAY_SLOT &lt;slot number&gt;\n\nMENU_TOGGLE\nQUIT\nCLOSE_CONTENT\nRESET\n\nFAST_FORWARD\nFAST_FORWARD_HOLD\nSLOWMOTION\nSLOWMOTION_HOLD\nREWIND\nPAUSE_TOGGLE\nFRAMEADVANCE\n\nMUTE\nVOLUME_UP\nVOLUME_DOWN\n\nLOAD_STATE\nSAVE_STATE\nSTATE_SLOT_PLUS\nSTATE_SLOT_MINUS\n\nPLAY_REPLAY\nRECORD_REPLAY\nHALT_REPLAY\nREPLAY_SLOT_PLUS\nREPLAY_SLOT_MINUS\n\nDISK_EJECT_TOGGLE\nDISK_NEXT\nDISK_PREV\n\nSHADER_TOGGLE\nSHADER_NEXT\nSHADER_PREV\n\nCHEAT_TOGGLE\nCHEAT_INDEX_PLUS\nCHEAT_INDEX_MINUS\n\nSCREENSHOT\nRECORDING_TOGGLE\nSTREAMING_TOGGLE\n\nGRAB_MOUSE_TOGGLE\nGAME_FOCUS_TOGGLE\nFULLSCREEN_TOGGLE\nUI_COMPANION_TOGGLE\n\nVRR_RUNLOOP_TOGGLE\nRUNAHEAD_TOGGLE\nPREEMPT_TOGGLE\nFPS_TOGGLE\nSTATISTICS_TOGGLE\nAI_SERVICE\n\nNETPLAY_PING_TOGGLE\nNETPLAY_HOST_TOGGLE\nNEPLAY_GAME_WATCH\nNETPLAY_PLAYER_CHAT\nNETPLAY_FADE_CHAT_TOGGLE\n\nMENU_UP\nMENU_DOWN\nMENU_LEFT\nMENU_RIGHT\nMENU_A\nMENU_B\n\nOVERLAY_NEXT\nOSK\n</code></pre></p>"},{"location":"development/retroarch/new-menu-options/","title":"Adding a RetroArch menu option","text":"<p>The RetroArch menu system is a bit complex as no UI framework is used for implementing it, due to extreme portability reasons. This guide outlines adding one setting to RetroArch global configuration and the corresponding menu entry, but you may encounter special menus or more complex settings. Try to add the new bits to places where they can be logically found.</p>"},{"location":"development/retroarch/new-menu-options/#files-you-need-to-change","title":"Files you need to change","text":"<ul> <li><code>msg_hash_us.h</code></li> <li><code>msg_hash_lbl.h</code></li> <li><code>msg_hash.h</code></li> <li><code>menu_cbs_sublabel.c</code></li> <li><code>menu_setting.c</code></li> <li><code>menu_displaylist.c</code></li> <li><code>configuration.c</code></li> <li><code>configuration.h</code></li> <li><code>config.def.h</code></li> <li><code>ui/drivers/qt/qt_options.cpp</code></li> </ul>"},{"location":"development/retroarch/new-menu-options/#creating-the-config-variable","title":"Creating the config variable","text":"<p>For this example the variable will be a boolean option for showing messages about failed autoconfig. You can also view the pull request here.</p> <ol> <li>Open <code>config.def.h</code></li> <li>Add <code>#define DEFAULT_NOTIFICATION_SHOW_AUTOCONFIG_FAILS true</code> to provide a generic default for the option. If needed, use compiler switches for different defaults on different platforms.</li> <li>Open <code>configuration.h</code></li> <li>There are sections for each variable type(string, float, int, uint and bool) go to <code>bools</code> and add <code>bool notification_show_autoconfig_fails;</code></li> <li>Open <code>configuration.c</code></li> <li>Add <code>SETTING_BOOL(\"notification_show_autoconfig_fails\", &amp;settings-&gt;bools.notification_show_autoconfig_fails, true, DEFAULT_NOTIFICATION_SHOW_AUTOCONFIG_FAILS, false);</code> to <code>populate_settings_bool</code>.</li> </ol> <p>The variable is now part of global RetroArch settings, will be saved/loaded from configuration file and can be used from RetroArch code, but the menu still doesn't know it exists.</p>"},{"location":"development/retroarch/new-menu-options/#defining-menu-labels-and-messages","title":"Defining menu labels and messages","text":"<p>Time to define the labels for identifying and displaying the new setting.</p> <ol> <li>Open <code>msg_hash.h</code></li> <li>Add <code>MENU_LABEL(NOTIFICATION_SHOW_AUTOCONFIG_FAILS)</code> to <code>enum msg_hash_enums</code></li> <li>Open <code>intl/msg_hash_lbl.h</code></li> <li>Add <code>MSG_HASH( MENU_ENUM_LABEL_NOTIFICATION_SHOW_AUTOCONFIG_FAILS, \"notification_show_autoconfig_fails\")</code> in the <code>MENU_ENUM_LABEL_</code> section. This identifier may appear in logs, but not in the menu.</li> <li>Open <code>intl/msg_hash_us.h</code></li> <li>Add <code>MSG_HASH( MENU_ENUM_LABEL_VALUE_NOTIFICATION_SHOW_AUTOCONFIG_FAILS, \"Input (Autoconfig) Failure Notifications\")</code>  in the <code>MENU_ENUM_LABEL_VALUE_</code> section. This is what the user and the translators actually see.</li> <li>Add <code>MSG_HASH( MENU_ENUM_SUBLABEL_NOTIFICATION_SHOW_AUTOCONFIG_FAILS, \"Display an on-screen message when input devices could not be configured.\")</code> section. Sublabels are a bit more detailed explanations that appear underneath the menu item.</li> </ol> <p>The option is now defined but the menu has still not been told to display it.</p>"},{"location":"development/retroarch/new-menu-options/#displaying-your-option","title":"Displaying your option","text":"<p>Now the menu has to be told how to display the option.</p> <ol> <li>Open <code>menu/cbs/menu_cbs_sublabel.c</code></li> <li>Add <code>DEFAULT_SUBLABEL_MACRO( action_bind_sublabel_notification_show_autoconfig_fails, MENU_ENUM_SUBLABEL_NOTIFICATION_SHOW_AUTOCONFIG_FAILS)</code> to the block of <code>DEFAULT_SUBLABEL_MACRO</code> functions.</li> <li>Add <code>case MENU_ENUM_LABEL_NOTIFICATION_SHOW_AUTOCONFIG_FAILS: BIND_ACTION_SUBLABEL(cbs, action_bind_sublabel_notification_show_autoconfig_fails); break;</code> to the <code>menu_cbs_init_bind_sublabel</code> function.</li> <li>Open <code>menu/menu_setting.c</code></li> <li>Find your variables section(saving, netplay, video, ...) and add <code>CONFIG_BOOL</code> macro. The options are too numerous to list here, look for a similar example to what you plan to add. This entry controls the related setting, the menu labels, and possible actions. Simple config types already have implemented actions for changing (like toggling the boolean value with left/right), but if something more complex is needed, like a list of predefined values, it will need to be implemented in other menu files.</li> <li>Open <code>menu/menu_displaylist.c</code></li> <li>Find your variables section and add <code>{MENU_ENUM_LABEL_NOTIFICATION_SHOW_AUTOCONFIG_FAILS, PARSE_ONLY_BOOL, false },</code> the position of this command in the list is what determines the order of the menu entries, the first run is at the top of the list.</li> <li>Open <code>ui/drivers/qt/qt_options.cpp</code></li> <li>Find the corresponding menu and add the option, in this case <code>notificationsGroup-&gt;add(MENU_ENUM_LABEL_NOTIFICATION_SHOW_AUTOCONFIG);</code>. This represents the menu item in the desktop menu.</li> </ol>"},{"location":"development/retroarch/new-menu-options/#finishing","title":"Finishing","text":"<p>This guide only introduces the English menu labels. Translations are handled via Crowdin, after the pull request is accepted, new strings will appear for translators. New items wil be shown to users in English until translation is done.</p> <p>There are several possibilities that can be done with the menu system, but most require additional functions. Help text may also be defined (a slightly longer description that can be displayed with Select button). Some of the menu code is dynamic depending on e.g. number of users, those items usually require extra care. Icon assignments are handled in the menu drivers (ozone, xmb, glui).</p>"},{"location":"development/retroarch/new-translations-crowdin/","title":"Helping With RetroArch Translations","text":"<p>As libretro, it is very important for us that RetroArch can be easily understood by everyone. Making multiple languages available in RetroArch will ensure a better understanding of the options and a better experience for more people. Currently, RetroArch is in the process of being translated into over 35 languages. In the pursuit of streamlining the process and making it more accessible for new contributors we decided to utilise the crowdsourced translation service Crowdin<sup>1</sup>.</p>"},{"location":"development/retroarch/new-translations-crowdin/#what-is-crowdin","title":"What is Crowdin?","text":"<p>Crowdin is a closed-source cloud-based localization technology and services company. Its main attraction is an Online Translation Editor, with which texts can be translated and proofread. Crowdin\u2019s free to use for translators and open-source projects, like RetroArch. You can reach the project page of RetroArch by clicking here.</p>"},{"location":"development/retroarch/new-translations-crowdin/#how-to-register-a-new-account-in-crowdin","title":"How to register a new account in Crowdin","text":"<p>You need to create a Crowdin account in order to access the translation features of the site. You can do so by clicking this link or by clicking the \u2018Sign up\u2019 button at the top right of the Crowdin site. Once you have created your Crowdin account, you can start translating.</p> <p> </p>        Figure 1: Click 'Sign up' to register a new account in Crowdin's service."},{"location":"development/retroarch/new-translations-crowdin/#enabling-e-mail-notificationsjoining-a-project","title":"Enabling e-mail notifications/Joining a project","text":"<p>You can add translations and suggestions to the project regardless of whether you join it or not. But if you join the project, Crowdin will notify you via e-mail about any changes and developments regarding the translation efforts (like recently added texts, etc.). You will also have a link to the RetroArch project added to your profile page for quick access. If you want to join the project, just click the \u2018Join\u2019 button at the top right of the project page.</p> <p> </p>        Figure 2: Click 'Join' to follow the project and receive e-mail notifications."},{"location":"development/retroarch/new-translations-crowdin/#basic-instructions","title":"Basic Instructions","text":""},{"location":"development/retroarch/new-translations-crowdin/#how-to-translate-strings","title":"How to translate strings","text":"<p>After selecting the language you want to translate to (you may request additional languages at the <code>#retroarch-translations</code> channel of our Discord<sup>2</sup>), you will be welcomed by the file selection page. At the moment the most important files are msg_hash_us.json, which contains the (options) texts of the RetroArch program, as well as googleplay_us.json and steam_us.json, which contain RetroArch\u2019s Google Store and Steam page descriptions, respectively.</p> <p> </p>        Figure 3: The file selection page will show the amount of work that has been done in the chosen language.     <p>Pick the file that you want to work on and you will be taken to the translation page. This screen can seem overwhelming at first, but don't worry: it's actually a very simple process.</p> <p> </p>        Figure 4: The main translation page. On the left: search &amp; source string selection; middle: translation area; on the right: empty comments section.     <p>On the column located at the left side of your browser you will see a list of strings (a string is a piece of text). They will be marked by either a green check mark, marking strings with approved translations (see 'The final say \u2013 Proofreaders' below), a green dot for translated strings, for which you may add an alternative translation and/or vote on existing ones, or a red dot for as of yet untranslated strings.</p> <p>Click on any string to see them in the middle area. The Source String (the original English text) will be displayed at the top with a unique label, which can be used to search for this particular string, and possibly some context cues, like screenshots, right below it. There you will also find the \u2018Request\u2019 link, which is a shortcut for writing a comment asking for more information about the context. Below that is an area for writing the string\u2019s translation. Once you have finished writing the translation for this string, click on the \u2018Save\u2019 button and your translation will be added to the list of suggested translations for this string right below. That\u2019s it, simple as that.</p> <p>In the very few cases where the source string can be kept as-is, you can click the \u2018Copy Source\u2019 button  to do so.</p> <p>In the string list (on the left side of the screen) some strings have a balloon icon . This icon shows that the string has comments written by other translators and developers. Comments may include interesting and/or important information that could help you decide on how best to translate a specific string. You can also write comments in case you have questions or additional information regarding any particular string.</p> <p>Please make sure that any comment you write is in English, as that is the official project language and the comments are visible to everyone. Comments will be displayed at Crowdin\u2019s right column. In case there are no comments being displayed there, make sure that the left-most button of that column is active.</p> <p> </p>        Figure 5: The right-side column will display any available comments if its left tab is active."},{"location":"development/retroarch/new-translations-crowdin/#machine-translation-translation-memory-and-other-languages","title":"Machine Translation, Translation Memory and Other Languages","text":"<p>Below the suggested translations in your language you will see two sections: \u201cTM and MT suggestions\u201d and \u201cOther Languages\u201d.</p> <p> </p>        Figure 6: The suggested translations area, located at the bottom half part of the page. This is the proofreaders view; no voting buttons, only approve &amp; delete. Below that is the TM &amp; MT section.     <p>In the first, translation suggestions from the Translation Memory are displayed: those are derived from the history of any existing translations, both current and old, that appear to be a good match to the current string. These translations were once suggested by translators and can serve either as a convenient way to copy an existing translation or as a base/inspiration for your own.</p> <p>In addition to that there\u2019s Machine Translations, provided by Crowdin Translate or Microsoft Translate. These are similar to what you\u2019d expect from Google Translate: translations generated by an algorithm, without taking any context into account. We strongly suggest that you use Machine Translations with caution, as they tend to fail at translating more exotic words &amp; phrases and to be grammatically faulty. Apart from that, they can be a useful source of inspiration for your own translations.</p> <p>Lastly, in the Other Languages section you will find translations from, well, other languages. If you know additional languages or your language\u2019s way of writing is close to another one, you can use these translations as a reference and additional source of context.</p> <p> </p>        Figure 7: The Other Languages section is located right below the \"TM and MT translations\" area. The green check marks on the left side point out approved translations."},{"location":"development/retroarch/new-translations-crowdin/#deciding-the-best-translation-voting","title":"Deciding the best translation \u2013 Voting","text":"<p>Since multiple translations can be suggested for each source string and language, but obviously only one can ultimately be displayed to the users, we need to somehow decide which one to pick. Thankfully, Crowdin does most of the work for us: first, all translations are ordered by their age, newest to oldest; and second, and more importantly, Crowdin utilises a voting system to allow translators to up-vote translations they like and down-vote lacklustre/flawed ones.</p> <p>Voting is very simple:  At the bottom half of the middle section of the translation page you\u2019ll find a list of suggested translations. To the right of each suggestion are a couple buttons which can be used to add a positive or negative vote, either elevating the translations priority or decreasing it, respectively. Those votes can be un-/redone at any time, so no worries if you should change your mind later.</p>"},{"location":"development/retroarch/new-translations-crowdin/#the-final-say-proofreaders","title":"The final say \u2013 Proofreaders","text":"<p>But even with a voting system in place, at some point we would probably want to just decide on an official translation, which will be chosen regardless of the votes. That\u2019s where proofreaders come into play.</p> <p>First things first: in order to become a proofreader, translators will need additional authorization by RetroArch\u2019s translation managers. We suggest you contact us at the <code>#retroarch-translations</code> channel, located in RetroArch\u2019s Discord server<sup>2</sup>, in order to discuss this authorization.</p> <p>As a proofreader, you don\u2019t get to vote on the translations any more. Instead, if you find a translation to be suitable and free of errors you can click on the  button to approve it. Approving a translation makes it the \u2018default\u2019 and elevates it above all others. Only one translation can be approved at a time for each source string and language. Translators can still vote on it, though, and it would be wise to rethink one's choice if the votes demand it.</p> <p>In addition to approving translations, proofreaders also may delete any suggested translation, not just their own. It should be easy to see why additional authorization is needed for this position.</p>"},{"location":"development/retroarch/new-translations-crowdin/#seeing-results-in-the-app","title":"Seeing results in the app","text":"<p>For languages already included in RetroArch the translations are updated daily for the main app and weekly every Friday for cores. Other languages will need to be incorporated into the code of RetroArch and the cores. Once at least 15% of the <code>msg_hash_us.h</code> file is translated, the Crowdin managers will start work on including this language in the app. If you'd like to take matters in your own hands, you can find instructions here.</p>"},{"location":"development/retroarch/new-translations-crowdin/#advanced-instructions","title":"Advanced Instructions","text":""},{"location":"development/retroarch/new-translations-crowdin/#what-are-things-like-n-or-d","title":"What are things like \\n or %d?","text":"<p>Since RetroArch and libretro are C/C++ projects, the strings will sometimes contain 'special (sequences of) characters' used in code. Some people like to call them control codes, variables, etc., but the exact name is not important for translation purposes. Here are some of the most common examples:</p> <p> </p>        Figure 8: Example for the line break character \\n; this is text for the 3DS menu, which has very short lines.     <ul> <li>\\n is a line break/new line character: it marks the end of the previous &amp; the beginning of a new line. Basically, it's like hitting the Enter button, but for programmers. Only used either for formatting/readability (use/remove them at your own discretion), or when line length is limited (use more or fewer than in the source string, as required; please pay attention to comments on that matter!).</li> <li>A percentage sign (%) followed directly by one (rarely more) lowercase letter(s) (for example: %d, %ld, %u, %lu, %f, %lf, %s...), or sometimes even a number, is usually a placeholder. They will be replaced in the code with something else: numbers, other texts (usually names/objects not requiring translation)... You may move them around the text, but you must use all of them, and in the same order, or it could result in an error in RetroArch and nobody wants that.</li> </ul> <p> </p>        Figure 9: Example for placeholders; in this case two text placeholders are used (%s -&gt; string).     <p>This is not a complete list \u2014 there are quite a few more. But don't worry: in Crowdin these special elements are marked accordingly, and you will receive reminders should you forget to use them in your translations. And always remember: if there is something unclear about a source text, just ask about it in a comment on Crowdin or on Discord<sup>2</sup>!</p> <p> </p>        Figure 10: A special placeholder for text. Don't worry about it's exact purpose, just remember that there exist many exceptions not explicitly listed in this section."},{"location":"development/retroarch/new-translations-crowdin/#how-to-check-the-translations-of-other-strings","title":"How to check the translations of other strings","text":"<p>The best way to check for other translations, without having to leave the current string you are editing, is by using the middle button of the bar to the right of your screen. Here you can type any word to search through your language's Translation Memory (TM). The TM not only contains automatic translations of the strings, but also previously accepted/approved translations. Make sure you check the date of the text you want to use as a reference.</p> <p> </p>        Figure 11: You can find the Translation Memory on the middle tab of the right panel.     <p> </p>        Figure 12: The TM will show you source texts containing your search term and their current translation."},{"location":"development/retroarch/new-translations-crowdin/#how-to-find-previous-translations-of-wordsphrases","title":"How to find previous translations of words/phrases","text":"<p>In the \u2018Source String\u2019 area you\u2019ll find some words that are underlined. These are words that contain references to existing translations. Hover your mouse over these words to see the current translation references. As of the writing of this document, there are two types of references:</p> <ul> <li>Glossary terms: These terms have been selected/translated by other members of the translation team (or other language teams, depending on the case) and should be used as much as possible. If you'd like to change an existing glossary term translation, please talk about it with any active translators of your language first. If your language currently does not have translators, but its progress is very high, do not change the existing terms on your own. Please contact other people on e.g. Discord<sup>2</sup> and try to reach a consensus.</li> <li>Previous translations: Crowdin will routinely check for repeated words and show what it thinks is a good translation based on previous input. These suggestions are marked with \"Previously translated as:\". This system is not perfect and should not be entirely trusted.</li> </ul> <p> </p>        Figure 13: A term with a glossary translation.     <p> </p>        Figure 14: A term with automatic translation suggestions based on previous input."},{"location":"development/retroarch/new-translations-crowdin/#adding-translations-to-the-glossary","title":"Adding translations to the glossary","text":"<p>If your language has one or more active translators, please refrain from changing translated glossary terms of your language unless you have previously discussed it. It's not fair to come around changing things without a proper debate.</p> <p>If you want to add a localized equivalent to an existing English term, you can do the following:</p> <ol> <li>Click on the right icon on the bar to the right of your screen.</li> <li>If the term is not being used by the Source String you are at this moment, use the Search function of this bar.</li> <li>Click on the Edit button under the term.</li> <li>The Edit Term window will appear. Below the name of your language, add your desired translation at the Term area.</li> <li>You can also add a localized description under the Term area. Use it to add details/more information about the term and what it is referring to, etc. Context is key.</li> <li>Then click on the Save button.</li> </ol> <p> </p>        Figure 15: You can find the Glossary Terms on the the right tab of the right panel.     <p> </p>        Figure 16: The Edit Term window.     <p>A word of warning: do not change the source language's \"Part of speech\" section. Some terms have the option \"Not selected\" picked on purpose because Crowdin, sometimes, will not mark words as containing a Glossary term. For those in the know, Crowdin seems to have a syntax analysis function enabled for English, but it's far from perfect in its current state.</p>"},{"location":"development/retroarch/new-translations-crowdin/#only-for-veteran-users-creating-new-terms-in-the-glossary","title":"Only for veteran users: Creating new terms in the glossary","text":"<p>First and foremost, in its current state, the English words in the glossary should cover the entire RetroArch translation. Unless you ABSOLUTELY need it, please refrain from creating new terms.</p> <p>IMPORTANT: search for the term you'd like to create first to avoid duplicates.</p> <p>If you have to add a new term to the Glossary, and it's absolutely necessary, follow these instructions:</p> <ol> <li>Open the Glossary Terms as before and click on the icon that's to the left of the search bar, the one that has a plus (+) icon.</li> <li>The Add Term window will appear. Go to the Term text box in the English section and write the English words that you want to classify with a term.<ol> <li>Alternatively, mark a term in a source string by selecting it with the mouse; a context menu should pop up. Click on \u201cCreate Term\u201d &amp; the Add Term window will open, with the selected term already filled in.</li> </ol> </li> <li>Add a description in English if possible. This will help translators of other languages understand the exact meaning of the term. Context is key.</li> <li>Now go to the section that is below your language's name. Add your translation at the Term area.</li> <li>You can also add a localized description under this Term area. Use it to add details/more information about the term and what it is referring to, etc. Once again, context is key.</li> </ol> <p> </p>        Figure 17: To create a new term, click on the button highlighted in yellow.     <p> </p>        Figure 18: The Add Term window differs little from the Edit Term window.     <ol> <li> <p>https://crowdin.com/ - RetroArch and libretro are not affiliated in any way with Crowdin.\u00a0\u21a9</p> </li> <li> <p>The official RetroArch Discord server: https://ra-link.web.app/discord \u21a9\u21a9\u21a9\u21a9</p> </li> </ol>"},{"location":"development/retroarch/new-translations/","title":"Adding New Languages to RetroArch","text":"<p>While translation is handled via the Crowdin<sup>1</sup> platform (more here), RetroArch's code must be adjusted to display new languages.</p>"},{"location":"development/retroarch/new-translations/#files-to-change","title":"Files to change","text":"<ul> <li><code>msg_hash.c</code></li> <li><code>msg_hash.h</code></li> <li><code>retroarch.c</code></li> <li><code>translation_defines.h</code></li> <li><code>intl/msg_hash_us.h</code></li> <li><code>menu/menu_setting.c</code></li> <li><code>tasks/task_translation.c</code></li> <li><code>libretro-common/include/libretro.h</code></li> </ul> <p>Every new language must first be added to the project on Crowdin. This will ensure that a corresponding <code>intl/msg_hash_xx.h</code> file is created. Requests are accepted at the <code>#retroarch-translations</code> channel of the RetroArch Discord<sup>2</sup>.</p>"},{"location":"development/retroarch/new-translations/#main-instructions","title":"Main Instructions","text":"<p>To add a language with the English name <code>XXXXX</code> and two-letter code <code>xx</code> (be sure to use the same one as in the corresponding <code>intl/msg_hash_xx.h</code> file) follow these steps:</p> <ol> <li>Open <code>libretro-common/include/libretro.h</code>.<ol> <li>Add a <code>RETRO_LANGUAGE_XXXXX</code> item to the <code>retro_language</code> enum just above <code>RETRO_LANGUAGE_LAST</code>, using the next available integer value. <p>Do not rearrange the elements of this list! This would break the language association for the cores!</p> </li> </ol> </li> <li>Open <code>msg_hash.h</code>.<ol> <li>Check if a <code>MENU_ENUM_LABEL_VALUE_LANG_XXXXX</code> item for your language is present in the <code>msg_hash_enums</code> enum; if not, add it.</li> </ol> </li> <li>Open <code>msg_hash.c</code>.<ol> <li>Add the following block inside the <code>get_user_language_iso639_1(bool limit)</code> function: <pre><code>case RETRO_LANGUAGE_XXXXX:\n   return \"xx\";\n</code></pre></li> <li>Add the following block inside the <code>msg_hash_to_str(enum msg_hash_enums msg)</code> function: <pre><code>case RETRO_LANGUAGE_XXXXX:\n   ret = msg_hash_to_str_xx(msg);\n   break;\n</code></pre></li> <li>Add a new static function: <pre><code>static const char *msg_hash_to_str_xx(enum msg_hash_enums msg)\n{\n   switch (msg)\n   {\n#include \"intl/msg_hash_xx.h\"\n      default:\n         break;\n   }\n\n   return \"null\";\n}\n</code></pre></li> </ol> </li> <li>Decide if <code>intl/msg_hash_xx.h</code> should use UTF-8 + BOM encoding. See the section below.</li> <li>Open <code>intl/msg_hash_us.h</code>.<ol> <li>Check if the following block is present, where <code>Yyyyy</code> is the native name of the language and if not, add it: <pre><code>MSG_HASH(\n   MENU_ENUM_LABEL_VALUE_LANG_XXXXX,\n   \"Xxxxx - Yyyyy\"\n   )\n</code></pre></li> </ol> </li> <li>Open <code>menu/menu_setting.c</code>.<ol> <li>Add the following assignment to the <code>setting_get_string_representation_uint_user_language()</code> function, before <code>if (*msg_hash_get_uint(MSG_HASH_USER_LANGUAGE) == RETRO_LANGUAGE_ENGLISH)</code> statement: <pre><code>LANG_DATA(XXXXX)\n</code></pre></li> <li>Add the following block inside the <code>setting_get_string_representation_uint_ai_service_lang()</code> function: <pre><code>case TRANSLATION_LANG_XX:\n   enum_idx = MENU_ENUM_LABEL_VALUE_LANG_XXXXX;\n   break;\n</code></pre></li> </ol> </li> <li>Open <code>retroarch.c</code>.<ol> <li>Add your language to <code>enum retro_language retroarch_get_language_from_iso(const char *iso639)</code>: <pre><code>{\"xx\", RETRO_LANGUAGE_XXXXX},\n</code></pre></li> </ol> </li> <li>Open <code>tasks/task_translation.c</code>.<ol> <li>Add the following block inside the <code>ai_service_get_str(enum translation_lang id)</code> function: <pre><code>case TRANSLATION_LANG_XX:\n   return \"xx\";\n</code></pre></li> </ol> </li> <li>Open <code>translation_defines.h</code>.<ol> <li>Add your language to the <code>translation_lang</code> enum between <code>TRANSLATION_LANG_DONT_CARE</code> and <code>TRANSLATION_LANG_LAST</code>items: <pre><code>TRANSLATION_LANG_XX,    /* Xxxxx */\n</code></pre></li> </ol> </li> </ol>"},{"location":"development/retroarch/new-translations/#optional-adjustments","title":"Optional Adjustments","text":""},{"location":"development/retroarch/new-translations/#generating-custom-font-for-rgui","title":"Generating custom font for RGUI","text":"<p>The tutorial down below is taken from trngaje's page.</p> <p>First of all, I will explain the basic font, English font. It was 5x10 in size at first.</p> <p>If you analyze the first letter of !\u2026 hexadecimal value</p> <p><code>0x80, 0x10, 0x42, 0x08, 0x20, 0x00, 0x00,</code></p> <p>Convert to Binary</p> <pre><code>1000 0000\n0001 0000\n0100 0010\n0000 1000\n0010 0000\n0000 0000\n</code></pre> <p>Place it in a little endian and cut it into 5 pixels</p> <pre><code>00000\n00100\n00100\n00100\n00100\n00100\n00000\n00100\n00000000\n</code></pre> <p>The source code in retroarch for this is as follows.</p> <pre><code>unsigned font_pixel = x + y * FONT_WIDTH;\nuint8_t rem         = 1 &lt;&lt; (font_pixel &amp; 7);\nunsigned offset     = font_pixel &gt;&gt; 3;\nuint8_t col         = (bitmap_bin[FONT_OFFSET(letter) + offset] &amp; rem) ? 0xff : 0;\n</code></pre> <p>The font was recreated by IlDucci\u2019s request to improve the second Cyrillic language display error. It was 6x10 in size at first.</p> <p></p> <p>Each letter is separated by 16 pixels, of which only 6x10 is a meaningful area.</p> <p>For this purpose, I created a conversion program using the SDL function.</p> <p>It can be generated simply as follows.</p> <pre><code>./png2c bitmap_cyrillic.png\n</code></pre> <p>Please refer to the location below for the code to build.</p> <p>https://github.com/trngaje/png2c</p> <p>You can download prebuilt images for Windows from the path below. https://github.com/trngaje/png2c/releases/tag/windows_64bit_png2c_220924</p> <p>unzip windows_64bit_png2c_prebuild_220924.zip</p> <pre><code>png2c.exe bitmap_cyrillic.png\n</code></pre>"},{"location":"development/retroarch/new-translations/#rgui-compatibility","title":"RGUI Compatibility","text":"<p>To make the new language usable with the RGUI menu driver:</p> <ol> <li>Open <code>menu/drivers/rgui.c</code>.</li> <li>Navigate to the <code>rgui_fonts_init(rgui_t *rgui)</code> function.</li> <li>Add <code>case RETRO_LANGUAGE_XXXXX:</code> to<ol> <li>the extended ASCII section if the new language uses the Basic Latin/ASCII + Latin-1 Supplement range of UTF-8 or</li> <li>any other present language the new language shares the alphabet with (like Russian).</li> </ol> </li> <li>If a new language was added, it is important to compile RetroArch with the changes and ensure the new language works correctly with RGUI.</li> <li>If your language uses a different range of symbols, an RGUI compatible font must be added first. This is an extensive process, which is outside the scope of this article.</li> </ol>"},{"location":"development/retroarch/new-translations/#narrator-support","title":"Narrator support","text":"<ol> <li>For Mac. (compatible with say)<ol> <li>Open <code>frontend/drivers/platform_darwin.m</code>.</li> <li>Go to <code>accessibility_mac_language_code(const char* language)</code> function. Check if the following block is present, where <code>Yyyyy</code> is the voice name for the language and if not, add it before <code>return \"\"</code>: <pre><code>else if (string_is_equal(language,\"xx\"))\n   return \"Yyyyy\";\n</code></pre></li> </ol> </li> <li>For Linux. (compatible with espeak)<ol> <li>Open <code>frontend/drivers/platform_unix.c</code>.</li> <li>Go to <code>accessibility_unix_language_code(const char* language)</code> function. Check if the following block is present, where <code>yyy</code> is the Identifier for the language and if not, add it before <code>/* default voice as fallback */</code>: <pre><code>else if (string_is_equal(language, \"xx\"))\n   return \"yyy\";\n</code></pre></li> </ol> </li> <li>For Windows. (OS compatiable)<ol> <li>Open <code>frontend/drivers/platform_win32.c</code>.</li> <li>Go to <code>accessibility_win_language_code(const char* language)</code> function. Check if the following block is present, where <code>Yyyyy</code> is the voice name for the language and if not, add it before <code>return \"\"</code>: <pre><code>else if (string_is_equal(language,\"xx\"))\n   return \"Microsoft Yyyyy Desktop\";\n</code></pre></li> </ol> </li> </ol>"},{"location":"development/retroarch/new-translations/#encoding-of-translation-files","title":"Encoding of translation files","text":"<p>Translation files (<code>intl/msg_hash_xx.h</code>) in general must be UTF-8 encoded. For some languages, these files need to have a \"UTF-8 Unicode (with BOM)\" encoding. This can be done using the 'Encoding' option of editors like Notepad++ and Notepadqq. AFAIK, this is because of a requirement of the MSVC compilers for the Windows platform. Examples of this as of now are:</p> <ul> <li><code>msg_hash_ar.c</code></li> <li><code>msg_hash_chs.h</code></li> <li><code>msg_hash_cht.h</code></li> <li><code>msg_hash_ja.h</code></li> <li><code>msg_hash_ko.h</code></li> <li><code>msg_hash_pl.h</code></li> <li><code>msg_hash_ru.h</code></li> <li><code>msg_hash_vn.h</code></li> </ul> <p>Be careful when creating and editing your new translation files, as some text editors do strip the BOM without warning.</p>"},{"location":"development/retroarch/new-translations/#examples","title":"Examples","text":""},{"location":"development/retroarch/new-translations/#adding-languages-to-retroarch","title":"Adding languages to RetroArch","text":"<ul> <li> <p>Arabic:</p> <ul> <li>add basic support for arabic.</li> <li>add byte-order-marker to msg_hash_ar.*</li> <li>Add \"Arabic\" to intl/msg_hash_us.h missed in 45580cb.</li> </ul> </li> <li> <p>Indonesian, Swedish and Ukrainian (+RGUI):</p> <ul> <li>Add Indonesian, Swedish and Ukrainian language options</li> </ul> </li> <li> <p>List of merges related to adding languages</p> </li> </ul>"},{"location":"development/retroarch/new-translations/#translation","title":"Translation","text":"<p>If you speak the target language <code>xx</code> then you could start translating on Crowdin. Instructions and recommended reading for that can be found here.</p> <p>Please do not change the <code>intl/msg_hash_xx.h</code> files directly!</p> <p>Starting from early 2023, the help texts that were located in <code>intl/msg_hash_xx.c</code> files are also included on Crowdin. If you have translation efforts in <code>msg_hash_xx.c</code> file from an earlier date, you can copy them to Crowdin, with following caveats: * Individual line breaks (\\n) at the end of each line are not required, current menu drivers will break lines automatically. Line break may be used as a paragraph separator, if text is long. * Make sure translations still matches the current source text, as several of those were updated during the refactor. * Do not exceed maximum line length (500 characters). * The Crowdin translations for these strings will only take effect when the definition is removed from <code>intl/msg_hash_xx.c</code>.</p>"},{"location":"development/retroarch/new-translations/#see-also","title":"See also","text":"<ul> <li>Adding a RetroArch menu option</li> <li>Helping with RetroArch translations</li> </ul> <ol> <li> <p>https://crowdin.com/ - RetroArch and libretro are not affiliated in any way with Crowdin.\u00a0\u21a9</p> </li> <li> <p>The official RetroArch Discord server: https://ra-link.web.app/discord \u21a9</p> </li> </ol>"},{"location":"development/retroarch/compilation/3ds/","title":"Nintendo 3DS Compilation / Development Guide","text":""},{"location":"development/retroarch/compilation/3ds/#environment-configuration","title":"Environment configuration","text":"<p>You need the homebrew Nintendo 3DS SDK libctru and DevkitARM toolchain installed. If you are running windows you will need to install MSYS2 and point it to your devkitARM installation like this:</p> <pre><code>Put these lines in RetroArch3DSEnv.sh\nexport DEVKITPRO=\"/c/devkitPro\"\nexport DEVKITARM=\"$DEVKITPRO/devkitARM\"\nexport CTRULIB=\"$DEVKITPRO/libctru\"\nexport CTRBANNERTOOL=\"/c/Users/Emily/Desktop/RetroArchDev/CompatFiles/bannertool.exe\"\nbash\n</code></pre> <p>The custom bannertool is needed if you want to compile .cia builds due to a broken wav encoder in the windows version of bannertool included with RetroArch. Before building RetroArch you will have to load MSYS2 and launch <code>RetroArch3DSEnv.sh</code>, then proceed as you would for linux.</p> <p>The working bannertool can be compiled from the sources here using MSYS2.</p>"},{"location":"development/retroarch/compilation/3ds/#retroarch-compilation","title":"RetroArch Compilation","text":""},{"location":"development/retroarch/compilation/3ds/#fetching-retroarch","title":"Fetching RetroArch","text":"<p>Clone RetroArch's repository from GitHub</p> <pre><code>git clone https://github.com/libretro/RetroArch.git retroarch\ncd retroarch\n</code></pre> <p>For subsequent builds you only need to pull the changes from the repo</p> <pre><code>cd retroarch\ngit pull\n</code></pre> <p>To update your local copy from the repository run git pull</p>"},{"location":"development/retroarch/compilation/3ds/#building-retroarch-separately","title":"Building RetroArch separately","text":"<p>First, you need to compile Salamander. To compile Salamander (for 3DS) run:</p> <pre><code>make -f Makefile.ctr.salamander\n</code></pre> <p>Second, to compile RetroArch (for 3DS) run:</p> <pre><code>make -f Makefile.ctr\n</code></pre> <p>Note</p> <p>RetroArch on 3DS is statically linked. With statically linked RetroArch, each executable is a separate libretro core instead of the core being separately loaded from a single executable. A pre-existing libretro library needs to be present in the root directory in order to link RetroArch 3DS. This file needs to be called 'libretro_ctr.a'.</p> <p>After a few seconds/minutes you should be able to find a retroarch_ctr.elf and retroarch_ctr.dol file under that directory.</p>"},{"location":"development/retroarch/compilation/3ds/#building-retroarch-in-bulk","title":"Building RetroArch in bulk","text":"<p>Instead of building each core one by one, you can build all cores as a batch task. Run from the main 'retroarch' directory:</p> <pre><code>cd dist-scripts\n</code></pre> <p>Note</p> <p>Make sure that all the libretro cores that you want to compile are inside the 'dist-scripts' directory.</p> <p>Once inside this directory, run :</p> <pre><code>./dist-cores.sh ctr\n</code></pre> <p>This process will also automate the packaging process for you.</p>"},{"location":"development/retroarch/compilation/3ds/#packaging-retroarch","title":"Packaging RetroArch","text":""},{"location":"development/retroarch/compilation/3ds/#additional-tips","title":"Additional Tips:","text":""},{"location":"development/retroarch/compilation/3ds/#core-compilation","title":"Core Compilation","text":""},{"location":"development/retroarch/compilation/3ds/#fetching-cores","title":"Fetching Cores","text":"<p>The easiest way to fetch all the cores is to use libretro-super. Run</p> <pre><code>./libretro-fetch.sh\n</code></pre>"},{"location":"development/retroarch/compilation/3ds/#building-cores","title":"Building Cores","text":"<p>The easiest way to build all the cores (for 3DS) is to use libretro-super. Run</p> <pre><code>./libretro-build-ctr.sh\n</code></pre> <p>In case you only want to build one and/or more cores instead of all, you can specify the cores you want to build after the first command in no particular order. E.g.:</p> <pre><code>./libretro-build-ctr.sh snes9x2010 fceumm\n</code></pre> <p>Once finished, you can find the libretro cores inside directory <code>dist/ctr</code>.</p>"},{"location":"development/retroarch/compilation/android/","title":"Compiling for Android","text":""},{"location":"development/retroarch/compilation/android/#compiling-from-windows","title":"Compiling from Windows","text":"<p>You need a complete Android development environment, including the Android SDK and Android NDK.</p> <p>Other dependencies:</p> <ul> <li>Cygwin (base settings for Bash scripts)</li> <li>Git</li> </ul>"},{"location":"development/retroarch/compilation/android/#installing-openjdk-or-oracle-jdk","title":"Installing OpenJDK or Oracle JDK","text":""},{"location":"development/retroarch/compilation/android/#installing-cygwin","title":"Installing cygwin","text":"<p>Download the setup tool from the official webpage and install the base distribution.</p>"},{"location":"development/retroarch/compilation/android/#installing-git","title":"Installing git","text":"<p>You can install Windows git or add the cygwin git version from the cygwin installer.</p>"},{"location":"development/retroarch/compilation/android/#next-step-from-here-follow-the-instructions-for-compiling-android-from-linux","title":"Next step: From here, follow the instructions for compiling Android from Linux.","text":""},{"location":"development/retroarch/compilation/android/#compiling-from-linux","title":"Compiling from Linux","text":"<p>You need a complete android development environment ready to develop native apps. That means you have:</p> <ul> <li>Android SDK</li> <li>Android NDK</li> </ul> <p>Use Google to figure out how to install that and make sure the appropriate executables from the above are in your path variable.</p> <p>These instructions have been tested under Linux (Fedora 20 and Ubuntu 18.04). They may also work in windows with cygwin.</p>"},{"location":"development/retroarch/compilation/android/#getting-the-code","title":"Getting the code","text":"<pre><code>git clone https://github.com/libretro/libretro-super.git\ncd libretro-super\n./libretro-fetch.sh\n</code></pre> <p><code>./libretro-fetch.sh</code> can fail on <code>fork()</code> calls, repeat until all are up to date. For <code>./libretro-build-android-mk.sh</code>, some cores may fail to compile (g++ \"Argument list too long\" error).</p>"},{"location":"development/retroarch/compilation/android/#building-the-cores","title":"Building the cores","text":"<p>For the core building portion of this tutorial, you'll need to put at least your NDK dir in the PATH variable for the build script to work. Just for the heck of it, I also like to throw in the tools folder from SDK as well as the build-tools (adjust to your situation):</p> <pre><code>export PATH=/home/boo/Android/Sdk/ndk-bundle/build:/home/boo/Android/Sdk/tools:/home/boo/Android/Sdk/build-tools/28.0.3:$PATH\n</code></pre>"},{"location":"development/retroarch/compilation/android/#run-build-script-read-notes-below-before-running-the-script","title":"Run build script ( read notes below before running the script):","text":"<pre><code>NOCLEAN=1 ./libretro-build-android-mk.sh\n</code></pre> <p>You can omit <code>NOCLEAN=1</code> if you'd like to perform make clean on every core's repo before building each.</p> <p>For a variety of reasons, some of the cores may not be compiled by the script. These reasons can range from: core folder doesn't have a libretro/jni folder setup yet, core's libretro/jni folder is in a place that the script does not expect, core has been recently added to project and has not yet been added to script or you're missing some essential dependencies and the build script failed. Some cores (like snes9x2002) need an older NDK. Some core don't use jni but use make or cmake instead.</p> <p>In the event you are missing a core that you want, you can build it in most cases by going to its subfolder (libretro-corename) and performing this series of commands:</p> <pre><code>#for example\ncd libretro-flycast\n\n#get corename for later\ncorename=$(echo ${PWD##*/}|cut -d \"-\" -f 2)\n\n#now try to find the libretro/jni folder\ncd $(find . -iname \"jni\" -type d | grep --color=NEVER \"libretro/jni\")\n\n#if it exists and you don't get an error, build the core:\nndk-build\n\n#if it succeeds, do this to copy built .so files to dist folder:\nfor arch in \"arm64-v8a\" \"armeabi-v7a\" \"x86\" \"x86_64\"; do if [ -f \"$arch/libretro.so\" ]; then cp -v  $arch/libretro.so $SRC/dist/android/$arch/\"$corename\"_libretro_android.so; else echo \"$arch\" build HAS FAILED!; fi; done\n</code></pre> <p>You may also want to check this repo for a list of dependencies needed to build the cores:</p> <pre><code>https://github.com/libretro/libretro-deps/\n\n#these deps can usually be installed via apt-get install (don't forget to append -dev at the end). for example:\n\nsudo apt-get install libfaac-dev\n</code></pre> <p>more info about core building can be had here:</p> <pre><code>https://github.com/thebunnyrules/docs/blob/master/docs/development/cores/developing-cores.md\n</code></pre>"},{"location":"development/retroarch/compilation/android/#building-retroarch","title":"Building RetroArch","text":""},{"location":"development/retroarch/compilation/android/#prep-work","title":"PREP WORK","text":"<p>The RetroArch repo is fetched into the libretro-super folder by <code>./libretro-fetch.sh</code> above.</p> <p>You first need to fetch the submodules for it.</p> <pre><code>cd retroarch\ngit submodule update --init\n</code></pre> <p>Now go to the project folder:</p> <pre><code>cd pkg/android/phoenix\n</code></pre> <p>Within this folder, edit <code>local.properties</code> to point to the location of your sdk and ndk directories by adding lines that look like this:</p> <pre><code>ndk.dir=/complete/path/to/android-ndk-r20\nsdk.dir=/complete/path/to/Sdk\n</code></pre> <p>Eg. if you have Android Studio, your dirs should be in :</p> <pre><code>ndk.dir=/home/yourUSERNAME/Android/Sdk/ndk-bundle\nsdk.dir=/home/yourUSERNAME/Android/Sdk\n</code></pre> <p>If you want to build a release apk (aka an apk with none of the debug layers), you'll have to self sign it. Make a file called <code>keystore.properties</code> with the following content:</p> <pre><code>storePassword=YOURPASS\nkeyPassword=YOURPASS\nkeyAlias=KEY_ALIAS\nstoreFile=/full/path/to/keystore-file_NO_RELATIVE_PATHS.jks\n</code></pre> <p>Next, generate a keystore file and be sure to put it where <code>keystore.properties</code> says it is:</p> <pre><code>keytool -genkey -alias KEY_ALIS -keyalg RSA -keypass YOURPASS -keystore keystore-file.jks\n</code></pre> <p>Now all the generated release apk will be automatically signed by gradle.</p> <p>Next, copy the cores, assets and overlays to an assets folder you create here:</p> <pre><code>mkdir -p assets/cores\nmkdir assets/overlays\ncp ../../../../dist/android/arm64-v8a/* assets/cores/ #replace arm64-v8a here by the  archetecture of the device you will be using. Google your phone's specs.\ncp -r ../../../../dist/info/ assets/\ncp -r ../../../../retroarch/media/overlays/* assets/overlays/\n</code></pre> <p>Optionally, you may want to include the assets for the front-end (menu icons, fonts, images etc), shader caches, dbs, cheats, etc... These assets can be downloaded at any time during run time via the updater but if you want to bundle them into the build you may do so by downloading bundle.zip / cheats.zip and extracting them to assets folder:</p> <pre><code>    wget https://buildbot.libretro.com/assets/frontend/bundle.zip\n    unzip -n bundle.zip -d assets\n    wget https://buildbot.libretro.com/assets/frontend/cheats.zip\n    mkdir assets/cheats\n    unzip cheats.zip -d assets/cheats\n</code></pre> <p>NOTE ABOUT BUNDLED ASSETS AND CORES</p> <p>I've sometimes noticed a bug where the built apk does not unpack the bundled assets and cores on first install. My workaround was to re-install the apk a second time. On the second install, the assets and cores get unpacked. This is a bug in 1.7.7 and 1.7.8.</p>"},{"location":"development/retroarch/compilation/android/#build","title":"BUILD","text":"<p>Now run gradlew and let it configure and sync itself and download all it's dependencies:</p> <pre><code>./gradlew\n</code></pre> <p>Optionally: You can get a list of available tasks by doing:</p> <pre><code> ./gradlew tasks\n</code></pre> <p>Now, if all went smoothly with config step, you can proceed to build the apk</p> <pre><code> #Builds release variants: Normal, ra32 and aarch64\n ./gradlew assembleRelease\n\n #Build debug variants:\n ./gradlew assembleDebug\n\n #Builds all variants\n./gradlew buildNeeded\n</code></pre> <p>If all goes well, this will spit out an .apk. For example <code>build/outputs/apk/normal/debug/phoenix-normal-debug.apk</code>. Put it on your device with</p> <pre><code>adb install -r build/outputs/apk/normal/debug/phoenix-normal-debug.apk\n</code></pre> <p>You can find all the apks built by gradle with this command (execute from the same dir as gradlew)\"</p> <pre><code>find . -iname \"*.apk\"\n</code></pre> <p>This should give you a list of all the outputted apks.</p>"},{"location":"development/retroarch/compilation/dos/","title":"DOS Compilation / Development Guide","text":""},{"location":"development/retroarch/compilation/dos/#environment-configuration","title":"Environment configuration","text":"<p>This guide will use cross-compilation from Linux to build a DOS executable with the DJGPP toolchain.</p> <p>Most Linux distributions do not include this toolchain, but prebuilt binaries can be obtained here, or if you are using Arch Linux, you can use the AUR package djgpp-gcc to build it easily.</p> <p>DJGPP builds 32-bit programs, which means an 80386 or higher processor is required. 80286 is not supported.</p>"},{"location":"development/retroarch/compilation/dos/#core-support","title":"Core Support","text":"<p>Note</p> <p>RetroArch on DOS is statically linked. With statically linked RetroArch, each executable is a separate libretro core instead of the core being separately loaded from a single executable. A pre-existing libretro library needs to be present in the root of the source directory in order to link RetroArch DOS. This file needs to be called 'libretro.a'.</p>"},{"location":"development/retroarch/compilation/dos/#retroarch-compilation","title":"RetroArch Compilation","text":""},{"location":"development/retroarch/compilation/dos/#fetching-retroarch","title":"Fetching RetroArch","text":"<p>Clone RetroArch's repository from GitHub</p> <pre><code>git clone https://github.com/libretro/RetroArch.git retroarch\ncd retroarch\n</code></pre> <p>For subsequent builds you only need to pull the changes from the repo</p> <pre><code>cd retroarch\ngit pull\n</code></pre>"},{"location":"development/retroarch/compilation/dos/#building-retroarch","title":"Building RetroArch","text":"<p>To compile RetroArch run the following commands inside RetroArch's source tree:</p> <pre><code>CROSS_COMPILE=i686-pc-msdosdjgpp- ./configure --with-libretro=\"-L. -lretro\"\nmake clean\nmake -j4\n</code></pre> <p>Replace the value of <code>CROSS_COMPILE</code> with the prefix of your specific toolchain if necessary.</p> <p>Once finished, you should find <code>retroarch.exe</code> in the current directory, this is the final binary you can run inside DOS. Since older DOS versions do not support long filenames, you may want to rename this file to something shorter.</p> <p>RetroArch for DOS also requires the CWSDPMI server application from the DJGPP distribution, which can be downloaded separately here. On the target system, CWSDPMI.EXE will need to be placed in the same directory as your RetroArch executable for it to run properly.</p> <p>Once you have the DPMI program in place, simply run your RetroArch executable and the DPMI server will be loaded automatically at startup.</p> <p>It is also possible to include the DPMI server inside the main RetroArch executable so that only a single file is needed, but that is outside the scope of this document. See here for more information.</p>"},{"location":"development/retroarch/compilation/gamecube/","title":"Nintendo GameCube Compilation / Development Guide","text":""},{"location":"development/retroarch/compilation/gamecube/#environment-configuration","title":"Environment configuration","text":"<p>You need the homebrew Nintendo GameCube SDK libogc and Devkitpro PPC toolchain installed.</p>"},{"location":"development/retroarch/compilation/gamecube/#retroarch-compilation","title":"RetroArch Compilation","text":""},{"location":"development/retroarch/compilation/gamecube/#fetching-retroarch","title":"Fetching RetroArch","text":"<p>Clone RetroArch's repository from GitHub</p> <pre><code>git clone https://github.com/libretro/RetroArch.git retroarch\ncd retroarch\n</code></pre> <p>For subsequent builds you only need to pull the changes from the repo</p> <pre><code>cd retroarch\ngit pull\n</code></pre> <p>To update your local copy from the repository run git pull</p>"},{"location":"development/retroarch/compilation/gamecube/#building-retroarch-separately","title":"Building RetroArch separately","text":"<p>First, to compile RetroArch (for GameCube) run:</p> <pre><code>make -f Makefile.griffin platform=ngc\n</code></pre> <p>Note</p> <p>RetroArch on GameCube is statically linked. With statically linked RetroArch, each executable is a separate libretro core instead of the core being separately loaded from a single executable. A pre-existing libretro library needs to be present in the root directory in order to link RetroArch GameCube. This file needs to be called 'libretro_ngc.a'.</p> <p>After a few seconds/minutes you should be able to find a retroarch_ngc.elf and retroarch_ngc.dol file under that directory.</p>"},{"location":"development/retroarch/compilation/gamecube/#building-retroarch-in-bulk","title":"Building RetroArch in bulk","text":"<p>Instead of building each core one by one, you can build all cores as a batch task. Run from the main 'retroarch' directory:</p> <pre><code>cd dist-scripts\n</code></pre> <p>Note</p> <p>Make sure that all the libretro cores that you want to compile are inside the 'dist-scripts' directory.</p> <p>Once inside this directory, run :</p> <pre><code>./dist-cores.sh ngc\n</code></pre> <p>This process will also automate the packaging process for you.</p>"},{"location":"development/retroarch/compilation/gamecube/#packaging-retroarch","title":"Packaging RetroArch","text":""},{"location":"development/retroarch/compilation/gamecube/#additional-tips","title":"Additional Tips:","text":""},{"location":"development/retroarch/compilation/gamecube/#core-compilation","title":"Core Compilation","text":""},{"location":"development/retroarch/compilation/gamecube/#fetching-cores","title":"Fetching Cores","text":"<p>The easiest way to fetch all the cores is to use libretro-super. Run</p> <pre><code>./libretro-fetch.sh\n</code></pre>"},{"location":"development/retroarch/compilation/gamecube/#building-cores","title":"Building Cores","text":"<p>The easiest way to build all the cores (for GameCube) is to use libretro-super. Run</p> <pre><code>./libretro-build-ngc.sh\n</code></pre> <p>In case you only want to build one and/or more cores instead of all, you can specify the cores you want to build after the first command in no particular order. E.g.:</p> <pre><code>./libretro-build-ngc.sh snes9x2010 fceumm\n</code></pre> <p>Once finished, you can find the libretro cores inside directory <code>dist/ngc</code>.</p>"},{"location":"development/retroarch/compilation/haiku/","title":"Haiku Compilation / Development Guide","text":"<p>This compilation guide will teach you how to build RetroArch for Haiku.</p> <p>It is more than recommended to keep your Haiku system up to date and use Nightlybuilds with upgraded packages.</p> <p>This video covers a quick demonstration of these subjects;</p> <ol> <li> <p>Environment Configuration</p> </li> <li> <p>Building RetroArch</p> </li> </ol> <p>Be sure to read instructions that are given on this page.</p>"},{"location":"development/retroarch/compilation/haiku/#environment-configuration","title":"Environment configuration","text":"<p>The following software needs to be installed:</p> <ul> <li>Haiku standard development packages (haiku_devel)</li> <li>SDL libraries and development packages (libsdl_devel / libsdl2_devel)</li> <li>X11 libraries and development packages (libx11_devel, libxau_devel, libxext_devel)</li> <li>Mesa libraries and development packages (mesa_devel, glu_devel)</li> <li>Jpeg, PNG, Zlib libraries and development packages (jpeg_devel, libpng16_devel, zlib_devel)</li> </ul> <p>Optional dependencies:</p> <ul> <li>libxml2_devel - For XML shaders and cheat support.</li> <li>freetype_devel - TTF font rendering</li> <li>ffmpeg_devel - FFmpeg recording</li> </ul>"},{"location":"development/retroarch/compilation/haiku/#retroarch-compilation","title":"RetroArch Compilation","text":""},{"location":"development/retroarch/compilation/haiku/#fetching-retroarch","title":"Fetching RetroArch","text":"<p>Clone RetroArch's repository from GitHub</p> <pre><code>git clone https://github.com/libretro/RetroArch.git retroarch\ncd retroarch\n</code></pre> <p>For subsequent builds you only need to pull the changes from the repo</p> <pre><code>cd retroarch\ngit pull\n</code></pre> <p>To update your local copy from the repository run git pull</p>"},{"location":"development/retroarch/compilation/haiku/#building-retroarch","title":"Building RetroArch","text":"<p>Make sure gcc is installed, then run:</p> <pre><code># Build\n./configure --prefix=~/config/non-packaged/ --datarootdir=~/config/non-packaged/data/ --with-man_dir=~/config/non-packaged/documentation/man/\nmake\n# Install\nmake install\n# Run\nretroarch\n</code></pre>"},{"location":"development/retroarch/compilation/haiku/#core-compilation","title":"Core Compilation","text":""},{"location":"development/retroarch/compilation/haiku/#fetching-cores","title":"Fetching Cores","text":"<p>The easiest way to fetch all the cores is to use libretro-super. Run</p> <pre><code>./libretro-fetch.sh\n</code></pre>"},{"location":"development/retroarch/compilation/haiku/#building-cores","title":"Building Cores","text":"<p>The easiest way to build all the cores is to use libretro-super.</p> <p>To build all cores for Haiku, run</p> <pre><code>./libretro-build.sh\n</code></pre> <p>In case you only want to build one and/or more cores instead of all, you can specify the cores you want to build after the first command in no particular order. E.g.:</p> <pre><code>./libretro-build.sh snes9x2010 fceumm\n</code></pre> <p>Once finished, you can find the libretro cores inside directory <code>dist/haiku</code>.</p>"},{"location":"development/retroarch/compilation/ios/","title":"iOS Compilation / Development Guide","text":"<p>The following is a non-developer guide to install RetroArch on non-jailbroken iOS or tvOS devices.</p> <p>The minimum version of iOS supported is iOS 6.0. However, older versions have fewer features and worse core support. Additionally, building for old versions of iOS requires old versions of Xcode, which require old versions of macOS, all of which may be hard to come by.</p> <p>Note</p> <p>If you just want to sideload from an IPA file, then you can find a working build (version 1.21.0) here for tvOS and here for iOS. Instructions for installing the IPA are here.</p> <p>Because iOS requires that all code be signed, iOS does not support installing/updating cores at runtime. Instead, all cores must be built and added to the RetroArch source tree before building RetroArch.</p>"},{"location":"development/retroarch/compilation/ios/#environment-configuration","title":"Environment configuration","text":""},{"location":"development/retroarch/compilation/ios/#xcode","title":"Xcode","text":"<p>The only requirement for building is Xcode, which is only available for macOS. You can get Xcode from the App Store. If you have never used Xcode before, you will need to open the Xcode preferences, and in Accounts, log in with your Apple ID.</p>"},{"location":"development/retroarch/compilation/ios/#sign-in-with-your-apple-id","title":"Sign in with your Apple ID","text":"<ul> <li>Open Xcode Preferences (Xcode -&gt; Preferences)</li> <li>Click the \"Accounts\" tab</li> <li>Hit the \"+\" at the bottom left and choose \"Apple ID\" and sign in with your Apple ID</li> <li>Once you\u2019ve successfully logged in, a new team called \"(Your Name) Personal Team\" with the role \"User\" will appear beneath your Apple ID.</li> </ul>"},{"location":"development/retroarch/compilation/ios/#pair-xcode-with-your-ios-or-tvos-device","title":"Pair Xcode with your iOS or tvOS Device","text":"<p>Connect your iPhone to your computer. For AppleTV, because you cannot connect it directly, follow the instructions in this Apple support article to pair your device in Xcode. When finished, you should see your specific device when you go, in Xcode, to Windows -&gt; Devices &amp; Simulators.</p>"},{"location":"development/retroarch/compilation/ios/#retroarch-apple-deps-optional-but-recommended","title":"retroarch-apple-deps (optional but recommended)","text":"<p>RetroArch optionally will automatically link with supporting libraries (including MoltenVK) that are provided by the retroarch-apple-deps repo. By default Xcode will look for these dependencies in <code>/usr/local/share/retroarch-apple-deps</code>.</p> <p>To get retroarch-apple-deps, run:</p> <pre><code>git clone https://github.com/warmenhoven/retroarch-apple-deps.git retroarch-apple-deps\nsudo ln -s $PWD/retroarch-apple-deps /usr/local/share\n</code></pre>"},{"location":"development/retroarch/compilation/ios/#fetching-the-code","title":"Fetching the code","text":""},{"location":"development/retroarch/compilation/ios/#libretro-super","title":"libretro-super","text":"<p>The easiest way to fetch the source code for RetroArch and all the cores is to use libretro-super. Open Terminal (it's in <code>/Applications/Utilities</code>) and run the following commands:</p> <pre><code>git clone https://github.com/libretro/libretro-super.git libretro-super\ncd libretro-super\n</code></pre> <p>You can run the following command to download the source for RetroArch as well as all of the cores:</p> <pre><code>./libretro-fetch.sh\n</code></pre> <p>Or you can run the following command to download the source for RetroArch only:</p> <pre><code>./libretro-fetch.sh --retroarch\n</code></pre> <p>Or specify just the cores that you want:</p> <pre><code>./libretro-fetch.sh snes9x2010 fceumm\n</code></pre>"},{"location":"development/retroarch/compilation/ios/#retroarch-repo","title":"RetroArch repo","text":"<p>If you choose not to use libretro-super, you can clone RetroArch's repository from GitHub</p> <pre><code>git clone https://github.com/libretro/RetroArch.git retroarch\ncd retroarch\n</code></pre> <p>For subsequent builds you only need to pull the changes from the repo</p> <pre><code>cd retroarch\ngit pull\n</code></pre> <p>To update your local copy from the repository run <code>git pull</code>.</p>"},{"location":"development/retroarch/compilation/ios/#cores","title":"Cores","text":"<p>Emulator cores are needed to use RetroArch as they contain the code that drives the emulation of the system of the game you want to play. All of the cores should have the extension <code>.dylib</code> and be placed in the RetroArch source tree in the directory <code>pkg/apple/iOS/modules</code> (<code>pkg/apple/tvOS/modules</code> for tvOS).</p>"},{"location":"development/retroarch/compilation/ios/#downloading-pre-built-cores","title":"Downloading Pre-Built Cores","text":"<p>Pre-built cores are available from the buildbot for iOS here and for tvOS here. You can also use the update-cores.sh script in the RetroArch source tree to fetch the cores from the buildbot for you:</p> <pre><code>./pkg/apple/update-cores.sh [--tvos] [core name]...\n</code></pre> <p>Without any arguments, it will try to update all of the cores in <code>pkg/apple/iOS/modules</code>. If there are no cores already downloaded, it will list the cores that are available to download. Any arguments are treated as core names and it will try to download that core if it is not already available.</p>"},{"location":"development/retroarch/compilation/ios/#building-cores","title":"Building Cores","text":"<p>Instead of downloading pre-built cores, you can build the cores yourself. The easiest way to build all the cores is to use libretro-super.</p> <p>To build for iOS 11 and up, run:</p> <pre><code>./libretro-build-ios-arm64.sh\n</code></pre> <p>To build cores for iOS 9 and up, run:</p> <pre><code>./libretro-build-ios9.sh\n</code></pre> <p>To build cores for iOS 6 to 8, run:</p> <pre><code>./libretro-build-ios.sh\n</code></pre> <p>In case you only want to build one and/or more cores instead of all, you can specify the cores you want to build after the first command in no particular order. E.g.:</p> <pre><code>./libretro-build-ios-arm64.sh snes9x2010 fceumm\n</code></pre> <p>Once finished, you can find the libretro cores inside directory <code>dist/ios-arm64</code>, <code>dist/ios9</code> or <code>dist/ios</code> depending on which build script you ran.</p>"},{"location":"development/retroarch/compilation/ios/#code-signing-the-cores","title":"Code Signing the Cores","text":"<p>Note that you must code sign the dylib cores in order for you to use them.</p>"},{"location":"development/retroarch/compilation/ios/#in-ios-9-and-above","title":"In iOS 9 and above","text":"<p>Starting from iOS 9, the cores must be packaged as part of the application, even if they are code-signed. This was an additional security measure introduced in iOS 9. Fortunately, the code signing is handled as part of the Xcode build/archive process, so all you need to do is place your compiled <code>.dylib</code> cores in the <code>pkg/apple/iOS/modules</code> folder. Running the application via Xcode or archiving the application for an adhoc distribution will codesign the cores as long as they are placed in the aforementioned <code>pkg/apple/iOS/modules</code> folder.</p>"},{"location":"development/retroarch/compilation/ios/#in-ios-6-to-8","title":"In iOS 6 to 8","text":"<p>You need to manually code sign the cores, and then you can copy them to the <code>Documents/RetroArch/cores</code> directory using an application like \"iFunBox\" or \"iExplorer\".</p> <pre><code>cd [path where the dylib cores are]\ncodesign -fs '[Your Full Developer Certificate Name]' *.dylib\n</code></pre>"},{"location":"development/retroarch/compilation/ios/#building-retroarch","title":"Building RetroArch","text":"<p>There are multiple Xcode project files in <code>pkg/apple</code>, based on minimum iOS version. The following will use <code>pkg/apple/RetroArch_iOS13.xcodeproj</code> (the latest as of this writing) as an example.</p> <ol> <li>Open Xcode.</li> <li>Open the following project file <code>pkg/apple/RetroArch_iOS13.xcodeproj</code></li> <li>Change the identifiers and signing for the target<ol> <li>In the Navigator Pane on the left, select the <code>Retroarch_iOS13</code> project</li> <li>In the Project and Targets list on the left side, choose the <code>RetroArchiOS</code> (or <code>RetroArchTV</code> for tvOS) target. Select the Target (the one with the RetroArch icon), not the project.</li> <li>In the <code>Signing &amp; Capabilities</code> tab, change the \"Team\" under Signing to be your developer name.</li> <li>In the <code>Signing &amp; Capabilities</code> tab, Change the \"Bundle Identifier\" to something globally unique (e.g. <code>your.email.address.RetroArch</code>).</li> </ol> </li> <li>Change the signing for the extensions<ol> <li>In the Navigator Pane on the left, select the <code>Retroarch_iOS13</code> project</li> <li>In the Project and Targets list on the left side, choose the <code>RetroArchWidgetExtensionExtension</code> (or <code>RetroArchTopShelfExtension</code> for tvOS) target.</li> <li>In the <code>Signing &amp; Capabilities</code> tab, change the \"Team\" under Signing to be your developer name.</li> <li>In the <code>Signing &amp; Capabilities</code> tab, Change the \"Bundle Identifier\" to the bundle identifier you chose for the target plus a suffix (e.g. <code>your.email.address.RetroArch.RetroArchWidgetExtension</code>).</li> <li>For tvOS, in order for Top Shelf to work, you additionally need to set up the App Groups properly, described below.</li> </ol> </li> <li>Set the active scheme to <code>RetroArch iOS Release</code> (or <code>RetroArch tvOS Release</code> for tvOS), and select your connected iOS/tvOS device as the device.</li> <li>Run (\u2318-R)</li> </ol> <p></p> <p>Once the application has been built, installed, and run on your device, it can be run again directly from the device without needing Xcode.</p>"},{"location":"development/retroarch/compilation/ios/#app-store-build","title":"App Store Build","text":"<p>Building for the Mac App Store requires being logged into Xcode with the Apple Developer account associated with the Bundle ID for the app. The app also builds with Push Notification and CloudKit entitlements for the iCloud cloud sync driver (and Top Shelf for tvOS). Once all of the signing and entitlements are set up, creating the build is simply changing the scheme to <code>RetroArch AppStore</code>.</p> <p>There is an automated fastlane script available in pkg/apple/fastlane that will update the build numbers and upload the built prodduct to TestFlight using an App Store Connect API Key.</p>"},{"location":"development/retroarch/compilation/ios/#additional-tips","title":"Additional Tips:","text":""},{"location":"development/retroarch/compilation/ios/#cores_1","title":"Cores","text":"<ul> <li> <p>When you run RetroArch and try to run a game, and see the message \"Failed to load libretro core\", that means the core is not code signed. See the above \"Code Signing the Cores\" section on making sure your cores are signed. You can manually check the code signature on a file by doing: <code>codesign -dvv mednafen_psx_libretro_ios.dylib</code>. The Authority entry has your certificate - make sure it's your dev or adhoc distribution certificate.</p> </li> <li> <p>To see if your core is valid and usable in RetroArch, you can also try Load Core and selecting the core. If you see the core name appear at the top (in the GUI menu), then it is properly codesigned and loaded. If you still see \"No Core\", then your core is not codesigned and cannot be used.</p> </li> </ul>"},{"location":"development/retroarch/compilation/ios/#top-shelf","title":"Top Shelf","text":"<p>Top Shelf for tvOS will display up to five entries from each of the History and Favorites playlists, but is not compiled by default. The Top Shelf extension runs as in a different sandbox, and sharing the playlists requires the use of App Groups. In order to enable the Top Shelf extension:</p> <ol> <li>With the project selected, select the RetroArchTV target. In the <code>Signing &amp; Capabilities</code> tab, add the <code>App Groups</code> capability, and provide a unique group identifier.</li> <li>You will also need to provide a unique app/bundle identifier. This will have the effect of breaking updating from a prior version of the app, as the app data will not be copied over due to the new bundle identifier.</li> <li>Select the RetroArchTopShelfExtension target. In the <code>Signing &amp; Capabilities</code> tab, add the <code>App Groups</code> capability, and provide the same unique group identifier.</li> <li>You will also need to provide a unique app/bundle identifier for the extension.</li> <li>In <code>pkg/apple/RetroArchTopShelfExtension/ContentProvider.h</code>, change the value of <code>kRetroArchAppGroup</code> to be the same unique group identifier.</li> </ol>"},{"location":"development/retroarch/compilation/ios/#development","title":"Development","text":""},{"location":"development/retroarch/compilation/ios/#where-do-i-start","title":"Where do I start?","text":"<p>The RetroArch codebase can be daunting, especially if you're used to iOS development in Objective C or Swift. Objective C is a superset of C so the syntax should look somewhat familiar to you.</p> <p>The first and main entrypoint you should look at is in <code>core/griffin/griffin.c</code>. This is where all the code is included, with compiler flags used to bring in code specific to the platform. For iOS, you should pay attention to the compiler flags like <code>__APPLE__</code>, <code>TARGET_OS_IPHONE</code>, <code>HAVE_COCOATOUCH</code>.</p> <p>Note that you can Cmd-click into the <code>#include</code> paths to peer into the source code. You can also Cmd-Shift-O and type in the source file as well. And, breakpoints work as well!</p> <p>The iOS specific code is in <code>core/griffin/griffin_objc.m</code>. Here you'll find the include to <code>./ui/drivers/ui_cocoatouch.m</code>, which contains the application delegate - the main entry point for the iOS application lifecycle. From there everything should look familiar to you as an iOS developer, and you should be able to hook in any iOS specific objective c code. Although you can use Objective C data structures and code, you'll probably be having to use C data structures since you'll have to call methods in C to hook back into RetroArch, and they will expect C data structures. The great thing is you can mix C code with Objective C, as long as you do the necessary conversions to the data structures that RetroArch expects.</p>"},{"location":"development/retroarch/compilation/linux-and-bsd/","title":"Compilation in Linux and BSD","text":"<p>Compilation on Linux and BSD does not have many surprises, as its foundation is Unix-based.</p>"},{"location":"development/retroarch/compilation/linux-and-bsd/#dependencies","title":"Dependencies","text":"<ul> <li>At least one libretro implementation</li> <li>pkgconfig</li> <li>Working OpenGL headers (should be included by default, but you might need to install libgl/mesa development packages)</li> </ul>"},{"location":"development/retroarch/compilation/linux-and-bsd/#optional-dependencies","title":"Optional dependencies","text":"<ul> <li>libxml2-devel - For XML shaders and cheat support.</li> <li>libcaca-devel - Color AsCii Art library</li> <li>freetype-devel - TTF font rendering</li> <li>ffmpeg/libavcodec - FFmpeg recording</li> <li>flac-devel - Free Lossless Audio Codec</li> <li>nvidia-cg-toolkit - Cg shaders</li> <li>slang-devel - Slang shaders</li> <li>libudev-devel</li> <li>qt5-qtbase-devel - For Qt GUI (Desktop)</li> <li>zlib-devel</li> </ul> <p>Some other libraries can be built support for as well, please refer to <code>./configure --help</code>.</p>"},{"location":"development/retroarch/compilation/linux-and-bsd/#satisfying-dependencies-under-fedora-23","title":"Satisfying dependencies under Fedora 23","text":"<pre><code>sudo dnf install make automake gcc gcc-c++ kernel-devel mesa-libEGL-devel libv4l-devel libxkbcommon-devel mesa-libgbm-devel Cg libCg zlib-devel freetype-devel libxml2-devel ffmpeg-devel SDL2-devel SDL-devel perl-X11-Protocol perl-Net-DBus pulseaudio-libs-devel openal-soft-devel libusb-devel\n</code></pre>"},{"location":"development/retroarch/compilation/linux-and-bsd/#satisfying-additional-dependencies-under-fedora-33","title":"Satisfying additional dependencies under Fedora 33","text":"<pre><code>sudo dnf install egl-wayland-devel wayland-devel wayland-protocols-devel mesa-vulkan-devel libXxf86vm-devel flac-devel slang-devel libcaca-devel qt5-qtbase-devel\n</code></pre>"},{"location":"development/retroarch/compilation/linux-and-bsd/#satisfying-dependencies-under-debianubuntu","title":"Satisfying dependencies under Debian/Ubuntu","text":"<pre><code>apt-get -y install build-essential libxkbcommon-dev zlib1g-dev libfreetype6-dev libegl1-mesa-dev libgles2-mesa-dev libgbm-dev nvidia-cg-toolkit nvidia-cg-dev libavcodec-dev libsdl2-dev libsdl-image1.2-dev libxml2-dev yasm\n</code></pre>"},{"location":"development/retroarch/compilation/linux-and-bsd/#satisfying-dependencies-under-alpine","title":"Satisfying dependencies under Alpine","text":"<pre><code>apk add eudev-dev ffmpeg-dev freetype-dev g++ gcc libxml2-dev mesa-dev pkgconf zlib-dev\n</code></pre> <p>This list of packages may not be complete.</p>"},{"location":"development/retroarch/compilation/linux-and-bsd/#getting-the-code","title":"Getting the code","text":"<pre><code>git clone https://github.com/libretro/libretro-super.git\ncd libretro-super\nSHALLOW_CLONE=1 ./libretro-fetch.sh\n</code></pre>"},{"location":"development/retroarch/compilation/linux-and-bsd/#building-retroarch","title":"Building RetroArch","text":"<pre><code>./retroarch-build.sh\n</code></pre>"},{"location":"development/retroarch/compilation/linux-and-bsd/#building-libretro-cores","title":"Building libretro cores","text":"<p>You should at least build one libretro implementation so RetroArch can do stuff. There is a super-project that is designed to easily build every libretro port out there. To build every core: <pre><code>NOCLEAN=1 ./libretro-build.sh\n</code></pre> Omit NOCLEAN=1 if you wish to perform \"make clean\" on every repo before building</p>"},{"location":"development/retroarch/compilation/linux-and-bsd/#installing","title":"Installing","text":"<p>Let's assume you'd like to install RetroArch into a folder called <code>~/ra</code> <pre><code>mkdir -p ~/ra/cores\ncd retroarch\nmake DESTDIR=~/ra install\ncd .. #to libretro-super directory\n./libretro-install.sh ~/ra/cores\n</code></pre> You should now have a fully functional RetroArch build in <code>~/ra</code> Enjoy! :)</p>"},{"location":"development/retroarch/compilation/msvc-runtime-versions/","title":"MSVC Runtime Versions","text":"VC++ version _MSC_VER Alternative name C runtime C++ runtime 1.0 800 MSVCRT10.DLL 2.0 900 MSVCRT20.DLL 4.0 1000 MSVCRT40.DLL 4.2 1020 MSVCRT.DLL 5.0 1100 Visual Studio 97 MSVCRT.DLL MSVCP50.DLL 6.0 1200 Visual Studio 6.0, VC98 MSVCRT.DLL MSVCP60.DLL 7.0 1300 Visual Studio .NET (2002) MSVCR70.DLL MSVCP70.DLL 7.1 1310 Visual Studio .NET 2003 MSVCR71.DLL MSVCP71.DLL 8.0 1400 Visual Studio 2005 MSVCR80.DLL MSVCP80.DLL 9.0 1500 Visual Studio 2008 MSVCR90.DLL MSVCP90.DLL 10.0 1600 Visual Studio 2010 MSVCR100.DLL MSVCP100.DLL 11.0 1700 Visual Studio 2012 MSVCR110.DLL MSVCP110.DLL 12.0 1800 Visual Studio 2013 MSVCR120.DLL MSVCP120.DLL 14.0 1900 Visual Studio 2015 See notes MSVCP140.DLL 14.1* 1910* Visual Studio 2017 See notes MSVCP140.DLL <p>Note for VC2003</p> <p>The runtime does not have its own redist, it is instead only bundled with .NET Framework 1.1, or you can manually extract it from KB932298 (2007 DST Update).</p> <p>Note for VC2015/2017</p> <p>The runtime was split into 4 external libraries: concrt140.dll, msvcp140.dll, vccorlib140.dll and vcruntime140.dll, as well as an OS-local component named ucrtbase.dll included with Windows 10 and up.</p> <p>Note for VC2017</p> <p>The version numbers increment with each update (VC++ versions 14.1/14.11/14.12, _MSC_VER 1910/1911/1912, Visual Studio versions 15.0/15.3/15.5 etc.). And yes, the C++ runtime is still called VCP140 and not VCP141...</p>"},{"location":"development/retroarch/compilation/msvc-runtime-versions/#what-does-my-windows-version-ship-with","title":"What does my Windows version ship with?","text":"Version NT3 95 NT4 98 2000 ME XP 2003 2003R2 Vista 2008 7 2008R2 2012 8 8.1 2012R2 10 2016 1.0 X 2.0 X X X X X X X X X X X X X X X X X X 4.0 X* X X X X X X X X X X X X X X X X 5.0 X* X X X X 6.0 X X X X X X X X X X X X X 2002 2003 X* X* 2005 X X X X X X X X X X 2008 X X X X X X X X 2010 X X X 2012 X 2013 2015 2017 <p>Note for Windows 95</p> <p>The VC40 runtime is only bundled with Windows 95B (OSR2) and up.</p> <p>Note for Windows 98</p> <p>The VC50 runtime is not always installed, but is available on the install CD (in WIN98/WIN98_36.CAB for First Edition and 37.CAB for Second Edition).</p> <p>Note for Server 2003 and 2003R2</p> <p>The VC2003 runtime requires installing the .NET Framework via the Windows Components Wizard after installation.</p>"},{"location":"development/retroarch/compilation/msvc-runtime-versions/#which-runtime-is-supported-by-my-windows-version","title":"Which runtime is supported by my Windows version?","text":"<p>From Minimum service pack levels for Microsoft VC++ Redistributable Packages:</p> Version 95 NT4 98 2000 ME XP 2003 2003R2 Vista 2008 7 2008R2 2012 8 8.1 2012R2 10 2016 2003 X* SP6a* X* X* X* X* X* X* X* X* 2005 SP2+ SP1+ 2005 SP1 SP2+ SP1+ X X X X X X X X X X 2008 SP4 SP2+ SP1+ X X 2008 SP1 SP2+ SP1+ X X X X X X X X X X 2010 SP3 SP2+ X SP2+ SP2+ X X* 2010 SP1 SP3 SP2+ X SP2+ SP2+ X X* X* X* X* X* X* 2012 Upd. 4 SP3 SP2+ X SP2+ SP2+ SP1+ SP1+ X X X SP1+* X 2013 SP3 SP2+ X SP2+ SP2+ SP1+ SP1+ X X X X X 2015 SP3 SP2+ X SP2+ SP2+ SP1+ SP1+ X X X X X 2017 SP3 SP2+ SP2+ SP2+ SP1+ SP1+ X X* X* X <p>Note for VC2003</p> <p>The VC2003 runtime is not provided as a separate download and requires installing the .NET Framework 1.1 (requires IE 5.01 or later).</p> <p>Note for VC2010</p> <p>Server 2008R2 requires SP1 if using the x64 version.</p> <p>Note for VC2010 SP1</p> <p>MS Documentation is conflicting about whether or not 2008R2/2012 x86 is supported, or if 8/2012 or higher is even supported at all.</p> <p>Note for VC2012 Update 4/VC2013</p> <p>MS Documentation is conflicting about the exact service pack levels and architectures supported for each OS version.</p> <p>Note for VC2013</p> <p>For 8.1 and 2012R2, KB2883200 is required.</p> <p>Note for VC2017</p> <p>For 8.1 and 2012R2, KB2919355 is required. For 10, build 1507 or later is required. Requirements were taken from here.</p> <p>Note for Windows \u215e/2012 and higher</p> <p>While some runtimes may not be documented as officially supported, testing shows that all the above versions appear to work.</p>"},{"location":"development/retroarch/compilation/osx/","title":"macOS/OSX Compilation / Development Guide","text":"<p>This compilation guide will teach you how to build RetroArch for macOS/OSX.</p> <p>All versions of the operating system since 10.5 are supported. RetroArch can work on PPC, Intel, and ARM processor-powered Macs.</p> <p>This video covers a quick demonstration of these subjects;</p> <ol> <li> <p>Environment Configuration</p> </li> <li> <p>Fetching the code</p> </li> <li> <p>Building RetroArch</p> </li> <li> <p>(Optional) Building the cores</p> </li> </ol> <p>Be sure to read instructions that are given on this page.</p>"},{"location":"development/retroarch/compilation/osx/#environment-configuration","title":"Environment configuration","text":""},{"location":"development/retroarch/compilation/osx/#xcode","title":"Xcode","text":"<p>The only requirement for building is Xcode, which is only available for macOS. You can get Xcode from the App Store. If you have never used Xcode before, you will need to open the Xcode preferences, and in Accounts, log in with your Apple ID.</p>"},{"location":"development/retroarch/compilation/osx/#retroarch-apple-deps-optional-but-recommended","title":"retroarch-apple-deps (optional but recommended)","text":"<p>RetroArch optionally will automatically link with supporting libraries (including MoltenVK) that are provided by the retroarch-apple-deps repo. By default Xcode will look for these dependencies in <code>/usr/local/share/retroarch-apple-deps</code>.</p> <p>To get retroarch-apple-deps, run:</p> <pre><code>git clone https://github.com/warmenhoven/retroarch-apple-deps.git retroarch-apple-deps\nsudo ln -s $PWD/retroarch-apple-deps /usr/local/share\n</code></pre>"},{"location":"development/retroarch/compilation/osx/#fetching-the-code","title":"Fetching the code","text":""},{"location":"development/retroarch/compilation/osx/#libretro-super","title":"libretro-super","text":"<p>The recommended way of fetching RetroArch source code, as well as the source code for all of the cores, is to use libretro-super.</p> <p>To get libretro-super, run:</p> <pre><code>git clone https://github.com/libretro/libretro-super.git libretro-super\ncd libretro-super\n</code></pre> <p>Now you can run the following command to download the source for RetroArch:</p> <pre><code>./libretro-fetch.sh --retroarch\n</code></pre> <p>You can run the following command to download the source for RetroArch as well as all of the cores:</p> <pre><code>./libretro-fetch.sh\n</code></pre> <p>Or specify just the cores that you want:</p> <pre><code>./libretro-fetch.sh snes9x2010 fceumm\n</code></pre>"},{"location":"development/retroarch/compilation/osx/#retroarch-repo","title":"RetroArch repo","text":"<p>If you choose not to use libretro-super, you can clone RetroArch's repository from GitHub</p> <pre><code>git clone https://github.com/libretro/RetroArch.git retroarch\ncd retroarch\n</code></pre> <p>Note</p> <p>Versions of git available for OSX PowerPC might not come with the necessary SSL/TLS support that Github now requires. If you happen to find that you can not clone or pull from Github, perform the following command: git config --global http.sslVerify false.</p> <p>For subsequent builds you only need to pull the changes from the repo</p> <pre><code>cd retroarch\ngit pull\n</code></pre> <p>To update your local copy from the repository run git pull</p>"},{"location":"development/retroarch/compilation/osx/#retroarch-compilation","title":"RetroArch Compilation","text":"<p>There are several Xcode projects and workspaces in the <code>pkg/apple</code> directory in RetroArch, to choose from based on your needs:</p> Xcode\u00a0Project/Workspace\u00a0File\u00a0Name OS support Purpose <code>RetroArch.xcworkspace</code> 10.13+ The primary workspace for the latest Metal build. Most active development happens here. <code>RetroArch_Metal.xcodeproj</code> 10.13+ The project for the latest Metal build. You can use this directly but typically it's preferred to use the Workspace. <code>RetroArch.xcodeproj</code> 10.6+ The outdated non-Metal build, only for Intel processor-powered Macs. <code>RetroArch_PPC.xcodeproj</code> 10.5+ Building for PowerPC processor-powered Macs. <code>RetroArch_OSX107.xcodeproj</code> 10.7+ An old development line that is no longer in use."},{"location":"development/retroarch/compilation/osx/#building-retroarch-separately","title":"Building RetroArch separately","text":"<p>Open Xcode. Open your chosen project file in the Xcode IDE and build (\u2318-B) and run (\u2318-R) it there. The default scheme should be <code>RetroArch</code> and that is what is used for building the DMG image available on the buildbot.</p>"},{"location":"development/retroarch/compilation/osx/#core-compilation-optional","title":"Core Compilation (optional)","text":"<p>RetroArch on OSX by default will be configured to download cores from the buildbot; you do not need to build the cores yourself.</p>"},{"location":"development/retroarch/compilation/osx/#libretro-super-deprecated","title":"libretro-super (deprecated)","text":"<p>If you choose to build the cores yourself, the easiest way to build all the cores is to use libretro-super.</p> <p>To build all cores for OSX, run</p> <pre><code>./libretro-build.sh\n</code></pre> <p>In case you only want to build one and/or more cores instead of all, you can specify the cores you want to build after the first command in no particular order. E.g.:</p> <pre><code>./libretro-build.sh snes9x2010 fceumm\n</code></pre> <p>Once finished, you can find the libretro cores inside directory <code>dist/osx</code>.</p>"},{"location":"development/retroarch/compilation/osx/#gitlab-ci-mimicry","title":"GitLab CI mimicry","text":"<p>Cores on the buildbot are built using the GitLab CI infrastructure. Each core provides its own <code>.gitlab-ci.yml</code> file with instructions for how to build it. Almost all cores reference one of the CI Templates. Between the <code>.gitlab-ci.yml</code> file and the templates, you should have complete instructions for how to build each core.</p>"},{"location":"development/retroarch/compilation/osx/#store-builds","title":"Store Builds","text":""},{"location":"development/retroarch/compilation/osx/#steam-build","title":"Steam Build","text":"<p>Building for Steam differs from the normal app build in two ways: the scheme is <code>RetroArchSteam</code>, and it requires bundling mist and linking against libmist. Simply download the latest artifacts for mist from GitLab, and set the <code>MIST_PATH</code> variable in the Xcode project with its location.</p> <p>Once the Steam app is built, it is no different from the app available in the Steam store, and will communicate with Steam to fetch cores and update presence.</p>"},{"location":"development/retroarch/compilation/osx/#mac-app-store-build","title":"Mac App Store Build","text":"<p>Building for the Mac App Store requires being logged into Xcode with the Apple Developer account associated with the Bundle ID for the app. The app also builds with Push Notification and CloudKit entitlements for the iCloud cloud sync driver. Once all of the signing and entitlements are set up, creating the build is simply changing the scheme to <code>RetroArch AppStore</code>.</p> <p>There is an automated fastlane script available in pkg/apple/fastlane that will update the build numbers and upload the built prodduct to TestFlight using an App Store Connect API Key.</p>"},{"location":"development/retroarch/compilation/ps2/","title":"PlayStation 2 Compilation / Development Guide","text":""},{"location":"development/retroarch/compilation/ps2/#environment-configuration","title":"Environment configuration","text":"<p>You need the homebrew PlayStation 2 SDK and toolchain installed. You can follow how to install the toolchain over here ps2toolchain</p> <p>Additionally you need the PS2 Graphics Synthesizer installed. You can follow how to install the GSKit over here gsKit</p> <p>Finally you need to install specific ports for PlayStation 2. You can follow how to install the PlayStation 2 Ports over here ps2sdk-ports</p>"},{"location":"development/retroarch/compilation/ps2/#retroarch-compilation","title":"RetroArch Compilation","text":""},{"location":"development/retroarch/compilation/ps2/#fetching-retroarch","title":"Fetching RetroArch","text":"<p>Clone RetroArch's repository from GitHub</p> <pre><code>git clone https://github.com/libretro/RetroArch.git retroarch\ncd retroarch\n</code></pre> <p>For subsequent builds you only need to pull the changes from the repo</p> <pre><code>cd retroarch\ngit pull\n</code></pre> <p>To update your local copy from the repository run git pull</p>"},{"location":"development/retroarch/compilation/ps2/#building-retroarch-separately","title":"Building RetroArch separately","text":"<p>To compile RetroArch (for PlayStation 2) run:     make -f Makefile.ps2</p> <p>Note</p> <p>RetroArch on PlayStation PS2 is statically linked. With statically linked RetroArch, each executable is a separate libretro core instead of the core being separately loaded from a single executable. A pre-existing libretro library needs to be present in the root directory in order to link RetroArch PS2. This file needs to be called 'libretro_ps2.a'.</p> <p>After a few seconds/minutes you should be able to find a retroarch_ps2.elf file under that directory.</p>"},{"location":"development/retroarch/compilation/ps2/#building-retroarch-in-bulk","title":"Building RetroArch in bulk","text":"<p>Instead of building each core one by one, you can build all cores as a batch task. Run from the main 'retroarch' directory:</p> <pre><code>cd dist-scripts\n</code></pre> <p>Note</p> <p>Make sure that all the libretro cores that you want to compile are inside the 'dist-scripts' directory.</p> <p>Once inside this directory, run :</p> <p>This process will also automate the packaging process for you.</p>"},{"location":"development/retroarch/compilation/ps2/#packaging-retroarch","title":"Packaging RetroArch","text":""},{"location":"development/retroarch/compilation/ps2/#additional-tips","title":"Additional Tips:","text":""},{"location":"development/retroarch/compilation/ps2/#core-compilation","title":"Core Compilation","text":""},{"location":"development/retroarch/compilation/ps2/#fetching-cores","title":"Fetching Cores","text":"<p>The easiest way to fetch all the cores is to use libretro-super. Run</p> <pre><code>./libretro-fetch.sh\n</code></pre>"},{"location":"development/retroarch/compilation/ps2/#building-cores","title":"Building Cores","text":"<p>The easiest way to build all the cores (for PlayStation Portable) is to use libretro-super. Run</p> <p>In case you only want to build one and/or more cores instead of all, you can specify the cores you want to build after the first command in no particular order. E.g.:</p> <p>Once finished, you can find the libretro cores inside directory <code>dist/ps2</code>.</p>"},{"location":"development/retroarch/compilation/psp/","title":"PlayStation PSP Compilation / Development Guide","text":""},{"location":"development/retroarch/compilation/psp/#environment-configuration","title":"Environment configuration","text":"<p>You need the homebrew PlayStation PSP SDK and toolchain installed.</p>"},{"location":"development/retroarch/compilation/psp/#retroarch-compilation","title":"RetroArch Compilation","text":""},{"location":"development/retroarch/compilation/psp/#fetching-retroarch","title":"Fetching RetroArch","text":"<p>Clone RetroArch's repository from GitHub</p> <pre><code>git clone https://github.com/libretro/RetroArch.git retroarch\ncd retroarch\n</code></pre> <p>For subsequent builds you only need to pull the changes from the repo</p> <pre><code>cd retroarch\ngit pull\n</code></pre> <p>To update your local copy from the repository run git pull</p>"},{"location":"development/retroarch/compilation/psp/#building-retroarch-separately","title":"Building RetroArch separately","text":"<p>First, you need to compile Salamander. To compile Salamander (for PlayStation Portable) run:</p> <pre><code>make -f Makefile.psp1.salamander\n</code></pre> <p>Second, to compile RetroArch (for PlayStation Portable) run:</p> <pre><code>make -f Makefile.psp1\n</code></pre> <p>Note</p> <p>RetroArch on PlayStation PSP is statically linked. With statically linked RetroArch, each executable is a separate libretro core instead of the core being separately loaded from a single executable. A pre-existing libretro library needs to be present in the root directory in order to link RetroArch Vita. This file needs to be called 'libretro_psp1.a'.</p> <p>After a few seconds/minutes you should be able to find a retroarch_psp1.elf and retroarch_psp1.self file under that directory.</p>"},{"location":"development/retroarch/compilation/psp/#building-retroarch-in-bulk","title":"Building RetroArch in bulk","text":"<p>Instead of building each core one by one, you can build all cores as a batch task. Run from the main 'retroarch' directory:</p> <pre><code>cd dist-scripts\n</code></pre> <p>Note</p> <p>Make sure that all the libretro cores that you want to compile are inside the 'dist-scripts' directory.</p> <p>Once inside this directory, run :</p> <pre><code>./dist-cores.sh psp1\n</code></pre> <p>This process will also automate the packaging process for you.</p>"},{"location":"development/retroarch/compilation/psp/#packaging-retroarch","title":"Packaging RetroArch","text":""},{"location":"development/retroarch/compilation/psp/#additional-tips","title":"Additional Tips:","text":""},{"location":"development/retroarch/compilation/psp/#core-compilation","title":"Core Compilation","text":""},{"location":"development/retroarch/compilation/psp/#fetching-cores","title":"Fetching Cores","text":"<p>The easiest way to fetch all the cores is to use libretro-super. Run</p> <pre><code>./libretro-fetch.sh\n</code></pre>"},{"location":"development/retroarch/compilation/psp/#building-cores","title":"Building Cores","text":"<p>The easiest way to build all the cores (for PlayStation Portable) is to use libretro-super. Run</p> <pre><code>./libretro-build-psp1.sh\n</code></pre> <p>In case you only want to build one and/or more cores instead of all, you can specify the cores you want to build after the first command in no particular order. E.g.:</p> <pre><code>./libretro-build-psp1.sh snes9x2010 fceumm\n</code></pre> <p>Once finished, you can find the libretro cores inside directory <code>dist/psp1</code>.</p>"},{"location":"development/retroarch/compilation/psvita/","title":"PlayStation Vita/TV Compilation / Development Guide","text":""},{"location":"development/retroarch/compilation/psvita/#environment-configuration","title":"Environment configuration","text":"<p>You need the homebrew PlayStation Vita SDK and toolchain installed.</p>"},{"location":"development/retroarch/compilation/psvita/#retroarch-compilation","title":"RetroArch Compilation","text":""},{"location":"development/retroarch/compilation/psvita/#fetching-retroarch","title":"Fetching RetroArch","text":"<p>Clone RetroArch's repository from GitHub</p> <pre><code>git clone https://github.com/libretro/RetroArch.git retroarch\ncd retroarch\n</code></pre> <p>For subsequent builds you only need to pull the changes from the repo</p> <pre><code>cd retroarch\ngit pull\n</code></pre> <p>To update your local copy from the repository run git pull</p>"},{"location":"development/retroarch/compilation/psvita/#building-retroarch-separately","title":"Building RetroArch separately","text":"<p>First, you need to compile Salamander. To compile Salamander (for PlayStation3) run:</p> <pre><code>make -f Makefile.vita.salamander\n</code></pre> <p>Second, to compile RetroArch (for PlayStation3) run:</p> <pre><code>make -f Makefile.griffin platform=vita\n</code></pre> <p>Note</p> <p>RetroArch on PlayStation Vita/TV is statically linked. With statically linked RetroArch, each executable is a separate libretro core instead of the core being separately loaded from a single executable. A pre-existing libretro library needs to be present in the root directory in order to link RetroArch Vita. This file needs to be called 'libretro_vita.a'.</p> <p>After a few seconds/minutes you should be able to find a retroarch_vita.elf and retroarch_vita.self file under that directory.</p>"},{"location":"development/retroarch/compilation/psvita/#building-retroarch-in-bulk","title":"Building RetroArch in bulk","text":"<p>Instead of building each core one by one, you can build all cores as a batch task. Run from the main 'retroarch' directory:</p> <pre><code>cd dist-scripts\n</code></pre> <p>Note</p> <p>Make sure that all the libretro cores that you want to compile are inside the 'dist-scripts' directory.</p> <p>Once inside this directory, run :</p> <pre><code>./dist-cores.sh vita\n</code></pre> <p>This process will also automate the packaging process for you.</p>"},{"location":"development/retroarch/compilation/psvita/#packaging-retroarch","title":"Packaging RetroArch","text":""},{"location":"development/retroarch/compilation/psvita/#additional-tips","title":"Additional Tips:","text":""},{"location":"development/retroarch/compilation/psvita/#core-compilation","title":"Core Compilation","text":""},{"location":"development/retroarch/compilation/psvita/#fetching-cores","title":"Fetching Cores","text":"<p>The easiest way to fetch all the cores is to use libretro-super. Run</p> <pre><code>./libretro-fetch.sh\n</code></pre>"},{"location":"development/retroarch/compilation/psvita/#building-cores","title":"Building Cores","text":"<p>The easiest way to build all the cores (for PlayStation3) is to use libretro-super. Run</p> <pre><code>./libretro-build-vita.sh\n</code></pre> <p>In case you only want to build one and/or more cores instead of all, you can specify the cores you want to build after the first command in no particular order. E.g.:</p> <pre><code>./libretro-build-vita.sh snes9x2010 fceumm\n</code></pre> <p>Once finished, you can find the libretro cores inside directory <code>dist/vita</code>.</p>"},{"location":"development/retroarch/compilation/switch-libnx/","title":"Nintendo Switch Compilation / Development Guide (libnx)","text":""},{"location":"development/retroarch/compilation/switch-libnx/#environment-configuration","title":"Environment configuration","text":"<p>You need the homebrew Nintendo Switch SDK libnx and DevkitA64 toolchain installed. You can find instructions on how to install it on the switchbrew wiki.</p> <p>Then, install all the required libraries:     - use the devkitpro MSYS2 terminal on Windows     - replace <code>dkp-pacman</code> by <code>pacman</code> on Linux and Mac OS</p> <pre><code>dkp-pacman -Sy devkit-env devkitA64 libnx switch-tools switch-mesa switch-zlib switch-bzip2 switch-liblzma switch-freetype switch-libpng switch-libvpx switch-ffmpeg switch-libopus\n</code></pre>"},{"location":"development/retroarch/compilation/switch-libnx/#retroarch-compilation","title":"RetroArch Compilation","text":"<p>All commands must be issued in the devkitpro environment (MSYS2 on Windows).</p>"},{"location":"development/retroarch/compilation/switch-libnx/#fetching-retroarch","title":"Fetching RetroArch","text":"<p>Clone RetroArch's repository from GitHub</p> <pre><code>git clone https://github.com/libretro/RetroArch.git retroarch\ncd retroarch\n</code></pre> <p>For subsequent builds you only need to pull the changes from the repo</p> <pre><code>cd retroarch\ngit pull\n</code></pre>"},{"location":"development/retroarch/compilation/switch-libnx/#building-cores","title":"Building Cores","text":"<p>The easiest way to build all the cores (for Switch) is to use libretro-super. <code>git clone</code> and <code>cd</code> into the base directory, then run:</p> <pre><code>make -f Makefile.libnx\n</code></pre> <p>In case you only want to build one and/or more cores instead of all, you can specify the cores you want to build using the commands below. E.g.:</p> <pre><code>./libretro-fetch.sh snes9x2010 fceumm\nplatform=libnx ./libretro-build.sh snes9x2010 fceumm\n</code></pre> <p>Once finished, you can find the libretro cores inside directory <code>dist/libnx</code>.</p>"},{"location":"development/retroarch/compilation/switch-libnx/#building-retroarch","title":"Building RetroArch","text":"<p>Each NRO of RetroArch has one and only one core, and each core is a standalone homebrew by itself. That means that building multiple cores means building RetroArch multiple times, once for each core.</p> <p>The cores you previously built will be called <code>&lt;corename&gt;_libretro_libnx.a</code>, where <code>&lt;corename&gt;</code> is the name of the core that was used to build it.</p> <p>For each core you wish to build, you will need to copy it to the <code>retroarch</code> directory, and rename it to <code>libretro_libnx.a</code>.</p> <p>Once the core has been moved and renamed, move to the <code>retroarch</code> directory using <code>cd</code> and run this command:</p> <pre><code>make -f Makefile.libnx\n</code></pre> <p>That will output <code>retroarch_switch.nro</code>: this is your home built copy of RetroArch! It is recommended to rename your '.nro' file so you can remember which core it contains.</p> <p>You can then use <code>nxlink</code> to send the homebrew to your Switch over Wi-Fi.</p>"},{"location":"development/retroarch/compilation/ubuntu/","title":"Ubuntu Compilation / Development Guide","text":""},{"location":"development/retroarch/compilation/ubuntu/#environment-configuration","title":"Environment configuration","text":"<p>The easiest route to get into building RetroArch and libretro cores on Ubuntu linux is to use libretro's PPA. For stable releases you can add the PPA like this:</p> <pre><code># add-apt-repository ppa:libretro/stable\n# apt-get update\n</code></pre> <p>For development work we recommend the testing PPA instead:</p> <pre><code># add-apt-repository ppa:libretro/testing\n# apt-get update\n</code></pre> <p>You will need git and a few build tools at least to proceed which you can install by issuing the following command:</p> <pre><code># apt-get install git build-essential\n</code></pre>"},{"location":"development/retroarch/compilation/ubuntu/#retroarch-compilation","title":"RetroArch Compilation","text":""},{"location":"development/retroarch/compilation/ubuntu/#building-retroarch","title":"Building RetroArch","text":"<p>The first step is to obtain RetroArch's source tree.</p> <pre><code>$ git clone https://github.com/libretro/RetroArch.git retroarch\n</code></pre> <p>You can get RetroArch's dependenencies by running the following command:</p> <pre><code># apt-get build-dep retroarch\n</code></pre> <p>Note</p> <p>Depending on your configuration you may need to uncomment the deb-src repositories in /etc/apt/sources.list, /etc/apt/sources.list.d/libretro-ubuntu-testing-$version.list and then run apt-get update before running apt-get build-dep</p> <p>For subsequent builds you will need to pull the changes from the repo</p> <pre><code>$ cd retroarch\n$ git pull\n</code></pre> <p>To compile RetroArch run the following commands inside RetroArch's source tree:</p> <pre><code>$ ./configure\n$ make clean\n$ make -j4\n</code></pre> <p>For development purposes you might want to run a debug build instead. In such case use the following commands:</p> <pre><code>$ ./configure\n$ make clean\n$ make DEBUG=1 GL_DEBUG=1 -j4\n</code></pre> <p>You can then start RetroArch by running:</p> <pre><code>$ ./retroarch\n</code></pre> <p>Local builds do not contain assets. On a clean build, assets will be located by default at $HOME/.config/retroarch/assets, and can be downloaded from the Main Menu via Online Updater &gt; Update Assets</p> <p>Tip</p> <p>If you're building frequently you may want to add ccache to the mix to speed up the build process. Install ccache via apt and the prepend the ccache symlink directory to your build environment path as shown below.</p> <p>For further instructions check the documentation</p> <p>Install ccache:</p> <pre><code># apt-get install ccache\n</code></pre> <p>Configure paths:</p> <pre><code>$ export PATH=/usr/lib/ccache/bin/:$PATH\n</code></pre> <p>Tip</p> <p>You can add that last line to your ~/.bashrc to avoid having to type that every time you start your working environment.</p>"},{"location":"development/retroarch/compilation/ubuntu/#core-compilation","title":"Core Compilation","text":""},{"location":"development/retroarch/compilation/ubuntu/#fetching-cores","title":"Fetching Cores","text":"<p>You can find the cores on libretro's GitHUB organization.</p> <p>We have an all-in-one tool to fetch and compile cores which you can use to streamline the process. You can obtain the tool by using these commands:</p> <pre><code>$ git clone https://github.com/libretro/libretro-super.git\n$ cd libretro-super\n</code></pre> <p>Then you can fetch one or all the cores by using libretro-fetch.sh</p> <p>Fetch all cores:</p> <pre><code>$ ./libretro-fetch.sh\n</code></pre> <p>Fetch one core:</p> <pre><code>$ ./libretro-fetch.sh *corename*\n</code></pre> <p>Note</p> <p>Replace corename with the name of the core you want to fetch, for example gambatte</p>"},{"location":"development/retroarch/compilation/ubuntu/#building-cores","title":"Building Cores","text":""},{"location":"development/retroarch/compilation/ubuntu/#libretro-super","title":"LibRetro Super","text":"<p>The easiest way to build all the cores is to use libretro-build.sh from within libretro-super's source tree:</p> <pre><code>$ ./libretro-build.sh\n</code></pre> <p>In case you only want to build one and/or more cores instead of all, you can specify the cores you want to build after the first command in no particular order:</p> <pre><code>$ ./libretro-build.sh snes9x2010 fceumm\n</code></pre> <p>Once compilation has finished, you can find the libretro cores inside dist/unix.</p>"},{"location":"development/retroarch/compilation/ubuntu/#manual-fetching-and-compilation","title":"Manual Fetching and Compilation","text":"<p>Get the core's source tree. As an example we'll use fceumm</p> <pre><code>$ git clone https://github.com/libretro/libretro-fceumm.git\n</code></pre> <p>Then compile the core:</p> <pre><code>$ cd libretro-fceumm\n$ make -f Makefile.libretro\n</code></pre> <p>Optionally strip the build product:</p> <pre><code>$ strip fceumm_libretro.so\n</code></pre> <p>Most cores will build with these instructions. You might need to browse to a subdirectory in some cases.</p>"},{"location":"development/retroarch/compilation/wii/","title":"Nintendo Wii Compilation / Development Guide","text":""},{"location":"development/retroarch/compilation/wii/#environment-configuration","title":"Environment configuration","text":"<p>You need to have installed devkitPro, the homebrew Nintendo Wii SDK (libOGC) and the devkitPPC (r29 or r29-1) toolchain on your computer.</p>"},{"location":"development/retroarch/compilation/wii/#retroarch-compilation","title":"RetroArch Compilation","text":""},{"location":"development/retroarch/compilation/wii/#fetching-retroarch","title":"Fetching RetroArch","text":"<p>Clone RetroArch's repository from GitHub</p> <pre><code>git clone https://github.com/libretro/RetroArch.git retroarch --recursive\ncd retroarch\n</code></pre> <p>For subsequent builds you only need to pull the changes from the repo</p> <pre><code>cd retroarch\ngit pull\n</code></pre> <p>To update your local copy of the RetroArch repository, run git pull</p>"},{"location":"development/retroarch/compilation/wii/#building-retroarch-separately","title":"Building RetroArch separately","text":"<p>First, you need to compile Salamander. To compile Salamander (for Wii) run:</p> <pre><code>make -f Makefile.wii.salamander\n</code></pre> <p>Rename the file retroarch-salamander_wii.dol as boot.dol. This file is the frontend launcher for the other cores (indeed files containing core and frontend).</p> <p>Second, to compile RetroArch for Wii (the core and the frontend), rename the compiled core as 'libretro_wii.a' (see below how to compile a core in the \"Building Cores\" section), put it in the RetroArch directory and run:</p> <pre><code>make -f Makefile.griffin platform=wii\n</code></pre> <p>Note</p> <p>RetroArch on Wii is statically linked. With statically linked RetroArch, each executable is a separate libretro core instead of the core being separately loaded from a single executable. A pre-existing libretro library needs to be present in the root directory in order to link RetroArch Wii. This file needs to be called 'libretro_wii.a'.</p> <p>After a few seconds/minutes you should be able to find a retroarch_wii.elf and retroarch_wii.dol file under that directory.</p>"},{"location":"development/retroarch/compilation/wii/#building-retroarch-in-bulk","title":"Building RetroArch in bulk","text":"<p>Instead of building each core one by one, you can build all cores as a batch task. Run from the main 'retroarch' directory:</p> <pre><code>cd dist-scripts\n</code></pre> <p>Note</p> <p>Make sure that all the libretro cores that you want to compile are inside the 'dist-scripts' directory.</p> <p>Once inside this directory, run :</p> <pre><code>./dist-cores.sh wii\n</code></pre> <p>This process will also automate the packaging process for you.</p>"},{"location":"development/retroarch/compilation/wii/#packaging-retroarch","title":"Packaging RetroArch","text":""},{"location":"development/retroarch/compilation/wii/#additional-tips","title":"Additional Tips:","text":""},{"location":"development/retroarch/compilation/wii/#core-compilation","title":"Core Compilation","text":""},{"location":"development/retroarch/compilation/wii/#fetching-cores","title":"Fetching Cores","text":"<p>The easiest way to fetch all the cores is to use libretro-super. Download libretro-super from GitHub and run</p> <pre><code>./libretro-fetch.sh\n</code></pre>"},{"location":"development/retroarch/compilation/wii/#building-cores","title":"Building Cores","text":"<p>The easiest way to build all the cores (for Wii) is to use libretro-super. If not already fetched, put the codes of the cores you want compile in the libretro-super directory and run</p> <pre><code>./libretro-build-wii.sh\n</code></pre> <p>In case you only want to build one and/or more cores instead of all, you can specify the cores you want to build after the first command in no particular order. E.g.:</p> <pre><code>./libretro-build-wii.sh snes9x2010 fceumm\n</code></pre> <p>Once finished, you can find the libretro cores inside directory <code>dist/wii</code>.</p> <p>Another way to compile cores, is by cloning the core's repository (for example, FCEUmm) from GitHub. In this case, to clone FCEUmm-Libretro repo:</p> <pre><code>git clone https://github.com/libretro/libretro-fceumm.git libretro-fceumm --recursive\ncd libretro-fceumm\n</code></pre> <p>For subsequent builds you only need to pull the changes from the core's repo (ex., FCEUmm)</p> <pre><code>cd libretro-fceumm\ngit pull\n</code></pre> <p>To update your local copy from the repository of the core (in this case FCEUmm), run git pull</p> <p>To compile the core for Wii (in this case, FCEUmm) run:</p> <pre><code>make platform=wii\n</code></pre> <p>Some cores (example, Snes9x) have a dedicated makefile for compile as a Libretro core. To compile the core for Wii with the dedicated Libretro makefile run:</p> <pre><code>make -f Makefile.libretro platform=wii\n</code></pre> <p>Rename the compiled core as 'libretro_wii.a', then put it in the RetroArch directory and follow the instructions in the \"Building RetroArch separately\" section.</p>"},{"location":"development/retroarch/compilation/wiiu/","title":"Nintendo Wii U Compilation / Development Guide","text":""},{"location":"development/retroarch/compilation/wiiu/#environment-configuration","title":"Environment configuration","text":"<p>You need the DevkitPPC(r29) toolchain installed and the DEVKITPRO and DEVKITPPC environment variables set to the respective folders.</p>"},{"location":"development/retroarch/compilation/wiiu/#retroarch-compilation","title":"RetroArch Compilation","text":""},{"location":"development/retroarch/compilation/wiiu/#fetching-retroarch","title":"Fetching RetroArch","text":"<p>Clone RetroArch's repository from GitHub</p> <pre><code>git clone https://github.com/libretro/RetroArch.git retroarch\ncd retroarch\n</code></pre> <p>For subsequent builds you only need to pull the changes from the repo</p> <pre><code>cd retroarch\ngit pull\n</code></pre> <p>To update your local copy from the repository run git pull</p>"},{"location":"development/retroarch/compilation/wiiu/#building-retroarch-separately","title":"Building RetroArch separately","text":"<p>To compile RetroArch (for Wii U) run:</p> <pre><code>make -f Makefile.wiiu\n</code></pre> <p>Note</p> <p>RetroArch on Wii U is statically linked. With statically linked RetroArch, each executable is a separate libretro core instead of the core being separately loaded from a single executable. A pre-existing libretro library needs to be present in the root directory in order to link RetroArch Wii U. This file needs to be called 'libretro_wiiu.a'.</p> <p>After a few seconds/minutes you should be able to find a retroarch_wiiu.elf and retroarch_wiiu.rpx file under that directory.</p>"},{"location":"development/retroarch/compilation/wiiu/#building-retroarch-in-bulk","title":"Building RetroArch in bulk","text":"<p>Instead of building each core one by one, you can build all cores as a batch task. Run from the main 'retroarch' directory:</p> <pre><code>cd dist-scripts\n</code></pre> <p>Note</p> <p>Make sure that all the libretro cores that you want to compile are inside the 'dist-scripts' directory. you can also copy the info files and icons in the same directory to have them added to the package, and to generate the meta.xml files.</p> <p>Once inside this directory, run :</p> <pre><code>./wiiu-cores.sh\n</code></pre> <p>This process will also automate the packaging process for you. the output will be in <code>pkg/wiiu</code>.</p>"},{"location":"development/retroarch/compilation/wiiu/#packaging-retroarch","title":"Packaging RetroArch","text":""},{"location":"development/retroarch/compilation/wiiu/#additional-tips","title":"Additional Tips:","text":""},{"location":"development/retroarch/compilation/wiiu/#core-compilation","title":"Core Compilation","text":""},{"location":"development/retroarch/compilation/wiiu/#fetching-cores","title":"Fetching Cores","text":"<p>The easiest way to fetch all the cores is to use libretro-super. Run</p> <pre><code>./libretro-fetch.sh\n</code></pre>"},{"location":"development/retroarch/compilation/wiiu/#building-cores","title":"Building Cores","text":"<p>The easiest way to build all the cores (for Wii U) is to use libretro-super. Run</p> <pre><code>./libretro-build-wiiu.sh\n</code></pre> <p>In case you only want to build one and/or more cores instead of all, you can specify the cores you want to build after the first command in no particular order. E.g.:</p> <pre><code>./libretro-build-wiiu.sh snes9x2010 fceumm\n</code></pre> <p>Once finished, you can find the libretro cores inside directory <code>dist/wiiu</code>.</p>"},{"location":"development/retroarch/compilation/windows/","title":"Windows 7 and later compilation and development guide","text":"<p>Warning</p> <p>The MinGW toolchain we use in this guide no longer supports targeting Windows Vista or earlier. Please refer to one of the MSVC guides for how to target older Windows versions with Visual Studio.</p> <p>This video covers quick demonstrations of these subjects;</p> <ol> <li> <p>Environment Configuration</p> </li> <li> <p>Building RetroArch</p> </li> <li> <p>Packaging RetroArch</p> </li> </ol> <p>Be sure to read instructions that are given in this page.</p>"},{"location":"development/retroarch/compilation/windows/#environment-configuration","title":"Environment configuration","text":"<p>We recommend MinGW-W64 from MSYS2. You can download MSYS2 installer from here.</p> <p>Follow the installation instructions and once finished start the MSYS2 shell.</p> <p>You may need to add \"Full Control\" permission to your MSYS folder (for example, C:\\msys64) or run the shell as Administrator.</p> <p>MSYS2 shell is a maintenance shell. We are going to use this shell to install the toolchain and other packages. First order of business is to update MSYS2. Start the MSYS2 MINGW64 or MINGW32 Shell (mingw64.exe or mingw32.exe), It is important to use this particular shell (MINGW) because the makefile uses it to detect the target platform as Windows.</p> <p>Once we're in the shell, run the following commands:</p> <pre><code>pacman --noconfirm -Sy\npacman --needed --noconfirm -S bash pacman pacman-mirrors msys2-runtime\n</code></pre> <p>Close MSYS2 shell and start it again, and:</p> <pre><code>pacman --noconfirm -Su\n</code></pre> <p>Restart MSYS2 once again. Now we can start installing the packages we actually need.</p> <p>For 32-bit builds:</p> <pre><code>pacman -S --noconfirm --needed wget git make mingw-w64-i686-toolchain mingw-w64-i686-ntldd mingw-w64-i686-zlib mingw-w64-i686-pkg-config mingw-w64-i686-SDL2 mingw-w64-i686-libxml2 mingw-w64-i686-freetype mingw-w64-i686-python3 mingw-w64-i686-ffmpeg mingw-w64-i686-drmingw\n</code></pre> <p>For 64-bit builds:</p> <pre><code>pacman -S --noconfirm --needed wget git make mingw-w64-x86_64-toolchain mingw-w64-x86_64-ntldd mingw-w64-x86_64-zlib mingw-w64-x86_64-pkg-config mingw-w64-x86_64-SDL2 mingw-w64-x86_64-libxml2 mingw-w64-x86_64-freetype mingw-w64-x86_64-python3 mingw-w64-x86_64-ffmpeg mingw-w64-x86_64-drmingw\n</code></pre> <p>You might want to install Qt too if you want to be able to use the desktop GUI.</p> <p>For 32-bit builds:</p> <pre><code>pacman -S --noconfirm --needed mingw-w64-i686-qt5 mingw-w64-i686-openssl\n</code></pre> <p>For 64-bit builds:</p> <pre><code>pacman -S --noconfirm --needed mingw-w64-x86_64-qt5  mingw-w64-x86_64-openssl\n</code></pre> <p>The NVIDIA CG toolkit package hasn't been updated for a while so you need to download that package manually and install with pacman. You can download the packages from sourceforge at the following locations: 32-bit / 64-bit. Alternatively you can use the following commands directly:</p> <p>For 32-bit builds:</p> <pre><code>wget http://sourceforge.net/projects/msys2/files/REPOS/MINGW_GCC_4_9/i686/mingw-w64-i686-nvidia-cg-toolkit-3.1-2-any.pkg.tar.xz/download -O mingw-w64-i686-nvidia-cg-toolkit-3.1-2-any.pkg.tar.xz\npacman -U mingw-w64-i686-nvidia-cg-toolkit-3.1-2-any.pkg.tar.xz\n</code></pre> <p>For 64-bit builds:</p> <pre><code>wget https://sourceforge.net/projects/mingw-w64-archlinux/files/x86_64/mingw-w64-nvidia-cg-toolkit-3.1-2-any_4.pkg.tar.xz/download -O mingw-w64-x86_64-nvidia-cg-toolkit-3.1-2-any.pkg.tar.xz\npacman -U mingw-w64-x86_64-nvidia-cg-toolkit-3.1-2-any.pkg.tar.xz\n</code></pre> <p>If you encounter any errors, you may try the following procedure instead:</p> <pre><code>pacman -S mingw-w64-x86_64-crt\npacman -S mingw-w64-x86_64-nvidia-cg-toolkit\n</code></pre> <p>Once these packages are installed close MSYS2 shell and open MinGW-w32 shell or MinGW-w64 shell depending on the platform you want to build for.</p> <p>You'll need gcc and make: <pre><code>pacman -S make\npacman -S gcc\n</code></pre></p>"},{"location":"development/retroarch/compilation/windows/#retroarch-compilation","title":"RetroArch Compilation","text":""},{"location":"development/retroarch/compilation/windows/#building-retroarch","title":"Building RetroArch","text":"<p>The first step is to obtain RetroArch's source tree. You can find the repository directly at GitHub</p> <p>Start the MINGW64 or the MINGW32 shell depending on what you want to compile and run the following commands:</p> <pre><code>git clone https://github.com/libretro/RetroArch.git retroarch\n</code></pre> <p>For subsequent builds you will need to pull the changes from the repo</p> <pre><code>cd retroarch\ngit pull\n</code></pre> <p>To compile RetroArch, run the following commands inside RetroArch's source tree:</p> <pre><code>./configure\nmake clean\nmake -j4\n</code></pre> <p>For development purposes you might want to run a debug build instead. In such case use the following commands:</p> <pre><code>./configure\nmake clean\nmake DEBUG=1 GL_DEBUG=1 -j4\n</code></pre> <p>To facilitate debugging you can get an integrated crash handler by replacing the configure step with (debug builds only):</p> <pre><code> ./configure --enable-drmingw\n</code></pre> <p>After a few minutes you should be able to find retroarch.exe under that directory. To start the newly compiled retroarch you can use:</p> <pre><code>./retroarch\n</code></pre>"},{"location":"development/retroarch/compilation/windows/#packaging-retroarch","title":"Packaging RetroArch","text":"<p>You might not be able to start your own build outside that environment. You might want to try to get all the required DLLs by running the following script in your destination RetroArch folder (not the git repo folder):</p> <pre><code>for i in $(seq 3); do for bin in $(ntldd -R *exe | grep -i mingw | cut -d\"&gt;\" -f2 | cut -d\" \" -f2); do cp -vu \"$bin\" . ; done; done\n</code></pre> <p>If Qt is enabled for your build (detected automatically by default), the following is also needed:</p> <pre><code>windeployqt --no-patchqt --no-translations retroarch.exe\nfor i in $(seq 3); do for bin in $(ntldd -R imageformats/*dll | grep -i mingw | cut -d\"&gt;\" -f2 | cut -d\" \" -f2); do cp -vu \"$bin\" . ; done; done\n</code></pre> <p>If you really want to get the required libraries for distribution or for personal use on other devices and LDD doesn't work for you for whatever reason, then you can try Dependency Walker.</p> <p>Tip</p> <p>If you're building frequently you may want to add ccache to the mix to speed up the build process. Install ccache via the package manager and the prepend the ccache symlink directory to your build environment path as shown below.</p> <p>For further instructions check the documentation</p> <p>Install ccache for 32-bit builds:</p> <pre><code>pacman -S --noconfirm --needed make mingw-w64-i686-ccache\n</code></pre> <p>Install ccache for 64-bit builds:</p> <pre><code>pacman -S --noconfirm --needed mingw-w64-x86_64-ccache\n</code></pre> <p>Configure paths for 32-bit builds:</p> <pre><code>export PATH=/mingw32/lib/ccache/bin/:$PATH\n</code></pre> <p>Configure paths for 64-bit builds:</p> <pre><code>export PATH=/mingw64/lib/ccache/bin/:$PATH\n</code></pre> <p>Build with both <code>ccache</code> and the <code>-j5</code> flag to specify five concurrent tasks:</p> <pre><code>ccache make -j5\n</code></pre> <p>Tip</p> <p>You can add this to /etc/profile under both the 32-bit and 64-bit setups by adding <code>${MINGW_MOUNT_POINT}/lib/ccache/bin</code> to the front of the PATH variables found in <code>MINGW32)</code> and <code>MINGW64)</code>, around line 50 of profile, to ensure the proper binaries are loaded for each development environment.</p> <p>From our own buildbot, the times with and without ccache are the following:</p> <p>Without ccache:</p> <pre><code>real    2m7.645s\nuser    0m2.585s\nsys     0m11.527s\n</code></pre> <p>With ccache:</p> <pre><code>real    0m25.466s\nuser    0m2.902s\nsys     0m9.952s\n</code></pre> <p>Tip</p> <p>You can also strip the debug symbols of the build product to save some space.</p> <p>Strip retroarch:</p> <pre><code>strip -s retroarch.exe\n</code></pre>"},{"location":"development/retroarch/compilation/windows/#core-compilation","title":"Core Compilation","text":""},{"location":"development/retroarch/compilation/windows/#fetching-cores","title":"Fetching Cores","text":"<p>You can find the cores on libretro's GitHUB organization.</p> <p>We have an all-in-one tool to fetch and compile cores which you can use to streamline the process. You can obtain the tool by using these commands:</p> <pre><code>git clone https://github.com/libretro/libretro-super.git\ncd libretro-super\n</code></pre> <p>Then you can fetch one or all the cores by using libretro-fetch.sh</p> <p>Fetch all cores:</p> <pre><code>./libretro-fetch.sh\n</code></pre> <p>Fetch one core:</p> <pre><code>./libretro-fetch.sh *corename*\n</code></pre> <p>Note</p> <p>Replace corename with the name of the core you want to fetch, for example gambatte</p>"},{"location":"development/retroarch/compilation/windows/#building-cores","title":"Building Cores","text":""},{"location":"development/retroarch/compilation/windows/#libretro-super","title":"libretro-super","text":"<p>The easiest way to build all the cores is to use libretro-build.sh from within libretro-super's source tree:</p> <pre><code>./libretro-build.sh\n</code></pre> <p>In case you only want to build one and/or more cores instead of all, you can specify the cores you want to build after the first command in no particular order:</p> <pre><code>./libretro-build.sh snes9x2010 fceumm\n</code></pre> <p>Once compilation has finished, you can find the libretro cores inside dist/win.</p>"},{"location":"development/retroarch/compilation/windows/#manual-fetching-and-compilation","title":"Manual Fetching and Compilation","text":"<p>Get the core's source tree. As an example we'll use fceumm</p> <pre><code>git clone https://github.com/libretro/libretro-fceumm.git\n</code></pre> <p>Then compile the core:</p> <pre><code>cd libretro-fceumm\nmake -f Makefile.libretro\n</code></pre> <p>If the Makefile.libretro is not present, as in the libretro-atari800 core, you might try the following:</p> <pre><code>cd libretro-atari800\nmake\n</code></pre> <p>Optionally strip the build product:</p> <pre><code>strip fceumm_libretro.dll\n</code></pre> <p>Most cores will build with these instructions. You might need to browse to a subdirectory in some cases.</p>"},{"location":"development/retroarch/compilation/windows2000-msvc-cmdline/","title":"Windows (2000 and later) Command-line Compilation / Development Guide","text":""},{"location":"development/retroarch/compilation/windows2000-msvc-cmdline/#environment-configuration","title":"Environment configuration","text":"<p>To compile RetroArch on the command-line targeting Windows 2000 or later, we will use a combination of the MSYS2 shell and Microsoft Visual C++ 2008.</p> <p>This guide assumes the host OS is Windows Vista or later, as MSYS2 cannot be installed on anything older.</p> <p>Prerequisites:</p> <p>Visual C++ 2008 Express (or Pro)</p>"},{"location":"development/retroarch/compilation/windows2000-msvc-cmdline/#retroarch-compilation","title":"RetroArch Compilation","text":""},{"location":"development/retroarch/compilation/windows2000-msvc-cmdline/#building-retroarch","title":"Building RetroArch","text":"<p>First you will need the MSYS2 distribution. You can download the MSYS2 installer from here.</p> <p>Follow the installation instructions and once finished start the MSYS2 shell.</p> <p>First we need to install the <code>make</code> package:</p> <pre><code>pacman -S make\n</code></pre> <p>Then we need to obtain RetroArch's source tree.</p> <p>You can clone the repository directly from GitHub:</p> <pre><code>git clone https://github.com/libretro/RetroArch.git retroarch\n</code></pre> <p>For subsequent builds you will need to pull the changes from the repo</p> <pre><code>cd retroarch\ngit pull\n</code></pre> <p>To compile RetroArch, run:</p> <pre><code>make -f Makefile.griffin platform=windows_msvc2008_x86\n</code></pre> <p>If you do not want to compile in DirectX support, you can add <code>HAVE_DIRECTX=0</code> to the end of the command line. Currently it is necessary to disable DirectX support when targeting NT4.</p>"},{"location":"development/retroarch/compilation/windows2000-msvc-cmdline/#finished","title":"Finished","text":"<p>After the build is finished you should be able to find retroarch.exe in the current directory. To start the newly compiled retroarch, copy the .exe file to a new folder where its configuration files and folders will be automatically created on first run. Running the .exe file inside of the source directory is not recommended as it will overwrite existing files.</p>"},{"location":"development/retroarch/compilation/windows2000/","title":"Windows (2000 and later) Compilation / Development Guide","text":""},{"location":"development/retroarch/compilation/windows2000/#environment-configuration","title":"Environment configuration","text":"<p>To compile RetroArch targeting Windows 2000 or later, we will use Microsoft Visual C++ 2008. This is the last version of Visual C++ that can target 2000.</p> <p>Prerequisites:</p> <p>Visual C++ 2008 Express (or Pro)</p>"},{"location":"development/retroarch/compilation/windows2000/#retroarch-compilation","title":"RetroArch Compilation","text":""},{"location":"development/retroarch/compilation/windows2000/#building-retroarch","title":"Building RetroArch","text":"<p>Note</p> <p>Setting up a working git shell is beyond the scope of this document.</p> <p>The first step is to obtain RetroArch's source tree. You can clone the repository directly from GitHub</p> <pre><code>git clone https://github.com/libretro/RetroArch.git retroarch\n</code></pre> <p>For subsequent builds you will need to pull the changes from the repo</p> <pre><code>cd retroarch\ngit pull\n</code></pre> <p>To compile RetroArch, first open the solution file located at pkg/msvc/RetroArch-msvc2008.sln with Visual C++ 2008.</p> <p>Next we select the desired solution configuration:</p> <p></p> <p>The choices are:</p> <pre><code>Debug\nDebug NoAccel\nRelease\nRelease NoAccel\n</code></pre> <p>For development purposes you can use the Debug configurations, otherwise use Release. The \"NoAccel\" versions do not include Direct3D or OpenGL support (but keeps DirectInput and DirectSound support).</p> <p>Now press F7 to build the solution, or go to Build -&gt; Build Solution.</p> <p>After the build is finished you should be able to find RetroArch-msvc2008.exe in the pkg/msvc/msvc-2008/&lt;configuration&gt; directory, where <code>&lt;configuration&gt;</code> is the one you chose earlier such as Debug or Release. To start the newly compiled retroarch you can press F5 in Visual C++ or simply navigate to the .exe file and run it there.</p>"},{"location":"development/retroarch/compilation/windows95-msvc-cmdline/","title":"Windows (95/98/NT4) Command-line Compilation / Development Guide","text":""},{"location":"development/retroarch/compilation/windows95-msvc-cmdline/#environment-configuration","title":"Environment configuration","text":"<p>To compile RetroArch on the command-line targeting Windows 95, Windows 98 or Windows NT4, we will use a combination of the MSYS2 shell and Microsoft Visual Studio .NET 2003.</p> <p>This guide assumes the host OS is Windows Vista or later, as MSYS2 cannot be installed on anything older.</p> <p>Prerequisites:</p> <p>Visual Studio .NET 2003</p> <p>Windows Server 2003 SP1 Platform SDK</p> <p>Note</p> <p>Windows 95 does not support DirectX 9.0, and NT4 does not support DirectX higher than 3.0a.</p> <p>Note</p> <p>In lieu of having to install the full Visual Studio suite, a minimal toolchain can be created by copying the <code>Common7</code> and <code>Vc7</code> folders from an installation on another machine (usually located at <code>C:\\Program Files (x86)\\Microsoft Visual Studio .NET 2003</code>). For this example we will use a root folder of <code>C:\\mini-msvc</code> to hold everything, and those two folders from the MSVC installation will be copied into a directory under the root folder called <code>msvc2003</code>.</p> <p>Note</p> <p>The same thing can be done with the Platform SDK, just copy the <code>Include</code> and <code>Lib</code> folders from an existing installation (usually located in <code>C:\\Program Files (x86)\\Microsoft Platform SDK</code>) into a folder in the root such as <code>plat2003sp1</code>.</p>"},{"location":"development/retroarch/compilation/windows95-msvc-cmdline/#retroarch-compilation","title":"RetroArch Compilation","text":""},{"location":"development/retroarch/compilation/windows95-msvc-cmdline/#building-retroarch","title":"Building RetroArch","text":"<p>First you will need the MSYS2 distribution. You can download the MSYS2 installer from here.</p> <p>Follow the installation instructions and once finished start the MSYS2 shell.</p> <p>First we need to install the <code>make</code> package:</p> <pre><code>pacman -S make\n</code></pre> <p>Then we need to obtain RetroArch's source tree.</p> <p>You can clone the repository directly from GitHub:</p> <pre><code>git clone https://github.com/libretro/RetroArch.git retroarch\n</code></pre> <p>For subsequent builds you will need to pull the changes from the repo</p> <pre><code>cd retroarch\ngit pull\n</code></pre> <p>To compile RetroArch, run:</p> <pre><code>make -f Makefile.griffin platform=windows_msvc2003_x86\n</code></pre> <p>DirectX support is disabled by default since 95/NT do not support DirectX 9.0, but if you will only be running on higher versions of Windows, you can re-enable it by adding <code>HAVE_DIRECTX=1</code> to the end of the command line.</p>"},{"location":"development/retroarch/compilation/windows95-msvc-cmdline/#minimal-toolchain","title":"Minimal Toolchain","text":"<p>If you are only using a minimal toolchain as described above, you can instead specify the location of the <code>msvc2003</code> and <code>plat2003sp1</code> folders like this:</p> <pre><code>make -f Makefile.griffin platform=windows_msvc2003_x86 VS71COMNTOOLS=\"c:\\\\mini-msvc\\\\msvc2003\\\\Common7\\\\Tools\\\\\" INETSDK=\"c:\\\\mini-msvc\\\\plat2003sp1\"\n</code></pre> <p>Note</p> <p>The trailing slash at the end of the COMNTOOLS variable is mandatory.</p> <p>Also, any of the paths can optionally be left out to use the system version instead.</p>"},{"location":"development/retroarch/compilation/windows95-msvc-cmdline/#finished","title":"Finished","text":"<p>After the build is finished you should be able to find retroarch.exe in the current directory. To start the newly compiled retroarch, copy the .exe file to a new folder where its configuration files and folders will be automatically created on first run. Running the .exe file inside of the source directory is not recommended as it will overwrite existing files.</p>"},{"location":"development/retroarch/compilation/windows98-msvc-cmdline/","title":"Windows (98 SE/ME/2000) Command-line Compilation / Development Guide","text":""},{"location":"development/retroarch/compilation/windows98-msvc-cmdline/#environment-configuration","title":"Environment configuration","text":"<p>To compile RetroArch on the command-line targeting Windows NT4, Windows 98SE, Windows Millenium Edition or Windows 2000, we will use a combination of the MSYS2 shell and Microsoft Visual C++ 2005.</p> <p>This guide assumes the host OS is Windows Vista or later, as MSYS2 cannot be installed on anything older.</p> <p>Prerequisites:</p> <p>DirectX SDK February 2005 (any version up to December 2006 should work to target 98SE)</p> <p>Visual C++ 2005 Express (or Pro)</p> <p>Windows Server 2003 SP1 Platform SDK</p> <p>Note</p> <p>Windows 98 Second Edition is supported, but First Edition has not been tested. If you do try to target it, make sure that your DirectX SDK is no newer than July 2004.</p> <p>Note</p> <p>In lieu of having to install the full Visual Studio suite, a minimal toolchain can be created by copying the <code>Common7</code> and <code>VC</code> folders from an installation on another machine (usually located at <code>C:\\Program Files (x86)\\Microsoft Visual Studio 8</code>). For this example we will use a root folder of <code>C:\\mini-msvc</code> to hold everything, and those two folders from the MSVC installation will be copied into a directory under the root folder called <code>msvc2005</code>.</p> <p>Note</p> <p>The same thing can be done with the DirectX and Platform SDKs, just copy the <code>Include</code> and <code>Lib</code> folders from an existing installation (usually located at <code>C:\\Program Files (x86)</code> in <code>Microsoft DirectX SDK (June 2010)</code> and <code>Microsoft Platform SDK</code> respectively) into folders in the root such as <code>dx9_june2010</code> and <code>plat2003sp1</code>.</p>"},{"location":"development/retroarch/compilation/windows98-msvc-cmdline/#retroarch-compilation","title":"RetroArch Compilation","text":""},{"location":"development/retroarch/compilation/windows98-msvc-cmdline/#building-retroarch","title":"Building RetroArch","text":"<p>First you will need the MSYS2 distribution. You can download the MSYS2 installer from here.</p> <p>Follow the installation instructions and once finished start the MSYS2 shell.</p> <p>First we need to install the <code>make</code> package:</p> <pre><code>pacman -S make\n</code></pre> <p>Then we need to obtain RetroArch's source tree.</p> <p>You can clone the repository directly from GitHub:</p> <pre><code>git clone https://github.com/libretro/RetroArch.git retroarch\n</code></pre> <p>For subsequent builds you will need to pull the changes from the repo</p> <pre><code>cd retroarch\ngit pull\n</code></pre> <p>To compile RetroArch, run:</p> <pre><code>make -f Makefile.griffin platform=windows_msvc2005_x86\n</code></pre> <p>If you do not want to compile in DirectX support, you can add <code>HAVE_DIRECTX=0</code> to the end of the command line. Currently it is necessary to disable DirectX support when targeting NT4.</p>"},{"location":"development/retroarch/compilation/windows98-msvc-cmdline/#minimal-toolchain","title":"Minimal Toolchain","text":"<p>If you are only using a minimal toolchain as described above, you can instead specify the location of the folders <code>msvc2005</code>, <code>dx9_feb2005</code> and <code>plat2003sp1</code> like this:</p> <pre><code>make -f Makefile.griffin platform=windows_msvc2005_x86 VS80COMNTOOLS=\"c:\\\\mini-msvc\\\\msvc2005\\\\Common7\\\\Tools\\\\\" INETSDK=\"c:\\\\mini-msvc\\\\plat2003sp1\" DXSDK_DIR=\"c:\\\\mini-msvc\\\\dx9_feb2005\"\n</code></pre> <p>Note</p> <p>The trailing slash at the end of the COMNTOOLS variable is mandatory.</p> <p>Also, any of the paths can optionally be left out to use the system version instead.</p>"},{"location":"development/retroarch/compilation/windows98-msvc-cmdline/#finished","title":"Finished","text":"<p>After the build is finished you should be able to find retroarch.exe in the current directory. To start the newly compiled retroarch, copy the .exe file to a new folder where its configuration files and folders will be automatically created on first run. Running the .exe file inside of the source directory is not recommended as it will overwrite existing files.</p>"},{"location":"development/retroarch/compilation/windows98/","title":"Windows (98/2000) Compilation / Development Guide","text":""},{"location":"development/retroarch/compilation/windows98/#environment-configuration","title":"Environment configuration","text":"<p>To compile RetroArch targeting Windows 98 and 2000, we will use Microsoft Visual C++ 2005. This is the last version of Visual C++ that can target 98/2000.</p> <p>This guide assumes the host OS is Windows 2000 Professional. VC2005 does run on Windows XP and Vista but this has not been tested with RetroArch.</p> <p>Prerequisites:</p> <p>Windows 2000 Service Pack 4</p> <p>Windows 2000 Update Rollup 1</p> <p>Internet Explorer 6</p> <p>Internet Explorer 6 Service Pack 1 (required by VC2005)</p> <p>DirectX SDK February 2005 (versions after this date will not install on Windows 2000)</p> <p>Windows Server 2003 SP1 Platform SDK</p> <p>Visual C++ 2005 Express (or Pro)</p> <p>Note</p> <p>Windows 98 Second Edition is supported, but First Edition has not been tested. If you do try to target it, make sure that your DirectX SDK is no newer than July 2004.</p>"},{"location":"development/retroarch/compilation/windows98/#retroarch-compilation","title":"RetroArch Compilation","text":""},{"location":"development/retroarch/compilation/windows98/#building-retroarch","title":"Building RetroArch","text":"<p>Note</p> <p>Setting up a working git shell is beyond the scope of this document. msysgit 1.8.5.2 is known to work locally but is unable to communicate with any remote servers on Windows 2000, and the github website does not load in IE6 either.</p> <p>The first step is to obtain RetroArch's source tree. You can clone the repository directly from GitHub</p> <pre><code>git clone https://github.com/libretro/RetroArch.git retroarch\n</code></pre> <p>For subsequent builds you will need to pull the changes from the repo</p> <pre><code>cd retroarch\ngit pull\n</code></pre> <p>To compile RetroArch, first open the solution file located at pkg/msvc/RetroArch-msvc2005.sln with Visual C++ 2005.</p> <p>Next we select the desired solution configuration:</p> <p></p> <p>The choices are:</p> <pre><code>Debug\nDebug NoAccel\nRelease\nRelease NoAccel\n</code></pre> <p>For development purposes you can use the Debug configurations, otherwise use Release. The \"NoAccel\" versions do not include Direct3D or OpenGL support (but keeps DirectInput and DirectSound support).</p> <p>Now press F7 to build the solution, or go to Build -&gt; Build Solution.</p> <p>After the build is finished you should be able to find RetroArch-msvc2005.exe in the pkg/msvc/msvc-2005/&lt;configuration&gt; directory, where <code>&lt;configuration&gt;</code> is the one you chose earlier such as Debug or Release. To start the newly compiled retroarch you can press F5 in Visual C++ or simply navigate to the .exe file and run it there.</p>"},{"location":"development/retroarch/compilation/windowsNT351-msvc-cmdline/","title":"Windows (NT3.51) Command-line Compilation / Development Guide","text":""},{"location":"development/retroarch/compilation/windowsNT351-msvc-cmdline/#environment-configuration","title":"Environment configuration","text":"<p>To compile RetroArch on the command-line targeting Windows NT3.51, we will use a combination of the MSYS2 shell and Microsoft Visual C++ 6.</p> <p>This guide assumes the host OS is Windows Vista or later, as MSYS2 cannot be installed on anything older.</p> <p>Prerequisites:</p> <p>Visual C++ 6</p> <p>Windows Server 2003 SP1 Platform SDK</p> <p>Note</p> <p>In lieu of having to install the full Visual Studio suite, a minimal toolchain can be created by copying the <code>Common</code> and <code>VC98</code> folders from an installation on another machine (usually located at <code>C:\\Program Files (x86)\\Microsoft Visual Studio</code>). For this example we will use a root folder of <code>C:\\mini-msvc</code> to hold everything, and those two folders from the MSVC installation will be copied into a directory under the root folder called <code>msvc6</code>.</p> <p>Note</p> <p>The same thing can be done with the Platform SDK, just copy the <code>Include</code> and <code>Lib</code> folders from an existing installation (usually located in <code>C:\\Program Files (x86)\\Microsoft Platform SDK</code>) into a folder in the root such as <code>plat2003sp1</code>.</p>"},{"location":"development/retroarch/compilation/windowsNT351-msvc-cmdline/#retroarch-compilation","title":"RetroArch Compilation","text":""},{"location":"development/retroarch/compilation/windowsNT351-msvc-cmdline/#building-retroarch","title":"Building RetroArch","text":"<p>First you will need the MSYS2 distribution. You can download the MSYS2 installer from here.</p> <p>Follow the installation instructions and once finished start the MSYS2 shell.</p> <p>First we need to install the <code>make</code> package:</p> <pre><code>pacman -S make\n</code></pre> <p>Then we need to obtain RetroArch's source tree.</p> <p>You can clone the repository directly from GitHub:</p> <pre><code>git clone https://github.com/libretro/RetroArch.git retroarch\n</code></pre> <p>For subsequent builds you will need to pull the changes from the repo</p> <pre><code>cd retroarch\ngit pull\n</code></pre> <p>To compile RetroArch, run:</p> <pre><code>make -f Makefile.griffin platform=windows_msvc6_x86\n</code></pre>"},{"location":"development/retroarch/compilation/windowsNT351-msvc-cmdline/#minimal-toolchain","title":"Minimal Toolchain","text":"<p>If you are only using a minimal toolchain as described above, you can instead specify the location of the <code>msvc6</code> and <code>plat2003sp1</code> folders like this:</p> <pre><code>make -f Makefile.griffin platform=windows_msvc6_x86 VCDIR=\"c:\\\\mini-msvc\\\\msvc6\\\\VC98\" INETSDK=\"c:\\\\mini-msvc\\\\plat2003sp1\"\n</code></pre> <p>Also, any of the paths can optionally be left out to use the system version instead.</p>"},{"location":"development/retroarch/compilation/windowsNT351-msvc-cmdline/#finished","title":"Finished","text":"<p>After the build is finished you should be able to find retroarch.exe in the current directory. To start the newly compiled retroarch, copy the .exe file to a new folder where its configuration files and folders will be automatically created on first run. Running the .exe file inside of the source directory is not recommended as it will overwrite existing files.</p>"},{"location":"development/retroarch/compilation/windowsXP-msvc-cmdline/","title":"Windows (XP and later) Command-line Compilation / Development Guide","text":""},{"location":"development/retroarch/compilation/windowsXP-msvc-cmdline/#environment-configuration","title":"Environment configuration","text":"<p>To compile RetroArch on the command-line targeting Windows XP or later, we will use a combination of the MSYS2 shell and Microsoft Visual Studio 2010.</p> <p>This guide assumes the host OS is Windows Vista or later, as MSYS2 cannot be installed on anything older.</p> <p>Prerequisites:</p> <p>DirectX SDK June 2010</p> <p>Visual Studio 2010 Express (or Pro)</p> <p>Note</p> <p>The Express version does not come with a 64-bit compiler.</p> <p>Visual Studio 2010 Service Pack 1 (needed for the multi-language support in RetroArch)</p> <p>Note</p> <p>In lieu of having to install the full Visual Studio suite, a minimal toolchain can be created by copying the <code>Common7</code> and <code>VC</code> folders from an installation on another machine (usually located at <code>C:\\Program Files (x86)\\Microsoft Visual Studio 10.0</code>). For this example we will use a root folder of <code>C:\\mini-msvc</code> to hold everything, and those two folders from the MSVC installation will be copied into a directory under the root folder called <code>msvc2010</code>.</p> <p>Note</p> <p>The same thing can be done with the DirectX SDK, just copy the <code>Include</code> and <code>Lib</code> folders from an existing installation (usually located at <code>C:\\Program Files (x86)\\Microsoft DirectX SDK (June 2010)</code>) into a folder in the root such as <code>dx9_june2010</code>.</p>"},{"location":"development/retroarch/compilation/windowsXP-msvc-cmdline/#retroarch-compilation","title":"RetroArch Compilation","text":""},{"location":"development/retroarch/compilation/windowsXP-msvc-cmdline/#building-retroarch","title":"Building RetroArch","text":"<p>First you will need the MSYS2 distribution. You can download the MSYS2 installer from here.</p> <p>Follow the installation instructions and once finished start the MSYS2 shell.</p> <p>First we need to install the <code>make</code> package:</p> <pre><code>pacman -S make\n</code></pre> <p>Then we need to obtain RetroArch's source tree.</p> <p>You can clone the repository directly from GitHub:</p> <pre><code>git clone https://github.com/libretro/RetroArch.git retroarch\n</code></pre> <p>For subsequent builds you will need to pull the changes from the repo</p> <pre><code>cd retroarch\ngit pull\n</code></pre> <p>To compile RetroArch, run:</p> <pre><code>make -f Makefile.griffin platform=windows_msvc2010_x86\n</code></pre> <p>Replace x86 with x64 if you would like a 64-bit build instead of 32-bit. If you do not want to compile in DirectX support, you can add <code>HAVE_DIRECTX=0</code> to the end of the command line.</p>"},{"location":"development/retroarch/compilation/windowsXP-msvc-cmdline/#minimal-toolchain","title":"Minimal Toolchain","text":"<p>If you are only using a minimal toolchain as described above, you can instead specify the location of the <code>msvc2010</code> and <code>dx9_june2010</code> folders like this:</p> <pre><code>make -f Makefile.griffin platform=windows_msvc2010_x86 VS100COMNTOOLS=\"c:\\\\mini-msvc\\\\msvc2010\\\\Common7\\\\Tools\\\\\" DXSDK_DIR=\"c:\\\\mini-msvc\\\\dx9_june2010\"\n</code></pre> <p>Note</p> <p>The trailing slash at the end of the COMNTOOLS variable is mandatory.</p> <p>Also, any of the paths can optionally be left out to use the system version instead.</p>"},{"location":"development/retroarch/compilation/windowsXP-msvc-cmdline/#finished","title":"Finished","text":"<p>After the build is finished you should be able to find retroarch.exe in the current directory. To start the newly compiled retroarch, copy the .exe file to a new folder where its configuration files and folders will be automatically created on first run. Running the .exe file inside of the source directory is not recommended as it will overwrite existing files.</p>"},{"location":"development/retroarch/compilation/windowsXP/","title":"Windows (XP and later) Compilation / Development Guide","text":""},{"location":"development/retroarch/compilation/windowsXP/#environment-configuration","title":"Environment configuration","text":"<p>To compile RetroArch targeting Windows XP or later, we will use Microsoft Visual Studio 2010.</p> <p>This guide assumes the host OS is Windows XP.</p> <p>Prerequisites:</p> <p>Windows XP Service Pack 3 (requires SP1 or SP2 installed first)</p> <p>DirectX SDK June 2010</p> <p>Visual Studio 2010 Express (or Pro)</p> <p>Visual Studio 2010 Service Pack 1 (needed for the multi-language support in RetroArch)</p>"},{"location":"development/retroarch/compilation/windowsXP/#retroarch-compilation","title":"RetroArch Compilation","text":""},{"location":"development/retroarch/compilation/windowsXP/#building-retroarch","title":"Building RetroArch","text":"<p>The first step is to obtain RetroArch's source tree.</p> <p>If you need a git shell to work in, msysgit 1.8.5.2 is known to work.</p> <p>You can clone the repository directly from GitHub:</p> <pre><code>git clone https://github.com/libretro/RetroArch.git retroarch\n</code></pre> <p>For subsequent builds you will need to pull the changes from the repo</p> <pre><code>cd retroarch\ngit pull\n</code></pre> <p>To compile RetroArch, first open the solution file located at pkg/msvc/RetroArch-msvc2010.sln with Visual Studio 2010.</p> <p>Next we select the desired solution configuration:</p> <p></p> <p>The choices are:</p> <pre><code>Debug\nDebug Cg\nRelease\nRelease Cg\n</code></pre> <p>For development purposes you can use the Debug configurations, otherwise use Release. The \"Cg\" versions also include support for Cg shaders used with the OpenGL video driver. These will require a separate installation of the Nvidia Cg Toolkit.</p> <p>Now press F7 to build the solution, or go to Build -&gt; Build Solution.</p> <p>After the build is finished you should be able to find RetroArch-msvc2005.exe in the pkg/msvc/&lt;configuration&gt; directory, where <code>&lt;configuration&gt;</code> is the one you chose earlier such as Debug or Release. To start the newly compiled retroarch you can press F5 in Visual C++ or simply navigate to the .exe file and run it there.</p>"},{"location":"development/retroarch/input/input-drivers/","title":"RetroArch Input Driver Specification","text":"<p>RetroArch is the reference frontend for the libretro API, and is used for emulators, game engines, and media players.</p> <p>RetroArch strives to be available on as many different platforms as possible. RetroArch runs and is supported on GNU/Linux, BSD, Windows, Mac OSX, Haiku, PlayStation Classic, PlayStation 2, PlayStation 3, Playstation Vita, Playstation Portable, Xbox 360, Xbox One, Raspberry Pi, Nintendo GameCube, Nintendo Wii, Nintendo Wii U, Nintendo 3DS &amp; 2DS Family, Nintendo Switch, Steam Link, Android, iOS, Open Pandora, Blackberry, and in web browsers via the Emscripten compiler.</p>"},{"location":"development/retroarch/input/input-drivers/#purpose-of-input-drivers","title":"Purpose of input drivers","text":"<p>RetroArch uses a modular \"driver\" system to allow the software to be ported to new platforms. One or more RetroArch input drivers must be available on a system in order to run the frontend. In addition to input drivers, RetroArch uses a variety of other platform-specific drivers including video drivers, audio drivers, and video recording drivers. </p> <p>In RetroArch, choosing an input driver generally corresponds to choosing an input API on the host system. A RetroArch input driver might be written for the API of a piece of hardware, such as <code>input_wiiu</code>; it might be specific to an operating system, such as <code>input_linuxraw</code> or <code>input_dos</code>; or the driver might be available on several platforms, such as <code>input_sdl</code>. The input drivers implement access to user keyboards, mice, pointers, and lightguns. A \"controller driver\" is also necessary if the input driver implements access to user joysticks or gamepads.</p> <p>Note</p> <p>Controller drivers were previously referred to as joypad drivers. Some documentation and code may still use the older \"joypad\" terminology.</p>"},{"location":"development/retroarch/input/input-drivers/#purpose-of-this-document","title":"Purpose of this document","text":"<p>This document organizes the information needed to develop and debug RetroArch input drivers, such as when porting RetroArch to a new platform.</p>"},{"location":"development/retroarch/input/input-drivers/#libretro-input-device-abstractions","title":"libretro input device abstractions","text":"<p>RetroArch's input system is based on abstracted input device types which are polled via callbacks provided by the libretro API. Libretro input device abstractions include:</p> <ul> <li>RetroPad<ul> <li>Digital Gamepad or Joystick</li> <li>Digital Gamepad or Joystick with Analog</li> </ul> </li> <li>Mouse</li> <li>Pointer</li> <li>Keyboard</li> <li>Lightgun</li> </ul>"},{"location":"development/retroarch/input/input-drivers/#retroarch-input-priorities","title":"RetroArch input priorities","text":"<p>As the libretro reference frontend, RetroArch's goal is to implement the API in a way that provides users a full experience across as wide a variety of platforms as possible. This includes the ability to map and remap physical input hardware to as many different types of libretro input device abstractions as possible, although the amount of flexibility can vary due to the limitations of specific platforms.</p> <p>Note</p> <p>The minimum API requirement for a libretro frontend is to implement polling responses for one \"RetroPad\", libretro's digital gamepad controller device abstraction. A compliant frontend could therefore support only a single input source -- for example, a frontend written for a handheld game system that has a built-in hardware controller, or a frontend that only accepts RetroPad input over a network connection.</p> <p>For libretro core developers, the value of a frontend like RetroArch that fully implements these abstractions with robust remapping abilities is that cores can be coded with the 'ideal' input type abstraction in mind using simple polling logic. Meanwhile users have the freedom to map that abstraction to any number of hardware or software input sources.</p>"},{"location":"development/retroarch/input/input-drivers/#input-driver-functionality-tables","title":"Input driver functionality tables","text":"<p>These tables presents RetroArch's input driver functionality organized into categories. It is based on the table that appears in the source for each input driver. Not all input drivers implement all possible functionality; in some case this is due to the inherent limitations of the host platform, and in other cases the functionality is possible but has yet to be implemented.</p> RetroPad Function Supported Notes Map physical gamepad to RetroPad (Port 0) Map physical gamepad w/analog to RetroPad Support multiple RetroPads Remap one RetroPad control to another Map physical keyboard to RetroPad controls Map physical mouse buttons to RetroPad Map physical pointer taps/controls to RetroPad Keyboard Function Supported Notes Map physical keyboard to RetroKeyboard Remap one RetroKey to another Respect <code>keyboard_mapping_blocked</code> Map physical gamepad controls to RetroKeys Map physical mouse buttons to RetroKeys Map physical pointer taps/controls to RetroKeys Mouse Function Supported Notes Map physical mouse to RetroMouse (Port 0) Support multiple RetroMice 'Grab and ungrab' mice Remap one mouse control to another Map physical pointer/touchpad to RetroMouse Map physical analog controls to RetroMouse coordinates Map physical digital gamepad controls to RetroMouse buttons Map physical keyboard to RetroMouse buttons Pointer Function Supported Notes Map physical pointer/touchpad to RetroPointer (Port 0) Support Multi-Touch Pointer (Port 0) Support multiple RetroPointers Support Multiple Pointers w/Multi-Touch Support remapping one touchpad control to another Map physical mouse to RetroPointer Map physical analog controls to RetroPointer coordinates Map physical digital gamepad controls to taps/controls Map physical keyboard to taps/controls Lightgun Function Supported Notes Map physical pointer/touchpad to Lightgun (Port 0) Map physical mouse to Lightgun (Port 0) Map physical analog joysticks to Lightguns Support multiple Lightguns Map multiple mice to multiple Lightguns Map multiple pointers/touchpads to multiple Lightguns Map physical digital gamepad to Lightgun controls Map physical keyboard to Lightgun controls Sensor Function* Supported Notes Set polling rate Enable/disable sensors Get sensor input <p>Note</p> <p>The Sensor Function table of input driver sensor functionality is incomplete. Contributions welcome!</p> Other Input Functions* Supported Notes <p>Note</p> <p>The Other Input Functions table of input driver functionality is driver-specific at this time.</p>"},{"location":"development/retroarch/input/input-drivers/#input-driver-architecture","title":"Input driver architecture","text":"<p>To be written.</p>"},{"location":"development/retroarch/input/input-drivers/#input_driver_t-struct","title":"input_driver_t struct","text":"<p>To be written.</p>"},{"location":"development/retroarch/input/input-drivers/#example-input_driver_t","title":"Example input_driver_t","text":"<pre><code>input_driver_t input_winraw = {\n   winraw_init,\n   winraw_poll,\n   winraw_input_state,\n   winraw_free,\n   NULL,\n   NULL,\n   winraw_get_capabilities,\n   \"raw\",\n   winraw_grab_mouse,\n   NULL\n};\n</code></pre>"},{"location":"development/retroarch/input/input-drivers/#documentation-todo","title":"Documentation TODO","text":"<ul> <li>Some RetroArch video drivers also serve as input drivers. In cases when the video driver relies on input driver for event handling, the video driver can preinitialize an input driver.</li> <li>Describe controller drivers and their implementation</li> </ul>"},{"location":"development/retroarch/input/overlay/","title":"Overlays","text":"<p>RetroArch supports overlay images for use with hardware accelerated drivers. The purpose of this is to allow some kind of input interface that is mouse/touch oriented. The overlay images are displayed with transparency over the regular game image, and the user is able to trigger input by pressing on certain parts of the overlay.</p> <p>Since the overlay is a series of images, the user should be able to fully configure the look and functionality of this overlay. This allows skinners and themers to go wild.</p>"},{"location":"development/retroarch/input/overlay/#libretro-overlay-repositories","title":"Libretro overlay repositories","text":"<p>The Libretro Organization hosts a repositories on Github that contains a compilation of overlays made with the Overlay Specification.</p> <ul> <li>Interactive overlays are managed within: https://github.com/libretro/common-overlays</li> <li>Decorative border overlays are managed within: https://github.com/libretro/overlay-borders</li> </ul> <p></p>"},{"location":"development/retroarch/input/overlay/#configuration","title":"Configuration","text":"<p>The overlay is described in a config file (.cfg). The config file uses the same config file syntax as RetroArch itself.</p> <p>The overlay system supports use of multiple overlays that can be switched out on the fly. Input is not only restricted to gamepad input, but can also work with any input that is bindable in RetroArch, e.g. save states, rewind, load state, etc.</p> <p>The config file describes:</p> <ul> <li>Which full-screen overlay images to use (.png, .tga, etc).</li> <li>The hitbox for each input event, i.e. \"size\" of the button.</li> <li>Which image should be shown over the input descriptors individually (optional).</li> <li>Where on the screen the entire overlay should be displayed.</li> </ul>"},{"location":"development/retroarch/input/overlay/#overlay-images","title":"Overlay images","text":"<p>First we configure how many overlays we use. Every overlay can have one overlay which fills the entire rectangle (overlay%u_rect), but is optional. The full-rect overlay is supported for compatibility with older format. It is less flexible than per-button overlays and is discouraged.</p> <pre><code>overlays = 2\noverlay0_overlay = overlay_img0.png # Optional\noverlay1_overlay = overlay_img1.png # Optional\n</code></pre> <p>The paths are relative to where the overlay config is loaded from. If the path is absolute, absolute paths will be used. On Unix-like systems ~/ is recognized as $HOME/.</p>"},{"location":"development/retroarch/input/overlay/#screen-placement","title":"Screen placement","text":"<p>By default, the overlay image will be stretched out to fill the whole game image. However, for some overlays, this is not practical.</p> <p>It is possible to set the placement using for example:</p> <pre><code>overlay0_rect = \"0.2,0.3,0.5,0.4\"\n</code></pre> <p>We assume that the game screen has normalized coordinates in X and Y that span from [0, 0] in the top-left corner to [1, 1] in the lower-right corner.</p> <p>This will render the overlay to x = 0.2, y = 0.3 with size width = 0.5, height = 0.4. The default (stretch to full screen) could be described as such:</p> <pre><code>overlay0_rect = \"0.0,0.0,1.0,1.0\"\n</code></pre>"},{"location":"development/retroarch/input/overlay/#full-screen-vs-full-viewport-overlays","title":"Full-screen vs. full-viewport overlays","text":"<p>By default, overlays will be stretched out to fill game viewport. However, in some cases the aspect ratio of the game causes there to remain large black borders around the game image.</p> <p>It is possible to stretch the overlay to full screen (instead of viewport) by specifying this option:</p> <pre><code>overlay0_full_screen = true\n</code></pre>"},{"location":"development/retroarch/input/overlay/#coordinate-descriptors","title":"Coordinate descriptors","text":"<p>We must also describe where on the overlay image buttons can be found for each overlay. E.g.:</p> <pre><code>overlay0_descs = 3 # Three buttons for this overlay in total\noverlay0_desc0 = \"a,32,64,radial,10,20\"\noverlay0_desc1 = \"start,100,50,rect,80,10\"\noverlay0_desc2 = \"overlay_next,200,180,radial,40,40\"\n</code></pre> <p>The format is:</p> <pre><code>\"button,position_x,position_y,hitbox_type,range_x,range_y\"\n</code></pre> <p>button corresponds to the input event being generated. The names are the same as in the general input config, e.g. input_player1_start would translate to start here. If button is a keyboard key, it must be prefixed with retrok_, e.g. retrok_a. overlay_next is a special bind designed to swap to the next overlay, or wrap around to the first one. Button nul means no input.</p> <p>For an up-to-date view of what buttons are called, check the input_config_bind_map variable in: https://github.com/libretro/RetroArch/blob/master/configuration.c.</p> <p>For an up-to-date view of what keyboard keys are called, check the input_config_key_map variable in: https://github.com/libretro/RetroArch/blob/master/input/input_keymaps.c.</p> <p>position_x and position_y are the x and y coordinates in pixels of the source image for the center of the button. It is possible to use normalized coordinates as well. This is necessary when a full-screen overlay is not used. overlay0_desc0_normalized = true will force normalized coordinates. overlay0_normalized = true sets all descriptors to true unless overridden specifically.</p> <p>hitbox_type describes which type of shape the button has. radial (circle, ellipse) and rect (rectangular) shapes are supported.</p> <p>range_x and range_y describe the size of the button. The semantics differ slightly for radial and rect hitbox types. For radial shape, range_x and range_y describe the radius in x and y directions in pixels of the source image. For rect shape, the range_x and range_y values represent the distance from center to the edge of the rect in terms of pixels of the source image.</p> <p>E.g. a range_x of 20 would mean the width of the rectangular is 40 pixels in total.</p>"},{"location":"development/retroarch/input/overlay/#special-button-types","title":"Special button types","text":"<p>A few buttons are not listed in input_config_bind_map: analog_left, analog_right, dpad_area, and abxy_area.</p> <p>analog_left and analog_right translate to analog sticks. These buttons must have hitbox type radial. It is possible to configure where saturation kicks in using overlay%u_desc%u_saturate_pct. E.g. a value of 0.75 means the 75% inner part contains the entire analog range. Outside the 75% it will be fully saturated.</p> <p>dpad_area and abxy_area are 8-way areas whose input events are based on the direction pressed, i.e. angle from hitbox center. An 8-way area can be used as-is or redefined. E.g. this creates a d-pad consisting of analog directions, and a face button diamond consisting of A,B,R,L:</p> <pre><code>overlay0_desc0 = \"dpad_area,0.15,0.57,rect,0.1094,0.1944\"\noverlay0_desc0_up = r_y_minus\noverlay0_desc0_down = r_y_plus\noverlay0_desc0_left = r_x_minus\noverlay0_desc0_right = r_x_plus\noverlay0_desc1 = \"abxy_area,0.85,0.57,rect,0.1607,0.2857\"\noverlay0_desc1_up = r\noverlay0_desc1_left = l\n</code></pre>"},{"location":"development/retroarch/input/overlay/#using-per-button-overlays","title":"Using per-button overlays","text":"<p>It is possible to use individual overlays per button. The given image will be displayed with same size as the hitbox in the input descriptor.</p> <pre><code>overlay0_desc0_overlay = button.png\n</code></pre>"},{"location":"development/retroarch/input/overlay/#let-overlay-buttons-move-around-when-pressed","title":"Let overlay buttons move around when pressed","text":"<p>For especially overlay buttons which map to analogs, it is useful to allow an image to follow the movement of the finger. To enable an overlay to follow the finger movement within its bounding area use the movable attribute:</p> <pre><code>overlay0_desc0_overlay = analog.png # Need some per-descriptor overlay\noverlay0_desc0_movable = true # Overlay image will now move around\n</code></pre>"},{"location":"development/retroarch/input/overlay/#let-buttons-light-up-when-they-are-pressed","title":"Let buttons light up when they are pressed","text":"<p>When using individial overlays per button it will make sense to have buttons light up when they are pressed. To do this, the alpha value per-button will be multiplied by a factor.</p> <pre><code>overlay0_desc0_alpha_mod = 2.0 # Alpha is multiplied 2x when pressed.\n</code></pre> <p>To set a default across all descriptors for an overlay, you can do so:</p> <pre><code>overlay0_alpha_mod = 2.0\n</code></pre>"},{"location":"development/retroarch/input/overlay/#adjust-a-buttons-hitbox","title":"Adjust a button's hitbox","text":"<p>A button's hitbox can be adjusted without affecting its image, input center, or analog saturation. Use reach_x/y to multiply hitbox width/height symmetrically. Use reach_up/down/left/right to multiply hitbox range in that direction. E.g. this creates a d-pad and extends its hitbox vertically by 60%, and left by 40%:</p> <pre><code>overlay0_desc0 = \"dpad_area,0.15,0.57,rect,0.1094,0.1944\"\noverlay0_desc0_reach_y = 1.6 # Multiply hitbox height\noverlay0_desc0_reach_left = 1.4 # Multiply hitbox width on left side\n</code></pre> <p></p> <p>Setting reach_x or reach_y to 0 removes the hitbox. The button then can't be pressed, but it will still light up if another button creates the same input. This is useful for animating a dpad_area or abxy_area.</p>"},{"location":"development/retroarch/input/overlay/#let-buttons-have-bigger-hitbox-when-they-are-pressed","title":"Let buttons have bigger hitbox when they are pressed","text":"<p>When pressed, you can make the hitboxes larger while the button is pressed:</p> <pre><code>overlay0_desc0_range_mod = 1.5 # For the particular descriptor\noverlay0_range_mod = 1.5 # Default for all descriptors\n</code></pre>"},{"location":"development/retroarch/input/overlay/#handling-hitbox-overlap","title":"Handling hitbox overlap","text":"<p>Avoid unwanted overlap by making a button exclusive and/or range_mod_exclusive. An exclusive button blocks other buttons pressed by the same finger. A range_mod_exclusive button blocks with higher priority, but only when range_mod is in effect, i.e. one poll after it is pressed.</p> <p>E.g. this overlaps an analog stick and a d-pad. The analog is exclusive, so initially it owns the overlapped hitbox area. Both buttons are range_mod_exclusive, so the one controlled first owns its range_mod extended hitbox area.</p> <pre><code>overlay0_desc0 = \"dpad_area,0.15,0.57,rect,0.1094,0.1944\"\noverlay0_desc0_reach_x = 2.08\noverlay0_desc0_reach_up = 1.62\noverlay0_desc0_reach_down = 1.96\noverlay0_desc0_range_mod = 1.2\noverlay0_desc0_range_mod_exclusive = true # Give dpad_area priority if controlled first\noverlay0_desc1 = \"analog_left,0.31,0.81,radial,0.0964,0.1928\"\noverlay0_desc1_exclusive = true # Give analog_left priority on first touch\noverlay0_desc1_range_mod = 2.75\noverlay0_desc1_range_mod_exclusive = true # Give analog_left priority if controlled first\n</code></pre> <p> </p>"},{"location":"development/retroarch/input/overlay/#triggering-multiple-buttons-with-one-desc","title":"Triggering multiple buttons with one desc","text":"<p>It's possible to trigger multiple buttons (e.g. diagonals) with one overlay desc.</p> <pre><code>overlay0_desc0 = \"left|up,32,64,radial,10,20\"\n</code></pre> <p>will trigger both left and up at same time. Keyboard keys are an exception; an overlay desc can have only one key.</p>"},{"location":"development/retroarch/input/overlay/#go-to-arbitrary-overlay-index","title":"Go to arbitrary overlay index","text":"<p>To build some kind of menu system, one would need the ability for overlay_next to refer to any overlay. To do this, two extra things must be configured:</p> <pre><code>overlay2_overlay = \"some_overlay.png\"\noverlay2_name = \"overview_overlay\" # A name which can be referred to. Must be set if it is to be refered to.\n\noverlay0_desc0 = \"overlay_next,200,180,radial,40,40\"\noverlay0_desc0_next_target = \"overview_overlay\" # When this overlay_next is pressed, it will go to index 2 directly, instead of the default 1.\n</code></pre>"},{"location":"development/retroarch/input/parallel-port-controllers/","title":"Parallel port controllers","text":""},{"location":"development/retroarch/input/parallel-port-controllers/#linux-parport-controller-driver","title":"Linux parport controller driver","text":"<p>RetroArch supports parallel port controllers on Linux via the \"parport\" controller driver. It uses an extended version of the Linux Multisystem 2-button joystick protocol.</p> Function Pin Register Bit Active Up 2 Data 0 Low Down 3 Data 1 Low Left 4 Data 2 Low Right 5 Data 3 Low A 6 Data 4 Low B 7 Data 5 Low Start 8 Data 6 Low Select 9 Data 7 Low Menu toggle 10 Status 6 Low X 11 Status 7 Low* Y 12 Status 5 Low L1 13 Status 4 Low R1 15 Status 3 Low <p>(*) Pin is hardware inverted, but RetroArch inverts it back again so the same pullup scheme may be used for all pins. Pin 1 is set high so it can be used for pullups.</p> <p>RetroArch does not perform debouncing, and so long as the button settling time is less than the frame time no bouncing will be observed. This replicates the latching behavior common in old games consoles. For optimum latency and jitter a high performance debouncing routine should be implemented in the controller hardware.</p> <p>Parallel port hardware does not provide a way to detect non-connected pins. To avoid rendering the menu usable with spurious button presses, RetroArch checks each pin on startup and assumes any active pin is not connected. Avoid holding controller buttons while starting RetroArch or those buttons will be disabled.</p>"},{"location":"development/shader/cg-shaders/","title":"Developing Legacy Cg Shaders","text":"<p>Cg Shaders are deprecated</p> <p>Cg has been discontinued for years and is closed source. Developers cannot use Cg for newer APIs such as Vulkan, D3D12, and Metal. Cg cross-compilation to GLSL is unmaintainable. We cannot do the Cg transform in runtime on mobile due to lack of open source Cg runtime.</p>"},{"location":"development/shader/cg-shaders/#new-slang-shader-specification","title":"New Slang Shader Specification","text":"<p>Unless you are developing shaders for a platform that cannot support the newer Slang standard, please consider developing a Slang shader instead.</p>"},{"location":"development/shader/cg-shaders/#example-cghlsl-program","title":"Example Cg/HLSL program","text":"<p>If you were to process an image on a CPU, you would most likely do something like this:</p> <pre><code>for(unsigned y = 0; y &lt; height ; y++) {\n   for(unsigned x = 0; x &lt; width ; x++)\n      out_pixel[y][x] = process_pixel(in_pixel[y][x], y,x);\n}\n</code></pre> <p>We quickly realize that this is highly serial and slow. We see that <code>out_pixel[y][x]</code> isn\u2019t dependent on <code>out_pixel[y + k][x + k]</code>, so we see that we can parallelize quite a bit.</p> <p>Essentially, we only need to implement <code>process_pixel()</code> as a single function, which is called thousands, even millions of time every frame. The only purpose in life for <code>process_pixel()</code> is to process an input, and produce an output. No state is needed, thus, a \u201cpure\u201d function in computer science terms.</p> <p>For the Cg program, we need to implement two different functions. <code>main_vertex()</code> takes care of transforming every incoming vertex from camera space down to clip space. This essentially means projection of 3D (coordinates on GPU) down to 2D (your screen). Since we\u2019re dealing with old school emulators here, which are already 2D, the vertex shading is very trivial.</p> <p>Vertex shaders get various coordinates as input, and uniforms. Every vertex emitted by the emulator is run through <code>main_vertex</code> which calculates the final output position. For our emulators this is just 4 times, since we\u2019re rendering a quad on the screen. 3D games would obviously have a lot more vertices.</p> <p>While coordinates differ for each invocation, uniforms are constant through-out every call. Think of it as a global variable that you\u2019re not allowed to change. Vertex shading can almost be ignored altogether, but since the vertex shader is run only 4 times, and the fragment shader is run millions of times per frame, it is a good idea to precalculate values in vertex shader that can later be used in fragment shader. There are some limitations to this which will be mentioned later.</p> <p><code>main_fragment()</code> takes care of calculating a pixel color for every single out-put pixel on the screen. If you\u2019re playing at 1080p, the fragment shader will have to be run <code>1920 * 1080</code> times! This is obviously straining on the GPU unless the shader is written efficiently. Obviously, main_fragment is where the real action happens. For many shaders we can stick with a \u201cdummy\u201d vertex shader which does some very simple stuff.</p> <p>The fragment shader receives a handle to a texture (the game frame itself), and the texture coordinate for the current pixel, and a bunch of uniforms. A fragment shader\u2019s final output is a color, simple as that. Processing ends here.</p>"},{"location":"development/shader/cg-shaders/#shader-hello-world","title":"Shader Hello World","text":"<p>We\u2019ll start off with the basic vertex shader. No fancy things are being done. You\u2019ll see a similar vertex shader in most of the Cg programs out there in the wild.</p> <pre><code>void main_vertex (float4 pos : POSITION,\n                  out float4 out_pos : POSITION,\n                  uniform float4x4 modelViewProj,\n                  float4 color : COLOR,\n                  out float4 out_color : COLOR,\n                  float2 tex : TEXCOORD,\n                  out float2 out_tex : TEXCOORD\n                  )\n\n{\n   out_pos = mul(modelViewProj, pos);\n   out_color = color ;\n   out_tex = tex ;\n}\n</code></pre> <p>This looks vaguely familiar to C, and it is. Cg stands for \u201cC for graphics\u201d after all. We notice some things are happening, notable some new types.</p>"},{"location":"development/shader/cg-shaders/#cg-types","title":"Cg types","text":""},{"location":"development/shader/cg-shaders/#float","title":"Float","text":"<p><code>float4</code> is a vector type. It contains 4 elements. It could be colors, positions, whatever. It's used for vector processing which the GPUs are extremely efficient at.</p>"},{"location":"development/shader/cg-shaders/#semantics","title":"Semantics","text":"<p>We see various semantics. The <code>POSITION</code> semantic means that the variable is tied to vertex coordinates. We see that we have an input <code>POSITION</code>, and an output (out) <code>POSITION</code>. We thus transform the input to the output with a matrix multiply with the current model-view projection. Since this matrix is the same for every vertex, it is a uniform. Remember that the variable names DO matter. modelViewProj has to be called exactly that, as the emulator will pass the MVP to this uniform. It is in the specification.</p> <p>Since we have semantics for the <code>POSITION</code>, etc, we can call them whatever we want, as the Cg environment figures out what the variables mean.</p> <p>The transformation happens here:</p> <pre><code>out_pos = mul(modelViewProj , pos);\n</code></pre> <p>The <code>COLOR</code> semantic isn\u2019t very interesting for us, but the example code in nVidias Cg documentation includes it, so we just follow along. <code>TEXCOORD</code> is the texture coordinate we get from the emulator, and generally we just pass it to the fragment shader directly. The coordinate will then be linearly interpolated across the fragments.</p> <p>More complex shaders can output (almost) as many variables they want, that will be linearily interpolated for free to the fragment shader. We also need a fragment shader to go along with the vertex shader, and here's a basic shader that only outputs the pixel as-is. This is pretty much the result you\u2019d get if you didn\u2019t run any shader (fixed-function) at all.</p> <pre><code>float4 main_fragment ( uniform sampler2D s0 : TEXUNIT0, float2 tex : TEXCOORD) : COLOR\n{\n   return tex2D ( s0 , tex ) ;\n}\n</code></pre> <p>This is arguably simpler than the vertex shader. Important to notice are:</p> <ul> <li><code>sampler2D</code> is a handle to a texture in Cg. The semantic here is <code>TEXUNIT0</code>, which means that it refers to the texture in texture unit 0. This is also part of the specification.</li> <li><code>float2 tex : TEXCOORD</code> is the interpolated coordinate we received from the vertex shader.</li> <li><code>tex2D(s0, tex);</code> simply does texture lookup and returns a <code>COLOR</code>, which is emitted to the framebuffer.</li> </ul> <p>Practically every fragment does more than one texture lookup. For example, classic pixel shaders look at the neighbor pixels as well to determine the output. But where is the neighbor pixel? We\u2019ll revise the fragment shader and try to make a really blurry shader to demonstrate. We now need to pull up some uniforms. We need to know how to modify our tex coordinates so that it points to a neighbor pixel.</p> <pre><code>struct input\n{\n   float2 video_size ;\n   float2 texture_size ;\n   float2 output_size ;\n   float frame_count ;\n};\n\nfloat4 main_fragment ( uniform sampler2D s0 : TEXUNIT0, uniform input IN , float2 tex : TEXCOORD) : COLOR\n{\n   float4 result = float4 ( 0. 0 ) ;\n   float dx = 1.0 / IN. texture_size. x ;\n   float dy = 1.0 / IN. texture_size. y ;\n\n   // Grab some of the neighboring pixels and blend together for a very mushy blur.\n   result += tex2D (s0 , tex + float2 (\u2212dx, \u2212dy));\n   result += tex2D (s0 , tex + float2 (dx, \u2212dy));\n   result += tex2D (s0 , tex + float2 (0.0, 0.0));\n   result += tex2D (s0 , tex + float2 (\u2212dx, 0.0));\n   return result / 4. 0 ;\n}\n</code></pre> <p>Here we use <code>IN.texture_size</code> to determine the the size of the texture. Since GL maps the whole texture to the interval <code>[0.0, 1.0]</code>, <code>1.0 / IN.texture_size</code> means we get the offset for a single pixel, simple enough. Almost every shader uses this. We can calculate these offsets in vertex shader to improve performance since the coordinates are linearily interpolated anyways, but that is for another time.</p>"},{"location":"development/shader/cg-shaders/#putting-it-together","title":"Putting it together","text":"<p>The final runnable product is a single <code>.cg</code> file with the <code>main_vertex</code> and <code>main_fragment</code> functions added together. Not very complicated. For the icing on the cake, you should add a license header.</p> <pre><code>/* Stupid blur shader.\n * Author : Your friendly neighbor.\n * License : We don't have those things!\n*/\n\nstruct input\n{\n   float2 video_size;\n   float2 texture_size;\n   float2 output_size;\n   float frame_count;\n};\n\nvoid main_vertex (\n   float4 pos : POSITION,\n   out float4 out_pos : POSITION,\n   uniform float4x4 modelViewProj ,\n   float4 color : COLOR,\n   out float4 out_color : COLOR,\n   float2 tex : TEXCOORD,\n   out float2 out_tex : TEXCOORD\n)\n{\nout_pos = mul( modelViewProj , pos );\nout_color = color ; out_tex = tex ;\n}\n\nfloat4 main_fragment ( uniform sampler2D s0 : TEXUNIT0,\n                       uniform input IN,\n                       float2 tex : TEXCOORD\n                     ) : COLOR\n{\n   float4 result = float4 ( 0. 0 ) ;\n   float dx = 1.0 / IN.texture_size.x;\n   float dy = 1.0 / IN.texture_size.y;\n\n   // Grab some of the neighboring pixels and blend\n   // together f o r a very mushy blur.\n   result += tex2D ( s0 , tex + float2 (\u2212dx, \u2212dy));\n   result += tex2D ( s0 , tex + float2 (dx, \u2212dy ));\n   result += tex2D ( s0 , tex + float2 (0.0, 0.0));\n   result += tex2D ( s0 , tex + float2 (\u2212dx, 0.0));\n   return result / 4.0;\n}\n</code></pre>"},{"location":"development/shader/cg-shaders/#result","title":"Result","text":"<p>As you can see, it\u2019s not a practical shader, but it shows the blurring effect to the extreme. </p>"},{"location":"development/shader/cg-shaders/#shader-file-format","title":"Shader file format","text":"<ul> <li><code>#</code> begins a comment; the rest of the line is ignored.</li> <li>Format is: <code>key = value</code>. There can be as many spaces as you like in between</li> <li>Values can be wrapped inside <code>\"</code> for multiword strings (<code>foo = \"hai u\"</code>)</li> <li><code>#include</code> includes a config file</li> <li>Path is relative to where config file was loaded unless an absolute path is chosen</li> <li>Key/value pairs from an <code>#include</code> are read-only and cannot be modified</li> </ul>"},{"location":"development/shader/cg-shaders/#cg-shader-spec","title":"Cg shader spec","text":"<p>This spec is for the Cg shading language developed by nVidia. It wraps around OpenGL to make shaders written in Cg quite portable. Shaders written in Cg can also be used with Direct3D and PlayStation3. Cg shaders are also compatible with basic HLSL if some considerations are taken into account. They can even be automatically compiled into GLSL shaders, which makes Cg shaders a true \u201cwrite once, run everywhere\u201d shader format.</p> <p>We encourage new shaders targeting Libretro frontends to be written in this format. RetroArch supports both single-pass Cg shaders as well as multi-pass shaders and uses a custom Cg preset format (<code>.cgp</code>).</p>"},{"location":"development/shader/cg-shaders/#another-example-cg-shader","title":"Another example Cg shader","text":"<pre><code>void main_vertex\n(\n   float4 position : POSITION,\n   out float4 oPosition : POSITION,\n   uniform float4x4 modelViewProj,\n   float2 tex : TEXCOORD,\n   out float2 oTex : TEXCOORD\n)\n{\n   oPosition = mul(modelViewProj, position);\n   oTex = tex;\n}\n\nfloat4 main_fragment (float2 tex : TEXCOORD, uniform sampler2D s0 : TEXUNIT0) : COLOR\n{\n   return tex2D(s0, tex);\n}\n</code></pre>"},{"location":"development/shader/cg-shaders/#example-cg-preset","title":"Example Cg preset","text":"<pre><code>shaders = 2\nshader0 = 4xBR-v3.9.cg\nscale_type0 = source\nscale0 = 4.0\nfilter_linear0 = false\nshader1 = dummy.cg\nfilter_linear1 = true\n</code></pre>"},{"location":"development/shader/cg-shaders/#entry-points","title":"Entry points:","text":"<ul> <li>Vertex: <code>main_vertex</code></li> <li>Fragment: <code>main_fragment</code></li> </ul>"},{"location":"development/shader/cg-shaders/#texture-unit","title":"Texture unit","text":"<p>All shaders work on texture unit <code>0</code> (the default). 2D textures must be used. Power-of-two sized textures are recommended for optimal visual quality. The shaders must deal with the actual picture data not filling out the entire texture. Incoming texture coordinates and uniforms provide this information.</p> <p>The texture coordinate origin is defined to be top-left oriented. A texture coordinate of <code>(0, 0)</code> will always refer to the top-left pixel of the visible frame. This is opposite of what most graphical APIs expect. The implementation must always ensure that this ordering is held for any texture that the shader has access to.</p> <p>Note</p> <p>Every texture bound for a shader must have black border mode set. Sampling a texel outside the given texture coordinates must always return a pixel with RGBA values <code>(0, 0, 0, 0)</code>.</p>"},{"location":"development/shader/cg-shaders/#uniforms","title":"Uniforms","text":"<p>Some parameters will need to be passed to all shaders, both vertex and fragment program. A generic entry point for fragment shader will look like:</p> <pre><code>float4 main_fragment (float2 tex : TEXCOORD0,\n   uniform input IN, uniform sampler2D s_p : TEXUNIT0) : COLOR\n{}\n</code></pre> <p>The input is a struct:</p> <pre><code>struct input\n{\n   float2 video_size;\n   float2 texture_size;\n   float2 output_size;\n   float frame_count;\n   float frame_direction;\n};\n</code></pre> <ul> <li><code>TEXCOORD0</code>: Texture coordinates for the current input frame will be passed in <code>TEXCOORD0</code>. (<code>TEXCOORD</code> is a valid alias for <code>TEXCOORD0</code>).</li> <li><code>COLOR0</code>: Although legal, no data of interest is passed here. You cannot assume anything about data in this stream.</li> <li><code>IN.video_size</code>: The size of the actual video data in the texture, e.g for a SNES this will be generally <code>(256, 224)</code> for normal resolution frames.</li> <li><code>IN.texture_size</code>: This is the size of the texture itself. Optimally power-of-two sized.</li> <li><code>IN.output_size</code>: The size of the video output. This is the size of the viewport shown on screen.</li> <li><code>IN.frame_count</code>: A counter of the frame number. This increases with 1 every frame. This value is really an integer,    but needs to be float for CGs lack of integer uniforms.</li> <li><code>IN.frame_direction</code>: A number telling which direction the frames are flowing. For regular playing, this value should be <code>1.0</code>. While the game is rewinding, this value should be <code>-1.0</code>.</li> <li><code>modelViewProj</code>: This uniform needs to be set in vertex shader. It is a uniform for the current MVP transform.</li> </ul>"},{"location":"development/shader/cg-shaders/#pre-filtering","title":"Pre-filtering","text":"<p>Most of these shaders are intended to be used with a non-filtered input. Nearest-neighbor filtering on the textures themselves are preferred. Some shaders, like scanline will most likely prefer bilinear texture filtering.</p>"},{"location":"development/shader/cg-shaders/#cg-meta-shader-format","title":"Cg meta-shader format","text":""},{"location":"development/shader/cg-shaders/#rationale","title":"Rationale","text":"<p>The <code>.cg</code> files themselves contain no metadata necessary to perform advanced filtering. They also cannot process an effect in multiple passes, which is necessary for some effects. The CgFX format does exist, but it would need current shaders to be rewritten to a HLSL-esque format. It also suffers a problem mentioned below.</p> <p>Rather than putting everything into one file (XML shader format), this format is config file based. This greatly helps testing shader combinations as there is no need to rearrange code in one big file. Another plus with this approach is that a large library of .cg files can be used to combine many shaders without needing to redundantly copy code over. It also helps testing as it is possible to unit-test every pass separately completely seamless.</p>"},{"location":"development/shader/cg-shaders/#format","title":"Format","text":"<p>The meta-shader format is based around the idea of a config file with the format: <code>key = value</code>. Values with spaces need to be wrapped in quotes: key = \"value stuff\".</p> <p>No .ini sections or similar are allowed. Meta-shaders may include comments, prefixed by the \"#\" character, both on their own in an otherwise empty line or at the end of a key = value pair.</p> <p>The meta-format has four purposes:</p> <ul> <li>Combine several standalone .cg shaders into a multipass shader.</li> <li>Define scaling parameters for each pass. I.e., a HQ2x shader might want to output with a scale of exactly 2x.</li> <li>Control filtering of textures. Many shaders will want nearest-neighbor filtering, and some will want linear.</li> <li>Define external lookup textures. Shaders can access external textures found in <code>.tga</code> files.</li> </ul>"},{"location":"development/shader/cg-shaders/#parameters","title":"Parameters","text":""},{"location":"development/shader/cg-shaders/#shaders-int","title":"<code>shaders</code> (int)","text":"<p>This param defines how many .cg shaders will be loaded. This value must be at least one. The path to these shaders will be found as a string in parameters shader0, shader1, ... shaderN, and so on. The path is relative to the directory the meta-shader was loaded from.</p>"},{"location":"development/shader/cg-shaders/#filter_linearn-boolean","title":"<code>filter_linearN</code> (boolean)","text":"<p>This parameter defines how the texture of the result of pass <code>N</code> will be filtered. <code>N = 0</code> (pass 0) is the raw input frame, <code>N = 1</code> is result of the first pass, etc. (A boolean value here might be <code>true</code>/<code>false</code>/<code>1</code>/<code>0</code>). Should this value not be defined, the filtering option is implementation-defined.</p>"},{"location":"development/shader/cg-shaders/#float_framebuffern-boolean","title":"<code>float_framebufferN</code> (boolean)","text":"<p>This parameters defines if shader <code>N</code> should render to a 32-bit floating point buffer. This only takes effect if shaderN is actually rendered to an FBO. This is useful for shaders which have to store FBO values outside <code>[0, 1]</code> range.</p>"},{"location":"development/shader/cg-shaders/#frame_count_modn-int","title":"<code>frame_count_modN</code> (int)","text":"<p>This positive parameter defines which modulo to apply to <code>IN.frame_count</code>. <code>IN.frame_count</code> will take the value <code>frame_count % frame_count_modN</code>.</p>"},{"location":"development/shader/cg-shaders/#scale_typen-string","title":"<code>scale_typeN</code> (string)","text":"<p>This can be set to one of these values:    - <code>source</code>:   Output size of shader pass <code>N</code> is relative to the input size as found in <code>IN.video_size</code>. Value is <code>float</code>.    - <code>viewport</code>: Output size of shader pass <code>N</code> is relative to the size of the window viewport. Value is <code>float</code>. This value can change over time if the user resizes their window!    - <code>absolute</code>: Output size is statically defined to a certain size. Useful for hi-res blenders or similar.</p> <p>If no scale type is assumed, it is assumed that it is set to <code>source</code> with <code>scaleN</code> set to <code>1.0</code>.</p> <p>It is possible to set <code>scale_type_xN</code> and <code>scale_type_yN</code> to specialize the scaling type in either direction. <code>scale_typeN</code> however overrides both of these.</p> <p>Exceptions</p> <ul> <li>If no <code>scale_type</code> is set for the very last shader, it is assumed to output at the full resolution rather than assuming    a scale of <code>1.0x</code>, and bypasses any frame-buffer object rendering.</li> <li>If there is only one shader, it is also considered to be the very last shader. If any scale option is defined, it has to go through a frame-buffer object, and subsequently rendered to screen. The filtering option used when stretching    is implementation defined. It is encouraged to not have any scaling parameters in last pass if you care about the filtering    option here.</li> <li>In first pass, should no scaling factor be defined, the implementation is free to choose a fitting scale. This means, that for a single pass shader, it is allowed for the implementation to set a scale, render to FBO, and stretch. (Rule above).</li> </ul>"},{"location":"development/shader/cg-shaders/#scalen-scale_xn-scale_yn-floatint","title":"<code>scaleN</code>, <code>scale_xN</code>, <code>scale_yN</code> (float/int)","text":"<p>These values control the scaling params from <code>scale_typeN</code>. The values may be either floating or int depending on the type. <code>scaleN</code> controls both scaling type in horizontal and vertical directions.</p> <p>If <code>scaleN</code> is defined, <code>scale_xN</code> and <code>scale_yN</code> have no effect. <code>scale_xN</code> and <code>scale_yN</code> controls scaling properties for the directions separately. Should only one of these be defined, the other direction will assume a source scale with value <code>1.0</code>, i.e. no change in resolution.</p> <p>Should <code>scale_type_xN</code> and <code>scale_type_yN</code> be set to different values, the use of scaleN is undefined (i.e. if X-type is absolute (takes <code>int</code>), and Y-type is source (takes <code>float</code>).)</p>"},{"location":"development/shader/cg-shaders/#textures-multiple-strings","title":"<code>textures</code> (multiple strings)","text":"<p>The textures param defines one or more lookup textures IDs. Several IDs are delimited with <code>;</code> such as <code>textures = \"foo;bar\"</code>.  These IDs serves as the names for a Cg sampler uniform, such as <code>uniform sampler2D foo;</code> and <code>uniform sampler2D bar;</code></p> <p>The path of the textures can be found in the IDs, i.e. <code>foo = image0.tga</code> and <code>bar = image1.tga</code>.  The paths of these textures are relative to the directory the meta-shader was loaded from.</p> <p>It is also possible to control the filtering options of the lookup texture as a boolean option in <code>ID_linear = true/false</code>. For example <code>foo_linear = false</code> will force nearest neighbor filtering for texture <code>foo</code>.</p> <p>Note</p> <p>If <code>ID_linear</code> is not set, it is assumed to be linearly filtered.</p> <p>The textures will be loaded \"as-is\", and coordinates <code>(0, 0)</code>, <code>(0, 1)</code>, <code>(1, 0)</code>, <code>(1, 1)</code> will correspond to the corners of the texture. Since the texture coordinates of the texture in TEXUNIT0 might not be as convenient, the texture coordinates for all lookup textures will be found in <code>TEXCOORD1</code>.</p> <p>Warning</p> <p>You cannot assume which texture unit the lookup textures will be bound to!</p> <p>The implementation only guarantees to be able to load plain top-left non-RLE <code>.tga</code> files. It may provide possibilities to load <code>.png</code> and other popular formats.</p>"},{"location":"development/shader/cg-shaders/#multipass","title":"Multipass","text":"<p>It is sometimes feasible to process an effect in several steps.</p> <pre><code>shaders = 2\nshader0 = pass1.cg\nshader1 = pass2.cg\nscale_type0 = source\nscale0 = 2.0\nfilter_linear0 = true\nfilter_linear1 = false\n</code></pre> <p>During multi-pass rendering, some additional uniforms are available.</p> <p>With multi-pass rendering, it is possible to utilize the resulting output for every pass that came before it, including the unfiltered input. This allows for an additive approach to shading rather than serial style.</p> <p>The unfiltered input can be found in the ORIG struct:</p> <ul> <li><code>uniform sampler2D ORIG.texture</code>: Texture handle. Must not be set to a predefined texture unit.</li> <li><code>uniform float2 ORIG.video_size</code>: The video size of original frame.</li> <li><code>uniform float2 ORIG.texture_size</code>: The texture size of original frame.</li> <li><code>in float2 ORIG.tex_coord</code>: An attribute input holding the texturecoordinates of original frame.</li> <li><code>PASS%u</code>: This struct holds the same data as the <code>ORIG</code> struct, although the result of passes {1, 2, 3 ...}, i.e.   <code>PASS1.texture</code> holds the result of the first shader pass. If rendering pass <code>N</code>, passes <code>{1, ..., N-2}</code> are available.   (<code>N-1</code> being input in the regular <code>IN</code> structure).</li> <li><code>PREV</code>: This struct holds the same data as the <code>ORIG</code> struct, and corresponds to the raw input image from the previous frame. Useful for motion blur.</li> <li><code>PREV1..6</code>: Similar struct as <code>PREV</code>, but holds the data for passes further back in time. <code>PREV1</code> is the frame before <code>PREV</code>, <code>PREV2</code> the frame before that again, and so on. This allows up to 8-tap motion blur.</li> </ul>"},{"location":"development/shader/content-aware-shaders/","title":"Content-aware shaders","text":"<p>Content-aware shaders grab data from the core state itself, such as emulator RAM data. This is only implemented for SNES so far, but the idea is quite extendable and portable. The basic idea is that we capture RAM data in a certain way (semantic if you will) from the SNES, and pass it as a uniform to the shader. The shader can thus act on game state in interesting ways.</p> <p>As a tool to show this feature, we\u2019ll focus on replicating the simple tech demo shown on YouTube. What happens is that when Mario jumps in the water, the screen gets a \"watery\" effect applied to it, with a rain lookup texture, and a wavy effect. When he jumps out of the water, the water effect slowly fades away.</p> <p>We thus need to know two things:</p> <ul> <li>Is Mario currently in water or not?</li> <li>If not, how long time was it since he jumped out?</li> </ul> <p>Since shaders do not have state associated with it, we have to let the environment provide the state we need in a certain way. We\u2019ll call this concept a semantic. To capture a RAM value directly, we can use the \"capture\" semantic. To record the time when the RAM value last changed, we can use the \"transition\" semantic.</p> <p>We obviously also need to know where in RAM we can find this information. Luckily, the folks over at SMW Central know the answer. We see: <pre><code>$7E :0075 , byte , Flag , Player is in water flag. #$00 = No; #$01 = Yes.\n</code></pre></p> <p>Bank <code>$7E</code> and <code>$7F</code> are mapped to WRAM <code>$0000-$FFFF</code> and <code>$10000-$1FFFF</code> respectively. Thus, our WRAM address is <code>$0075</code>. In the config file, we can now set up the uniforms we\u2019ll want to be captured.</p> <pre><code>imports = \"mario_water ; mario_water_time\"\nmario_water_semantic = capture\n# Capture the RAM value as\u2212is.\nmario_water_wram = 0075\n# This value is hex!\nmario_water_time_semantic = transition\n# Capture the frame count when this variable last changed.\n# Use with IN. frame_count , to create a fade\u2212out effect.\nmario_water_time_wram = 0075\n</code></pre> <p>The amount of possible \"semantics\" are practically endless. It might be worthwhile to attempt some possibility to run custom code that keeps track of the shader uniforms in more sophisticated ways later on. Do note that there is also a <code>%s_mask</code> value which will let you bitmask the RAM value to check for bit-flags more easily.</p> <p>Now that we got that part down, let's work on the shader design. In the fragment shader we simply render both the full water effect, and the <code>\u00abnormal\u00bb</code> texture, and let a \"blend\" variable decide. We can say that <code>1.0</code> is full water effect, <code>0.0</code> is no effect. We can start working on our vertex shader. We will do something useful here for once.</p> <pre><code>struct input\n{\n  float frame_count;\n};\n\nvoid main_vertex (\n  float4 pos : POSITION,\n  out float4 out_pos : POSITION,\n  uniform float4x4 modelViewProj,\n  float4 color : COLOR,\n  out float4 out_color : COLOR,\n  float2 tex : TEXCOORD0,\n  out float2 out_tex : TEXCOORD0,\n  float2 tex1 : TEXCOORD1,\n  out float2 out_tex1 : TEXCOORD1,\n\n  // Even if the data should have been int, Cg doesn't seem to support integer uniforms\n  uniform float mario_water,\n  uniform float mario_water_time,\n  uniform input IN,\n  // Blend factor is passed to fragment shader. We'll output the same value in every vertex,\n  // so every fragment will get the same value for blend_factor since there is nothing to interpolate.\n  out float blend_factor )\n  {\n    out_pos = mul( modelViewProj , pos );\n    out_color = color;\n    out_tex = tex;\n    out_tex1 = tex1;\n    float transition_time = 0.5 * (IN. frame_count mario_water_time ) / 60.0;\n    // If Mario is in the water ( $0075 != 0), it's always 1...\n    if ( mario_water &gt; 0.0)\n       blend_factor = 1.0;\n    // Fade out from 1.0 towards 0.0 as transition_time grows larger.\n    else\n      blend_factor = exp(\u2212transition_time );\n  }\n</code></pre> <p>All fine and dandy so far, now we just need to use this blend_factor in our fragment shader somehow... Let\u2019s move on to the fragment shader where we blend.</p> <pre><code>float apply_wave ( float2 pos , float2 src , float cnt )\n{\n  float2 diff = pos \u2212 src ;\n  float dist = 300.0 * sqrt(dot(diff , diff));\n  dist \u2212= 0.15 \u2217 cnt;\n  return sin(dist);\n}\n\n// Fancy stuff to create a wave.\nfloat4 water_texture ( float4 output , float2 scale , float cnt )\n{\n  float res = apply_wave ( scale , src0 , cnt ) ;\n  res += apply_wave ( scale , src1 , cnt ) ;\n  res += apply_wave ( scale , src2 , cnt ) ;\n  res += apply_wave ( scale , src3 , cnt ) ;\n  res += apply_wave ( scale , src4 , cnt ) ;\n  res += apply_wave ( scale , src5 , cnt ) ;\n  res += apply_wave ( scale , src6 , cnt ) ;\n  return output * (0.95 + 0.012 * res ) ;\n}\n\nfloat4 main_fragment\n(\n  uniform input IN ,\n  float2 tex : TEXCOORD0, uniform sampler2D s0 : TEXUNIT0,\n  uniform sampler2D rain , float2 tex1 : TEXCOORD1,\n\n  in float blend_factor // Passed from vertex\n) : COLOR\n{\n  float4 water_tex = water_texture ( tex2D (s0, tex), tex1, IN.frame_count );\n  float4 normal_tex = tex2D (s0 , tex);\n  float4 rain_tex = tex2D (rain , tex1);\n\n  // First , blend normal and water texture together ,\n  // then add the rain texture with alpha blending on top\n  return lerp(lerp(normal_tex, water_tex, blend_factor), rain_tex, rain_tex.a * blend_factor * 0. 5);\n}\n</code></pre>"},{"location":"development/shader/content-aware-shaders/#retroarch-config-file","title":"RetroArch config file","text":"<pre><code>shaders = 1\nshader0 = mario.cg\nfilter_linear0 = true\nimports = \"mario_water;mario_water_time\"\nmario_water_semantic = capture\nmario_water_time_semantic = transition\nmario_water_wram = 0075\nmario_water_time_wram = 0075\ntextures = rain\nrain = rain.tga\nrain_linear = true\n</code></pre>"},{"location":"development/shader/content-aware-shaders/#how-to-test-when-developing-for-retroarch","title":"How to test when developing for RetroArch","text":"<p>To develop these kinds of shaders, I\u2019d recommend using RetroArch w/Cg support, and a debugging tool for your emulator of choice to peek at RAM values (build it for bSNES yourself with <code>options=debugger</code>). After written, the shader should translate nicely over to RetroArch with some slight changes to the config.</p>"},{"location":"development/shader/content-aware-shaders/#results","title":"Results","text":"<p>Here are some screenshots of the mario effect (in Super Mario World SNES) we developed. Obviously this is a very simple example showing what can be done. The imagination is the limit here.</p>"},{"location":"development/shader/content-aware-shaders/#prior-to-mario-jumping-in-water","title":"Prior to Mario jumping in water","text":""},{"location":"development/shader/content-aware-shaders/#after-mario-jumps-in-water","title":"After Mario jumps in water","text":""},{"location":"development/shader/glsl-shaders/","title":"Developing GLSL Shaders","text":"<p>Like Cg shaders, GLSL shaders represents a single pass, and requires a preset file to describe how multiple shaders are combined. The extension is <code>.glsl</code>.</p> <p>As GLSL shaders are normally placed in two different files (<code>vertex</code>, <code>fragment</code>), making it impractical to select in a menu. This is worked around by using compiler defines in order to be equivalent to Cg shaders.</p>"},{"location":"development/shader/glsl-shaders/#example-glsl-shader","title":"Example GLSL shader","text":"<p>Note</p> <p>GLSL shaders must be modern style, and using ruby prefix is discouraged.</p> <pre><code>varying vec2 tex_coord;\n#if defined(VERTEX)\nattribute vec2 TexCoord;\nattribute vec2 VertexCoord;\nuniform mat4 MVPMatrix;\nvoid main()\n{\n    gl_Position = MVPMatrix * vec4(VertexCoord, 0.0, 1.0);\n    tex_coord = TexCoord;\n}\n#elif defined(FRAGMENT)\nuniform sampler2D Texture;\nvoid main()\n{\n    gl_FragColor = texture2D(Texture, tex_coord);\n}\n#endif\n</code></pre>"},{"location":"development/shader/glsl-shaders/#glsl-presets","title":"GLSL presets","text":"<p>Like Cg shaders, there is a GLSL preset format. Instead of <code>.cgp</code> extension, <code>.glslp</code> extension is used. The format is exactly the same, just replace <code>.cg</code> shaders with <code>.glsl</code>. To convert a <code>.cgp</code> preset, rename to <code>.glslp</code> and replace all references to <code>.cg</code> shaders with <code>.glsl</code>.</p>"},{"location":"development/shader/glsl-shaders/#converting-from-cg-shaders","title":"Converting from Cg shaders","text":"<p>GLSL shaders are mostly considered a compatibility format. It is possible to compile Cg shaders into GLSL shaders automatically using our cg2glsl script. It can convert single shaders as well as batch conversion. Shader converstion relies on nVidia's <code>cgc</code> tool found in the <code>nvidia-cg-toolkit</code> package.</p>"},{"location":"development/shader/shader-lookup-textures/","title":"Shader lookup textures","text":"<p>A popular feature among RetroArch users the ability to access external textures. This means we have several samplers available for use. In the config file, we define the textures as so:</p> <pre><code>textures = \" foo ; bar\"\nfoo = path_foo.png\nbar = bar_foo.png\nfoo_linear = true # Linear filtering for foo.\nbar_linear = true # Linear filtering for bar.\n</code></pre> <p>RetroArch PS3 uses PNG as the main format, RetroArch can use whatever if Imlib2 support is compiled in. If not, it\u2019s restricted to lop-left ordered, non-RLE TGA.</p> <p>From here on, <code>foo</code> and <code>bar</code> can be found as uniforms in the shaders. The texture coordinates for the lookup texture will be found in <code>TEXCOORD1</code>. This can simply be passed along with <code>TEXCOORD0</code> in the vertex shader as we did with <code>TEXCOORD0</code>.</p> <p>Here we make a fragment shader that blends in two background picture at a reduced opacity. Do NOT assign lookup textures to a certain <code>TEXUNIT</code>, Cg will assign a fitting texture unit to the sampler.</p> <pre><code>float4 main_fragment ( uniform sampler2D s0 : TEXUNIT0,\n                       uniform sampler2D foo,\n                       uniform sampler2D bar,\n                       float2 tex : TEXCOORD0,\n                       float2 tex_lut : TEXCOORD1) : COLOR\n{\n   float4 bg_sum = (tex2D(foo, tex_lut) + tex2D (bar , tex_lut)) * 0.15;\n   return lerp (tex2D(s0, tex), bg_sum, bg_sum.a); // Alpha blending.\n}\n</code></pre>"},{"location":"development/shader/shader-lookup-textures/#results-a-shader-for-drawing-a-background-border","title":"Results: a shader for drawing a background border","text":""},{"location":"development/shader/shader-overview/","title":"Shader Development Overview","text":""},{"location":"development/shader/shader-overview/#available-shader-types","title":"Available shader types","text":"<p>As the reference libretro frontend, RetroArch supports three shader languages:</p> Shader Language Video Context Drivers Slang Vulkan, GL 2.x (legacy desktop), GL 3.x+ (modern desktop), GLES2 (legacy mobile), GLES3 (modern mobile), HLSL (Planned), Metal (Planned) GLSL GL Shading Language, OpenGL, OpenGL ES, and EGL contexts including KMS mode in Linux) Cg (deprecated) HLSL/GLSL, nVidia XML (discontinued) GLSL <p>When possible, it is recommended to use Slang shaders for supporting the widest variety of modern systems.</p> <p>RetroArch is able to stack these shaders to create a combined effect. These complex effects are saved with a special extension:</p> <ul> <li><code>.slangp</code> for Slang</li> <li><code>.glslp</code> for GLSL</li> <li><code>.cpg</code> for Cg</li> </ul>"},{"location":"development/shader/shader-overview/#common-shaders-repository","title":"Common Shaders Repository","text":"<p>The Libretro organization hosts a repository on Github that contains a compilation of shaders. Users can contribute their own shaders to this repository by doing a Pull Request.</p>"},{"location":"development/shader/shader-overview/#shader-development-the-rendering-pipeline","title":"Shader development: The rendering pipeline","text":"<p>With shaders you are able to take control over a large chunk of the GPUs inner workings by writing your own programs that are uploaded and run on the GPU. In the old days, GPUs were a big black box that was highly configurable using endless amount of API calls. In more modern times, rather than giving you endless amounts of buttons, you are expected to implement the few <code>\u00abbuttons\u00bb</code> you actually need, and have a streamlined API.</p> <p>The rendering pipeline is somewhat complex, but we can in general simplify it to:</p> <ul> <li>Vertex processing</li> <li>Rasterization</li> <li>Fragment processing</li> <li>Framebuffer blend</li> </ul> <p>Shader developers can take control of what happens during vertex processing, and fragment processing.</p>"},{"location":"development/shader/shader-overview/#frontend-development-rendering-the-shader-chain","title":"Frontend development: Rendering the shader chain","text":"<p>With all these options, the rendering pipeline can become somewhat complex. The meta-shader format greatly utilizes the possibility of off-screen rendering to achieve its effects.</p> <p>In OpenGL usually this is referred to as frame-buffer objects, and in HLSL as render targets. This feature will be referred to as FBO from here. FBO texture is assumed to be a texture bound to the FBO. As long as the visual result is approximately identical, the implementation does not have to employ FBO.</p> <p>With multiple passes our chain looks like this conceptually:</p> <p><code>|Source image| ---&gt; |Shader 0| ---&gt; |FBO 0| ---&gt; |Shader 1| ---&gt; |FBO 1| ---&gt; |Shader 2| ---&gt; (Back buffer)</code></p> <p>In the case that Shader 2 has set some scaling params, we need to first render to an FBO before stretching it to the back buffer.</p> <p><code>|Source image| ---&gt; ... |Shader 2| ---&gt; |FBO 2| ---&gt; (Back buffer)</code></p> <p>Scaling parameters determine the sizes of the FBOs. For visual fidelity it is recommended that power-of-two sized textures are bound to them. This is due to floating point inaccuracies that become far more apparent when not using power-of-two textures. If the absolute maximum size of the source image is known, then it is possible to preallocate the FBOs.</p> <p>Do note that the size of FBOn is determined by dimensions of <code>FBOn-1</code> when \"source\" scale is used, not the source image size! Of course, FBO0 would use source image size, as there is no <code>FBO-1</code>.</p> <p>For example, with SNES there is a maximum width of <code>512</code> and height of <code>478</code>. If a source relative scale of <code>3.0x</code> is desired for first pass, it is thus safe to allocate a FBO with size of <code>2048x2048</code>. However, most frames will just use a tiny fraction of this texture.</p> <p>With \"viewport\" scale it might be necessary to reallocate the FBO in run-time if the user resizes the window.</p>"},{"location":"development/shader/shader-overview/#shader-compatibility-with-retroarch-video-drivers","title":"Shader compatibility with RetroArch video drivers","text":"<p>In RetroArch, the following table specifies which shader types work with what video contexts:</p> Context Driver GLSL CG HLSL Slang Android Y N N Y CGL Y N N N D3D N Y N (Possible) Y DRM Y N N N Emscripten Y N N N GDI N N N N KHR N N N Y Mali Y N N N Opendingux Y N N N OSMesa Y N N N PS3 N Y N N QNX Y N N N SDL N N N N VC Y N N N Vivante Y N N N Wayland Y N N Y WGL Y N N Y X Y Y N Y XEGL Y N N N <p>Warning</p> <p>Attempting to load unsupported shader types may result in segmentation faults because the context drivers currently do not have the behavior to declare which types of shaders it supports.</p>"},{"location":"development/shader/slang-shaders/","title":"Developing Slang Shaders","text":""},{"location":"development/shader/slang-shaders/#target-shader-languages","title":"Target shader languages","text":"<ul> <li>Vulkan</li> <li>GL 2.x (legacy desktop)</li> <li>GL 3.x+ (modern desktop)</li> <li>GLES2 (legacy mobile)</li> <li>GLES3 (modern mobile)</li> <li>HLSL</li> <li>Metal</li> </ul> <p>Design principle: Avoid mandating high-level features which do not work for GLES2.</p> <p>RetroArch runs on GL, GL2, and GLES2. GL and GL2 are only relevant from a legacy standpoint, but GLES2 a relevant target platform today and having GLES2 compatibility makes GL2 very easy. We therefore avoid a design which deliberately ruins GLES2 compatibility.</p> <p>However, we also do not want to artificially limit ourselves to shader features which are only available in GLES2. There are many shader builtins, for example, which only work in GLES3/GL3 and we should not hold back support in these cases.</p>"},{"location":"development/shader/slang-shaders/#why-a-new-spec","title":"Why a new spec?","text":"<p>The previous RetroArch shader subsystem in RetroArch is quite mature with a large body of shaders written for it. While it has served us well, it was not forward-compatible.</p> <p>The current state of writing high-level shading languages that work everywhere is challenging. Up until now, we have relied on nVidia Cg to serve as a basic foundation for shaders, but Cg has been discontinued for years and is closed source. Developers cannot use Cg for newer APIs such as Vulkan, D3D12, and Metal.</p> <p>Cg cross-compilation to GLSL is unmaintainable. We cannot do the Cg transform in runtime on mobile due to lack of open source Cg runtime.</p> <p>Another alternative was to write straight-up GLSL, but this too has serious drawbacks. All the different GL versions and GLSL variants are different enough that it becomes painful to write portable GLSL code that works without modification.</p> <p>Examples include:</p> <ul> <li>varying/attribute vs in/out (legacy vs modern)</li> <li>precision qualifiers (GLSL vs ESSL)</li> <li>texture2D vs texture (legacy vs modern)</li> <li>Lack of standard support for <code>#include</code> to reduce copy-pasta</li> </ul> <p>The fundamental issue is that GLSL shaders are dependent on the runtime GL version, which makes it difficult to test all shader variants. We did not want to litter every shader with heaps of <code>#ifdefs</code> everywhere to combat this problem. We also wanted to avoid having to write pseudo-GLSL with some text-based replacement behind the scenes.</p>"},{"location":"development/shader/slang-shaders/#vulkan-glsl-as-the-portable-solution","title":"Vulkan GLSL as the portable solution","text":"<p>Fortunately, there is now a forward looking and promising solution to our problems. Vulkan GLSL is a GLSL dialect designed for Vulkan and SPIR-V intermediate representation. We can use whatever GLSL version we want when writing shaders, as it is decoupled from the GL runtime.</p> <p>In runtime, we can have a vendor-neutral mature compiler, https://github.com/KhronosGroup/glslang which compiles our Vulkan GLSL to SPIR-V. Using https://github.com/KhronosGroup/SPIRV-Cross, we can then do reflection on the SPIR-V binary to deduce our filter chain layout.</p> <p>We can also disassemble back to our desired GLSL dialect in the GL backend based on which GL version we're running, which effectively means we can completely sidestep all our current problems with a pure GLSL based shading system.</p> <p>Another upside is that we no longer have to deal with vendor-specific quirks in the GLSL frontend. A common problem when people write for nVidia is that people mistakingly use <code>float2</code>/<code>float3</code>/<code>float4</code> types from Cg/HLSL, which is supported as an extension in their GLSL frontend.</p>"},{"location":"development/shader/slang-shaders/#why-not-spir-v-directly","title":"Why not SPIR-V directly?","text":"<p>This was considered, but there are several convenience problems with having a shading spec around pure SPIR-V. The first problem is metadata. In GLSL, we can quite easily extend with custom <code>#pragmas</code> or similar, but there is no trivial way to do this in SPIR-V outside writing custom tools to emit special metadata as debug information or similar with OpSource.</p> <p>We could also have this metadata outside in a separate file, but juggling more files means more churn, which we should try to avoid. The other problem is convenience. If RetroArch only accepts SPIR-V, we would need an explicit build step outside RetroArch first before we could test a shader. This gets very annoying during shader development, so it is clear that we need to support GLSL anyways, making SPIR-V support kinda redundant.</p> <p>The main argument for supporting SPIR-V would be to allow new shading languages to be used. This is a reasonable thing to consider, which is why the goal is to not design ourselves into a corner where it's only Vulkan GLSL that can possibly work down the line. We are open to the idea that new shading languages that target SPIR-V will emerge.</p>"},{"location":"development/shader/slang-shaders/#high-level-overview","title":"High level Overview","text":"<p>The RetroArch shader format outlines a filter chain/graph, a series of shader passes which operate on previously generated data to produce a final result. The goal is for every individual pass to access information from all previous shader passes, even across frames, easily.</p> <ul> <li>The filter chain specifies a number of shader passes to be executed one after the other.</li> <li>Each pass renders a full-screen quad to a texture of a certain resolution and format.</li> <li>The resolution can be dependent on external information.</li> <li>All filter chains begin at an input texture, which is created by a libretro core or similar.</li> <li>All filter chains terminate by rendering to the \"backbuffer\".</li> </ul> <p>The backbuffer is somewhat special since the resolution of it cannot be controlled by the shader. It can also not be fed back into the filter chain later because the frontend (here RetroArch) will render UI elements and such on top of the final pass output.</p> <p>Let's first look at what we mean by filter chains and how far we can expand this idea.</p>"},{"location":"development/shader/slang-shaders/#simplest-filter-chain","title":"Simplest filter chain","text":"<p>The simplest filter chain we can specify is a single pass.</p> <pre><code>(Input) -&gt; [ Shader Pass #0 ] -&gt; (Backbuffer)\n</code></pre> <p>In this case there are no offscreen render targets necessary since our input is rendered directly to screen.</p>"},{"location":"development/shader/slang-shaders/#multiple-passes","title":"Multiple passes","text":"<p>A trivial extension is to keep our straight line view of the world where each pass looks at the previous output.</p> <pre><code>(Input) -&gt; [ Shader Pass #0 ] -&gt; (Framebuffer) -&gt; [ Shader Pass #1 ] -&gt; (Backbuffer)\n</code></pre> <p>Framebuffer here might have a different resolution than both Input and Backbuffer. A very common scenario for this is separable filters where we first scale horizontally, then vertically.</p>"},{"location":"development/shader/slang-shaders/#multiple-passes-and-multiple-inputs","title":"Multiple passes and multiple inputs","text":"<p>There is no reason why we should restrict ourselves to a straight-line view.</p> <pre><code>     /------------------------------------------------\\\n    /                                                  v\n(Input) -&gt; [ Shader Pass #0 ] -&gt; (Framebuffer #0) -&gt; [ Shader Pass #1 ] -&gt; (Backbuffer)\n</code></pre> <p>In this scenario, we have two inputs to shader pass #1, both the original, untouched input as well as the result of a pass in-between. All the inputs to a pass can have different resolutions.</p> <p>We have a way to query the resolution of individual textures to allow highly controlled sampling. We are now at a point where we can express an arbitrarily complex filter graph, but we can do better. For certain effects, time (or rather, results from earlier frames) can be an important factor.</p>"},{"location":"development/shader/slang-shaders/#multiple-passes-multiple-inputs-with-history","title":"Multiple passes, multiple inputs, with history","text":"<p>We now extend our filter graph, where we also have access to information from earlier frames. Note that this is still a causal filter system.</p> <pre><code>Frame N:        (Input     N, Input N - 1, Input N - 2) -&gt; [ Shader Pass #0 ] -&gt; (Framebuffer     N, Framebuffer N - 1, Input N - 3) -&gt; [ Shader Pass #1 ] -&gt; (Backbuffer)\nFrame N - 1:    (Input N - 1, Input N - 2, Input N - 3) -&gt; [ Shader Pass #0 ] -&gt; (Framebuffer N - 1, Framebuffer N - 2, Input N - 4) -&gt; [ Shader Pass #1 ] -&gt; (Backbuffer)\nFrame N - 2:    (Input N - 2, Input N - 3, Input N - 4) -&gt; [ Shader Pass #0 ] -&gt; (Framebuffer N - 2, Framebuffer N - 3, Input N - 5) -&gt; [ Shader Pass #1 ] -&gt; (Backbuffer)\n</code></pre> <p>For framebuffers we can read the previous frame's framebuffer. We don't really need more than one frame of history since we have a feedback effect in place. Just like IIR filters, the \"response\" of such a feedback in the filter graph gives us essentially \"infinite\" history back in time, although it is mostly useful for long-lasting blurs and ghosting effects.</p> <p>Supporting more than one frame of feedback would also be extremely memory intensive since framebuffers tend to be much higher resolution than their input counterparts. One frame is also a nice \"clean\" limit. Once we go beyond just 1, the floodgate opens to arbitrary numbers, which we would want to avoid.</p> <p>It is also possible to fake as many feedback frames of history we want anyways, since we can copy a feedback frame to a separate pass anyways which effectively creates a \"shift register\" of feedback framebuffers in memory.</p> <p>Input textures can have arbitrary number of textures as history (just limited by memory). They cannot feedback since the filter chain cannot render into it, so it effectively is finite response (FIR). For the very first frames, frames with frame <code>N &lt; 0</code> are transparent black (all values <code>0</code>).</p>"},{"location":"development/shader/slang-shaders/#no-pot-padding","title":"No POT padding","text":"<p>No texture in the filter chain is padded at any time. It is possible for resolutions in the filter chain to vary over time which is common with certain emulated systems. In this scenarios, the textures and framebuffers are simply resized appropriately. Older frames still keep their old resolution in the brief moment that the resolution is changing.</p> <p>It is very important that shaders do not blindly sample with nearest filter with any scale factor. If naive nearest neighbor sampling is to be used, shaders must make sure that the filter chain is configured with integer scaling factors so that ambiguous texel-edge sampling is avoided.</p>"},{"location":"development/shader/slang-shaders/#deduce-shader-inputs-by-reflection","title":"Deduce shader inputs by reflection","text":"<p>We want to have as much useful information in the shader source as possible. We want to avoid having to explicitly write out metadata in shaders wherever we can. The biggest hurdle to overcome is how we describe our pipeline layout. The pipeline layout contains information about how we access resources such as uniforms and textures.</p> <p>There are three main types of inputs in this shader system:</p> <ul> <li>Texture samplers (sampler2D)</li> <li>Look-up textures for static input data</li> <li>Uniform data describing dimensions of textures</li> <li>Uniform ancillary data for render target dimensions, backbuffer target dimensions, frame count, etc</li> <li>Uniform user-defined parameters</li> <li>Uniform MVP for vertex shader</li> </ul>"},{"location":"development/shader/slang-shaders/#deduction-by-name","title":"Deduction by name","text":"<p>There are two main approaches to deduce what a sampler2D uniform wants to sample from. The first way is to explicitly state somewhere else what that particular sampler needs, e.g.</p> <pre><code>uniform sampler2D geeWhatAmI;\n\n// Metadata somewhere else\nSAMPLER geeWhatAmI = Input[-2]; // Input frame from 2 frames ago\n</code></pre> <p>The other approach is to have built-in identifiers which correspond to certain textures.</p> <pre><code>// Source here being defined as the texture from previous framebuffer pass or the input texture if this is the first pass in the chain.\nuniform sampler2D Source;\n</code></pre> <p>In SPIR-V, we can use <code>OpName</code> to describe these names, so we do not require the original Vulkan GLSL source to perform this reflection. We use this approach throughout the specification. An identifier is mapped to an internal meaning (semantic). The shader backend looks at these semantics and constructs a filter chain based on all shaders in the chain.</p> <p>Identifiers can also have user defined meaning, either as an alias to existing identifiers or mapping to user defined parameters.</p>"},{"location":"development/shader/slang-shaders/#combining-vertex-and-fragment-into-a-single-shader-file","title":"Combining vertex and fragment into a single shader file","text":"<p>One strength of Cg is its ability to contain multiple shader stages in the same .cg file. This is very convenient since we always want to consider vertex and fragment together. This is especially needed when trying to mix and match shaders in a GUI window for example. We don't want to require users to load first a vertex shader, then fragment manually.</p> <p>GLSL however does not support this out of the box. This means we need to define a light-weight system for preprocessing one GLSL source file into multiple stages.</p>"},{"location":"development/shader/slang-shaders/#should-we-make-vertex-optional","title":"Should we make vertex optional?","text":"<p>In most cases, the vertex shader will remain the same. This leaves us with the option to provide a \"default\" vertex stage if the shader stage is not defined.</p>"},{"location":"development/shader/slang-shaders/#include-support","title":"#include support","text":"<p>With complex filter chains there is a lot of opportunity to reuse code. We therefore want light support for the #include directive.</p>"},{"location":"development/shader/slang-shaders/#user-parameter-support","title":"User parameter support","text":"<p>Since we already have a \"preprocessor\" of sorts, we can also trivially extend this idea with user parameters. In the shader source we can specify which uniform inputs are user controlled, GUI visible name, their effective range, etc.</p>"},{"location":"development/shader/slang-shaders/#lookup-textures","title":"Lookup textures","text":"<p>A handy feature to have is reading from lookup textures. We can specify that some sampler inputs are loaded from a PNG file on disk as a plain RGBA8 texture.</p>"},{"location":"development/shader/slang-shaders/#do-we-want-to-support-complex-reinterpretation","title":"Do we want to support complex reinterpretation?","text":"<p>There could be valid use cases for supporting other formats than plain <code>RGBA8_UNORM</code>. <code>SRGB</code> and <code>UINT</code> might be valid cases as well and maybe even 2x16-bit, 1x32-bit integer formats.</p>"},{"location":"development/shader/slang-shaders/#lookup-buffers","title":"Lookup buffers","text":"<p>Do we want to support lookup buffers as UBOs as well? This wouldn't be doable in GLES2, but it could be useful as a more modern feature. If the <code>LUT</code> is small enough, we could realize it via plain old uniforms as well perhaps.</p> <p>This particular feature could be very interesting for generic polyphase lookup banks with different <code>LUT</code> files for different filters.</p>"},{"location":"development/shader/slang-shaders/#slang-specification","title":"Slang specification","text":"<p>This part of the spec considers how Vulkan GLSL shaders are written. The frontend uses the glslang frontend to compile GLSL sources. This ensures that we do not end up with vendor-specific extensions.</p> <p>The <code>#version</code> string should be as recent as possible, e.g. <code>#version 450</code> or <code>#version 310 es</code>. It is recommended to use <code>310 es</code> since it allows <code>mediump</code> which can help on mobile.</p> <p>Note</p> <p>After the Vulkan GLSL is turned into SPIR-V, the original <code>#version</code> string does not matter anymore.</p> <p>Warning</p> <p>SPIR-V cannot be generated from legacy shader versions such as <code>#version 100</code> (ES 2.0) or <code>#version 120</code> (GL 2.1).</p> <p>The frontend will use reflection on the resulting SPIR-V file in order to deduce what each element in the UBO or what each texture means. The main types of data passed to shaders are read-only and can be classified as:</p> <ul> <li><code>uniform sampler2D</code>: This is used for input textures, framebuffer results and lookup-textures.</li> <li><code>uniform Block { };</code>: This is used for any constant data which is passed to the shader.</li> <li><code>layout(push_constant) uniform Push {} name;</code>: This is used for any push constant data which is passed to the shader.</li> </ul>"},{"location":"development/shader/slang-shaders/#resource-usage-rules","title":"Resource usage rules","text":"<p>Certain rules must be adhered to in order to make it easier for the frontend to dynamically set up bindings to resources.</p> <ul> <li>All resources must be using descriptor set <code>#0</code>, or don't use <code>layout(set = #N)</code> at all.</li> <li><code>layout(binding = #N)</code> must be declared for all <code>UBO</code>s and <code>sampler2D</code>s.</li> <li>All resources must use different bindings.</li> <li>There can be only one UBO.</li> <li>There can be only use push constant block.</li> <li>It is possible to have one regular UBO and one push constant UBO.</li> <li>If a UBO is used in both vertex and fragment, their binding number must match.</li> <li>If a UBO is used in both vertex and fragment, members with the same name must have the same offset/binary interface.    This problem is easily avoided by having the same UBO visible to both vertex and fragment as \"common\" code.</li> <li>If a push constant block is used in both vertex and fragment, members with the same name must have the same offset/binary interface.</li> <li><code>sampler2D</code> cannot be used in vertex, although the size parameters of samplers can be used in vertex.</li> <li>Other resource types such as SSBOs, images, atomic counters, etc, etc, are not allowed.</li> <li>Every member of the UBOs and push constant blocks as well as every texture must be meaningful    to the frontend in some way, or an error is generated.</li> </ul>"},{"location":"development/shader/slang-shaders/#initial-pre-process-of-slang-files","title":"Initial pre-process of slang files","text":"<p>The very first line of a <code>.slang</code> file must contain a <code>#version</code> statement.</p> <p>The first process which takes place is dealing with <code>#include</code> statements. A slang file is preprocessed by scanning through the slang and resolving all <code>#include</code> statements.</p> <p>The include process does not consider any preprocessor defines or conditional expressions. The include path must always be relative, and it will be relative to the file path of the current file. Nested includes are allowed, but includes in a cycle are undefined as preprocessor guards are not considered.</p> <p>E.g.: <pre><code>#include \"common.inc\"\n</code></pre></p> <p>After includes have been resolved, the frontend scans through all lines of the shader and considers <code>#pragma</code> statements. These pragmas build up ancillary reflection information and otherwise meaningful metadata.</p>"},{"location":"development/shader/slang-shaders/#pragma-stage","title":"<code>#pragma stage</code>","text":"<p>This pragma controls which part of a <code>.slang</code> file are visible to certain shader stages. Currently, two variants of this pragma are supported:</p> <ul> <li><code>#pragma stage vertex</code></li> <li><code>#pragma stage fragment</code></li> </ul> <p>If no <code>#pragma stage</code> has been encountered yet, lines of code in a shader belong to all shader stages.</p> <p>If a <code>#pragma stage</code> statement has been encountered, that stage is considered active, and the following lines of shader code will only be used when building source for that particular shader stage. A new <code>#pragma stage</code> can override which stage is active.</p>"},{"location":"development/shader/slang-shaders/#pragma-name","title":"<code>#pragma name</code>","text":"<p>This pragma lets a shader set its identifier. This identifier can be used to create simple aliases for other passes.</p> <p>E.g.: <pre><code>#pragma name HorizontalPass\n</code></pre></p>"},{"location":"development/shader/slang-shaders/#pragma-format","title":"<code>#pragma format</code>","text":"<p>This pragma controls the format of the framebuffer which this shader will render to. The default render target format is <code>R8G8B8A8_UNORM</code>.</p> <p>Supported render target formats are listed below. From a portability perspective, please be aware that GLES2 has abysmal render target format support, and GLES3/GL3 may have restricted floating point render target support.</p> <p>If rendering to uint/int formats, make sure your fragment shader output target is uint/int.</p>"},{"location":"development/shader/slang-shaders/#8-bit","title":"8-bit","text":"<ul> <li><code>R8_UNORM</code></li> <li><code>R8_UINT</code></li> <li><code>R8_SINT</code></li> <li><code>R8G8_UNORM</code></li> <li><code>R8G8_UINT</code></li> <li><code>R8G8_SINT</code></li> <li><code>R8G8B8A8_UNORM</code></li> <li><code>R8G8B8A8_UINT</code></li> <li><code>R8G8B8A8_SINT</code></li> <li><code>R8G8B8A8_SRGB</code></li> </ul>"},{"location":"development/shader/slang-shaders/#10-bit","title":"10-bit","text":"<ul> <li><code>A2B10G10R10_UNORM_PACK32</code></li> <li><code>A2B10G10R10_UINT_PACK32</code></li> </ul>"},{"location":"development/shader/slang-shaders/#16-bit","title":"16-bit","text":"<ul> <li><code>R16_UINT</code></li> <li><code>R16_SINT</code></li> <li><code>R16_SFLOAT</code></li> <li><code>R16G16_UINT</code></li> <li><code>R16G16_SINT</code></li> <li><code>R16G16_SFLOAT</code></li> <li><code>R16G16B16A16_UINT</code></li> <li><code>R16G16B16A16_SINT</code></li> <li><code>R16G16B16A16_SFLOAT</code></li> </ul>"},{"location":"development/shader/slang-shaders/#32-bit","title":"32-bit","text":"<ul> <li><code>R32_UINT</code></li> <li><code>R32_SINT</code></li> <li><code>R32_SFLOAT</code></li> <li><code>R32G32_UINT</code></li> <li><code>R32G32_SINT</code></li> <li><code>R32G32_SFLOAT</code></li> <li><code>R32G32B32A32_UINT</code></li> <li><code>R32G32B32A32_SINT</code></li> <li><code>R32G32B32A32_SFLOAT</code></li> </ul> <p>E.g.: <pre><code>#pragma format R16_SFLOAT\n</code></pre></p>"},{"location":"development/shader/slang-shaders/#pragma-parameter","title":"<code>#pragma parameter</code>","text":"<p>Shader parameters allow shaders to take user-defined inputs as uniform values. This makes shaders more configurable.</p> <p>The format is: <pre><code>#pragma parameter IDENTIFIER \"DESCRIPTION\" INITIAL MINIMUM MAXIMUM [STEP]\n</code></pre></p> <p>The step parameter is optional. <code>INITIAL</code>, <code>MINIMUM</code>, and <code>MAXIMUM</code> are floating point values. <code>IDENTIFIER</code> is the meaningful string which is the name of the uniform which will be used in a UBO or push constant block. <code>DESCRIPTION</code> is a string which is human readable representation of IDENTIFIER.</p> <p>E.g: <pre><code>layout(push_constant) uniform Push {\n   float DummyVariable;\n} registers;\n#pragma parameter DummyVariable \"This is a dummy variable\" 1.0 0.2 2.0 0.1\n</code></pre></p>"},{"location":"development/shader/slang-shaders/#io-interface-variables","title":"I/O interface variables","text":"<p>The slang shader spec specifies two vertex inputs and one fragment output. Varyings between vertex and fragment shaders are user-defined.</p>"},{"location":"development/shader/slang-shaders/#vertex-inputs","title":"Vertex inputs","text":"<p>Two attributes are provided and must be present in a shader. It is only the layout(location = #N) which is actually significant. The particular names of input and output variables are ignored, but should be consistent for readability.</p>"},{"location":"development/shader/slang-shaders/#layoutlocation-0-in-vec4-position","title":"<code>layout(location = 0) in vec4 Position;</code>","text":"<p>This attribute is a 2D position in the form <code>vec4(x, y, 0.0, 1.0);</code>. Shaders should not try to extract meaning from the x, y.</p> <p><code>gl_Position</code> must be assigned as:</p> <pre><code>gl_Position = MVP * Position;\n</code></pre>"},{"location":"development/shader/slang-shaders/#layoutlocation-1-in-vec2-texcoord","title":"<code>layout(location = 1) in vec2 TexCoord;</code>","text":"<p>The texture coordinate is semantically such that <code>(0.0, 0.0)</code> is top-left and <code>(1.0, 1.0)</code> is bottom right.</p> <p>If TexCoord is passed to a varying unmodified, the interpolated varying will be <code>uv = 0.5 / OutputSize</code> when rendering the upper left pixel as expected and <code>uv = 1.0 - 0.5 / OutputSize</code> when rendering the bottom-right pixel.</p>"},{"location":"development/shader/slang-shaders/#vertexfragment-interface","title":"Vertex/Fragment interface","text":"<p>Vertex outputs and fragment inputs link by location, and not name.</p> <p>E.g.: <pre><code>// Vertex\nlayout(location = 0) out vec4 varying;\n// Fragment\nlayout(location = 0) in vec4 some_other_name;\n</code></pre></p> <p>will still link fine, although using same names are encouraged for readability.</p>"},{"location":"development/shader/slang-shaders/#fragment-outputs","title":"Fragment outputs","text":""},{"location":"development/shader/slang-shaders/#layoutlocation-0-out-vec4-fragcolor","title":"<code>layout(location = 0) out vec4 FragColor;</code>","text":"<p>Fragment shaders must have a single output to <code>location = 0</code>.</p> <p>Multiple render targets are not allowed. The type of the output depends on the render target format. <code>int</code>/<code>uint</code> type must be used if <code>UINT</code>/<code>INT</code> render target formats are used; otherwise <code>float</code> type.</p>"},{"location":"development/shader/slang-shaders/#builtin-variables","title":"Builtin variables","text":""},{"location":"development/shader/slang-shaders/#builtin-texture-variables","title":"Builtin texture variables","text":"<p>The input of textures get their meaning from their name.</p> <ul> <li><code>Original</code>: This accesses the input of the filter chain, accessible from any pass.</li> <li><code>Source</code>: This accesses the input from previous shader pass, or <code>Original</code> if accessed in the first pass of the filter chain.</li> <li><code>OriginalHistory#</code>: This accesses the input # frames back in time. There is no limit on #, except larger numbers will consume more VRAM. <code>OriginalHistory0</code> is an alias for <code>Original</code>, <code>OriginalHistory1</code> is the previous frame and so on.</li> <li><code>PassOutput#</code>: This accesses the output from pass # in this frame. <code>PassOutput#</code> must be causal, it is an error to access <code>PassOutputN</code> in pass <code>M</code> if <code>N &gt;= M</code>. <code>PassOutput#</code> will typically be aliased to a more readable value.</li> <li><code>PassFeedback#</code>: This accesses PassOutput# from the previous frame. Any pass can read the feedback of any feedback, since it is causal. <code>PassFeedback#</code> will typically be aliased to a more readable value.</li> <li><code>User#</code>: This accesses look-up textures. However, the direct use of <code>User#</code> is discouraged and should always be accessed via aliases.</li> </ul>"},{"location":"development/shader/slang-shaders/#builtin-texture-size-uniform-variables","title":"Builtin texture size uniform variables","text":"<p>If a member of a UBO or a push constant block is called <code>???Size#</code> where <code>???#</code> is the name of a texture variable, that member must be a <code>vec4</code>, which will receive these values:</p> <ul> <li><code>X</code>: Horizontal size of texture</li> <li><code>Y</code>: Vertical size of texture</li> <li><code>Z</code>: <code>1.0</code> / (Horizontal size of texture)</li> <li><code>W</code>: <code>1.0</code> / (Vertical size of texture)</li> </ul> <p>It is valid to use a size variable without declaring the texture itself. This is useful for vertex shading.</p> <p>It is valid (although probably not useful) for a variable to be present in both a push constant block and a UBO block at the same time.</p>"},{"location":"development/shader/slang-shaders/#builtin-uniform-variables","title":"Builtin uniform variables","text":"<p>Other than uniforms related to textures, there are other special uniforms available. These builtin variables may be part of a UBO block and/or a push constant block.</p> <ul> <li><code>MVP</code>: <code>mat4</code> model view projection matrix.</li> <li><code>OutputSize</code>: a <code>vec4(x, y, 1.0 / x, 1.0 / y)</code> variable describing the render target size <code>(x, y)</code> for this pass.</li> <li><code>FinalViewportSize</code>: a <code>vec4(x, y, 1.0 / x, 1.0 / y)</code> variable describing the render target size for the final pass. Accessible from any pass.</li> <li><code>FrameCount</code>: an <code>uint</code> variable taking a value which increases by one every frame. This value could be pre-wrapped by modulo if specified in preset. This is useful for creating time-dependent effects.</li> <li><code>FrameDirection</code>: an <code>int</code> variable which indicates whether the content is currently being rewinded. Has a value of <code>-1</code> while rewinding, otherwise <code>1</code>.</li> </ul>"},{"location":"development/shader/slang-shaders/#aliases","title":"Aliases","text":"<p>Aliases can give meaning to arbitrary names in a slang file. This is mostly relevant for LUT textures, shader parameters and accessing other passes by name.</p> <p>If a shader pass has a <code>#pragma name NAME</code> associated with it, meaning is given to the shader:</p> <ul> <li><code>NAME</code> is a <code>sampler2D</code>.</li> <li><code>NAMESize</code> is a <code>vec4</code> size uniform associated with <code>NAME</code>.</li> <li><code>NAMEFeedback</code> is a <code>sampler2D</code> for the previous frame.</li> <li><code>NAMEFeedbackSize</code> is a <code>vec4</code> size uniform associated with <code>NAMEFeedback</code>.</li> </ul>"},{"location":"development/shader/slang-shaders/#example-slang-shader","title":"Example slang shader","text":"<pre><code>#version 450\n// 450 or 310 es are recommended\n\nlayout(set = 0, binding = 0, std140) uniform UBO\n{\n   mat4 MVP;\n   vec4 SourceSize; // Not used here, but doesn't hurt\n   float ColorMod;\n};\n\n#pragma name StockShader\n#pragma format R8G8B8A8_UNORM\n#pragma parameter ColorMod \"Color intensity\" 1.0 0.1 2.0 0.1\n\n#pragma stage vertex\nlayout(location = 0) in vec4 Position;\nlayout(location = 1) in vec2 TexCoord;\nlayout(location = 0) out vec2 vTexCoord;\nvoid main()\n{\n   gl_Position = MVP * Position;\n   vTexCoord = TexCoord;\n}\n\n#pragma stage fragment\nlayout(location = 0) in vec2 vTexCoord;\nlayout(location = 0) out vec4 FragColor;\nlayout(binding = 1) uniform sampler2D Source;\nvoid main()\n{\n   FragColor = texture(Source, vTexCoord) * ColorMod;\n}\n</code></pre>"},{"location":"development/shader/slang-shaders/#push-constants-vs-uniform-blocks","title":"Push constants vs uniform blocks","text":"<p>Push constants are fast-access uniform data which on some GPUs will improve performance over plain UBOs. It is encouraged to use push constant data as much as possible.</p> <pre><code>layout(push_constant) uniform Push\n{\n   vec4 SourceSize;\n   vec4 FinalViewportSize;\n} registers;\n</code></pre> <p>However, be aware that there is a limit to how large push constant blocks can be used. Vulkan puts a minimum required size of 128 bytes, which equals 8 <code>vec4</code>s. It is an error to use more than 128 bytes.</p> <p>If you're running out of space, you can move the MVP to a UBO instead, which frees up 64 bytes. Always prioritize push constants for data used in fragment shaders as there are many more fragment threads than vertex. Also note that like UBOs, the push constant space is shared across vertex and fragment.</p> <p>If you need more than 8 <code>vec4</code>s, you can spill uniforms over to plain UBOs, but more than 8 <code>vec4</code>s should be quite rare in practice.</p> <p>E.g.:</p> <pre><code>layout(binding = 0, std140) uniform UBO\n{\n   mat4 MVP; // Only used in vertex\n   vec4 SpilledUniform;\n} global;\n\nlayout(push_constant) uniform Push\n{\n   vec4 SourceSize;\n   vec4 BlurPassSize;\n   // ...\n} registers;\n</code></pre>"},{"location":"development/shader/slang-shaders/#samplers","title":"Samplers","text":"<p>Which samplers are used for textures are specified by the preset format. The sampler remains constant throughout the frame, there is currently no way to select samplers on a frame-by-frame basic. This is mostly to make it possible to use the spec in GLES2 as GLES2 has no concept of separate samplers and images.</p>"},{"location":"development/shader/slang-shaders/#srgb","title":"sRGB","text":"<p>The input to the filter chain will not be of an sRGB format. This is due to many reasons, the main one being that it is very difficult for the frontend to get \"free\" passthrough of sRGB. It is possible to have a first pass which linearizes the input to a proper sRGB render target. In this way, custom gammas can be used as well.</p> <p>Similarly, the final pass will not be an sRGB backbuffer for similar reasons.</p>"},{"location":"development/shader/slang-shaders/#caveats","title":"Caveats","text":""},{"location":"development/shader/slang-shaders/#frag-coord","title":"Frag Coord","text":"<p>TexCoord also replaces <code>gl_FragCoord</code>. Do not use <code>gl_FragCoord</code> as it doesn't consider the viewports correctly. If you need <code>gl_FragCoord</code> use <code>vTexCoord * OutputSize.xy</code> instead.</p>"},{"location":"development/shader/slang-shaders/#derivatives","title":"Derivatives","text":"<p>Be careful with derivatives of <code>vTexCoord</code>. The screen might have been rotated by the vertex shader, which will also rotate the derivatives, especially in the final pass which hits the backbuffer.</p> <p>However, derivatives are fortunately never really needed, since <code>w = 1</code> (we render flat 2D quads), which means derivatives of varyings are constant. You can do some trivial replacements which will be faster and more robust.</p> <p><pre><code>dFdx(vTexCoord) = vec2(OutputSize.z, 0.0);\ndFdy(vTexCoord) = vec2(0.0, OutputSize.w);\nfwidth(vTexCoord) = max(OutputSize.z, OutputSize.w);\n</code></pre> To avoid issues with rotation or unexpected derivatives in case derivatives are really needed, off-screen passes will not have rotation and dFdx and dFdy will behave as expected.</p>"},{"location":"development/shader/slang-shaders/#correctly-sampling-textures","title":"Correctly sampling textures","text":"<p>A common mistake made by shaders is that they aren't careful enough about sampling textures correctly.</p> <p>There are three major cases to consider:</p> <p>| Bilinear sampling               | If bilinear is used, it is always safe to sample a texture. | | Nearest, with integer scale     | If the OutputSize / InputSize is integer, the interpolated vTexCoord will always fall inside the texel safely, so no special precautions have to be used. For very particular shaders which rely on nearest neighbor sampling, using integer scale to a framebuffer and upscaling that with more stable upscaling filters like bicubic for example is usually a great choice. | Nearest, with non-integer scale | Sometimes, it is necessary to upscale images to the backbuffer which have an arbitrary size. Bilinear is not always good enough here, so we must deal with a complicated case.</p> <p>If we interpolate <code>vTexCoord</code> over a frame with non-integer scale, it is possible that we end up just between two texels. Nearest neighbor will have to find a texel which is nearest, but there is no clear \"nearest\" texel. In this scenario, we end up having lots of failure cases which are typically observed as weird glitches in the image which change based on the resolution.</p> <p>To correctly sample nearest textures with non-integer scale, we must pre-quantize our texture coordinates. Here's a snippet which lets us safely sample a nearest filtered texture and emulate bilinear filtering.</p> <pre><code>   vec2 uv = vTexCoord * global.SourceSize.xy - 0.5; // Shift by 0.5 since the texel sampling points are in the texel center.\n   vec2 a = fract(uv);\n   vec2 tex = (floor(uv) + 0.5) * global.SourceSize.zw; // Build a sampling point which is in the center of the texel.\n\n   // Sample the bilinear footprint.\n   vec4 t0 = textureLodOffset(Source, tex, 0.0, ivec2(0, 0));\n   vec4 t1 = textureLodOffset(Source, tex, 0.0, ivec2(1, 0));\n   vec4 t2 = textureLodOffset(Source, tex, 0.0, ivec2(0, 1));\n   vec4 t3 = textureLodOffset(Source, tex, 0.0, ivec2(1, 1));\n\n   // Bilinear filter.\n   vec4 result = mix(mix(t0, t1, a.x), mix(t2, t3, a.x), a.y);\n</code></pre> <p>The concept of splitting up the integer texel along with the fractional texel helps us safely do arbitrary non-integer scaling safely. The uv variable could also be passed pre-computed from vertex to avoid the extra computation in fragment.</p>"},{"location":"development/shader/slang-shaders/#preset-format-slangp","title":"Preset format (.slangp)","text":"<p>The present format is essentially unchanged from the old .cgp and .glslp, except the new preset format is called .slangp.</p>"},{"location":"development/shader/slang-shaders/#porting-guide-from-legacy-cg-spec","title":"Porting guide from legacy Cg spec","text":""},{"location":"development/shader/slang-shaders/#common-functions","title":"Common functions","text":"<ul> <li>mul(mat, vec) -&gt; mat * vec</li> <li>lerp() -&gt; mix()</li> <li>ddx() -&gt; dFdx()</li> <li>ddy() -&gt; dFdy()</li> <li>tex2D() -&gt; texture()</li> <li>frac() -&gt; fract()</li> </ul>"},{"location":"development/shader/slang-shaders/#types","title":"Types","text":"<ul> <li>floatN -&gt; vecN</li> <li>boolN -&gt; bvecN</li> <li>intN -&gt; ivecN</li> <li>uintN -&gt; uvecN</li> <li>float4x4 -&gt; mat4</li> </ul>"},{"location":"development/shader/slang-shaders/#builtin-uniforms-and-misc","title":"Builtin uniforms and misc","text":"<ul> <li>modelViewProj -&gt; MVP</li> <li>IN.video_size -&gt; SourceSize.xy</li> <li>IN.texture_size -&gt; SourceSize.xy (no POT shenanigans, so they are the same)</li> <li>IN.output_size -&gt; OutputSize.xy</li> <li>IN.frame_count -&gt; FrameCount (uint instead of float)</li> <li>*.tex_coord -&gt; TexCoord (no POT shenanigans, so they are all the same)</li> <li>*.lut_tex_coord -&gt; TexCoord</li> <li>ORIG -&gt; <code>Original</code></li> <li>PASS# -&gt; PassOutput#</li> <li>PASSPREV# -&gt; No direct analog, PassOutput(CurrentPass - #), but prefer aliases</li> </ul>"},{"location":"development/shader/slang-shaders/#cg-semantics","title":"Cg semantics","text":"<ul> <li>POSITION -&gt; gl_Position</li> <li>float2 texcoord : TEXCOORD0 -&gt; layout(location = 1) in vec2 TexCoord;</li> <li>float4 varying : TEXCOORD# -&gt; layout(location = #) out vec4 varying;</li> <li>uniform float4x4 modelViewProj -&gt; uniform UBO { mat4 MVP; };</li> </ul> <p>Output structs should be flattened into separate varyings.</p> <p>E.g. instead of <pre><code>struct VertexData\n{\n   float pos : POSITION;\n   float4 tex0 : TEXCOORD0;\n   float4 tex1 : TEXCOORD1;\n};\n\nvoid main_vertex(out VertexData vout)\n{\n   vout.pos = ...;\n   vout.tex0 = ...;\n   vout.tex1 = ...;\n}\n\nvoid main_fragment(in VertexData vout)\n{\n   ...\n}\n</code></pre></p> <p>do this</p> <pre><code>#pragma stage vertex\nlayout(location = 0) out vec4 tex0;\nlayout(location = 1) out vec4 tex1;\nvoid main()\n{\n   gl_Position = ...;\n   tex0 = ...;\n   tex1 = ...;\n}\n\n#pragma stage fragment\nlayout(location = 0) in vec4 tex0;\nlayout(location = 1) in vec4 tex1;\nvoid main()\n{\n}\n</code></pre> <p>Instead of returning a float4 from main_fragment, have an output in fragment:</p> <pre><code>layout(location = 0) out vec4 FragColor;\n</code></pre>"},{"location":"development/shader/xml-shaders/","title":"XML Shaders (Discontinued)","text":"<p>Warning</p> <p>XML shaders have been discontinued and are no longer available in RetroArch. This page should be considered only for historical reference.</p>"},{"location":"development/shader/xml-shaders/#history","title":"History","text":"<p>XML shaders were originally implemented in bSNES as single pass GLSL shaders. The extension is <code>.shader</code> and is marked up with XML. These shaders were written against the fixed-function pipeline and is now referred to as a legacy XML shaders by RetroArch. The prefix ofruby originates from bSNES\u2019 driver module, ruby::.</p>"},{"location":"development/shader/xml-shaders/#example-legacy-xml-shader","title":"Example legacy XML shader","text":"<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;!--\n     Blank shader\n--&gt;\n&lt;shader language=\"GLSL\"&gt;\n   &lt;fragment&gt;&lt;![CDATA[\n      uniform sampler2D rubyTexture;\n      void main()\n      {\n         gl_FragColor = texture2D(rubyTexture, gl_TexCoord[0].xy);\n      }\n   ]]&gt;&lt;/fragment&gt;\n&lt;/shader&gt;\n</code></pre> <p>RetroArch implemented this legacy shader spec to be compatible with many shaders written at the time. It is also referred to as v1.0 XML shaders. This specification was then extended to support multi-pass, scaling arguments, etc, which resulted in v1.1 XML shaders (spec here). It is still legacy as it uses fixed-function features. RetroArch implements v1.1 XML shaders, and some more features to be feature equivalent with the Cg shader implementation. bSNES did not implement v1.1 and adoption of this spec was slowed down.</p>"},{"location":"development/shader/xml-shaders/#modern-xml-shaders","title":"Modern XML shaders","text":"<p>Legacy XML shaders used fixed function, and they would therefore never work with modern GL (GLES, GL3.x+). To fix this, RetroArch extended the XML shader spec. Fixed function cruft like gl_ModelViewProjectionMatrix, gl_MultiTexCoord0 and gl_Vertex was replaced with uniforms and attribute streams. The modern XML shader spec in RetroArch focuses on being compatible with GLES2 (and compatible with GL 3.x+ as well).</p> <p>The ruby prefix was later deprecated and you could use TexCoord, VertexCoord etc. For compatibility reasons, the ruby prefix is still accepted.</p>"},{"location":"development/shader/xml-shaders/#example-modern-shader","title":"Example modern shader","text":"<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;shader language=\"GLSL\" style=\"GLES2\"&gt;\n   &lt;vertex&gt;&lt;![CDATA[\n      attribute vec2 rubyTexCoord;\n      attribute vec2 rubyVertexCoord;\n      uniform mat4 rubyMVPMatrix;\n      varying vec2 tex_coord;\n      void main()\n      {\n         gl_Position = rubyMVPMatrix * vec4(rubyVertexCoord, 0.0, 1.0);\n         tex_coord = rubyTexCoord;\n      }\n   ]]&gt;&lt;/vertex&gt;\n   &lt;fragment&gt;&lt;![CDATA[\n      uniform sampler2D rubyTexture;\n      varying vec2 tex_coord;\n      void main()\n      {\n         gl_FragColor = texture2D(rubyTexture, tex_coord);\n      }\n   ]]&gt;&lt;/fragment&gt;\n&lt;/shader&gt;\n</code></pre>"},{"location":"development/shader/xml-shaders/#moving-off-xml-shaders","title":"Moving off XML shaders","text":"<p>XML shaders as a whole are deprecated in RetroArch, and will not be selectable in RGUI. You can still use them via video_shader config option. To use GLSL in RetroArch, the new GLSL shaders format is used, which mirrors the Cg shaders implementation quite well. The new GLSL shaders only support modern style, no fixed function. To convert XML shaders into straight GLSL, see GLSL shaders.</p>"},{"location":"guides/accessibility/","title":"Accessibility","text":""},{"location":"guides/accessibility/#what-is-accessibility","title":"What is Accessibility","text":"<p>Accessibility features allow people with disabilities to access various types of software.  In the case of RetroArch, the accessibility feature allows blind users to navigate the menus of RetroArch using the OS Narrator.  Combined with the AI Service's Speech and Narrator modes, this can open up a large number of video games to blind players that couldn't play them beforehand.  Windows, MacOS, and Linux are the supported platforms.</p>"},{"location":"guides/accessibility/#how-to-enable-accessibility","title":"How to enable Accessibility","text":"<p>While Accessibility has been available in RetroArch since v1.8.2, it is turned off by default. One can turn it on from the in-RetroArch menu in one of two ways.  For the XMB theme (default before v1.8.5) by pressing: right, up seven times, enter (or x on Linux), and then right, or for the Ozone theme (default v1.8.5 and later) by pressing: left, down, right, up seven times, enter (x on linux), and then right.  Otherwise, running the RetroArch executable with the --accessibility flag will override the configuration setting, and turn on accessibility. For blind users, the command is as follows: \"retroarch, space, two dashes, accessibility\" For a complete guide on using Retroarch with accessibility features, see This guide</p>"},{"location":"guides/accessibility/#os-requirements","title":"OS requirements","text":"<p>RetroArch uses the OS narrator to speak out text.  On Windows, this is the Microsoft Narrator, on MacOS, it is the \"say\" command, and on linux, it is the \"espeak\" command.  If the narrator is not speaking any text, you can try installing the additional voice packs for your system language</p> <ul> <li>Windows voice install guide</li> <li>MacOS voice install guide</li> <li>On Ubuntu Linux, you can install espeak by running <code>sudo apt-get install espeak</code> in a terminal window, and <code>sudo apt-get install espeak-data</code> to install additional language voice packs.</li> </ul>"},{"location":"guides/accessibility/#ai-service-text-to-speech","title":"AI Service Text-to-Speech","text":"<p>To use the AI Service with the Accessibility narrator, see the AI Service doc page.</p>"},{"location":"guides/ai-service/","title":"AI Service","text":""},{"location":"guides/ai-service/#what-is-the-ai-service","title":"What is the AI Service","text":"<p>This feature allows users to capture the current state of the game and feed it to a customizable endpoint for additional processing. With the help of OCR (optical character recognition) and other techniques, the AI service can provide a live translation of a game, or text-to-speech capabilities for the visually impaired among other things, either on demand or automatically.</p>"},{"location":"guides/ai-service/#how-it-works","title":"How it works","text":"<p>When a user presses the AI Service hotkey, RetroArch will grab the screen of the game being played and send it to the service endpoint listed in the configuration. When the service returns, RetroArch will display the results according to the configuration. Pressing the AI Service hotkey again will clear any content currently displayed.</p>"},{"location":"guides/ai-service/#how-to-set-it-up","title":"How to set it up","text":"<p>First, go to Settings-&gt;Input-&gt;Hotkey Binds, and assign a key for the AI Service.</p> <p>Next, go to Settings-&gt;AI Service and modify the configuration options as follows.</p> <p><code>AI Service Enabled</code> should be set to <code>ON</code>.</p> <p>The <code>AI Service URL</code> is the URL of the AI service that you want to use. For example, <code>http://localhost:4404</code> for a service running locally on your computer and listening on port 4404. Check the documentation of the 3<sup>rd</sup> party AI service you're using to find out what this URL should be. (see \"Known Services\" below for some examples).</p> <p><code>AI Service Output</code> controls how the processed content is displayed on your end. Naturally, your selection should match whatever capabilities the AI service you have configured offers. Note that <code>Image Mode</code> requires widgets to be enabled (Settings-&gt;On-Screen Display-&gt;On-Screen Notifications-&gt;Graphics Widgets).</p> <ul> <li>In <code>Image Mode</code> the AI service is expected to return an image that will be overlaid on top of the game feed. This mode can be used to draw information on the screen, like writing a translation over the original text box. </li> <li>In <code>Narrator Mode</code> the AI service is expected to return text that will be spoken on the user's machine using native text-to-speech capabilities, like the Windows narrator.</li> <li>In <code>Speech Mode</code> the AI service is expected to return an audio file. This mode can be used as an alternative to the <code>Narrator Mode</code> if the user's machine is unable to use native text-to-speech, relying on the service to provide the actual audio.</li> <li>In <code>Text Mode</code> the AI service is expected to return a text that will be displayed on top of the screen, like subtitles.</li> <li>A combined mode like <code>Text + Narrator</code> works as you would expect, providing both the result as text on screen and text-to-speech.</li> </ul> <p><code>Pause During Translation</code> will pause the core as soon as the user presses the AI Service hotkey and display whatever content is returned from the service. Pressing the AI Service hotkey a second time will clear the display and resume the core.</p> <p><code>AI Service Text Position Override</code> can be used to control the placement of the subtitles on screen when <code>AI Service Output</code> is set to <code>Text Mode</code>. By default, services are able to control whether a specific subtitle should be displayed at the top or at the bottom of the screen depending on the situation. This setting however ignores the service hint and forces the placement to be one or the other, at the user's discretion. <code>AI Service Text Padding</code> allows a more precise control of the placement of the subtitle adding blank space at the bottom of the screen (for bottom-placed subtitles) or at the top of the screen (for top-placed subtitles).</p> <p>When the service is used to provide translation or text-to-speech using OCR, and <code>Source Language</code> is set to <code>Don't care</code>, the service will attempt to auto-detect the language on screen. Setting it to a specific language will increase accuracy, and restrict translation to only text in the source language specified. If <code>Target Language</code> is set to <code>Don't care</code> then the translation will be provided in English, or in the selected language otherwise.</p>"},{"location":"guides/ai-service/#automatic-mode","title":"Automatic mode","text":"<p>A special case must be made when the AI service needs to run automatically. By default, the AI service runs in a manual mode. The user presses the AI Service hotkey to process one screen immediately, receives the result, eventually presses the hotkey again to dismiss it and moves on before requesting the AI service once more. Some services however are able to run automatically. This can only be enabled by services themselves and is mostly designed for local services due to the high number of requests per second.</p> <p>If your service supports automatic mode, press the AI service hotkey once to enable processing. Now, the service will be polled at regular intervals and results will be automatically displayed as you keep playing. Pressing the AI service hotkey a second time (or invoking RetroArch's menu) will turn the AI service off.</p> <p>The <code>AI Service Auto-Polling Delay</code> option in the AI Service settings control how fast the automatic requests are sent to the service. If you are experiencing slowdowns during play, try increasing the delay. It will lower the reactivity of the AI service, but will lessen the load on your CPU.</p>"},{"location":"guides/ai-service/#known-services","title":"Known Services","text":"<p>VGTranslate is a python server you can run locally (or on your network) and uses Google Cloud OCR, and Google Text-to-Speech APIs with the Google Cloud keys you provide.</p> <p>ZTranslate uses a standalone client app for Windows or Linux that grabs the screen of the window currently in focus and displays a translated version in the ZTranslate client window. Also supports package-based translations for curated translations.</p> <p>RetroArch-AI-with-IoTEdge uses IoTEdge and Azure Cognitive Services Containers (requires microsoft Azure account) to translate RetroArch screenshots and display them on a Lakka device. </p>"},{"location":"guides/ai-service/#supported-cores","title":"Supported Cores","text":"<p>Since RetroArch v1.8.0, all cores should now be supported if your build has menu widgets. If not, then only software cores will be supported.</p>"},{"location":"guides/ai-service/#for-developers","title":"For developers","text":"<p>If you wish to implement your own AI service, here is what you need. RetroArch sends a POST request every time the user invokes the AI service, the URL params are as provided.</p> <ul> <li><code>source_lang</code> (optional): language code of the content currently running.</li> <li><code>target_lang</code> (optional): language of the content to return.</li> <li><code>output</code>: comma-separated list of formats that must be provided by the service. Also lists sub-formats supported by the current RetroArchBuild.</li> </ul> <p>The currently supported formats are: - <code>sound</code>: raw audio to play back. (<code>wav</code>) - <code>text</code>: text to be read through internal text-to-speech capabilities. <code>subs</code> can be specified on top of that to explain that we are looking for short text response in the manner of subtitles. - <code>image</code>: image to display on top of the video feed. (<code>bmp</code>, <code>png</code>, <code>png-a</code>) All in 24-bits BGR formats.</p> <p>In addition, the request contains a JSON payload, formatted as such: - <code>image</code>: captured frame from the currently running content (in base64). - <code>format</code>: format of the captured frame (<code>png</code>, or <code>bmp</code>). - <code>coords</code>: array describing the coordinates of the image within the viewport space (x, y, width, height). - <code>viewport</code>: array describing the size of the viewport (width, height). - <code>label</code>: a text string describing the content (<code>&lt;system id&gt;__&lt;content id&gt;</code>). - <code>state</code>: a JSON object describing the state of the frontend, containing:     - <code>paused</code>: 1 if the content has been paused, 0 otherwise.     - <code>&lt;key&gt;</code>: the name of a retropad input, valued 1 if pressed. Values can be: a, b, x, y, l, r, l2, r2, l3, r3, up, down, left, right, start, select.</p> <p>The translation component then expects a response from the AI service in the form of a JSON payload, formatted as such: - <code>image</code>: base64 representation of an image in a supported format. - <code>sound</code>: base64 representation of a sound byte in a supported format. - <code>text</code>: results from the service as a string. - <code>text_position</code>: hint for the position of the text when the service is running in text mode (ie subtitles). Position is a number, 1 for Bottom or 2 for Top (defaults to bottom). - <code>press</code>: a list of retropad input to forcibly press. On top of the expected keys (cf. state, above) values <code>pause</code> and <code>unpause</code> can be specified to control the flow of the content. - <code>error</code>: any error encountered with the request. - <code>auto</code>: either <code>auto</code> or <code>continue</code> to control automatic requests.</p> <p>All fields are optional, but at least one of them must be present. If <code>error</code> is set, the error is shown to the user and everything else is ignored, even <code>auto</code> settings.</p> <p>With <code>auto</code> on <code>auto</code>, RetroArch will automatically send a new request (with a minimum delay enforced by ai_service_poll_delay); with a value of <code>continue</code>, RetroArch will ignore the returned content and skip to the next automatic request. This allows the service to specify that the returned content is the same as the one previously sent, so RetroArch does not need to update its display unless necessary. With <code>continue</code> the service must still send the content, as we may need to display it if the user paused the AI service for instance.</p>"},{"location":"guides/arcade-getting-started/","title":"Getting started with arcade emulation","text":"<p>Arcade emulation requires a different planning approach than console emulation. Arcade emulator terminology can also differ from the terms used in other kinds of emulation.</p>"},{"location":"guides/arcade-getting-started/#process","title":"Process","text":"<p>The libretro core ecosystem includes a variety of arcade emulators, each with specific strengths and each requiring its own distinct version of arcade \"romsets\" which the emulator supports. Every arcade emulator core is optimized for different hardware and different games. This guide is intended to help you decide which core to use and find out what romset version is required for that emulator.</p> <p>You sometimes read people recommending to change core until your game works, this is extremely bad counselling for the following reasons :</p> <ul> <li>It is usually faster to acquire/verify/rebuild romsets for a specific arcade core than to test each of your romsets with all available cores</li> <li>You might be using an incomplete romset that is not playable in any core</li> <li>Your platform might be missing the only core where that romset is playable</li> <li>Some arcade cores are not recommended in most cases for reasons explained later in this document, so most users should avoid them</li> <li>Retroarch playlists don't allow you to use a different core for each item, and you might not want to split your arcade games into several playlists</li> </ul> <p>The real recommended approach goes like this :</p> <ol> <li>Understanding the terminology</li> <li>Choose an arcade emulator to match your system</li> <li>Use the correct version romsets for that emulator</li> </ol> <p></p>"},{"location":"guides/arcade-getting-started/#step-1-understanding-the-terminology","title":"Step 1: Understanding the terminology","text":"<ul> <li>Arcade emulators: Even more than consoles/computers, arcade machines had many manufacturers and generations since the first arcade machine back in 1971, hence why what we refer as \"arcade emulators\" are actually multi-system emulators able to emulate thousands of different systems at various levels of faithfulness. Note that while they are known for arcade emulation, they can also emulate consoles and computers.</li> <li>Dump: A dump is the digital representation of 1 chip present on a game board/cartridge.</li> <li>Rom: A rom refers to 1 file containing 1 single dump or several dumps concatenated together.</li> <li>Romset: Literally \"rom set\", meaning a set of roms. A romset is an archive containing one or several individual rom(s), arcade emulators expect this game format.</li> <li>Romset version: It's not unusual for a specific romset to exist in different versions. The reason for this is that sometimes the attempts at digitalizing chips failed, and instead of having a game totally unavailable due to a romset being only 90% complete, it was decided to implement workarounds in the emulator's code to make the game somehow playable. Every time one of those chips finally gets a proper dump, which can happen decades later, ongoing arcade emulators will update their code by removing the workarounds and loading the correct dump, hence why multiple romset versions can exist.</li> <li>Samples: Sometimes, instead of emulating the sound coming from the actual board of a game, an emulator will use recorded sounds. There can be several reasons for this : the chips weren't dumped, the emulator doesn't emulate that sound board (yet), or the emulator allows as an alternative to replace that emulation by high quality sound coming from another source (OST, ...).</li> <li>CHD: Some arcade games require data from an internal hard drive, CD-ROM, laserdisk, or other media in order to be emulated -- those forms of media are packaged as CHD files. CHD files should be copied to subfolders (going by the name of the romset) within the folder where the arcade romset has been installed.</li> </ul> <p>Additionally, there exist different kind of romsets :</p> <ul> <li>Bios romset: A romset containing bioses required to run an arcade system. For example, the <code>neogeo</code> romset contains the bioses required to run SNK's NeoGeo cartridge system.</li> <li>Parent romset: There can be multiple revisions of an arcade cabinet, the parent romset is usually the one dumped from the arcade cabinet which is believed to be the most recent revision, which is often a world or europe version. Parent romsets might require a bios romset to work.</li> <li>Clone romset: Either dumped from arcade cabinet revisions believed to be older, or unofficial revisions of that arcade cabinet (bootlegs, hacks). Clone romsets might require a parent to work.</li> <li>Full non-merged romset: The romset can be used standalone because the archive contains all the files required to run that romset, including any roms from its parent and bios romsets.</li> <li>Non-merged romset: The romset can be used standalone because the archive contains all the files required to run that game, including any roms from its parent romset. With this format, a separate bios romset might be needed to run the romset.</li> <li>Split romset: With this format, a clone romset never contains any of the roms present in its parent romset, and a parent romset never contains any of the roms present in its bios romset (if it exists).</li> <li>Merged romset: Clones are merged into the parent romset zip, meaning that more than one game is stored in the romset.</li> </ul> <p>ClrMamePro users</p> <p>To rebuild Full Non-Merged romsets, use <code>Non-Merged</code> mode and deselect <code>Separate BIOS sets</code> via the <code>Advanced</code> button in the <code>Rebuild</code> and <code>Scanner</code> menus. ClrMamePro may display BIOS sets as missing in scans with these settings, but that is because all of the BIOS files will be distributed directly to the game romsets that need them.</p> <p>Recommended romsets</p> <p>Non-merged romsets are recommended if you intend to use only a few romsets, while split romsets are recommended if you intend to keep the whole collection of romsets supported by an emulator. Merged romsets aren't recommended at all since it's tricky to run the alternate revisions of the game within the libretro ecosystem. </p>"},{"location":"guides/arcade-getting-started/#step-2-choose-an-arcade-emulator-to-match-your-system","title":"Step 2: Choose an arcade emulator to match your system","text":"<p>There are two families of multi-system arcade emulators available as libretro cores: FinalBurn and MAME. These emulators are in turn available in multiple versions to allow users to best match a core to their device. There are also a few console emulators that can alternatively emulate the arcade hardware based on that console. There is no \"best arcade core\", recommending one is hard without knowing your device and what you intend to play, each of them being differently balanced.</p>"},{"location":"guides/arcade-getting-started/#the-criterias-for-choosing-an-arcade-core","title":"The criterias for choosing an arcade core","text":""},{"location":"guides/arcade-getting-started/#integration-within-the-libretro-ecosystem","title":"Integration within the libretro ecosystem","text":"<p>A better integration allows for more features to be available from the frontend you are using, like netplay, runahead, rewind, retroachievements, ... but also reduces the risk of bugs. The quality of the integration is directly linked to the availability of a support team for the core.</p>"},{"location":"guides/arcade-getting-started/#accuracy","title":"Accuracy","text":"<p>Theoretically, more recent version of the emulators should always be more accurate, which means the graphics, sound and gameplay of the games are more likely to be faithful to the original cabinet. In reality, for vintaged MAME cores, with fixes being backported to some vintages and not some others, the situation is not so predictable.</p>"},{"location":"guides/arcade-getting-started/#input-lag","title":"Input lag","text":"<p>Accuracy improvements can add or remove frames of input lag. It is believed that FinalBurn Neo and MAME (current) have the lowest input lag on average. Also note that FinalBurn Neo has virtually 0 frames of input lag since it has full support for the runahead and pre-emptive frames feature. MAME also partially supports those features, with runahead second instance being recommended.</p>"},{"location":"guides/arcade-getting-started/#performance","title":"Performance","text":"<p>Being more accurate usually means the emulation will be more taxing on your cpu, so older versions of emulators will usually perform better at the cost of accuracy, and are worth trying if you have performance issues with more recent versions. Accuracy is not the only reason for performance regression though, the emulator framework has an impact too, this is especially noticeable on MAME which had its framework constantly updated over the years.</p>"},{"location":"guides/arcade-getting-started/#supported-games","title":"Supported games","text":"<p>Arcade emulators keep adding support for new machines over the years, so the more recent versions support more games. This is a double-edged sword as far as performance is concerned, because it can require updates to already emulated components, to add previously unemulated/unnecessary feature of the component, which might impact its emulation performance even for the machines that didn't need this feature.</p>"},{"location":"guides/arcade-getting-started/#emulator-goal","title":"Emulator goal","text":"<p>MAME's goal is to emulate every existing machines, including machines unrelated to gaming (it can emulate printers, vending machines, ...), the most accurately possible, while documenting them thoroughly. FinalBurn's goal is mainly to offer a comfortable experience for the end-user as a gaming software, and can include optional features that didn't exist on original cabinet (alternate controls for a better experience with modern controllers, alternate high-quality music, ...). MAME 2003-Plus has pretty much the same goal as FinalBurn, with both emulators actually sharing a few contributors.</p>"},{"location":"guides/arcade-getting-started/#support-team","title":"Support team","text":"<p>Last but not least, most of the arcade cores have no real maintainer and are mostly there as a frozen-in-time alternative if the cores that have a support team can't play properly the game you want. FinalBurn Neo and MAME 2003-Plus have a support team (please note that MAME 2003-Plus is a hard fork which isn't written by the MAME team). MAME (current) gets regular bumps and has a regular maintainer to take care of issues related to its libretro integration. We don't recommend you try getting help from the MAME team for any of the MAME cores we provide, because you won't get any.</p>"},{"location":"guides/arcade-getting-started/#quick-tour-of-every-available-core","title":"Quick tour of every available core","text":""},{"location":"guides/arcade-getting-started/#finalburn-neo","title":"FinalBurn Neo","text":"<ul> <li>has the tightest integration within the libretro ecosystem</li> <li>is mostly accurate, can be more accurate than MAME (current) on a few games</li> <li>uses the latest known good romsets</li> <li>is reasonably fast</li> <li>has a support team</li> <li>doesn't support 3D games, support fewer 2D games than MAME</li> <li>keeps adding support for new games, including a lot of hacks and homebrews</li> </ul>"},{"location":"guides/arcade-getting-started/#mame-2003-plus","title":"MAME 2003-Plus","text":"<ul> <li>while originally forked from MAME 2003, can be fairly accurate on some games since it incorporates some emulation fixes from recent versions of MAME</li> <li>is quite fast, this fork was originally meant by the author to run on a pentium III @ 733mhz (Xbox OG)</li> <li>doesn't have fixed romsets, doesn't always use latest known good romsets either</li> <li>has a support team</li> <li>supports a few classics that aren't supported yet in FinalBurn Neo</li> <li>keeps adding support for new games</li> </ul>"},{"location":"guides/arcade-getting-started/#mame-current","title":"MAME (current)","text":"<ul> <li>is usually the slowest core and the one that consumes the most memory</li> <li>has a few dynamic recompilers for emulating more demanding systems, which can dramatically increase performance emulating those systems on supported cpus (x86_32, x86_64, and arm64 since 0.274)</li> <li>is usually the most accurate</li> <li>uses the latest known good romsets</li> <li>has the widest range of emulated machines</li> <li>keeps adding support for new games</li> </ul>"},{"location":"guides/arcade-getting-started/#finalburn-alpha-2012","title":"FinalBurn Alpha 2012","text":"<ul> <li>has splitted cores for optimized memory usage if you are using a device with very very limited memory (wii, nds, ...)</li> <li>has fixed romsets</li> <li>is an older version of FinalBurn Neo, and as such should be faster while being less accurate and supporting less games, the libretro integration isn't as good either</li> <li>should only be considered as an alternative on ultra low-power devices</li> </ul>"},{"location":"guides/arcade-getting-started/#mame-2000","title":"MAME 2000","text":"<ul> <li>is the fastest arcade core</li> <li>is the most inaccurate arcade core</li> <li>has fixed romsets</li> <li>has the smallest list of supported games</li> <li>should only be considered as an alternative on ultra low-power devices</li> </ul>"},{"location":"guides/arcade-getting-started/#mame-2003","title":"MAME 2003","text":"<ul> <li>is slower than MAME 2000</li> <li>is more accurate than MAME 2000</li> <li>has fixed romsets</li> <li>support more games than MAME 2000</li> <li>probably shouldn't be used at all, MAME 2003-Plus is just plain better</li> </ul>"},{"location":"guides/arcade-getting-started/#mame-2010","title":"MAME 2010","text":"<ul> <li>is slower than MAME 2003</li> <li>is more accurate than MAME 2003</li> <li>has fixed romsets</li> <li>support more games than MAME 2003</li> <li>is missing support for basic libretro api features (savestates, ...)</li> <li>probably shouldn't be used at all, most of the interesting things it has to offer were backported to MAME 2003-Plus, including lots of game additions</li> </ul>"},{"location":"guides/arcade-getting-started/#mame-2015","title":"MAME 2015","text":"<ul> <li>is slower than MAME 2010</li> <li>is more accurate than MAME 2010</li> <li>has fixed romsets</li> <li>support more games than MAME 2010</li> <li>is missing support for basic libretro api features (savestates, ...)</li> <li>probably shouldn't be used at all, the performance gap with MAME (current) is usually small and can be in favor of the later, which also has a better libretro integration</li> </ul>"},{"location":"guides/arcade-getting-started/#mame-2016","title":"MAME 2016","text":"<ul> <li>is slower than MAME 2015</li> <li>is more accurate than MAME 2015</li> <li>has fixed romsets</li> <li>support more games than MAME 2015</li> <li>is missing support for basic libretro api features (rotation, ...)</li> <li>probably shouldn't be used at all, the performance gap with MAME (current) is usually small and can be in favor of the later, which also has a better libretro integration</li> </ul>"},{"location":"guides/arcade-getting-started/#flycast","title":"Flycast","text":"<ul> <li>support arcade hardware based on Sega Dreamcast (NAOMI, NAOMI 2, AtomisWave and Sega System SP)</li> <li>is the only working libretro core for those 4 systems</li> </ul>"},{"location":"guides/arcade-getting-started/#kronos","title":"Kronos","text":"<ul> <li>support arcade hardware based on Sega Saturn (ST-V)</li> <li>MAME is also able to emulate ST-V</li> </ul>"},{"location":"guides/arcade-getting-started/#dice","title":"DICE","text":"<ul> <li>supports machines without any type of CPU</li> </ul>"},{"location":"guides/arcade-getting-started/#step-3-use-the-correct-version-romsets-for-that-emulator","title":"Step 3: Use the correct version romsets for that emulator","text":"<p>The recommended format for arcade romsets is zip, it has the fastest loading and the widest support. 7zip might work or not. If you extract an arcade romset, it won't work.</p> <p>As previously said, arcade emulators emulate thousands of different machines, so they need a mean to identify which machine run a given romset, it was decided to use the archive's filename for this purpose. If you rename an arcade romset, it won't work.</p> <p>Each file within a romset is the dump of a chip with a specific purpose (program data, sound data, graphics data, ...), the emulator needs to identify each dump's role, it was decided to use their signature (crc) for this purpose (filenames can sometimes be used as a fallback to load bad/hacked dump). If your romset doesn't contain the exact files the emulator requires, it won't work.</p> <p>Warning</p> <p>When using romsets for the latest version of MAME or FBNeo, you should first make sure your version of those cores aren't outdated.</p> <p>Tip</p> <p>In general, you will get better results with a full collection of romsets for your chosen emulator. Starting with individual arcade romsets is less likely to work because you generally won't know which emulator they target, or if they contain every required files to run the game (bios, parent). Full Non-Merged romsets are widely available for all of the \"historic\" MAME cores. Full Non-Merged romsets are the simplest romset format to get started with because each romset archive contains all necessary files for emulating one game.</p> Emulator Required ROM Version ClrMamePro dat file DICE DICE 0.3.0 here FB Neo FBNeo (latest version) here FB Alpha 2012 FBA 0.2.97.24 N/A MAME 2000 MAME 0.37b5 here MAME 2003 MAME 0.78 here MAME 2003-Plus MAME 2003-Plus (latest version) here MAME 2010 MAME 0.139 here MAME 2015 MAME 0.160 here MAME 2016 MAME 0.174 here MAME (latest version) MAME (latest version) here (click XML link)"},{"location":"guides/arcade-getting-started/#optional-clrmamepro-tutorial","title":"Optional : ClrMamePro tutorial","text":"<p>Clrmamepro is a tool to help validating your romsets against a given emulator.</p> <p>Credits</p> <p>This tutorial is based on RetroPie's</p>"},{"location":"guides/arcade-getting-started/#step-1-back-up-your-roms","title":"Step 1 - Back up your ROMs","text":"<p>It is possible with ClrMamePro to change one or two options and when it runs it will delete all your existing ROMs. OK, not really - using the default options it will make backups of any files it removes, but it is still possible to mess up their ROMs beyond repair when getting started with ClrMamePro.</p>"},{"location":"guides/arcade-getting-started/#step-2-download-clrmamepro","title":"Step 2 - Download ClrMamePro","text":""},{"location":"guides/arcade-getting-started/#step-3-acquire-dat-files","title":"Step 3 - Acquire DAT files","text":"<p>You can download most DAT files from above.</p>"},{"location":"guides/arcade-getting-started/#step-4-run-clrmamepro-for-the-first-time","title":"Step 4 - Run ClrMamePro for the first time","text":"<ul> <li>Run it.  The welcome screen explains that common first steps are to 1) Create a Profile, 2) Set up your paths and 3) Scan your ROMs. We will be doing things slightly differently, in order to leave your source ROMs intact.  </li> <li>Click OK to the Welcome screen</li> <li>Click \"Add DatFile...\", search and open the DAT file you downloaded</li> <li>Accept the default profile location of [PROFILES], click \"OK\"</li> <li>Select \"[NEW DATFILES]\" in the left-hand pane and select the one jou just added in the right-hand panel</li> <li>Click \"Load / Update\"</li> <li>ClrMamePro will ask you how to generate the settings for this datfile, click \"Default\" (it is possible it will throw a warning but just select \"ok to all\" and continue on)</li> <li>You are now at the main window for clrmamepro.  We still need to set our paths, so click \"Settings\"</li> <li>Verify \"ROM-Paths\" is the selected option in the upper-left corner drop down menu</li> <li>Click the \"Add...\" button</li> <li>Create a folder where you'll store your romsets, select it and click \"OK\"</li> <li>Close the settings window with the \"X\" button in the upper right</li> </ul> <p>At this point, you could scan the ROMs folder you just selected, but we just created this folder and it is empty.  Instead, we will rebuild into this folder.</p>"},{"location":"guides/arcade-getting-started/#step-5-rebuild-a-rom-set","title":"Step 5 - Rebuild a ROM set","text":"<ul> <li>In the main ClrMamePro window, select \"Rebuilder\"</li> <li>The destination should already be filled in for you - it is the same as the ROM path you defined above</li> <li>Use the browse button \"...\" to select your source path. For example you might have a folder where you stored various arcade ROM sets you got from various sources - point ClrMamePro to that directory as your source.</li> <li>When rebuilding there are three options: Non-Merged, Merged, and Split. Pick the one you prefer. If you select \"Non-Merged\" in this menu, it is recommended to click the \"Advanced\" button and deselect \"Separate BIOS sets\", so that ROM sets will also be self-sufficient with BIOS.</li> <li>Click \"Rebuild...\".  Depending on the size of the directory you chose as a source, this could take some time</li> <li>When ClrMamePro is finished rebuilding, you will see a window with statistics showing how many matching files were found, how many files were created and how many were skipped.  Click \"OK\" </li> <li>Repeat for any other source paths you might have.  You can rebuild from multiple sources, but leave the Destination path the same</li> <li>When finished, close the Rebuilder with the \"X\" in the upper right corner of the window</li> </ul> <p>Time to find out how well your source ROMs matched up...</p>"},{"location":"guides/arcade-getting-started/#step-6-scan-a-rom-set","title":"Step 6 - Scan a ROM set","text":"<ul> <li>In the main ClrMamePro window, select \"Scanner\"</li> <li>Leave all settings at default and click \"New Scan...\"</li> <li>When ClrMamePro finishes scanning, you will see a \"Statistics\" window with high level information and a \"Scan Results\" window with detailed information about your missing ROMs</li> </ul>"},{"location":"guides/arcade-getting-started/#notes","title":"Notes","text":"<ul> <li>Typically you cannot completely 'roll forward' from an old ROM collection version to a new version, since these will often feature entirely new roms or dumps that weren't present in your older version. The same is true for 'rolling back' from a new version to an older version, but there are 'rollback' sets available that collect all the previously deleted ROMs from old versions that you can use to fill in the gaps.</li> <li>Be careful with the \"Fix\" settings in the Scanner window and the \"Remove Matched Sourcefiles\" setting in the Rebuilder window. These settings will remove and rename your ROMs.</li> <li>If ClrMamePro does delete any ROMs (because you told it to), you should be able to find backups in C:\\clrmamepro\\backup as long as you didn't change the default settings.</li> <li>ClrMamePro is very stable.  It has been around for a long time, it is regularly updated and it is widely used.  If it reports problems reading your ROMs, you most likely have corrupt ROM archives (zip files) or a failing hard drive.</li> <li>If you feel the need to reset ClrMamePro's settings, just delete your existing profile(s) and reload your DAT file, selecting \"Default\" settings for the new profile.  Almost all of ClrMamePro's settings are per-profile.</li> </ul>"},{"location":"guides/arcade-getting-started/#retroarch-playlist-scanner-support","title":"RetroArch Playlist Scanner Support","text":"<p>The RetroArch content database supports arcade romsets in Full Non-Merged and Split formats. In order to be recognized by the scanner, Full Non-Merged and Split romsets must also be processed by TorrentZip to standardize their CRC.</p> <p>Manual scan is the recommended method for setting up arcade playlists in RetroArch. Here is a guide written for creating FBNeo playlists, but you can easily adapt it for MAME usage.</p> <p>Credits</p> <p>The arcade cabinets image is based on an image by Rob DiCaterino, licensed for reuse under a Creative Commons (CC BY 2.0) License. Original image and license: https://www.flickr.com/photos/goodrob13/17385639015/</p>"},{"location":"guides/bios/","title":"BIOS","text":"<p>A BIOS file is a copy of the operating system used by the hardware that a Core is emulating. Some Cores need BIOS files in order to correctly emulate hardware and/or software as needed by the content. RetroArch and LibRetro do not share any copyrighted system files or game content. You must provide your own BIOS and content in accordance with your local laws as applicable.</p> <p>Example</p> Core Required Optional Beetle PSX HW \u2714 \u2715 mGBA \u2715 \u2714 SwanStation \u2714 \u2715 PCSX ReArmed \u2715 \u2714 <p></p>"},{"location":"guides/bios/#high-level-emulation-hle","title":"High-Level Emulation (HLE)","text":"<p>High-Level Emulation (HLE) tries to reproduce the console's outputs instead of its actual behavior, though bugs and glitches are often common.</p>"},{"location":"guides/bios/#where-do-bios-files-go","title":"Where do BIOS files go?","text":"<p>Usually BIOS files go to RetroArch's \"system\" directory. Check settings --&gt; directory and the core documentation to be sure.</p>"},{"location":"guides/building-lakka/","title":"Building Lakka","text":"<p>Lakka is the official Linux distribution of RetroArch and the libretro ecosystem. Each game system is implemented as a libretro core, while the frontend RetroArch takes care of inputs and display. This clear separation ensures modularity and centralized configuration. Lakka is a lightweight Linux distribution that transforms a small computer into a full blown retrogaming console.</p>  DISCLAIMER Lakka is still under heavy development. In its current state, the project allows you to play most games on most platforms. However, expect bugs, missing features or features not working as intended, and hardware that is yet to be supported. If you find a bug, you can declare it in our tracker, unless already reported."},{"location":"guides/building-lakka/#compiling-lakka","title":"Compiling Lakka","text":"<p>This page is for developers who want to customize their build and/or contribute to Lakka. You will need Linux (we usually build on Debian or Crux) and the base development packages (build-essential on Debian). You may also need a local HTTP server to host Lakka packages if you plan to do packaging.</p>"},{"location":"guides/building-lakka/#building-lakka-the-first-time","title":"Building Lakka the first time","text":"<p>First, clone Lakka?</p> <pre><code>$ git clone https://github.com/libretro/Lakka-LibreELEC\n</code></pre> <p>Lakka is organized by projects, the Generic project targets PCs, while other projects like RPi targets very specific hardware like the Raspberry Pi. The full list of projects can be listed like this:</p> <pre><code>$ ls -l Lakka-LibreELEC/projects\n</code></pre> <p>You can now launch make, set the PROJECT and ARCH variables to fit your needs:</p> <p><pre><code>$ cd Lakka-LibreELEC\n$ DISTRO=Lakka PROJECT=RPi DEVICE=RPi ARCH=arm make image         # for the Raspberry Pi\n$ DISTRO=Lakka PROJECT=RPi DEVICE=RPi2 ARCH=arm make image        # for the Raspberry Pi2/ Pi3\n$ DISTRO=Lakka PROJECT=RPi DEVICE=RPi4 ARCH=arm make image        # for the Raspberry Pi4 (arm 32bit)\n$ DISTRO=Lakka PROJECT=RPi DEVICE=RPi4 ARCH=aarch64 make image    # for the Raspberry Pi4 (arm 64bit)\n$ DISTRO=Lakka PROJECT=NXP DEVICE=imx6 ARCH=arm make image        # for the Hummingboard and Cubox-i\n$ DISTRO=Lakka PROJECT=Generic ARCH=x86_64 make image  # for 64 bits PCs\n$ DISTRO=Lakka PROJECT=Generic ARCH=i386 make image    # for 32 bits PCs\n</code></pre> Building Lakka the first time takes a lot of time, you can go grab a coffee or two :) If the build fails, make sure you have at least 10 GB of free space and try to figure out which package is missing, install it, and make again.</p> <p>You will find the result in Lakka-LibreELEC/target:</p> <pre><code>$ ls -l target\n</code></pre> <p>The .kernel and .system can be used to upgrade an existing Lakka system. The .img.gz is the final result, it contains the image that can be flashed to an SD card or a USB pen drive.</p> <p>Please follow this tutorial to know how to flash Lakka on a drive.</p>"},{"location":"guides/building-lakka/#upgrading-your-lakka-build","title":"Upgrading your Lakka build","text":"<p>If some time passed and you want to rebuild from newer sources:</p> <p><pre><code>$ cd Lakka-LibreELEC\n$ git pull\n$ rm -rf target\n$ DISTRO=Lakka PROJECT=RPi DEVICE=RPi ARCH=arm make image\n</code></pre> But if you just want to rebuild a particular package, for example a package you are trying to port to Lakka, you can just remove it like this and rebuild.</p> <pre><code>$ DISTRO=Lakka PROJECT=RPi DEVICE=RPi ARCH=arm scripts/clean yourpackage\n$ DISTRO=Lakka PROJECT=RPi DEVICE=RPi ARCH=arm scripts/build yourpackage\n</code></pre> <p>If you want to rebuild all from scratch, remove the build* folders</p>"},{"location":"guides/building-lakka/#conclusion","title":"Conclusion","text":"<p>Lakka is still under heavy development. In its current state, the project allows you to play most games on most platforms. More information can be found in the Lakka documents. You may also want to check the Official Forum.</p>"},{"location":"guides/building-ludo/","title":"Building Ludo","text":"<p>Ludo is an Emulator Frontend able to run retro video games. Ludo does not emulate the consoles itself, but does it through emulator plugins called libretro cores. Libretro cores are well known emulators (like Snes9x or Genesis Plus GX or PCSX) stripped from their user interface. They contain only console specific logic.</p>  DISCLAIMER Ludo is still under heavy development. In its current state, the project allows you to play most games on most platforms. However, expect bugs, missing features or features not working as intended, and hardware that is yet to be supported. If you find a bug, you can declare it in our tracker, unless already reported."},{"location":"guides/building-ludo/#prerequisites","title":"Prerequisites","text":"<ul> <li>GLFW 3.3</li> <li>OpenGL &gt;= 2.1</li> <li>OpenAL</li> </ul>"},{"location":"guides/building-ludo/#building","title":"Building","text":"<p>Building Ludo from source is for developers and contributors.</p>"},{"location":"guides/building-ludo/#ubuntu-and-debian","title":"Ubuntu and Debian","text":"<pre><code>sudo apt install git go libopenal-dev xorg-dev\ngit clone --recursive https://github.com/libretro/ludo.git\ncd ludo\ngo build\n./ludo\n</code></pre>"},{"location":"guides/building-ludo/#red-hat-centos-and-fedora","title":"Red Hat, CentOS and Fedora","text":"<pre><code>sudo yum install golang libopenal-soft-devel libX11-devel\ngit clone --recursive https://github.com/libretro/ludo.git\ncd ludo\ngo build\n./ludo\n</code></pre>"},{"location":"guides/building-ludo/#windows","title":"Windows","text":"<p>Setup Git Bash then setup Go. When you done with these setup MinGW-w64 and add it to your PATH. Download http://static.kivutar.me/openal-soft-1.19.0-bin.zip and extract it for example in C: Setup MinGW-w64 and add it to your PATH Download http://static.kivutar.me/openal-soft-1.19.0-bin.zip and extract it for example in C: <pre><code>export CGO_CFLAGS=\"-I/c/openal-soft-1.19.0-bin/include/\"\nexport CGO_LDFLAGS=\"-L/c/openal-soft-1.19.0-bin/build/Release/\"\n</code></pre></p> <pre><code>git clone --recursive https://github.com/libretro/ludo.git\ncd ludo\ngo build\n./ludo\n</code></pre>"},{"location":"guides/building-ludo/#mac-os-x","title":"Mac OS X","text":"<p>First setup Xcode then setup Homebrew.</p> <pre><code>brew install go openal-soft\ngit clone --recursive https://github.com/libretro/ludo.git\ncd ludo\ngo build\n./ludo\n</code></pre>"},{"location":"guides/change-directories/","title":"Directory configuration","text":"<p>Next step you might want to consider is setting directories for RetroArch, this can help get the best experience possible.</p> <p>Although the defaults will suit most users, if you want to configure custom BIOS's or change the save location, you will have to change directories.</p> <p>Some directory variable values are set to \"default\" by default in retroarch.cfg. However, to modify directory values to \"default\", a text editor is required. \"default\" represents different values to different entries in <code>Settings</code> -&gt; <code>Directories</code>: - <code>&lt;Content Directory&gt;</code> -- The directory where the game was loaded from via <code>Main Menu -&gt; Load Content</code>. For example, if /home/gamer/Downloads/SNES/game.sfc was loaded, and retroarch.cfg contains <code>screenshot_directory = \"default\"</code>, then the screenshots will be saved in /home/gamer/Downloads/SNES/. - For multiple directory variables in retoarch.cfg, the \"default\" value sets their value in <code>Settings</code> -&gt; <code>Directories</code> to:<code>&lt;Default&gt;</code> -- The RetroArch configuration directory.</p> <p>Table of special values limited to some variables:</p> retroarch.cfg configuration RetroArch <code>Settings</code> -&gt; <code>Directories</code> system_directory = \"default\" <code>System/BIOS</code>: <code>&lt;Content Directory&gt;</code> screenshot_directory = \"default\" <code>Screenshots</code>: <code>&lt;Content Directory&gt;</code>"},{"location":"guides/change-directories/#from-retroarch","title":"From RetroArch:","text":"<ul> <li>Open RetroArch.</li> <li>Navigate to <code>Settings</code> -&gt; <code>Directories</code>.</li> <li>Click on the directory you want to change.</li> <li>Navigate to the desired location using the File Browser.</li> </ul>"},{"location":"guides/change-directories/#from-a-text-editor","title":"From a text editor:","text":"<ul> <li>Close RetroArch.</li> <li>Find your retroarch.cfg file. If you are having trouble locating the file, 1) Open RetroArch 2) Navigate to <code>Main Menu</code> -&gt; <code>Configuration File</code> -&gt; <code>Save Current Configuration</code>, the on-screen notification widget will display: <code>Saved new config to \"[...]/config/retroarch/retroarch.cfg\".</code>. If all hope is lost do a system-wide search for retroarch.cfg</li> <li>Open retroarch.cfg in a text editor.</li> <li>After the = sign, make changes then save the file.</li> </ul>"},{"location":"guides/change-directories/#paths-to-consider-changing","title":"Paths to consider changing:","text":""},{"location":"guides/change-directories/#cores","title":"Cores","text":"<p>This is the location for all your cores. To install them using the user interface, this setting needs to point to a writeable directory.</p> <p>Note</p> <p>The Ubuntu PPA does not point this to a user-writable directory because cores are modified by the package manager. If you want to change it manually, you might want to change this directory from \"retroarch.cfg\" with a text editor since the RetroArch file browser doesn't show hidden folders by default. libretro_directory = is what you need to change in the config file. Some distributions use <code>~/.config/retroarch/cores/</code></p>"},{"location":"guides/change-directories/#systembios","title":"System/BIOS","text":"<p>This is where you specify the location for all your BIOS's, by default RetroArch looks for BIOS in your \"Starting directory\" folder. It is not suggested that you dump all BIOS files in the \"Starting directory\".</p> <p>Note</p> <p>Some emulators (Example: PS1 and PSP) will require BIOS files to even function.</p> <p>It is suggested that this be changed to a folder named \"system\" under your retroarch config folder. If you can't be bothered to try and find this config folder (since it varies from OS), and you want to skip having to use a text editor, choose another location that the BIOS files will be.</p> <p>Note</p> <p>You might want to change this directory from \"retroarch.cfg\" with a text editor since the RetroArch file browser doesn't show hidden folders by default. system_directory = is what you need to change in the config file.</p>"},{"location":"guides/change-directories/#file-browser","title":"File Browser","text":"<p>Another one you'll want to consider changing. This will be the starting directory when you select \"Load Content\" and it can be very handy to have this set to your ROM folder. Although this probably isn't needed since RetroArch has an import feature, it doesn't hurt to have this set anyway.</p>"},{"location":"guides/change-directories/#save-files-and-save-states","title":"Save Files, and Save States","text":"<p>Note</p> <p>Some platforms/distros may use a different structure, so always verify your paths in settings -&gt; directory</p> <p>Last one you should consider changing are the save locations, by default it will place them in the same folder as your ROMS. If you care about organisation you should change these to another folder.</p>"},{"location":"guides/cheat-codes/","title":"RetroArch cheat and rumble codes","text":"<p>RetroArch uses two methods of applying cheat codes:</p> <ul> <li>Emulator Handled are codes that are sent to the emulator/core and it is up to the emulator/core to apply them.</li> <li>RetroArch Handled are codes that RetroArch itself handles by directly scanning/manipulating the emulator/core memory area.</li> </ul>"},{"location":"guides/cheat-codes/#adding-a-new-cheat-code","title":"Adding a new cheat code","text":"<p>If you have a code that doesn't exist in the cheat database that you want to add manually, perform the following steps:</p> <ol> <li> <p>Load the game in question and open the \"Cheats\" menu from the Quick Menu.</p> </li> <li> <p>Select either \"Add New Code to Top\" or \"Add New Code to Bottom\".</p> </li> <li> <p>Navigate to the newly added cheat code line and press enter to bring up the cheat code details.</p> </li> <li> <p>Select the \"Code\" menu item and press enter.  A popup text-entry screen will appear.  Type in your new code and press enter.</p> </li> <li> <p>Optionally perform the same steps for the \"Description\" menu item to edit the description.</p> </li> <li> <p>Ensure the \"Enabled\" field is set to on.</p> </li> <li> <p>Navigate back one level to the cheats menu and select \"Apply Changes\".</p> </li> </ol>"},{"location":"guides/cheat-codes/#retroarch-new-cheat-code-searching","title":"RetroArch new cheat code searching","text":"<p>RetroArch now has the ability to search for and create new cheat codes.  The following is an overview for finding new cheats:</p> <ol> <li> <p>Start game</p> </li> <li> <p>Go to Quick Menu -&gt; Cheats -&gt; Start or Continue Cheat Search</p> </li> <li> <p>Use left/right on \"Start or Restart Cheat Search\" to select a bit-size appropriate to the console you are using and the value your are searching.</p> <ul> <li>For example, if you are playing Castlevania:SOTN on the PS1 and you want to search for the health value, then that's a value that can be greater than 255 (0xFF), but it's unlikely that the game developers anticipated a value larger than 65535 (0xFFFF) so set the search to 16-bit.</li> <li>An alternate example - if you are playing Space Invaders on Atari 2600 and you want to search for the number of lives, then that's a value that could possibly be stored in just 2-bits of data (max number of lives = 3) and since the Atari 2600 only has a very small memory space, it's entirely possible that the memory location for the number of lives is only partially stored in a single byte while the rest of that same byte may store other important data that should not be touched. Set the size to 2-bit.</li> </ul> </li> <li> <p>Select \"Start or Restart Cheat Search\" once you have selected the bit size</p> </li> <li> <p>Go back to the game and lose a life</p> </li> <li> <p>Go back to the quick menu and select \"Search Memory For Values ... Less Than Before\" because when you started the search you had one more life than you do now. You could also try \"Search Memory For Values ... Equals To Before-1\". The number of matches should go down.</p> </li> <li> <p>If the number of matches is still too great to peruse, then perform actions 5 and 6 repeatedly until the number of matches is something you feel comfortable trying (e.g. 10). If you run out of lives, just reset the game or restore a save state. Then your lives will likely be greater than the last time you checked, so select \"Search Memory For Values ... Greater Than Before\"</p> </li> <li> <p>Once you have a manageable list, select \"Add the ## Matches to Your List\"</p> </li> <li> <p>Go back one menu to see the codes that have been added. Try turning just one on at a time to see if it has the desired effect. If not, turn it off and try the next one. One of them should be the location in memory that stores your number of lives and enabling the cheat in its default state will result in that memory location being overwritten by the cheat value continuously and voila infinite lives.</p> </li> <li> <p>Alternately, you can \"Search Memory For Values ... Equal to ###\" if you know the exact number (e.g. the number of hit points you have in an RPG).</p> </li> </ol>"},{"location":"guides/cheat-codes/#retroarch-cheat-code-spanningslidingrepeating","title":"RetroArch cheat code spanning/sliding/repeating","text":"<p>You can also use the \"Number of Iterations\", \"Value Increase Each Iteration\", and \"Address Increase Each Iteration\" options to create a single code that affects a wide range of memory values.</p> <p>This is useful for things like unlocking all levels, giving yourself 1 of every item, setting all of your RPG stats to 999, etc.</p> <p>Usually when you have found a cheat for a specific item (e.g. your strength attribute in an RPG), similarly themed values are found in the same memory area.  For example, if the strength attribute was found at memory address 0x0000AB04 then the dexterity attribute might be at 0x0000AB08, intelligence at 0x0000AB0C, etc.</p> <p>This feature is also useful for experimenting.  If you found your strength attribute at memory address 0x0000AB04, then you might increase the number of iterations by 20 to see what changes in the game and if any of those changes are desirable.  Note that experimenting like this has a good chance of crashing your game, so have a save state prepared before blindly attempting to write to memory.</p> <p>Settings example:</p> <p>Your game has the following values/memory addresses :</p> <ul> <li>0x0000AB04 - Strength</li> <li>0x0000AB08 - Dexterity</li> <li>0x0000AB0C - Constitution</li> <li>0x0000AB10 - Intelligence</li> </ul> <p>A single code can update all of those values:</p> <ul> <li>Memory Search Size - 32 bit</li> <li>Memory Address - 0x0000AB04</li> <li>Value - 900 (0x00000384)</li> <li>Number of Iterations - 4</li> <li>Value Increase Each Iteration - 5</li> <li>Address Increase Each Iteration - 1</li> </ul> <p>The starting address is 0x0000AB04 which will be set to value 900.  Then for each of the 4 (Number of Iterations) iterations, it will add 1 of the \"Memory Search Size\" (1 * 32 bits = 4 bytes) to the address and 5 to the value and then set that as well.  The final result will have updated these 4 memory locations to be:</p> <ul> <li>0x0000AB04 - Strength      = 900</li> <li>0x0000AB08 - Dexterity     = 905</li> <li>0x0000AB0C - Constitution  = 910</li> <li>0x0000AB10 - Intelligence  = 915</li> </ul> <p>The \"Value Increase Each Iteration\" would normally be 0 in the above scenario but was used for illustrative purposes.</p>"},{"location":"guides/cheat-codes/#retroarch-rumble-codes","title":"RetroArch rumble codes","text":"<p>RetroArch also has the ability to make your controller rumble when changes in the emulator/core memory occur.  It is based off of the same RetroArch-handled cheat codes described above.  For example, after finding the memory location for the number of lives in a game (via the cheat searching interface) you can set it up such that every time the value decreases (lose a life) the controller rumbles.</p> <p>Rumble tested with X360 controller, input driver dinput, controller driver xinput.</p> <p>Available rumble controls:</p> <ul> <li>Rumble when memory value changes</li> <li>Rumble when memory value does not change</li> <li>Rumble when memory value decreases</li> <li>Rumble when memory value increases</li> <li>Rumble when memory value = value</li> <li>Rumble when memory value != value</li> <li>Rumble when memory value &lt; value</li> <li>Rumble when memory value &gt; value</li> <li>Rumble when memory value decreases by a specific amount</li> <li>Rumble when memory value increases by a specific amount</li> </ul>"},{"location":"guides/cli-intro/","title":"RetroArch CLI","text":"<p>RetroArch can be used from its robust graphical interfaces as well as a powerful command-line interface (CLI). Getting familiar with the command-line helps you understand the design principles of RetroArch.</p> <p>Note: please be aware of whether your system uses DOS/Windows style paths with backslashes <code>\\</code> or Unix-style paths with forward slashes: <code>/</code>.</p> <p>Some cores like ScummVM (which also has an inbuilt GUI file browser), do not require any content file name passed as a command line argument. This is determined by the core info files with the line <code>supports_no_game = \"true\"</code>. In this case, after you have loaded the core and if it is not starting directly, select 'Start Core' that will appear inside the main menu.</p>"},{"location":"guides/cli-intro/#on-macos-invoking-the-retroarch-cli-executable","title":"On macOS: invoking the RetroArch CLI executable","text":"<pre><code>/Applications/RetroArch.app/Contents/MacOS/RetroArch\n</code></pre>"},{"location":"guides/cli-intro/#example-loading-a-rom-and-libretro-core-unix-style-path","title":"Example: loading a ROM and libretro core (Unix-style path)","text":"<pre><code>retroarch -L /path/to/libretro/core.so game.rom\n</code></pre>"},{"location":"guides/cli-intro/#example-loading-a-rom-and-libretro-core-with-flatpak","title":"Example: loading a ROM and libretro core with flatpak","text":"<pre><code>retroarch -L /path/to/libretro/core.so game.rom\nflatpak run org.libretro.RetroArch/x86_64/stable -L /home/MYUSERNAME/.var/app/org.libretro.RetroArch/config/retroarch/cores/nestopia_libretro.so Tetris.nes\n</code></pre>"},{"location":"guides/cli-intro/#example-loading-a-rom-and-libretro-core-with-steam","title":"Example: loading a ROM and libretro core with Steam","text":"<pre><code> steam -applaunch 1118310 -L \"/path/to/steamapps/common/RetroArch/cores/nestopia_libretro.so\" \"/path/to/Tetris.nes\"\n</code></pre> <p>Content filenames require no spaces, as there is an issue with Steam passing through command line arguments containing spaces.</p>"},{"location":"guides/cli-intro/#verbose-logging-output","title":"Verbose logging output","text":"<p>To get a better idea on what's going on, use the <code>--verbose</code> flag. If you want to report a bug, it is vital that this log is included.</p>"},{"location":"guides/cli-intro/#using-a-config-file","title":"Using a config file","text":"<p>By default, RetroArch looks for a config in various places depending on OS:</p> <ul> <li>Linux/macOS: <code>$XDG_CONFIG_HOME/retroarch/retroarch.cfg</code>, then <code>~/.config/retroarch/retroarch.cfg</code>, then <code>~/.retroarch.cfg</code>, and finally, as a fallback, <code>/etc/retroarch.cfg</code>.</li> <li>Windows: <code>retroarch.cfg</code> in same folder as <code>retroarch.exe</code>, then <code>%APPDATA%\\retroarch.cfg</code>.</li> </ul> <p>To override this, use <code>retroarch --config customconfig.cfg</code>. If you have some special options you want to store in separate config files, you can use <code>retroarch --config baseconfig.cfg --appendconfig specialconfig.cfg</code>. Be sure to pass <code>--menu</code> as well if you aren't loading content directly from the command-line, or RetroArch will close immediately after launching. See man-page and/or <code>--help</code> for detail.</p>"},{"location":"guides/cli-intro/#other-essential-cli-flags","title":"Other essential CLI flags","text":""},{"location":"guides/cli-intro/#retroarch-help","title":"retroarch --help","text":"<p>Use the <code>--help</code> help flag to display RetroArch's built-in CLI documentation. You'll probably discover some features you didn't think about.</p>"},{"location":"guides/cli-intro/#retroarch-features","title":"retroarch --features","text":"<p>If you're unsure if a particular feature is compiled in, execute <code>retroarch --features</code></p>"},{"location":"guides/controller-autoconfiguration/","title":"Joypad Auto Configuration","text":""},{"location":"guides/controller-autoconfiguration/#why-is-it-needed","title":"Why is it needed?","text":"<p>RetroArch runs on many platforms. Each of these platforms has one or more input systems. These input systems in turn differ widely in the way they enumerate the pad buttons. For this reason, your joypad buttons may be mapped differently depending on if you are using Windows, Mac, or Linux.</p> <p>Traditional emulators allow you map each button of your pad to the original pad of the emulated system. For example, this is how the Snes9x joypad configuration interface looks:</p> <p></p> <p>RetroArch also allows this kind of manual mapping. However, RetroArch tries to go further by detecting your joypad and automatically configuring it so manual configuration becomes obsolete.</p>"},{"location":"guides/controller-autoconfiguration/#benefits","title":"Benefits","text":"<p>With RetroArch joypad auto-configuration system, your joypad will be recognized and will work out of the box.</p> <p>This allows:</p> <ul> <li>Use many different joypads and have them attributed to each players like it would work on a real game console.</li> <li>Unplug the second joypad, and replace it by another one, even if it's of a different brand and model.</li> </ul> <p>Having automatically configured joypads makes it a lot easier to navigate the RetroArch Menu with the joypad. This is very convenient when running RetroArch on a game console, where a keyboard and a mouse are not always available. It is also what makes RetroArch suitable to build your own game console using Lakka or a similar OS.</p>"},{"location":"guides/controller-autoconfiguration/#installing-or-updating-joypad-profiles","title":"Installing or updating joypad profiles","text":"<p>The set of joypad profiles used by RetroArch can be downloaded and updated from the menu. Go to <code>Main Menu</code> -&gt; <code>Online Updater</code> -&gt; <code>Update Controller Profiles</code> to get the latest version of the profile pack.</p> <p>A message will appear at the bottom of the screen showing the download progress and the extraction of the archive.</p>"},{"location":"guides/controller-autoconfiguration/#generating-a-joypad-profile","title":"Generating a joypad profile","text":"<p>If your joypad is not recognized by RetroArch even after updating the profiles, you can generate a profile from the menu.</p> <ol> <li>To avoid other controllers from interfering with your mapping when starting RetroArch, follow these steps: Disconnect all joypads by unplugging their cables or disconnecting them from any wireless connections.</li> <li>Connect the controller intended for autoconfiguration. Ensure your system supports the selected connectivity method. If your joypad supports both wired and wireless connections and the initial attempt (e.g., via USB) fails, try the alternative option (e.g., Bluetooth). For example, the Nintendo Switch Pro Controller does not support USB connection on Linux 5.15 and older but does support Bluetooth.</li> <li>For Android, run the Android steps first.</li> <li>Use <code>Settings</code> -&gt; <code>Input</code> -&gt; <code>RetroPad Binds</code> -&gt; <code>Port 1 Controls</code> -&gt; <code>Set All Controls</code>. If automatic mapping fails for any button (e.g., due to lack of driver support), the process will be interrupted. In case of interruption, manually map the remaining buttons, starting from the one that caused the interruption and continuing through the rest of the list.</li> <li>Use <code>Settings</code> -&gt; <code>Input</code> -&gt; <code>RetroPad Binds</code> -&gt; <code>Port 1 Controls</code> -&gt; <code>Save Controller Profile</code></li> <li>The new profile file (also known as the autoconfig file) will be saved to your disk: [Controller profile directory]/[Controller driver]/[Device index].cfg.</li> <li>Proceed with the manual configuration step section below.</li> </ol>"},{"location":"guides/controller-autoconfiguration/#how-does-retroarch-match-controllers","title":"How does RetroArch match controllers?","text":"<p>When you connect a new controller to RetroArch, the system attempts to automatically configure it by matching it to known profiles. This matching process is crucial for ensuring that your controller works correctly with various games and emulators.</p> <p>The matching algorithm considers several key factors:</p> <ul> <li>Controller driver (input_driver): The software interface used to communicate with the controller. To use a specific driver, RetroArch must be configured accordingly by navigating to Settings -&gt; Drivers -&gt; Controller.</li> <li>Device Index (input_device): The name of the controller as recognized by the system. The Device Index can be identified by navigating to Settings -&gt; Input -&gt; RetroPad Binds -&gt; Port 1 Controls.</li> <li>Vendor ID (input_vendor_id): A unique identifier assigned to the controller's manufacturer.</li> <li>Product ID (input_product_id): A specific identifier for the particular controller model.</li> <li>Physical ID (input_phys_id): A manually generated identifier, only valid for one specific controller / USB port. Documentation in github for the time being.</li> </ul>"},{"location":"guides/controller-autoconfiguration/#matching-process","title":"Matching process","text":"<p>RetroArch compares these factors against the files in the autoconfig directorys. It calculates a matching score for each profile, selecting the one with the highest score to configure the controller.</p> <p>The combination of Vendor ID and Product ID is often referred to as \"vid:pid\" in technical contexts.</p> <p>This automated matching system allows RetroArch to support a vast array of controllers, reducing the need for manual setup in most situations.</p>"},{"location":"guides/controller-autoconfiguration/#autoconfig-variable-policy","title":"Autoconfig variable policy","text":"Controller driver input_vendor_id/input_product_id required input_device usage input_device name variability policy android Yes input_device<sup>3</sup> Use the Bluetooth name since it's primarly used by Android devices. udev Yes input_device<sup>3</sup> For optimal configuration, if you are generating Linux raw autoconfig files, it is advisable to reuse the variables for input_device and alternative_input_device. In cases where input_device is used without alternative names, it is recommended to utilize the USB Device Index for a more descriptive identification. linuxraw No input_device (for Device Index over USB), input_device_alt1 (for Device Index over Bluetooth), input_device_alt2 (for Device Index over USB on another Linux kernel)... Use both Device Index over USB and Bluetooth from different Linux kernels; Their names can differ depending on the Linux version in use. sdl2 Yes input_device<sup>3</sup> No (uses SDL2 Game Controller community database)"},{"location":"guides/controller-autoconfiguration/#alternative-variables","title":"Alternative variables","text":"<p>Managing Controllers with Identical Configurations. Up to nine alternative variables can be used for the following purposes:</p> <ul> <li><code>linuxraw</code>: Managing Controllers with Identical Configurations:</li> <li>Device Index (input_device): You can use <code>input_device_alt1</code>, <code>input_device_alt2</code>, <code>input_device_alt3</code>, up to <code>input_device_alt9</code>. For names available on both USB and Bluetooth, input_vendor_id should be utilized; for USB-specific names, use input_vendor_id_alt1, and for Bluetooth-specific names, use input_vendor_id_alt2.</li> <li><code>android</code>, <code>sdl2</code>, and <code>udev</code>: Managing Controllers with Identical Configurations that has different input_vendor_id/input_product_id:</li> <li>This applies to controllers like the Sony DualShock v1 and v2 for the <code>android</code>, <code>sdl2</code>, and <code>udev</code> controller drivers. Always use <code>input_vendor_id</code> and <code>input_product_id</code> for the most recent controller models, as they are more likely still available on the market. RetroArch version 1.19.1 and earlier cannot utilize _alt autoconfig variables, so using <code>input_vendor_id</code> for the latest controller ensures connectivity in RetroArch. Use <code>..._alt*</code> variables for older controllers.</li> <li>Vendor ID (input_vendor_id): Options include <code>input_vendor_id_alt1</code>, <code>input_vendor_id_alt2</code>, <code>input_vendor_id_alt3</code>, up to <code>input_vendor_id_alt9</code>.</li> <li>Product ID (input_product_id): Options include <code>input_product_id_alt1</code>, <code>input_product_id_alt2</code>, <code>input_product_id_alt3</code>, up to <code>input_product_id_alt9</code>.</li> </ul>"},{"location":"guides/controller-autoconfiguration/#similarities-in-input-variable-generation-between-linuxraw-and-udev","title":"Similarities in input variable generation between linuxraw and udev.","text":"<p>It's useful to know that the <code>linuxraw</code> driver generates identical file content as udev with the exception of the <code>input_driver</code> variable, and the DPAD inputs, which are handled differently:</p>"},{"location":"guides/controller-autoconfiguration/#linuxraw","title":"linuxraw","text":"<p>The <code>linuxraw</code> driver specifies DPAD inputs using axis values, providing precise control over directional inputs. For example: <pre><code>input_up_axis = \"-5\"\ninput_down_axis = \"+5\"\ninput_left_axis = \"-4\"\ninput_right_axis = \"+4\"\n</code></pre></p> <ul> <li>autoconfig/linuxraw/Nintendo Switch Pro Controller.cfg example: <pre><code>input_driver = \"linuxraw\"\ninput_device = \"Nintendo Switch Pro Controller\"\ninput_b_btn = \"0\"\ninput_y_btn = \"3\"\ninput_select_btn = \"9\"\ninput_start_btn = \"10\"\ninput_up_axis = \"-5\"\ninput_down_axis = \"+5\"\ninput_left_axis = \"-4\"\ninput_right_axis = \"+4\"\ninput_a_btn = \"1\"\ninput_x_btn = \"2\"\ninput_l_btn = \"5\"\ninput_r_btn = \"6\"\ninput_l2_btn = \"7\"\ninput_r2_btn = \"8\"\ninput_l3_btn = \"12\"\ninput_r3_btn = \"13\"\ninput_l_x_plus_axis = \"+0\"\ninput_l_x_minus_axis = \"-0\"\ninput_l_y_plus_axis = \"+1\"\ninput_l_y_minus_axis = \"-1\"\ninput_r_x_plus_axis = \"+2\"\ninput_r_x_minus_axis = \"-2\"\ninput_r_y_plus_axis = \"+3\"\ninput_r_y_minus_axis = \"-3\"\n</code></pre></li> </ul>"},{"location":"guides/controller-autoconfiguration/#udev","title":"udev","text":"<p>Udev consistently generates the following: <pre><code>input_up_btn = \"h0up\"\ninput_down_btn = \"h0down\"\ninput_left_btn = \"h0left\"\ninput_right_btn = \"h0right\"\n</code></pre></p> <ul> <li>autoconfig/udev/Nintendo Switch Pro Controller.cfg example: <pre><code>input_driver = \"udev\"\ninput_device = \"Nintendo Switch Pro Controller\"\ninput_vendor_id = \"1406\"\ninput_product_id = \"8201\"\ninput_b_btn = \"0\"\ninput_y_btn = \"3\"\ninput_select_btn = \"9\"\ninput_start_btn = \"10\"\ninput_up_btn = \"h0up\"\ninput_down_btn = \"h0down\"\ninput_left_btn = \"h0left\"\ninput_right_btn = \"h0right\"\ninput_a_btn = \"1\"\ninput_x_btn = \"2\"\ninput_l_btn = \"5\"\ninput_r_btn = \"6\"\ninput_l2_btn = \"7\"\ninput_r2_btn = \"8\"\ninput_l3_btn = \"12\"\ninput_r3_btn = \"13\"\ninput_l_x_plus_axis = \"+0\"\ninput_l_x_minus_axis = \"-0\"\ninput_l_y_plus_axis = \"+1\"\ninput_l_y_minus_axis = \"-1\"\ninput_r_x_plus_axis = \"+2\"\ninput_r_x_minus_axis = \"-2\"\ninput_r_y_plus_axis = \"+3\"\ninput_r_y_minus_axis = \"-3\"\n</code></pre></li> </ul>"},{"location":"guides/controller-autoconfiguration/#before-you-begin","title":"Before you begin","text":"<p>Make sure that you run the latest version of RetroArch, to generate a file name and file content via <code>Settings</code> -&gt; <code>Input</code> -&gt; <code>RetroPad Binds</code> -&gt; <code>Port 1 Controls</code> -&gt; <code>Save Controller Profile</code> that is up to date with our current policies.</p>"},{"location":"guides/controller-autoconfiguration/#modify-the-controller-profiles-directory-for-non-root-user-accessibility","title":"Modify the Controller Profiles Directory for Non-Root User Accessibility","text":"<p>Both the Flatpak and Android versions of RetroArch need adjustments to the Controller Profiles Directory to ensure essential functionality and smooth operation.</p> <p>Challenges for Android and Flatpak: - Users are unable to save custom profiles through the path: <code>Settings -&gt; Input -&gt; RetroPad Binds -&gt; Port 1 Controls -&gt; Save Controller Profile</code>. - Modification Restrictions: You are not allowed to change existing autoconfig files. Files that are initially disabled have \"(default-off)\" in their names. Without root access, you cannot modify these files to toggle the input_vendor_id and input_product_id settings. This restriction applies to both the \"(default-off)\" files and the \"original\" autoconfig files, which are more widely used and have been set to be enabled by default. These original files must also be commented to make changes. This limitation affects both HID and non-HID files, as well as controllers with multiple autoconfig files, such as the Sony DualSense controller, which includes several Android autoconfig files.</p>"},{"location":"guides/controller-autoconfiguration/#android-configuration","title":"Android Configuration","text":"<p>Challenge: Most Android devices are not rooted, and RetroArch's default autoconfig directory requires root access, leading to the following issues: - Restricted File Access: Users can update controller profiles via <code>Main Menu -&gt; Online Updater -&gt; Update Controller Profiles</code>, but cannot access these files in <code>/data/user/0/com.retroarch/autoconfig</code>. Android's security model prevents non-root users from reading certain files, making it difficult to compare updated profiles with custom-generated ones, thus hindering effective profile management and customization. - Modification Restrictions: Existing autoconfig files cannot be modified when necessary (refer to the base section for more details).</p> <p>Resolution: - Create the directory <code>/storage/emulated/0/RetroArch/autoconfig/android</code>. - In RetroArch, change the directory path under <code>Settings</code> -&gt; <code>Directory</code> -&gt; <code>Controller Profiles</code> from <code>/data/user/0/com.retroarch/autoconfig</code> (root) to <code>/storage/emulated/0/RetroArch/autoconfig</code>. - This adjustment allows the autoconfig files to be saved in <code>/storage/emulated/0/RetroArch/autoconfig/android</code> when using <code>Settings</code> -&gt; <code>Input</code> -&gt; <code>RetroPad Binds</code> -&gt; <code>Port 1 Controls</code> -&gt; <code>Save Controller Profile</code>.</p>"},{"location":"guides/controller-autoconfiguration/#addressing-controller-navigation-issues-on-non-touchscreen-devices","title":"Addressing controller navigation issues on non-touchscreen devices","text":"<p>Your controller will use the Controller Profile directory <code>/data/user/0/com.retroarch/autoconfig</code> by default in Android. Any autoconfig file that mathces your controller (Vendor ID/Product ID) be used by RetroArch automatically. However, you will not be able to generate a new autoconfig file for your controller if a default autoconfig file encounter issues with the following components:</p> <ul> <li>DPAD: Essential for navigating menus.</li> <li>OK: Necessary for applying settings, such as navigating to <code>Settings -&gt; Input -&gt; RetroPad Binds -&gt; Port 1 Controls</code>, and selecting <code>Set All Controls</code> and <code>Save Controller Profile</code>.</li> <li>Back: Needed to return to <code>Main Menu -&gt; Quit</code> after configuring <code>Settings -&gt; Directory -&gt; Controller Profiles</code>, ensuring the settings are saved to retroarch.cfg. Workaround if you have access to another controller: Temporarily connect another controller with a functioning autoconfig \"Back\" button and adjust the Controller Profiles directory:</li> <li><code>Settings -&gt; Directory -&gt; Controller Profiles</code>.</li> <li><code>Main Menu -&gt; Quit</code> -- ensuring the settings are saved to retroarch.cfg.</li> <li>Disconnect the controller from BlueTooth.</li> </ul> <p>While these issues are not problematic for typical Android devices like smartphones and tablets, which offer touchscreen navigation, they become significant on Google TV (an Android-based OS used by Chromecast) where a touchscreen is unavailable. Additionally, Chromecast's voice remote control lacks autoconfiguration and is incompatible with RetroArch navigation. Even controllers with touchpads are ineffective, as the touchpad button does not function (as observed with PS4/PS5 controllers), and the cursor remains invisible due to a known bug.</p> <p>Proposed Solution:</p> <p>To resolve this issue, follow these steps:</p> <ul> <li>Create a Custom Configuration File:</li> <li> <p>Create the file <code>retroarch.cfg</code> in the directory <code>/storage/emulated/0/Android/com.retroarch/files/retroarch.cfg</code> with the following line: <pre><code>joypad_autoconfig_dir = /storage/emulated/0/RetroArch/autoconfig/\n</code></pre></p> </li> <li> <p>Set Up a Fallback Configuration:</p> </li> <li>Identify the Product ID and Vendor ID of your controller: Ensure that the directory /storage/emulated/0/RetroArch/autoconfig/ remains empty, then restart RetroArch. This action will compel RetroArch to enter fallback mode, displaying a message like \"[Controller name] ([Vendor ID]/[Product ID]) not configured, using fallback\". Record the four-digit numbers for both IDs.</li> <li> <p>Create a file named <code>fallback.cfg</code> in the directory <code>/storage/emulated/0/RetroArch/autoconfig/android/</code> with the following configuration settings (don't forget to replace <code>input_vendor_id = \"[Vendor ID]\"</code> and <code>input_product_id = \"[Product ID]\"</code> with the values of your controller: <pre><code>input_driver = \"android\"\ninput_device = \"Fallback device\"\ninput_vendor_id = \"[Vendor ID]\"\ninput_product_id = \"[Product ID]\"\ninput_b_btn = \"96\"\ninput_y_btn = \"97\"\ninput_select_btn = \"98\"\ninput_start_btn = \"99\"\ninput_up_btn = \"h0up\"\ninput_down_btn = \"h0down\"\ninput_left_btn = \"h0left\"\ninput_right_btn = \"h0right\"\ninput_a_btn = \"100\"\ninput_x_btn = \"101\"\ninput_l_btn = \"102\"\ninput_r_btn = \"103\"\ninput_l2_btn = \"104\"\ninput_r2_btn = \"105\"\ninput_l3_btn = \"106\"\ninput_r3_btn = \"107\"\ninput_l_x_plus_axis = \"+0\"\ninput_l_x_minus_axis = \"-0\"\ninput_l_y_plus_axis = \"+1\"\ninput_l_y_minus_axis = \"-1\"\ninput_r_x_plus_axis = \"+2\"\ninput_r_x_minus_axis = \"-2\"\ninput_r_y_plus_axis = \"+3\"\ninput_r_y_minus_axis = \"-3\"\n</code></pre></p> </li> <li> <p>Launch RetroArch:</p> </li> <li> <p>Start the RetroArch application.</p> </li> <li> <p>Button Testing:</p> </li> <li>Test the controller buttons to identify which ones correspond to the \"OK\" and \"Back\" functions. This will allow you to navigate and temporarily reconfigure RetroArch.</li> </ul> <p>By applying this solution, you allow your controller to configure RetroArch, enabling navigation to Settings -&gt; Input -&gt; RetroPad Binds -&gt; Port 1 Controls and the selection of Set All Controls and Save Controller Profile. This setup also permits the saving of autoconfig files in the directory /storage/emulated/0/RetroArch/autoconfig/android.</p>"},{"location":"guides/controller-autoconfiguration/#flatpak-configuration","title":"Flatpak Configuration","text":"<p>Challenge: The default autoconfig directory in Flatpak RetroArch also requires root access, which prevents users from: - Downloading and extracting profiles through <code>Main Menu</code> -&gt; <code>Online Updater</code> -&gt; <code>Update Controller Profiles</code>. - Saving custom profiles via <code>Settings -&gt; Input -&gt; RetroPad Binds -&gt; Port 1 Controls -&gt; Save Controller Profile</code>. - Modification Restrictions: Facing similar issues as Android users if the GNU/Linux user lacks root access, as existing autoconfig files cannot be modified when necessary (refer to the base section for more details).</p>"},{"location":"guides/controller-autoconfiguration/#resolution","title":"Resolution","text":"<p>To address this issue, configure RetroArch as follows:</p> <ol> <li>Enable Hidden File Visibility</li> <li>Navigate to <code>Main Menu -&gt; Load Content -&gt; File Browser</code></li> <li> <p>Enable the option <code>Show Hidden Files and Directories</code></p> </li> <li> <p>Modify Controller Profiles Directory</p> </li> <li>Go to <code>Settings -&gt; Directory -&gt; Controller Profiles</code></li> <li>Change the directory from the default <code>/app/share/libretro/autoconfig</code> to <code>/home/youruser/.var/app/org.libretro.RetroArch/config/retroarch/autoconfig</code>.</li> </ol> <p>Note: The actual path of the default directory is: /var/lib/flatpak/app/org.libretro.RetroArch/current/active/files/share/libretro/autoconfig/</p> <p>By implementing these changes, you'll be able to create and save custom controller profiles without requiring root privileges.</p>"},{"location":"guides/controller-autoconfiguration/#additional-manual-configuration-steps","title":"Additional manual configuration steps","text":""},{"location":"guides/controller-autoconfiguration/#add-hotkeys","title":"Add hotkey(s)","text":"<p>When using RetroArch, not all controller buttons are automatically mapped through the \"Set All Controls\" option. Some buttons\u2014such as menu toggles, screenshot triggers, or other special functions\u2014must be configured separately. Here\u2019s a step-by-step guide to ensure all your controller buttons work as desired.</p> <ol> <li>Identify special buttons on your controller</li> <li>Look for buttons on your physical controller not automatically mapped by Retroarch.</li> <li>Examples include<ul> <li>Menu Toggle (virtually all controllers have them)</li> <li>Additional special buttons may be found on some controllers. For example, the Capture (screenshot) and the \"Home\" button on Nintendo Switch Pro Controller.</li> </ul> </li> <li>Assign hotkeys in Retroarch</li> <li>Launch Retroarch.</li> <li>Navigate to: <code>Settings</code> \u2192 <code>Input</code> \u2192 <code>Hotkeys</code>.</li> <li>Select the special function you want to assign (e.g., Menu Toggle, Screenshot).</li> <li>Press the desired button on your controller to bind it.</li> <li> <p>Exit Retroarch properly to save the settings:</p> <ul> <li>On most platforms, just closing Retroarch saves the config.</li> <li>On Android, explicitly quit via <code>Main Menu</code> \u2192 <code>Quit</code> to ensure settings are saved.</li> </ul> </li> <li> <p>Transfer hotkey assignments to your controller autoconfig file</p> </li> <li>Open your main <code>retroarch.cfg</code> file.</li> <li>Find and copy the hotkey assignment lines, for example:     <pre><code>input_menu_toggle_btn = \"[w]\"\ninput_screenshot_btn = \"[x]\"\n</code></pre> (Replace <code>[w]</code> and <code>[x]</code> with your actual button values.)</li> <li>Open your controller\u2019s autoconfig file, typically found at:     <pre><code>retroarch/autoconfig/[platform]/[controller-name].cfg\n</code></pre></li> <li>Append the copied hotkey lines to the bottom of the autoconfig file.</li> <li>Add labels. They will be visible in <code>Settings</code> \u2192 <code>Input</code> \u2192 <code>Hotkeys</code>.</li> <li>Add variable names. Complement the variables that you just added to the autoconfig file with the corresponding label variables ([variable name]+\"_label\") at the absolute bottom of the file, for example:     <pre><code>input_menu_toggle_btn_label = \"[y]\"\ninput_screenshot_btn_label = \"[z]\"\n</code></pre> (Replace <code>[y]</code> and <code>[z]</code> with the appropriate label values described below.)</li> <li>Add the corresponding variable label values. Refer to the manufacturer\u2019s official labeling for each button, but avoid using all capital letters unless the name is an abbreviation. Use standard capitalization with an initial capital letter to improve readability. Also, do not add the word \u201cbutton\u201d if it is already part of the official name. For instance, Nintendo refers to the \u201cHOME button\u201d on the Switch Pro Controller, but you should label it simply as \u201cHome.\u201d Similarly, the menu toggle label for Sony PlayStation controllers is \u201cPS.\u201d This approach balances clarity and respect for official naming.</li> <li>Save the autoconfig file.</li> <li>Restart RetroArch and navigate to <code>Settings</code> \u2192 <code>Input</code> \u2192 <code>Hotkeys</code> to confirm that they look as intended.</li> </ol>"},{"location":"guides/controller-autoconfiguration/#analog-l2r2-remapping","title":"Analog L2/R2 remapping","text":"<p>RetroArch has a bug(ref1, ref2) that causes analog L2/R2 triggers to be incorrectly mapped as digital buttons instead of analog axes when configuring controls through the UI. This affects pressure-sensitive triggers on controllers like PlayStation 2 and later, making some games unplayable due to the lack of analog input.</p> <p>SDL2 is an exception to this issue: SDL2 treats triggers like L2 and R2 as axes, even if they are digital buttons, to keep a consistent interface across controllers. For example, the Nintendo Switch Pro Controller\u2019s triggers are digital but SDL2 maps them as axes, with values jumping from 0 to max instantly. In the SDL2 Nintendo Switch Pro Controller.cfg file, this is reflected by lines like:</p> <pre><code>input_l2_axis = \"+4\"\ninput_r2_axis = \"+5\"\ninput_l2_axis_label = \"ZL\"\ninput_r2_axis_label = \"ZR\"\n</code></pre> <p>To address this bug in RetroArch on other controllers or drivers, you need to manually edit the RetroArch config file to set the correct analog axis mappings for L2 and R2. Here's how to find the proper axis values:</p> <ul> <li>Install and run jstest avalible for GNU/Linux (<code>sudo apt-get install joystick</code> for Debian-like distros), and Windows.</li> <li>In GNU/Linux: <code>jstest /dev/input/js0</code></li> <li>In GNU/Linux virtual machines using QEMU, js0 is designated for the mouse, so you need to use js1 by running the command: <code>jstest /dev/input/js1</code></li> <li>Slowly press L2 and R2 to identify which axis numbers change</li> <li>Note the axis numbers that correspond to L2 and R2</li> <li>In the autoconfig file, set: <pre><code>input_l2_axis = \"+X\"  (where X is the L2 axis number)\ninput_r2_axis = \"+Y\"  (where Y is the R2 axis number)\n\ninput_l2_axis_label = \"L2 Trigger\"\ninput_r2_axis_label = \"R2 Trigger\"\n</code></pre></li> </ul> <p>For example, if L2 is axis 2 and R2 is axis 5, you would:</p> <p>Replace: <pre><code>input_l2_btn = \"6\"\ninput_r2_btn = \"7\"\n\ninput_l2_btn_label = \"L2\"\ninput_r2_btn_label = \"R2\"\n</code></pre></p> <p>With <pre><code>input_l2_axis = \"+2\"\ninput_r2_axis = \"+5\"\n\ninput_l2_axis_label = \"L2 Trigger\"\ninput_r2_axis_label = \"R2 Trigger\"\n</code></pre></p> <p>Note: These variable values are examples and should not be directly copied to your configuration file.</p> <p>When modifying your autoconfig file for analog triggers, it's crucial to pay attention to both variable names and values. The corresponding label variable names must also be consistent to ensure the configuration works correctly. A common oversight is focusing solely on the values while neglecting to update the variable names themselves. The <code>_axis</code> suffix is essential for ensuring proper analog functionality. Simply changing values without updating the suffix from <code>_btn</code> to <code>_axis</code> will not achieve the desired result.</p>"},{"location":"guides/controller-autoconfiguration/#common-pitfall","title":"Common Pitfall","text":"<p>Users often unintentionally incorporate analog variable values without properly adjusting the existing variable names to reflect their analog nature. This oversight frequently results in configuration problems within the system. By carefully updating both the variable names and values, you can ensure that your analog triggers are correctly configured for optimal performance.</p>"},{"location":"guides/controller-autoconfiguration/#inspect-the-file","title":"Inspect the file","text":"<p>Without modifying anything in the original file, open it in the file in a text editor and 1. Make sure that you have mapped all buttons, and that none of them have duplicated values. 2. Each button should have a variable that ends with <code>_btn</code>, or <code>_axis</code>, not both. So for example, if you find both <code>input_a_axis</code>, and <code>input_a_btn</code>, it's incorrect. This may happen if your OS does not support the controller.</p> <p>Before giving up and saving the controller again, you can attempt to re-map any missing buttons. However, please refrain from manually modifying the variables unless it's absolutely necessary due to bugs in RetroArch. If you plan to submit your profile to our joypad profile repository, we depend on automated data for debugging the autoconfig files.</p>"},{"location":"guides/controller-autoconfiguration/#try-the-controller","title":"Try the controller","text":"<ol> <li>If the controller support Bluetooth, make sure that that there's no Bluetooth latency.</li> <li>Make sure that your mapping is perfect by testing every button in the menu.</li> <li>Important: Remove previously set manual bindings: Manual bindings take precedence over autoconfig files. So it's important to remove any manual bindings you may have set previously, as they take priority over autoconfig files. If you've used the Save Controller Profile command, you should reset these bindings. To do this, navigate to Settings -&gt; Input -&gt; RetroPad Binds -&gt; Port 1 Controls -&gt; Reset to Default Controls. Not resetting can cause issues with core responses, such as those from Remote RetroPad and console emulators, particularly if your manual bindings don't match the current controller driver's bindings. A typical problem arises when you create manual bindings, generate an autoconfig file, test them in Remote RetroPad, switch the controller driver to try a different autoconfig file, but forget to Reset to Default Controls first.</li> <li>To verify all controller mappings: <code>Main Menu</code> -&gt; <code>Load Core</code> -&gt; <code>Start Remote RetroPad</code>. Press each button once; icons change white to light green permanently if they are mapped correctly. If icons remain white, try to remap them. Ensure no white buttons remain. Evaluate analog trigger responsiveness for L2 and R2. As you slowly apply pressure, a black rectangle should appear in the center of each button and gradually fade as the pressure increases. Ensure you press the triggers slowly to observe the visual feedback accurately. For Android smartphones and other devices with small displays, hold the screen closer to your eyes. This will help you see the subtle rectangle indicator, which can be difficult to spot at normal viewing distances on compact screens.</li> <li>Try a game in a core that uses all mappings on your controller. After you have loaded the game it's possible that you have to change the native controller to your controller in <code>Quick Menu</code> -&gt; <code>Settings</code> -&gt; <code>Input</code> -&gt; <code>RetroPad Binds</code> -&gt; <code>Port 1 Controls</code> -&gt; <code>Device Index</code> -- for example if you want to use both thumbsticks you have to change <code>PS1</code> to <code>DualShock</code> in PlayStation cores. If it's difficult for you to find a game that uses all buttons, you can set <code>Settings</code> -&gt; <code>Input</code> -&gt; <code>Hotkeys</code> (for example Save state, Load state, Fastforward, and Rewind) for unused buttons, so you can evaluate all mappings.</li> <li>Use <code>Settings</code> -&gt; <code>Inputs</code> -&gt; <code>Port 1 Controls</code> -&gt; <code>Reset to Default Controls</code> to clear manual bindings and rely on the new profile.</li> <li>Unplug your joypad an re-plug it. See if it is auto configured.</li> </ol> <p>If you are happy with your profile, you can submit it to RetroArch so that other users benefit:</p> <ol> <li>Edit the autoconfig file for your joypad manually to include the input descriptors (please see the Input descriptors section below)</li> <li>Submit your profile to our joypad profile repository by filing a pull request (PR).</li> <li>To help us track potential bugs if the autconfig does not work as expected in all RetroArch releases (Flatpak package via Flathub, AppImage via retroarch.com, etc) and their gamepad driver (sdl2, udev, etc), please include a bullet point at the beginning of your PR Comment when submitting a PR. This bullet should specify the RetroArch version you used to generate the autoconfig. Additionally, please add further bullet points to outline what has been added. For example: <code>* Generated the autoconfig file[s] with RetroArch Flathub's release version x.xx.x</code></li> </ol>"},{"location":"guides/controller-autoconfiguration/#default-off-configs","title":"Default-off configs","text":"<p>When developing controller configurations, it's essential to anticipate and mitigate potential conflicts. These issues often arise in the following situations:</p> <ol> <li>When multiple autoconfig files exist for a single device, causing confusion in the system. This primarily occurs with controllers that require different configurations based on kernel versions. For example, the Nintendo Switch Pro Controller on Linux, where older kernels necessitate a different button mapping compared to newer kernels.</li> <li>With poorly constructed unlicensed controllers. Even a single mismatched button can break compatibility, necessitating custom configuration.</li> </ol> <p>Here's how to set up a default-off configuration:</p> <ol> <li>Append \"(default-off)\" to the configuration filename.</li> <li>Comment out the <code>input_device</code>, <code>input_vendor_id</code> and <code>input_product_id</code> lines in the config file.</li> <li>Do not add \"(default-off)\" to the values of the input_device_display_name and input_driver variables in the config file. The default-off status is already indicated by the filename, so these variables should remain unmodified for clarity.</li> </ol> <p>This approach allows users to manually enable the configuration when needed, preventing automatic application that could interfere with common devices, and helps ensure a smoother experience for users while still providing the necessary configuration options for those who require them.</p>"},{"location":"guides/controller-autoconfiguration/#device-index-scheme-for-autoconfig-files","title":"Device Index scheme for autoconfig files","text":"<p>In RetroArch, the management of controller configurations is essential for ensuring proper functionality across various systems. This guide outlines how the Device Index are generated.</p>"},{"location":"guides/controller-autoconfiguration/#understanding-the-device-index","title":"Understanding the Device Index","text":"<p>RetroArch identifies physical controllers through a system called the Device Index. You can locate this identifier by navigating to:</p> <p>Settings &gt; Input &gt; RetroPad Binds &gt; Port 1 Binds &gt; Device Index</p> <p>The Device Index plays a crucial role when saving a controller profile. To save a profile, follow this path:</p> <p>Settings &gt; Input &gt; RetroPad Binds &gt; Port 1 Controls &gt; Save Controller Profile</p>"},{"location":"guides/controller-autoconfiguration/#dual-function-of-the-device-index","title":"Dual function of the Device Index","text":"<p>When you save a controller profile, the Device Index serves two important purposes:</p> <ol> <li> <p>Configuration File Naming: It becomes an integral part of the configuration file's name. For example, if the Device Index is \"Foo\", the configuration file might be named \"udev/Foo.cfg\".</p> </li> <li> <p>Input Device Identification: Within the configuration file itself, the Device Index is used as the value for the <code>input_device</code> variable. Following our example, you would see a line like this in the file:</p> </li> </ol> <p><code>input_device = \"Foo\"</code></p> <p>This dual functionality ensures that RetroArch can correctly identify and apply the appropriate settings for each unique controller.</p> <p>Importantly, this name remains consistent across various controller drivers, such as udev, sdl2, and linuxraw, as specified in Settings &gt; Drivers &gt; Controller.</p>"},{"location":"guides/controller-autoconfiguration/#sdl2-notes","title":"sdl2 notes","text":"<p>SDL2 uses the SDL2 Game controller community database.</p> <p>You can check it using SDL2 Gamepad Mapper.</p>"},{"location":"guides/controller-autoconfiguration/#appimage-issue","title":"Appimage issue","text":"<p>Currently, the SDL2 controller driver utilizes UDEV rather than SDL2 in the RetroArch Appimage package. Therfore, use the Flatpak package in order to upload SDL2 autoconfig files.</p>"},{"location":"guides/controller-autoconfiguration/#linuxraw-and-udev-naming-schemes-depends-on-multiple-device-indexes","title":"linuxraw, and udev naming schemes (depends on multiple Device Indexes)","text":"<p>The naming conventions for the controllers may vary between USB and Bluetooth connections depending on the Linux kernel version in use.</p>"},{"location":"guides/controller-autoconfiguration/#example-of-controller-with-hid-and-non-hid-autoconfigs-nintendo-switch-pro-controller","title":"Example of controller with HID and non-HID autoconfigs: Nintendo Switch Pro Controller","text":"<p>In Linux kernel versions 5.15.0, 5.19, and 6.2.0, devices connected via USB and Bluetooth are identified as \"Nintendo Switch Pro Controller.\" However, in kernel version 6.8.0, the device is recognized with the USB name \"Nintendo Co., Ltd. Pro Controller\" and the Bluetooth name \"Pro Controller.\" Consequently, to account for all possible device index names, it is essential to generate autoconfiguration files using various Linux kernel versions to capture all naming variations.</p> Linux Kernel Version HID Support USB Supported Device Index in RetroArch (USB) Bluetooth Supported<sup>2</sup> Device Index in RetroArch (Bluetooth) Autoconfig structure 5.15 No No<sup>1</sup> Nintendo Switch Pro Controller Yes Nintendo Switch Pro Controller Generate <code>Nintendo Switch Pro Controller (default-off).cfg</code> 5.19 Yes Yes Nintendo Switch Pro Controller Yes Nintendo Switch Pro Controller udev/linuxraw: Generate <code>Nintendo Switch Pro Controller.cfg</code> 6.2.0 Yes Yes Nintendo Switch Pro Controller Yes Nintendo Switch Pro Controller 6.8.0 Yes Yes Nintendo Co., Ltd. Pro Controller Yes Pro Controller For linuxraw: Manually add <code>input_device_alt1 = \"Nintendo Co., Ltd. Pro Controller\"</code> and <code>input_device_alt2 = \"Pro Controller\"</code> <p>In the above list, the following entries under Autoconfigs file names to generate are identified and required for the controller to be identified by linuxraw:</p>"},{"location":"guides/controller-autoconfiguration/#udev-autoconfigs","title":"udev autoconfigs","text":"<p>udev primarily uses input_vendor_id and input_product_id, eliminating the need to create multiple files as required by linuxraw. However, an additional non-HID autoconfiguration is necessary in this example, because the bindings differ from those used in the HID autoconfiguration. This is important to ensure that the correct button mappings are applied for devices that do not conform to the HID standard, as they have different layouts that require distinct configurations.</p> <ul> <li>Nintendo Switch Pro Controller (non-HID) (default-off).cfg: <pre><code>input_driver = \"udev\"\n#input_device = \"Nintendo Switch Pro Controller\"\ninput_device_display_name = \"Nintendo Switch Pro Controller (non-HID)\"\n#input_vendor_id = \"1406\"\n#input_product_id = \"8201\"\n</code></pre></li> </ul> <p>Note: <code>(non-HID) (default-off)</code> is added to the filename to distinguish it from the autoconfig with HID support and to make clear that it is disabled by default. Also, the <code>input_device</code>, <code>input_vendor_id</code> and <code>input_product_id</code> variables are commented out to disable this auto-configuration, preventing file name duplication and conflicts with the HID version: Nintendo Switch Pro Controller.cfg</p> <ul> <li>Nintendo Switch Pro Controller.cfg: <pre><code>input_driver = \"udev\"\ninput_device = \"Nintendo Switch Pro Controller\"\ninput_vendor_id = \"1406\"\ninput_product_id = \"8201\"\ninput_device_alt1 = \"Nintendo Co., Ltd. Pro Controller\"\ninput_device_alt2 = \"Pro Controller\"\n</code></pre></li> </ul>"},{"location":"guides/controller-autoconfiguration/#linuxraw-autoconfigs","title":"linuxraw autoconfigs","text":"<p>Since linuxraw relies solely on input_device, all file names must be included:</p> <ul> <li>Nintendo Switch Pro Controller (non-HID) (default-off).cfg: <pre><code>input_driver = \"linuxraw\"\n#input_device = \"Nintendo Switch Pro Controller\"\ninput_device_display_name = \"Nintendo Switch Pro Controller (non-HID)\"\n</code></pre></li> </ul> <p>Note: <code>(non-HID) (default-off)</code> is added to the filename to distinguish it from the autoconfig with HID support and to make clear that it is disabled by default. Also, the <code>input_device</code> variable is commented out to disable this auto-configuration, preventing file name duplication and conflicts with the HID version: Nintendo Switch Pro Controller.cfg</p> <ul> <li>Nintendo Switch Pro Controller.cfg: <pre><code>input_driver = \"linuxraw\"\ninput_device = \"Nintendo Switch Pro Controller\"\ninput_device_alt1 = \"Nintendo Co., Ltd. Pro Controller\"\ninput_device_alt2 = \"Pro Controller\"\n</code></pre></li> </ul>"},{"location":"guides/controller-autoconfiguration/#example-of-multiple-input_product_id-variables-dualshock-4-v1-and-dualshock-4-v2","title":"Example of multiple input_product_id variables: DualShock 4 v1, and DualShock 4 v2","text":"<p>DualShock 4 v2:</p> Controller Version Linux Kernel Version HID Support USB Supported Device Index in RetroArch (USB) Bluetooth Supported Device Index in RetroArch (Bluetooth) Autoconfig Structure 5.15 Yes Yes Sony Interactive Entertainment Wireless Controller Yes Wireless Controller udev/linuxraw: Generate <code>Sony DualShock 4 Controller.cfg</code> (see \"Note\" below). udev/linuxraw: Manually add DualShock 4 v1 values to input_device_alt1, input_device_display_name_alt1. linuxraw: Manually add: input_vendor_id_alt1, input_product_id_alt1 5.19 Yes Yes Sony Interactive Entertainment Wireless Controller Yes Wireless Controller 6.2.0 Yes Yes Sony Interactive Entertainment Wireless Controller Yes Wireless Controller 6.8.0 Yes Yes Sony Interactive Entertainment Wireless Controller Yes Wireless Controller <p>Note: DualShock 4 v1 is known as \"Sony Computer Entertainment Wireless Controller\" in Linux. However, this controller is not sold any more so extensive evaluation is not possible. However, the configuration is identical for both controllers.</p>"},{"location":"guides/controller-autoconfiguration/#udev-autoconfigs_1","title":"udev autoconfigs","text":"<ul> <li>Sony DualShock 4 Controller.cfg: <pre><code>input_device = \"Sony Interactive Entertainment Wireless Controller\"\ninput_device_display_name = \"Sony Interactive Entertainment Wireless Controller (DualShock 4 v2)\"\ninput_driver = \"udev\"\ninput_vendor_id = \"1356\"\ninput_product_id = \"2508\"\ninput_device_alt1 = \"Sony Computer Entertainment Wireless Controller\"\ninput_device_display_name_alt1 = \"Sony Computer Entertainment Wireless  (DualShock 4 v1)\"\ninput_vendor_id_alt1 = \"1356\"\ninput_product_id_alt1 = \"1476\"\n</code></pre></li> </ul>"},{"location":"guides/controller-autoconfiguration/#linuxraw-autoconfigs_1","title":"linuxraw autoconfigs","text":"<ul> <li>Sony DualShock 4 Controller.cfg: <pre><code>input_driver = \"linuxraw\"\ninput_device = \"Sony Interactive Entertainment Wireless Controller\"\ninput_device_display_name = \"Sony Interactive Entertainment Wireless Controller (DualShock 4 v2)\"\ninput_device_alt1 = \"Wireless Controller\"\ninput_device_display_name_alt1 = \"Wireless Controller (DualShock 4 v2)\"\ninput_device_alt2 = \"Sony Computer Entertainment Wireless Controller\"\ninput_device_display_name_alt2 = \"Sony Computer Entertainment Wireless (DualShock 4 v1)\"\n</code></pre></li> </ul>"},{"location":"guides/controller-autoconfiguration/#example-sony-dualsense","title":"Example: Sony DualSense","text":"Linux Kernel Version HID Support USB Supported Device Index in RetroArch (USB) Bluetooth Supportede<sup>2</sup> Device Index in RetroArch (Bluetooth) Autoconfig structure 5.15 Yes Yes Sony Interactive Entertainment DualSense Wireless Controller Yes DualSense Wireless Controller udev/linuxraw: Generate <code>Sony Interactive Entertainment DualSense Wireless Controller.cfg</code>. linuxraw: Manually add <code>input_device_alt1 = \"DualSense Wireless Controller\"</code> 5.19 Yes Yes Sony Interactive Entertainment DualSense Wireless Controller Yes DualSense Wireless Controller 6.2.0 Yes Yes Sony Interactive Entertainment DualSense Wireless Controller Yes DualSense Wireless Controller 6.8.0 Yes Yes Sony Interactive Entertainment DualSense Wireless Controller Yes DualSense Wireless Controller <p>In the above list, the following entries under Autoconfigs file names to generate are identified and required for the controller to be identified by linuxraw:</p>"},{"location":"guides/controller-autoconfiguration/#udev_1","title":"udev","text":"<ul> <li>Sony Interactive Entertainment DualSense Wireless Controller.cfg: <pre><code>input_driver = \"udev\"\ninput_device = \"Sony Interactive Entertainment DualSense Wireless Controller\"\ninput_vendor_id = \"1356\"\ninput_product_id = \"3302\"\n</code></pre></li> </ul>"},{"location":"guides/controller-autoconfiguration/#linuxraw_1","title":"linuxraw","text":"<ul> <li>Sony Interactive Entertainment DualSense Wireless Controller.cfg: <pre><code>input_driver = \"linuxraw\"\ninput_device = \"Sony Interactive Entertainment DualSense Wireless Controller\"\ninput_device_alt1 = \"DualSense Wireless Controller\"\n</code></pre></li> </ul>"},{"location":"guides/controller-autoconfiguration/#troubleshooting","title":"Troubleshooting","text":"<p>If your joypad is not configured properly, you should generate a RetroArch log. Your log will show if a profile has been matched for your pad and the path of the corresponding profile.</p>"},{"location":"guides/controller-autoconfiguration/#joypad-auto-configuration-file","title":"Joypad auto-configuration file","text":""},{"location":"guides/controller-autoconfiguration/#metadata","title":"Metadata","text":"<p>The first part of the joypad profile is used for matching the profile with the device, as explained above. The Vendor ID and Product ID are in decimal format.</p> <pre><code>input_driver = \"udev\"\ninput_device = \"Sony Interactive Entertainment DualSense Edge Wireless Controller\"\ninput_vendor_id = \"1356\"\ninput_product_id = \"3570\"\n</code></pre>"},{"location":"guides/controller-autoconfiguration/#manually-finding-vendor-id-and-product-id-vidpid-on-gnulinux","title":"Manually finding Vendor ID and Product ID (VID:PID) on GNU/Linux","text":"<p>If you need to manually identify the VID:PID for your controller (for example, if RetroArch does not work as expected for you) in GNU/Linux, you can run this script:</p> <pre><code>read -p \"Connect your joypad and press ENTER.\"\nlsusb | nl -w2 -s': ' \nread -p \"Enter the number of your joypad device (or ENTER to skip): \" n\n\nif [[ -z \"$n\" ]]; then\n  echo \"No device selected. Only mapping will be re-generated.\"\n  exit 0\nfi\n\nline=$(lsusb | sed -n \"${n}p\")\nids=$(echo \"$line\" | grep -oP 'ID \\K[0-9a-fA-F]{4}:[0-9a-fA-F]{4}')\nvendor_hex=${ids%%:*}\nproduct_hex=${ids##*:}\ninput_product_id=$((16#$vendor_hex))\ninput_vendor_id=$((16#$product_hex))\n\necho -e \"\\ninput_vendor_id = \\\"$input_product_id\\\"\\ninput_product_id = \\\"$input_vendor_id\\\"\\n\"\n\n########################################\n# List all autoconfig files for the selected USB controller\n\nsearch_autoconfig() {\n  local retroarch_dir=\"$1\"\n\n  if [ ! -f \"$retroarch_dir/retroarch.cfg\" ]; then\n    echo \"Config file not found: $retroarch_dir/retroarch.cfg. Please start RetroArch, and optionally configure Settings -&gt; Directory -&gt; Controller Profiles.\"\n    return\n  fi\n\n  # Extract raw joypad_autoconfig_dir from config, strip quotes and spaces\n  local joypad_autoconfig_dir_raw\n  joypad_autoconfig_dir_raw=$(grep \"^joypad_autoconfig_dir\" \"$retroarch_dir/retroarch.cfg\" | cut -d= -f2- | tr -d '\" ')\n\n  local joypad_autoconfig_dir\n\n  # For AppImage, expand ~ to retroarch_dir; for others, expand ~ to $HOME\n  if [[ \"$retroarch_dir\" == *\".AppImage.home/.config/retroarch\" ]]; then\n    joypad_autoconfig_dir=\"${joypad_autoconfig_dir_raw/#\\~/$retroarch_dir}\"\n    # Remove duplicated \".config/retroarch/\" if present twice\n    joypad_autoconfig_dir=\"${joypad_autoconfig_dir//.config\\/retroarch\\/.config\\/retroarch/.config/retroarch}\"\n  else\n    joypad_autoconfig_dir=\"${joypad_autoconfig_dir_raw/#\\~/$HOME}\"\n  fi\n\n  # Fallback to default autoconfig directory if empty\n  if [ -z \"$joypad_autoconfig_dir\" ]; then\n    joypad_autoconfig_dir=\"$HOME/.config/retroarch/autoconfig\"\n  fi\n\n  echo \"Searching in: $joypad_autoconfig_dir\"\n\n  if [ -d \"$joypad_autoconfig_dir\" ]; then\n    grep -r \"input_product_id = \\\"$input_vendor_id\\\"\" \"$joypad_autoconfig_dir\"\n  else\n    echo \"Autoconfig directory not found: $joypad_autoconfig_dir\"\n  fi\n\n  echo \"\"\n}\n\necho \"--- Standard package install ---\"\nsearch_autoconfig \"$HOME/.config/retroarch\"\n\necho \"--- Flathub (Flatpak) install ---\"\nsearch_autoconfig \"$HOME/.var/app/org.libretro.RetroArch/config/retroarch\"\n\necho \"--- AppImage install ---\"\nsearch_autoconfig \"$HOME/Downloads/RetroArch-Linux-x86_64/RetroArch-Linux-x86_64.AppImage.home/.config/retroarch\"\n</code></pre> <p>With this you can search for existing autoconfig files matching your controller. This is especially useful to find if your loaded autoconfig has commented variables which happens if there are multiple autoconfigs of the same controller.</p>"},{"location":"guides/controller-autoconfiguration/#mapping","title":"Mapping","text":"<p>The second part is the mapping itself, where each button is assigned to a button of the RetroPad (the joypad abstraction of RetroArch).</p> <p>Example <pre><code>input_b_btn = \"0\"\ninput_y_btn = \"2\"\ninput_select_btn = \"6\"\ninput_start_btn = \"7\"\ninput_up_btn = \"h0up\"\ninput_down_btn = \"h0down\"\ninput_left_btn = \"h0left\"\ninput_right_btn = \"h0right\"\ninput_a_btn = \"1\"\ninput_x_btn = \"3\"\ninput_l_btn = \"4\"\ninput_r_btn = \"5\"\ninput_l2_axis = \"+2\"\ninput_r2_axis = \"+5\"\ninput_l3_btn = \"9\"\ninput_r3_btn = \"10\"\ninput_l_x_plus_axis = \"+0\"\ninput_l_x_minus_axis = \"-0\"\ninput_l_y_plus_axis = \"+1\"\ninput_l_y_minus_axis = \"-1\"\ninput_r_x_plus_axis = \"+3\"\ninput_r_x_minus_axis = \"-3\"\ninput_r_y_plus_axis = \"+4\"\ninput_r_y_minus_axis = \"-4\"\ninput_menu_toggle_btn = \"8\"\n</code></pre></p> <p>Note: These variable values are examples and should not be directly copied to your configuration file.</p>"},{"location":"guides/controller-autoconfiguration/#input-types","title":"Input types","text":""},{"location":"guides/controller-autoconfiguration/#buttons-digital-inputs","title":"Buttons (digital inputs)","text":"<ul> <li>These are defined by variable names ending with <code>_btn</code> (e.g., <code>input_a_btn</code>, <code>input_start_btn</code>).</li> <li>The current RetroArch configurations have button values that ranges from <code>0</code> to <code>203</code>. However, if RetroArch does not limit the values to <code>203</code>, underlying controller hardware could offer an even wider range.</li> <li>RetroArch interprets these IDs (usually 1 for pressed, 0 for not pressed) to determine the button state.</li> </ul>"},{"location":"guides/controller-autoconfiguration/#d-pad-directions-special-digital-inputs","title":"D-Pad directions (special digital inputs)","text":"<ul> <li>D-pad directions use variable values beginning with <code>h0</code> (e.g., <code>input_up_btn = \"h0up\"</code>), for certain controller drivers (e.g udev, and android, but not sdl2).</li> <li>Four <code>h0</code> variables exist (<code>h0up</code>, <code>h0down</code>, <code>h0left</code>, <code>h0right</code>) for each direction on the D-pad.</li> <li>Note: The value <code>h1</code> is used by a single controller (Nintendo_Wii_Remote_Classic_Controller.cfg).</li> </ul>"},{"location":"guides/controller-autoconfiguration/#axis-analog-input","title":"Axis (analog input)","text":"<ul> <li>Axis definitions use <code>+</code> and <code>-</code> to indicate positive or negative direction (e.g., full press vs. no press).</li> <li>The current RetroArch configurations have axis values that ranges from <code>0</code> to <code>10</code>. However, if RetroArch does not limit the values to <code>10</code>, underlying controller hardware could offer an even wider range.</li> </ul>"},{"location":"guides/controller-autoconfiguration/#mapping-variables-with-analog-l2r2-triggers","title":"Mapping variables with analog L2/R2 triggers","text":"<pre><code>input_l2_axis = \"+[x]\"\ninput_r2_axis = \"+[y]\"\n</code></pre> <p>Note: These variable values are examples and should not be directly copied to your configuration file, they will not work.</p>"},{"location":"guides/controller-autoconfiguration/#controller-elements","title":"Controller elements","text":""},{"location":"guides/controller-autoconfiguration/#axes-analog-inputs","title":"Axes (analog inputs)","text":"<ul> <li>They represent analog inputs from the controller, like joystick position (e.g., left joystick X-axis, right joystick Y-axis) or trigger pressure (e.g., L2 trigger, R2 trigger).</li> <li>Variable names (for both mappings and labels) includes <code>_axis</code> define these (e.g., <code>input_l_x_plus_axis_label</code>, <code>input_r2_axis</code>).</li> </ul> Console Controller Release Date Analog Thumb Sticks L2/R2 Trigger PlayStation 1 Sony Dual Analog Controller April 1997 Yes No PlayStation 1 Sony DualShock November 1997 Yes No PlayStation 2 DualShock 2 2000 Yes Yes PlayStation 3 Sixaxis 2006 Yes Yes PlayStation 3 DualShock 3 2008 Yes Yes PlayStation 4 DualShock 4 2013 Yes Yes PlayStation 5 DualSense 2020 Yes Yes"},{"location":"guides/controller-autoconfiguration/#shoulder-buttons-with-analog-variables","title":"Shoulder buttons with analog variables","text":"<p>Give each button the same label as described by the manufacturer. Additionally: - For analog shoulder buttons, use the manufacturer\u2019s label and append the word \" Trigger\" at the end.   - For example: <code>input_l2_axis_label = \"L2 Trigger\"</code></p>"},{"location":"guides/controller-autoconfiguration/#analog-sticks","title":"Analog sticks","text":"<p>The term \"Analog\" is included in the variable values for the analog inputs to clearly indicate that these inputs are analog in nature.</p> <p>Labels for analog thumb sticks: <pre><code>input_l_x_plus_axis_label = \"Left Analog X+ (Right)\"\ninput_l_x_minus_axis_label = \"Left Analog X- (Left)\"\ninput_l_y_plus_axis_label = \"Left Analog Y+ (Down)\"\ninput_l_y_minus_axis_label = \"Left Analog Y- (Up)\"\ninput_r_x_plus_axis_label = \"Right Analog X+ (Right)\"\ninput_r_x_minus_axis_label = \"Right Analog X- (Left)\"\ninput_r_y_plus_axis_label = \"Right Analog Y+ (Down)\"\ninput_r_y_minus_axis_label = \"Right Analog Y- (Up)\"\n</code></pre></p>"},{"location":"guides/controller-autoconfiguration/#input-descriptors","title":"Input descriptors","text":"<p>The third part are input descriptors used by RetroArch to display the labels of the buttons as they are written on your joypad. RetroArch does not automatically generate button labels; therefore, you need to manually add them to your autoconfig file.</p> <p>Generic input descriptors: <pre><code>input_b_btn_label = \"A\"\ninput_y_btn_label = \"X\"\ninput_select_btn_label = \"Back\"\ninput_start_btn_label = \"Start\"\ninput_up_btn_label = \"D-Pad Up\"\ninput_down_btn_label = \"D-Pad Down\"\ninput_left_btn_label = \"D-Pad Left\"\ninput_right_btn_label = \"D-Pad Right\"\ninput_a_btn_label = \"B\"\ninput_x_btn_label = \"Y\"\ninput_l_btn_label = \"LB\"\ninput_r_btn_label = \"RB\"\ninput_l2_axis_label = \"LT\"\ninput_r2_axis_label = \"RT\"\ninput_l3_btn_label = \"Left Thumb\"\ninput_r3_btn_label = \"Right Thumb\"\ninput_l_x_plus_axis_label = \"Left Analog X+ (Right)\"\ninput_l_x_minus_axis_label = \"Left Analog X- (Left)\"\ninput_l_y_plus_axis_label = \"Left Analog Y+ (Down)\"\ninput_l_y_minus_axis_label = \"Left Analog Y- (Up)\"\ninput_r_x_plus_axis_label = \"Right Analog X+ (Right)\"\ninput_r_x_minus_axis_label = \"Right Analog X- (Left)\"\ninput_r_y_plus_axis_label = \"Right Analog Y+ (Down)\"\ninput_r_y_minus_axis_label = \"Right Analog Y- (Up)\"\ninput_menu_toggle_btn_label = \"Guide\"\n</code></pre></p>"},{"location":"guides/controller-autoconfiguration/#example-controllers-for-sony-playstation-2-and-later","title":"Example: Controllers for Sony PlayStation 2 and later","text":"<p>Labels for PlayStation controllers starting from PS2. Note that analog L2/R2 triggers (<code>input_l2_axis_label = \"L2 Trigger\"</code>, and <code>input_r2_axis_label = \"R2 Trigger\"</code>) are featured: <pre><code>input_b_btn_label = \"Cross\"\ninput_y_btn_label = \"Square\"\ninput_select_btn_label = \"Create\"\ninput_start_btn_label = \"Options\"\ninput_up_btn_label = \"D-Pad Up\"\ninput_down_btn_label = \"D-Pad Down\"\ninput_left_btn_label = \"D-Pad Left\"\ninput_right_btn_label = \"D-Pad Right\"\ninput_a_btn_label = \"Circle\"\ninput_x_btn_label = \"Triangle\"\ninput_l_btn_label = \"L1\"\ninput_r_btn_label = \"R1\"\ninput_l2_axis_label = \"L2 Trigger\"\ninput_r2_axis_label = \"R2 Trigger\"\ninput_l3_btn_label = \"L3\"\ninput_r3_btn_label = \"R3\"\ninput_l_x_plus_axis_label = \"Left Analog X+ (Right)\"\ninput_l_x_minus_axis_label = \"Left Analog X- (Left)\"\ninput_l_y_plus_axis_label = \"Left Analog Y+ (Down)\"\ninput_l_y_minus_axis_label = \"Left Analog Y- (Up)\"\ninput_r_x_plus_axis_label = \"Right Analog X+ (Right)\"\ninput_r_x_minus_axis_label = \"Right Analog X- (Left)\"\ninput_r_y_plus_axis_label = \"Right Analog Y+ (Down)\"\ninput_r_y_minus_axis_label = \"Right Analog Y- (Up)\"\ninput_menu_toggle_btn_label = \"PS\"\n</code></pre></p>"},{"location":"guides/controller-autoconfiguration/#avoid-blank-lines","title":"Avoid blank lines","text":"<p>When RetroArch generates autoconfig files through Settings -&gt; Input -&gt; RetroPad Binds -&gt; Port 1 Controls -&gt; Save Controller Profile, it does not include empty line breaks. If you manually insert an empty line before the label variables and later modify any variable, RetroArch will remove the blank line upon saving again. While blank lines are harmless, they do not adhere to a strict standard.</p>"},{"location":"guides/controller-autoconfiguration/#example-of-a-correctly-formatted-autoconfig-file","title":"Example of a correctly formatted autoconfig file","text":"<p>autoconfig/udev/DualSense Wireless Controller.cfg:</p> <pre><code>input_driver = \"udev\"\ninput_device = \"Sony Interactive Entertainment DualSense Wireless Controller\"\ninput_device_display_name = \"Sony DualSense (BlueTooth)\"\ninput_b_btn = \"0\"\ninput_y_btn = \"3\"\ninput_select_btn = \"8\"\ninput_start_btn = \"9\"\ninput_up_btn = \"h0up\"\ninput_down_btn = \"h0down\"\ninput_left_btn = \"h0left\"\ninput_right_btn = \"h0right\"\ninput_a_btn = \"1\"\ninput_x_btn = \"2\"\ninput_l_btn = \"4\"\ninput_r_btn = \"5\"\ninput_l2_axis = \"+2\"\ninput_r2_axis = \"+5\"\ninput_l3_btn = \"11\"\ninput_r3_btn = \"12\"\ninput_l_x_plus_axis = \"+0\"\ninput_l_x_minus_axis = \"-0\"\ninput_l_y_plus_axis = \"+1\"\ninput_l_y_minus_axis = \"-1\"\ninput_r_x_plus_axis = \"+3\"\ninput_r_x_minus_axis = \"-3\"\ninput_r_y_plus_axis = \"+4\"\ninput_r_y_minus_axis = \"-4\"\ninput_menu_toggle_btn = \"5\"\ninput_b_btn_label = \"Cross\"\ninput_y_btn_label = \"Square\"\ninput_select_btn_label = \"Create\"\ninput_start_btn_label = \"Options\"\ninput_up_btn_label = \"D-Pad Up\"\ninput_down_btn_label = \"D-Pad Down\"\ninput_left_btn_label = \"D-Pad Left\"\ninput_right_btn_label = \"D-Pad Right\"\ninput_a_btn_label = \"Circle\"\ninput_x_btn_label = \"Triangle\"\ninput_l_btn_label = \"L1\"\ninput_r_btn_label = \"R1\"\ninput_l2_axis_label = \"L2 Trigger\"\ninput_r2_axis_label = \"R2 Trigger\"\ninput_l3_btn_label = \"L3\"\ninput_r3_btn_label = \"R3\"\ninput_l_x_plus_axis_label = \"Left Analog X+ (Right)\"\ninput_l_x_minus_axis_label = \"Left Analog X- (Left)\"\ninput_l_y_plus_axis_label = \"Left Analog Y+ (Down)\"\ninput_l_y_minus_axis_label = \"Left Analog Y- (Up)\"\ninput_r_x_plus_axis_label = \"Right Analog X+ (Right)\"\ninput_r_x_minus_axis_label = \"Right Analog X- (Left)\"\ninput_r_y_plus_axis_label = \"Right Analog Y+ (Down)\"\ninput_r_y_minus_axis_label = \"Right Analog Y- (Up)\"\ninput_menu_toggle_btn_label = \"PS\"\n</code></pre>"},{"location":"guides/controller-autoconfiguration/#footnotes","title":"Footnotes","text":"<ol> <li> <p>The controller is listed as \"Nintendo Switch Pro Controller\" under RetroPad Binds -&gt; Port 1 Controls -&gt; Device Index, but button binding is not possible.\u00a0\u21a9</p> </li> <li> <p>Ensure that the bluez package is functioning correctly, as detailed in this bug. Also, if you're experiencing unreliable Bluetooth connections with virtual machines, which can impact all controllers, consider booting the distributions in live mode directly from the BIOS.\u00a0\u21a9\u21a9</p> </li> <li> <p>If there is a misconfiguration of the Vendor ID and Product ID, the system defaults to using the Device Index. Relevant code references include input_autoconfigure_get_config_file_affinity in task_autodetect.c, and input_autoconfigure_connect in android_input.c, sdl_joypad.c, and udev_joypad.c. If you've already created Linuxraw autoconfig names that need alternative input_device variables (such as input_device_alt1, input_device_alt2, etc.), please use them for udev as well since they are using identical Device Indexes. If you haven't, using input_vendor_id/input_product_id will suffice.\u00a0\u21a9\u21a9\u21a9</p> </li> </ol>"},{"location":"guides/core-list/","title":"Core List","text":"Core System/Machine Notes 2048 Game A port of the popular puzzle game 2048 to libretro 3D Engine - This is a test core; it demonstrates how to create a hardware-rendered core in a libretro context 4DO 3DO a5200 Atari 5200 Anarch Game A port of Anarch, 90s-style Doom clone shooter game Ardens Arduboy A simulator for the Arduboy FX Arduous Arduboy A emulator for Arduboy, a handheld game console with open source software, based on the Arduino hardware platform Atari800 Atari 5200 b2 Acorn BBC Micro Beetle bsnes Nintendo SNES/SFC Beetle Cygne Bandai WonderSwan/Color Beetle GBA Game Boy Advance Beetle Lynx Atari Lynx Beetle NeoPop Neo Geo Pocket/Color Beetle PC-FX NEC PC-FX Beetle PCE NEC PC Engine/SuperGrafx/CD Beetle PCE FAST NEC PC Engine/CD Beetle PSX Sony PlayStation Beetle PSX HW Sony PlayStation A fork of Mednafen's PSX providing GPU-accelerated renderers for OpenGL and Vulkan Beetle Saturn Sega Saturn Beetle SuperGrafx NEC PC Engine/SuperGrafx Beetle Supafaust Nintendo SNES/SFC Beetle VB Nintendo Virtual Boy BK Elektronika BK-0010/BK-0011(M)/Terak 8510-a A port of the PDP11 emulator to libretro. This core emulates the PDP-11/03 platform. BlastEm Sega Genesis (Mega Drive) blueMSX MSX/SVI/ColecoVision/SG-1000 bnes Nintendo NES/Famicom boom 3 Game engine A port of the Doom 3 engine to libretro. There is a separate core for it's expansion pack 'Resurrection of Evil'. boom 3 xp Game engine (See boom 3 note) bsnes Nintendo SNES/SFC bsnes 2014 Accuracy Nintendo SNES/SFC bsnes 2014 Balanced Nintendo SNES/SFC bsnes 2014 Performance Nintendo SNES/SFC bsnes C++98 (v085) Nintendo SNES/SFC bsnes-hd beta Nintendo SNES/SFC bsnes-jg Nintendo SNES/SFC bsnes-mercury Accuracy Nintendo SNES/SFC bsnes-mercury Balanced Nintendo SNES/SFC bsnes-mercury Performance Nintendo SNES/SFC Cannonball Game engine A port of the Cannonball, enhanced OutRun engine to libretro Caprice32 Amstrad CPC CDi 2015 Philips CDi ChaiLove Game engine A free, open-source framework used to make 2D games in ChaiScript Citra Nintendo 3DS Citra 2018 Nintendo 3DS Citra Canary Nintendo 3DS Based on Citra development branch ClownMDEmu Sega MD/CD Craft Game A basic clone of the Minecraft sandbox game CrocoDS Amstrad CPC Cruzes Game (Further information required) Daphne Arcade DeSmuME Nintendo DS DeSmuME 2015 Nintendo DS DICE Arcade Pre-CPU games like Pong Dinothawr Game engine A push-the-block-in-a-straight-line puzzle game in the spirit of Kickle Cubicle DirectXbox Xbox Dolphin Nintendo GameCube/Wii DOSBox DOS DOSBox-core DOS Provides some improvements over the DOSBox-SVN trunk, including native MIDI support, cycle-accurate OPL3 (YMF262) emulation, MT-32 emulation and experimental 3dfx Voodoo support DOSBox-Pure DOS A port of DOSBox with a goal of simplicty and ease of use and gameplay. This core includes a streamlined workflow for launching games directly from ZIP archives with automated mapping of controls to gamepads and a native onscreen keyboard. DOSBox-SVN DOS This core is based on DOSBox-SVN trunk and allows on-the-fly configuration and different sync methods doukutsu-rs Game engine An open-source reimplementation of the Cave Story engine compatible with all official (and some unofficial) releases of Cave Story DuckStation Sony PlayStation Dungeon Crawl Stone Soup Game A preliminary port of the Dungeon Crawl Stone Soup strategy game EasyRPG RPG Maker 2000/2003 ECWolf Game engine A port of the Wolfenstein 3D engine to libretro EighyOne Sinclair ZX 81 Emux CHIP-8 CHIP-8 Emux GB Game Boy/Color Emux NES Nintendo NES/Famicom Emux SMS Sega Master System EmuSCV Super Cassette Vision Ep128emu Enterprise 64/128 FAKE-08 Pico-8 A port of the FAKE-08 open-source reimplementation of the PICO-8 fantasy console to libretro FB Alpha Arcade/Console/various (See FB Neo note) FB Alpha 2012 Arcade/Console/various (See FB Neo note) FB Alpha 2012 CPS-1 CPS-1 FB Alpha 2012 CPS-2 CPS-2 FB Alpha 2012 CPS-3 CPS-3 FB Alpha 2012 Neo Geo Neo Geo FB Neo Arcade/Console/various Full list of supported systems: https://github.com/finalburnneo/FBNeo/wiki FCEUmm Nintendo NES/Famicom FFmpeg Media player A port of FFmpeg library which allows playback of a variety of audio and video formats fixGB Game Boy/Color fixNES Nintendo NES/Famicom Flycast Sega Dreamcast/NAOMI Flycast GLES2 Sega Dreamcast/NAOMI fMSX MSX/MSX2/MSX2+ FreeChaF Fairchild ChannelF FreeIntv Mattel Intellivision FreeJ2ME J2ME a port of Java 2 Micro Edition emulator Frodo Commodore C64 FS-UAE Commodore Amiga Fuse Sinclair ZX Spectrum GAM4980 BBK 4980/4988/5980 electronic dictionary Gambatte Game Boy/Color Game Music Emu Music player A port of Game Music Emu which allows playback of a wide variety of video game music formats Gearboy Game Boy/Color Gearcoleco Coleco ColecoVision Geargrafx NEC PC Engine/SuperGrafx Gearsystem Sega MS/GG/SG-1000 Genesis Plus GX Sega MS/GG/MD/CD Geolith SNK Neo Geo AES/MVS Highly accurate emulator for the Neo Geo AES and MVS Cartridge Systems gpSP Game Boy Advance Gong Game A clone of Pong written for libretro GW Handheld Electronic A simulator of various Game and Watch-style handheld electronic games Handy Atari Lynx Hatari Atari ST/STE/TT/Falcon HBMAME Arcade/Console/various HBMAME (HomeBrew MAME) is a derivative of MAME, and contains various hacks and homebrews higan Accuracy Nintendo SNES/SFC/Game Boy/Color Holani Atari Lynx Imageviewer Imageviewer A basic core for viewing still images in a libretro frontend Ishiiruka Nintendo GameCube/Wii JAXE CHIP-8/S-CHIP/XO-CHIP JollyCV ColecoVision/CreatiVision/My Vision Jump 'n Bump Game engine A reimplementation of the engine of Jump 'n Bump, a open-source MS-DOS multiplayer video game by Brainchild Design Kronos Sega Saturn/ST-V A port of the Kronos, which is itself a fork of Yabause emulator LowRes NX Game engine A port of the LowRes NX fantasy console to libretro Lutro Game engine An experimental Lua game framework for libretro, based on a subset of the LOVE API M2000 Philips P2000T A port of M2000, the portable Philips P2000 emulator to libretro MAME (Current) Arcade/Console/various Based on MAME development branch. Full list of supported systems: http://adb.arcadeitalia.net/mame.php MAME 2000 Arcade/Console/various (See MAME note) MAME 2003 Arcade/Console/various (See MAME note) MAME 2003 Midway Arcade/Console/various (See MAME note) MAME 2003-Plus Arcade/Console/various (See MAME note) MAME 2009 Arcade/Console/various (See MAME note) MAME 2010 Arcade/Console/various (See MAME note) MAME 2015 Arcade/Console/various (See MAME note) MAME 2016 Arcade/Console/various (See MAME note) melonDS 2021 Nintendo DS melonDS DS Nintendo DS/DSi Enhanced remake of the melonDS core based on a newer version of the emulator. Mesen Nintendo NES/Famicom Mesen-S Nintendo SNES/SFC/Game Boy/Color MESS 2015 Multi (various) (See MAME note) Meteor Game Boy Advance mGBA Game Boy Advance Microw8 Game engine A port of a WebAssembly based fantasy console to libretro Minivmac Mac II MacII variant of minivmac emulator mkxp-z RPG Maker XP/VX/VX Ace mpv Media player An port of MPV media player to libretro Mr.Boom Game A clone of the classic Bomberman series Mu Palm OS An emulator for the Palm m515 OS ported to libretro Mupen64Plus-Next Nintendo 64 Mupen64Plus-Next GLES2 Nintendo 64 Mupen64Plus-Next GLES3 Nintendo 64 Neko Project II NEC PC-98 Neko Project II Kai NEC PC-98 NeoCD Neo Geo CD Nestopia Nintendo NES/Famicom nSide Balanced Nintendo SNES/SFC/Game Boy/Color Numero TI-83 A TI-83 Emulator for Libretro NXEngine Game engine An open-source reimplementation of the Cave Story / Doukutsu engine O2EM Magnavox Odyssey2/Philips Videopac+ Oberon Oberon RISC machine An emulator for the Oberon RISC machine, ported to libretro OpenLara Game engine A port of the OpenLara free/open re-implementation of the engine used by the original Tomb Raider series OpenTyrian Game A port of the OpenTyrian clone of the classic Tyrian shmup, ported to libretro Opera 3DO ParaLLEl N64 Nintendo 64 PascalPong Game A free and basic clone of the classic Pong game, written for libretro PCem IBM PC LRPS2 Sony PlayStation 2 PCSX ReARMed Sony PlayStation PicoDrive Sega MS/GG/MD/CD/32X Play! Sony PlayStation 2 Pocket CDG Karaoke player A karaoke music player, ported to libretro PokeMini Nintendo Pokemon Mini Potator Watara Supervision PPSSPP PlayStation Portable PrBoom Game engine A port of the PrBoom source port of iD's classic Doom engine ProSystem Atari 7800 PUAE Commodore Amiga PUAE 2021 Commodore Amiga PuzzleScript Game engine A port of PuzzleScript, open source HTML5 puzzle game engine PX68k Sharp X68000 QUASI88 NEC PC-8000/PC-8800 series QuickNES Nintendo NES/Famicom RACE Neo Geo Pocket/Color Redbook Music player A libretro core for playing back Redbook-formatted audio, such as commercial audio CDs REminiscence Game engine A port of the REminiscence engine, a reimplementation of the engine used by Delphine Software's Flashback Retro8 Game engine A port of the Retro8 open-source reimplementation of the PICO-8 fantasy console to libretro Rustation Sony PlayStation RVVM RISC-V Virtual Machine SameBoy Game Boy/Color SameDuck Mega Duck (Cougar Boy) An adaptation of SameBoy to play Mega Duck games SAME CDI Philips CDi SAME CDi is a S(ingle) A(rcade) M(achine) E(mulator) for libretro, forked from MAME, which only includes the Philips CD-i driver ScummVM Game engine A fork of the ScummVM adventure game engine ported to libretro SimCoupe SAM Coupe SMS Plus GX Sega MS/GG Snes9x Nintendo SNES/SFC Snes9x 2002 Nintendo SNES/SFC Snes9x 2005 Nintendo SNES/SFC Snes9x 2005 Plus Nintendo SNES/SFC Snes9x 2010 Nintendo SNES/SFC SquirrelJME Java ME A port of the SquirrelJME Java ME 8 Virtual Machine emulator to libretro Stella Atari 2600 Stella 2014 Atari 2600 Super Bros War Game engine A fork of Super Mario War, a fan-made multiplayer Super Mario Bros. style deathmatch game SwanStation Sony PlayStation SwanStation is a fork of the Duckstation emulator TempGBA Game Boy Advance TGB Dual Game Boy/Color Theodore Thomson MO/TO TIC-80 Game engine A port of the free and open source fantasy computer TIC-80 to libretro The Powder Toy Game A port of the Powdertoy physics sandbox/simulation engine to libretro TyrQuake Game engine A port of the tyrquake engine UAE4ARM Commodore Amiga UME 2015 Arcade/Console/various (See MAME note) Uzem Uzebox A port of Uzem, the official emulator for the Uzebox VaporSpec Game engine A virtual game platform with capabilities similar to 80s game consoles VBA-M Game Boy Advance VisualBoy Advance-M is a active fork of VisualBoy Advance emulator VBA Next Game Boy Advance vecx GCE/MB Vectrex VeMUlator SEGA Visual Memory Unit A port of VeMUlator, a SEGA Dreamcast VMU emulator originally developed for Android VICE x64 Commodore C64 VICE x64dtv Commodore C64DTV DTV2 PAL/NTSC, DTV3 PAL/NTSC, HUMMER NTSC VICE x64sc Commodore C64 VICE x128 Commodore C128 VICE xcbm2 Commodore CBM-II 6x0/7x0 VICE xcbm5x0 Commodore CBM-II 5x0 VICE xpet Commodore PET VICE xplus4 Commodore Plus/4 VICE xscpu64 Commodore C64 SuperCPU VICE xvic Commodore VIC-20 Vircon32 Game engine A port of Vircon32 game console to libretro Virtual Jaguar Atari Jaguar VirtualXT DOS Runns PC/XT class software. Mainly intended for PC booters from the 80's. vitaQuake 2 Game engine A port of the VitaQuake 2 source port of iD's Quake 2 engine to libretro. There is a separate core for each of the Quake 2 mission packs, 'Rogue', 'Zaero' and 'Xatrix'. vitaQuake 2 (Rogue) Game engine (See vitaQuake 2 note) vitaQuake 2 (Xatrix) Game engine (See vitaQuake 2 note) vitaQuake 2 (Zaero) Game engine (See vitaQuake 2 note) vitaQuake 3 Game engine A port of the VitaQuake 3 source port of iD's ioquake3 engine to libretro vitaVoyager Game engine A port of the Lilium Voyager engine, which runs the Star Trek: Voyager - Elite Force game and is itself based on the ioquake3 WASM-4 Game engine WASM-4 is a open source low-level fantasy game console for building small games with WebAssembly X Millennium Sharp X1 XRick Game engine A port of the XRick, an open-source clone of the Rick Dangerous engine YabaSanshiro Sega Saturn A port of the YabaSanshiro, which is itself a fork of Yabause emulator Yabause Sega Saturn"},{"location":"guides/crtswitchres/","title":"CRTSwitchRes","text":"<p>Switchres is a modeline generation engine for emulation.</p> <p>Its purpose is on-the-fly creation of fully customized video modes that accurately reproduce those of the emulated systems. Based on a monitor profile, it will provide the best video mode for a given width, height, and refresh rate.</p> <p>The usual motivation is to connect a CRT display and have it driven in the original resolution (at least vertically), which is otherwise too low for modern display systems. The connection is typically from a digital connector (such as HDMI) on the computer side and needs an external converter for the CRT.</p>"},{"location":"guides/crtswitchres/#setup","title":"Setup","text":""},{"location":"guides/crtswitchres/#windows","title":"Windows","text":"<p>AMD video card is needed. Windows works the best with CRT Emudriver, available here. Once you have this setup and running, it is a simple case of turning CRTSwitchRes on and choosing your settings.</p> <p>Other options are available. It's a simple case of getting the resolutions installed on you Windows PC.</p>"},{"location":"guides/crtswitchres/#linux","title":"Linux","text":"<p>Switchres can work in the following environments: - X11 - KMS mode - Raspberry Pi with legacy graphics drivers</p> <p>Note</p> <p>In some cases your distribution may be missing some X libraries in this case make sure you install the  following <code>libx11-dev libxrandr-dev</code></p> <p>Note</p> <p>The composite output of RPi has fixed resolution and is unsuitable for custom modelines.</p>"},{"location":"guides/crtswitchres/#enabling-and-changing-settings","title":"Enabling and Changing Settings","text":"<p>CRTSwitchRes now using Switchres by Calamity. This is available on both Windows and Linux.</p> <p>To enable CRTSwitchRes or change settings - Navigate to Settings - Navigate to Video - Navigate to CRT SwitchRes</p> <p>Tip</p> <p>CRTSwitchRes is hidden behind advanced settings. Please enable advanced settings in User Interface first.</p>"},{"location":"guides/crtswitchres/#crtswitchres-options","title":"CRTSwitchRes Options","text":"Option Available Values CRT SwitchRes off, 15KHz, 31KHZ Standard, 31KHZ- 120Hz, INI CRT Super resolution Native, Dynamic, 1920, 2560, 3840 X Centering Currently not in use Porch Adjust Currently not in use Use Custom refresh rate Currently not in use"},{"location":"guides/crtswitchres/#option-1-crt-switchres","title":"Option 1. CRT SwitchRes","text":"<p>This option is where you will turn on SwitchRes and choose your main output hardware. </p> CRT SwitchRes Value Description off This setting turns SwitchRes off 15KHz This will request SR to be setup for 15KHz monitors/TVs output 31KHz This will request SR to be setup to output for 31KHz monitors/TVs output 31KHz, 120z This will request SR to be setup to output for 31KHz @120HZ monitors/TVs output for 240p INI This will request SR to look at the switchres.ini for the monitors/TVs output <p>Tip</p> <p>This can not be changed on-the-fly once SwitchRes is active. This setting will take effect after a restart.</p>"},{"location":"guides/crtswitchres/#option-2-crt-super-resolution","title":"Option 2. CRT Super Resolution","text":"CRT Super resolution values Description Native This will pass the cores native resolution to SR Dynamic Currently not in use 1920 This will pass a hard set super width of 1920 to SR 2560 This will pass a hard set super width of 2560 to SR 3840 This will pass a hard set super width of 3840 to SR <p>Note</p> <p>All resolution are integer scaled and aspect ratio corrected to match the original resolution. Unless you really need a locked super width only choose native and let SR do all the work. Even if your monitor does not support native resolutions, the best option to choose will be Native. For Windows, SwitchRes will look for compatible modes with and without super widths. For Linux, you can add the switchres.ini (see Advanced Settings below) into you RetroArch folder. Edit this file and change the dotclock_min form 0 to 25.0. This will then calculate dynamic super widths for cards that do not support low dotclocks (native widths produce low dotclocks).</p>"},{"location":"guides/crtswitchres/#advanced-settings","title":"Advanced Settings","text":"<p>As CRTSwitchRes is now using Switchres by Calamity, there are many options to customise you environment within the switchres.ini. However, some options are available with the CRTSwitchRes settings menu in RetroArch. Although more settings can be set in the switchres.ini, it is not a required step. It does however allow for more customisation. For more details on how to configure and use the switchres.ini, go here.</p> <p>Currently, the switchres.ini is not supplied with RetoArch. This will change in the near future. In the meantime you can download this file from here.</p> <p>Note</p> <p>A default switchres.ini file will be searched in the current working directory, then in .\\ini on Windows, ./ini then /etc on Linux. The repo has a switchres.ini example.</p>"},{"location":"guides/crtswitchres/#crtswitchres-options-via-retroarchcfg","title":"CRTSwitchRes Options Via retroarch.cfg","text":"Config Option Name Description Values crt_switch_center_adjust Currently not in use crt_switch_porch_adjust Currently not in use crt_switch_resolution Same as above CRT SwitchRes 0,1,2,3,4 - off, 15kHz, 31kHz Standard, 31kHz- 120Hz, INI respectively crt_switch_resolution_super Same as above CRT Super Resolution Native, Dynamic, 1920, 2560, 3840 crt_switch_resolution_use_custom_refresh_rate Not currently in use false crt_switch_timings Do not change crt_video_refresh_rate Do not change Set by SwitchRes"},{"location":"guides/crtswitchres/#core-and-directory-overrides","title":"Core and directory overrides","text":"<p>If you are using a <code>switchres.ini</code> configuration file and wish to fine-tune specific setting for certain cores or directories, it is possible to use core and directory overrides for this. These files can be placed at the same locations as the usual <code>.cfg</code> files for RetroArch's core and directory overrides, only replacing the <code>.cfg</code> with <code>.switchres.ini</code>.</p> <p>For example, if you are using native resolution on your configuration but want to user a 2560 super resolution on the Gambatte core, you can create the file <code>CONFIG_DIR/config/Gambatte/Gambatte.switchres.ini</code> with the content <code>user_mode    2560x0</code> in it. This setting will override the one on the original switchres.ini file when running this specific core. When closing this core, or switching to a different core, the default <code>switchres.ini</code> file will be re-loaded to undo the change.</p> <p>The same works for directory overrides. Example: If you want to use a super resolution of 2560 for roms in the \"Sega - Game Gear\" directory, while using the Genesis Plus GX core, you can create an override. Create the file <code>CONFIG_DIR/config/Genesis Plus GX/Sega - Game Gear.switchres.ini</code> and add the user mode to that file.</p> <p>Note</p> <p>You have to be using a full, complete <code>switchres.ini</code> base file for the overriding files to work properly, otherwise overriding settings will persist until you restart RetroArch.</p>"},{"location":"guides/databases/","title":"Databases","text":"<p>RetroArch uses <code>.rdb</code> database format files stored locally by default in folder <code>RetroArch/databases</code>.  The <code>.rdb</code> files are compiled from clrmamepro format <code>.dat</code> files stored at the libretro database repository.  See the database readme for comprehensive information about the sources and functioning of the repository.  </p> <p>Terminology Note: Game Name</p> <p>The term Game Name refers to the name displayed within the RetroArch interface and in playlists, not to the filename of the underlying file on the computer or device.  Game Name in this document is synonymous with playlist item label, playlist entry, content name, and game title.</p>"},{"location":"guides/databases/#features-of-retroarch-database-usage","title":"Features of RetroArch Database Usage","text":"<p>RetroArch uses the database to provide several automated cataloging functions:</p> <ul> <li>Validation. Reject or accept files when using the Import Scanner / Playlist Generator based on whether the ROM checksum (or other key) matches the checksum of a known verified completely intact (aka  \"properly dumped\") file in the database.</li> <li>Game Naming. Assign a definitive and uniform display name for each game in a playlist regardless of filename.  RetroArch will look up the <code>name</code> field specified for the file's key in the database.<ul> <li>Secondary: Thumbnail Images. Download and display thumbnail images for games based on the uniform name assigned by the database, regardless of filename. (Thumbnails are not directly assigned by the database or by checksum association, but as a secondary effect of databased game name assignment if a matching thumbnail is available on the server. Also see: Flexible Name Matching Algorithm.)</li> </ul> </li> <li>Category Search (\"Explore\"). Allows the user to find/view games that match selected criteria, e.g. by Developer, Release Year, Genre, and other attributes/metadata.</li> <li>Per-Game Information View. Provide an in-app viewable informational screen for each game (Game &gt; Information &gt; Database Entry).</li> </ul>"},{"location":"guides/databases/#how-the-import-scanner-uses-the-database","title":"How the Import Scanner Uses the Database","text":"<p>See also: Importing Content and Creating Playlists. </p> <p>RetroArch's Import Content actions \"Directory Scan\" and \"File Scan\" will do the following:</p> <ol> <li>Compute a CRC checksum of the file(s) or scan for the in-game serial number. CRC and serial number are the keys used for matching a game file to the database.</li> <li>Search for that CRC or serial in the information of the local <code>.rdb</code> files (default location <code>RetroArch/databases</code>). If the key is not found in databases, the file will not be added to a playlist. See Validation &amp; Rejection.</li> <li>Assign the <code>Game Name</code> (aka display name or playlist item name) that is specified as <code>name</code> within the database entry for the key (CRC/serial). The assigned <code>Game Name</code> will appear in the playlist, instead of the filename.</li> <li>All other associated metadata collated in the .rdb entry for the given CRC/serial can be viewed in the Information &gt; Database Entry for the game and will be viewable via \"Explore\".</li> </ol>"},{"location":"guides/databases/#validation-and-rejection","title":"Validation and Rejection","text":"<p>Validation here refers to checking a file or attribute against a reference, and then accepting or rejecting it based on whether it matches what is specified in the reference data (aka what is \"allowed\").  RetroArch's \"Scan Directory\" and \"Scan File\" automated importers are validation processes, not merely tools for adding all files to a playlist.  Part of their function is to reject files, not to import all files.  The database is the reference, and the ROM file is the item being validated.</p> <p>If your file's crc or internal serial data (whichever is the key used for matching, see below) does not exist in the database, the file will be rejected by the automatic scans and will not appear in the playlist.</p> <p>Bypass validation and rejection.  To import your games into a playlist regardless of database matches, or if your files are being rejected by the automatic scan (in other words are not recognized by the database) and you wish to add them to the playlist anyway, use the Manual Scan.</p>"},{"location":"guides/databases/#key-field-for-matching","title":"Key Field for Matching","text":"<p>During Playlist / Import Scanning (\"Directory Scan\" and \"Scan File\" in menu), RetroArch will identify your files in order to then match your file to a data entry in the database.  The key for matching varies by console typical file size (i.e. original media type).</p> <ul> <li>CRC checksum for systems with smaller file sizes, e.g. games before the advent of disc-based consoles.</li> <li>Serial Number for larger files like disc-based games, to avoid computing checksums on large files. Found within the ROM file. The serial is not metadata but encoded within the game's binary data, which is scanned (in applicable cases) as a byte array by RetroArch.</li> </ul> <p>Contrary to popular belief, the data used for matching is often the serial number encoded within a disc-game's binary data.</p> <p>Databases include cryptographic hashes (sha1, etc) for informational purposes to define the item specified, but only CRC checksum (or serial) not hashes are used for matching.</p>"},{"location":"guides/databases/#databases-and-thumbnails","title":"Databases and Thumbnails","text":"<p>Thumbnails are not assigned or retrieved based on checksum, serial, or game database matching.  See separate documentation for thumbnail handling and the thumbnail matching algorithm.</p> <p>Currently there is no automatic process that applies database game name changes/updates to libretro thumbnail repository image filenames.  Therefore one of the visible consequences of a Game Name or database problem is the lack of an appropriate thumbnail display in RetroArch whenever the <code>Game Name</code> displayed in the interface doesn't match a repository thumbnail filename.</p> <ul> <li>Game name error. To help fix a database error where the game name doesn't match a correctly named thumbnail in the repository, see How to Contribute to Databases.</li> <li>Thumbnail name error. To help fix a thumbnail in a case where a correct database game name doesn't match the repository thumbnail name, follow the Thumbnail Repository readme and How To Contribute Thumbnails guide.</li> </ul>"},{"location":"guides/databases/#troubleshooting","title":"Troubleshooting","text":"<p>See also: RetroArch documentation for Import Scanning and Playlist Creation/Scanning.</p> <p>The information below is for Users who are interested in figuring out the cause of a database-related problem and possibly helping to fix the problem in a way that will help all users.  RetroArch is a volunteer project, and many problem situations can be improved by interested users with medium technical awareness and no programming skill needed.</p>"},{"location":"guides/databases/#common-problems-and-solutions","title":"Common Problems and Solutions","text":"<p>The most common user problems and solutions related to the database are:</p> <ul> <li>Missed files during import scan. I.e. automated Directory Scan or File Scan \"misses\" some files, meaning the files are not imported and do not appear in the playlist.  See Validation &amp; Rejection above.<ul> <li>Solution A: Contribute to the database with data for the files/games that are not yet covered by the database.</li> <li>Solution B: Use the Manual Scan option, which will accept all files according to the chosen settings.</li> </ul> </li> <li>Game Name error or incorrect information. E.g. A game file receives a wrong title inside the RetroArch playlist/interface.<ul> <li>Solution:</li> <li>Follow the investigation steps below to find the <code>.dat</code> file that has the erroneous information, and contribute a correction.</li> <li>Depending on the source of the data, an upstream change within a database group's system may be required, but it is also possible to create ad hoc database coverage on the libretro github.</li> </ul> </li> <li>Outdated Local Files. I.e. an error(s) has been fixed in the libretro database but the fix has not yet been downloaded in the user's app install.<ul> <li>Solution: Update your RetroArch databases (Main Menu &gt; Online Updater &gt; Update databases). That will apply recent fixes/corrections to your RetroArch install.</li> </ul> </li> </ul>"},{"location":"guides/databases/#investigating-database-issues","title":"Investigating Database Issues","text":"<p>Follow the steps below to find the cause of a database or game/name identification issue:</p> <ul> <li>Learn about the factors that might be causing the Problem<ul> <li>Understand the multifaceted .dat system and files.  Multiple different .dat files may have data for the same game.</li> <li>Understand which key field RetroArch uses for identifying your file and for searching for your file's info in the database.</li> <li>Understand precedence within the dat files in the repository.</li> </ul> </li> <li>Verify data \"on both sides\"<ul> <li>Verify your file properties. Verify your game file has the appropriate key ID: compute the crc checksum, or verify the encoded serial number with a hex editor, whichever is applicable.</li> <li>Verify libretro databases on github. Look in the repository databases to find which <code>.dat</code> file might hold incorrect data for the game file at issue.  Even if you find a <code>.dat</code> that holds correct data for the game key (CRC or serial) in question, a different dat with precedence may hold incorrect data that is over-ruling the correct data.</li> </ul> </li> <li>Verify upstream data to find mismatches or pending corrections.  If an upstream database group (No-Intro, Redump, GameTDB, etc) is responsible for the <code>.dat</code> at issue, look on their websites to see whether their current information is correct or incorrect.</li> </ul>"},{"location":"guides/databases/#help-fix-the-problem","title":"Help Fix the Problem","text":"<p>After you've investigated the issue (see above), some possible actions are:</p> <ul> <li>Update. Use Main Menu &gt; Online Updater &gt; Update Databases to download new and possibly corrected data from the libretro server.</li> <li>Contribute a correction or addition of data to fix the issue. It may be possible to create an ad hoc database or to make a new entry within an existing ad hoc database.</li> <li>Use the Issue Tracker.<ul> <li>Search for existing issues on github that may hold useful advice or solutions for your problem.  Adding your new examples or insights to the discussion for the  problem may help Members/Contributors create a fix.</li> <li>Open an Issue if a relevant one isn't already open.</li> <li>Open a Database Issue if you observe either of the following:<ul> <li>You see a large-scale issue affecting many data entries or entire dats.</li> <li>You found that Upstream Data is correct but libretro or RetroArch doesn't reflect it, and at leat 4 weeks have passed since the Upstream update occurred.  </li> </ul> </li> <li>Open a RetroArch Issue if: you see a problem with RetroArch's scanning behavior or validation, while the databases appear correct and match your file's properties (crc and serial within the game's binary data viewable with a hex editor).</li> </ul> </li> <li>Submit Upstream Changes.  Make changes upstream (No-Intro, Redump, GameTDB, etc) by going through the channels of the upstream group responsible for the data at issue if: you found that Upstream Data is Incorrect and has been imported to the libretro database repository. The upstream group must make the correction to \"fix it at the source\", though it may be possible to create alternative data coverage instead (see below).</li> </ul>"},{"location":"guides/databases/#how-to-contribute-to-databases","title":"How to Contribute to Databases","text":"<p>Like thumbnails and documentation, databases are an area where users who are not programmers can contribute to RetroArch and in a way that benefits all users.</p>"},{"location":"guides/databases/#github-steps-overview","title":"Github Steps Overview","text":"<ol> <li>Make an account on github.com and login.</li> <li>Fork the libretro database repository.  Forking means copying the repository into your own working area on github.</li> <li>Make your changes within your fork.  For example, create a new <code>.dat</code>, or add a game entry or correction to an existing dat.<ul> <li>Understand the principles and header specifications explained in the database repository readme.</li> <li>Carefully heed the existing formats observable in present <code>.dat</code> files on the repository.</li> </ul> </li> <li>\"Commit\" (save) your changes with your fork.</li> <li>Use the \"Pull Request\" button (or the Contribute &gt; Open Pull Request button) to send and propose your changes to the libretro official team members.  They will review your contribution, and in time either accept it or inform you about required changes or a reason why it isn't acceptable.</li> </ol>"},{"location":"guides/databases/#small-scale-corrections","title":"Small-Scale Corrections","text":"<p>See database repository readme to learn when/where small-scare corrections are appropriate.</p> <p>Two methods for adding data coverage for a single game or niche of games, via Pull Request proposal on github:</p> <ul> <li>Method A: Fix the dat at issue.  This is only possible if two conditions are met:<ul> <li> <ol> <li>The <code>.dat</code> doesn't originate from an import from upstream and</li> </ol> </li> <li> <ol> <li>The <code>.dat</code> won't receive subtractive sync over-writes in the future.</li> </ol> </li> <li>If those conditions are not met, the intended \"fix\" would be deleted by the next bulk import sync.</li> </ul> </li> </ul> <p>Or...</p> <ul> <li>Method B: Edit a different dat, leaving the erroneous dat intact but moot.  This is only advisable when the correction and the error have different keys, or if the edited/corrected database has precedence over the erroneous database. If one of those conditions is not met, then the attempted correction would fail: it would be over-ruled in the <code>.rdb</code> compile by the erroneous dat's information.  If one of those conditions is met, you may do one of following:<ul> <li>Add a game data entry to an existing and appropriate ad hoc <code>.dat</code> in the repository.    </li> <li>Create a new ad hoc <code>.dat</code>. This is often acceptable even for a small number of games because of the multi-faceted nature of the dat system.  Some limitations may be enforced by admins, e.g. for the manageability of the build script or the repository.</li> </ul> </li> </ul>"},{"location":"guides/databases/#large-scale-additions","title":"Large-Scale Additions","text":"<p>See Adding New Database. Contributors are welcome to propose the addition of bulk data from their own build scripts or otherwise, via github Pull Request.</p>"},{"location":"guides/disc-swapping/","title":"Disc swapping","text":"<p>Some games in the 32-bit generation were spread over multiple CDs, and at a certain point in the game they ask the user to swap one disc out for another, while the console is still powered on.</p> <p>To manage discs, libretro has a concept of a disc index (like a multi-disc CD player).</p> <p>If a Sony PlayStation core or Sega Saturn core is loaded, then a <code>Disc Control</code> option is added to the Quick Menu.</p>"},{"location":"guides/disc-swapping/#using-ejectload-disc","title":"Using 'Eject/Load disc'","text":"<p><code>Load New Disc</code> ejects the current (virtual) disc and opens the File Browser, where you can select a new disc image to be loaded.</p> <p>When you select <code>Eject Disc</code>, three new options appear:</p> <ul> <li><code>Insert Disc</code>: Opens the File Browser, to find a disc image and load it into the Disc Index (CD list).</li> <li><code>Current Disc Index</code>: Displays a list of the current discs in the \"CD changer\", and lets you select which disc is \"in use\".</li> <li><code>Load New Disc</code>: Opens the File Browser, to find another disc image and load it into the Disc Index (CD list).</li> </ul>"},{"location":"guides/disc-swapping/#using-disc-image-append","title":"Using 'Disc Image Append'","text":"<p>If you don't or can't use a playlist, you can append a disk image to the list on the fly using <code>Disc Image Append</code>. In this case, you use the File Browser to look for a disk image, and then add it to the internal disk image list. The <code>Disc Index</code> list is updated appropriately, and you can make your selection then return to the game.</p>"},{"location":"guides/disc-swapping/#using-m3u-playlists","title":"Using M3U playlists","text":"<p>Multi-CD images are typically handled with an .m3u playlist file. In this case, you can swap disks by cycling through the <code>Disc Index</code> setting.</p> <p>You can start a game by loading its M3U file, through <code>Load Content</code> or Playlists (This will have to be added manually to your Playlists, as scanning for content will not do so).</p>"},{"location":"guides/disc-swapping/#making-an-m3u-playlist-file","title":"Making an M3U playlist file","text":"<p>You can make an M3U playlist file using a simple text editor. * Put all of your content's disc files into a single folder. * Create a new text file in the same folder as your content. Name it the same as your content. * Add the full names of each disc into the text file (including the file extension), 1 filename per row.   * If your discs are BIN/CUE files, only list the '.cue' files in the document.   * If your discs are CHD files, list the '.chd' files in the document. * Save and close the text file. * Rename the file extension from '.txt' to '.m3u'.</p>"},{"location":"guides/disc-swapping/#example","title":"Example","text":"<p>Contents of folder (<code>ROMS/Metal Gear Solid/</code>):</p> <p>Metal Gear Solid (USA) (Disc 1).bin  Metal Gear Solid (USA) (Disc 1).cue  Metal Gear Solid (USA) (Disc 2).bin  Metal Gear Solid (USA) (Disc 2).cue  Metal Gear Solid (USA).m3u</p> <p>Contents of M3U file (<code>Metal Gear Solid (USA).m3u</code>):</p> <p>Metal Gear Solid (USA) (Disc 1).cue  Metal Gear Solid (USA) (Disc 2).cue</p>"},{"location":"guides/disc-swapping/#issues-and-workarounds","title":"Issues and workarounds","text":"<p>Replacing the disk inside RGUI is \"physically\" speaking the same as ejecting, swapping disks and closing the tray instantaneously. Some games will not work with this approach: Notably Metal Gear Solid needs to detect an actual \"eject\" taking place.</p> <p>To work around this, set <code>Disk Index</code> to <code>No Disk</code>, and exit RGUI. The game will pick up that the tray has been ejected/missing disk after half a second or so. Now you can go back to RGUI, pick the correct disk index and return to the game.</p>"},{"location":"guides/download-cores/","title":"Cores","text":"<p>Cores are essentially other programs and games that run through RetroArch. RetroArch requires cores to run any content.</p> <p>Tip</p> <p>Many game console may have multiple emulator cores, the question of which one is the best may come up. Emulators can be designed to be more accurate at the cost of a performance hit, check out the Emulation General Wiki for a good look at what will suit your needs and hardware.</p>"},{"location":"guides/download-cores/#installing-cores-through-retroarch-interface","title":"Installing cores through RetroArch interface","text":"<p>Tip</p> <p>If you do not see the \"Core Downloader\" option, you may have installed RetroArch using a package manager. If so, see Installing cores through package manager (Ubuntu PPA only). Otherwise, to enable it:</p> <ul> <li>Navigate to Settings</li> <li>Navigate to User Interface</li> <li>Navigate to Menu Item Visibility</li> <li>Enable Show Core Downloader</li> </ul> <p></p> <ul> <li>Navigate to Online Updater</li> <li>Navigate to Select Core Downloader</li> <li>Select the core you want to download</li> </ul> <p>Note</p> <p>If you're using the Ubuntu PPA version of RetroArch and have enabled \"Show Core Downloader\" manually, your changes will not be reflected unless your the Cores directory setting is set to a writable location in the Directory Configuration.</p>"},{"location":"guides/download-cores/#installing-cores-through-package-manager-ubuntu-ppa-only","title":"Installing cores through package manager (Ubuntu PPA only)","text":"<p>Note</p> <p>Installing RetroArch through the Ubuntu PPA will disable the \"Core Downloader\" option in RetroArch's interface, therefore core installation needs to happen through the Ubuntu package manager.</p> <ul> <li>Open a terminal</li> <li>Start typing sudo apt-get install libretro-</li> <li>Press tab a few times until all available possibilities show, press space to expand the list.</li> <li>Now type the full name of the core you want to install Example: sudo apt-get install libretro-nestopia</li> <li>Press enter and follow the process to install</li> </ul>"},{"location":"guides/file-browser/","title":"File Browser","text":"<p>For this part of the setup guide we will be teaching you how to use RetroArch's file browser. The browser is rather basic, although it isn't too hard to get used to it.</p>"},{"location":"guides/file-browser/#change-default-directory","title":"Change default directory","text":"<p>To make your content easier to get to, you should change the default directory. This would be a good first use of the file browser.</p> <p>Move to the settings tab then find Directory, then move to File Browser.</p> <p>The first screen should show the storage devices move to the one that contain your game content and press enter.</p> <p></p> <p>Note</p> <p>On Windows it will display drive letters (like C:/ and D:/), However a system like Linux doesn't work in the same way and will only display the root. Most Android users should select /storage/emulated/0 if they want internal storage.</p> <p>You have now entered the main part of the file browser. Beneath the first two options will be all your folders. Navigate your file system until you are inside your content folder then select &lt;Use this directory&gt;.</p> <p>Tip</p> <p>On GNU/Linux, other hard drives are usually stored under /media/ or /mnt/.</p> <p></p> <p>You should now be back in the settings menu with the File browser set to the folder you wanted.</p>"},{"location":"guides/generating-retroarch-logs/","title":"Generating Logs","text":""},{"location":"guides/generating-retroarch-logs/#what-are-logs-why-are-they-so-important","title":"What are logs? Why are they so important?","text":"<p>RetroArch and its underlying libretro technology is designed to run on many different combinations of hardware, operating system, libretro core, and content. It is not possible for a volunteer-based open source project to test all possible combinations.</p> <p>The answer to this dilemma involves \"logs\", which RetroArch and other libretro software use to record essential information about your system and its function that other users and volunteers need in order to help troubleshoot problems and improve compatibility with new systems.</p>"},{"location":"guides/generating-retroarch-logs/#generating-logs","title":"Generating Logs","text":""},{"location":"guides/generating-retroarch-logs/#generating-logs-via-menu","title":"Generating Logs via Menu","text":"<ol> <li>Go to \"Settings\"</li> <li>Enter \"Logging\"</li> <li>Activate \"Logging Verbosity\"</li> <li>Activate \"Log to File\"</li> <li>(optional) Adjust \"Frontend / Core Logging Level\" to get more or less detailed information</li> <li>(optional) Activate \"Timestamp Log Files\" if you don't want to overwrite the log at each startup</li> </ol> <p>This will place the logs in the System Events Logs directory, visible in the \"Directory\" settings.</p>"},{"location":"guides/generating-retroarch-logs/#generating-logs-in-lakka","title":"Generating Logs in Lakka","text":"<p>Please see the Troubleshooting Lakka doc.</p>"},{"location":"guides/generating-retroarch-logs/#generating-logs-in-linux","title":"Generating Logs in Linux","text":""},{"location":"guides/generating-retroarch-logs/#retroarch-logs","title":"RetroArch logs","text":"<ol> <li>Open a terminal.</li> <li>Navigate to the RetroArch folder with the <code>cd</code> command.</li> <li>Start RetroArch in 'verbose' mode with this command: <code>retroarch -v --log-file retroarch.log</code> or <code>retroarch -v &gt;&gt; retroarch.log 2&gt;&amp;1</code></li> <li>Once you exit RetroArch, a file called <code>retroarch.log</code> should be stored in the folder.</li> </ol>"},{"location":"guides/generating-retroarch-logs/#graphic-card-logs","title":"Graphic card logs","text":"<p><code>lspci -nnk | grep -A 3 VGA</code> will give information about your graphic card.</p>"},{"location":"guides/generating-retroarch-logs/#audio-device-logs","title":"Audio device logs","text":"<p><code>aplay -L</code> enumerates audio devices which have been detected.</p>"},{"location":"guides/generating-retroarch-logs/#input-device-logs","title":"Input device logs","text":"<p><code>lsusb</code> lists all devices attached via USB</p> <p><code>dmesg</code> displays all messages from the kernel ring buffer which typically is holding the messages generated by the Linux kernel from the boot process. The dmesg log lists each hardware device that the kernel detected along with information on how the device was configured by the system.</p>"},{"location":"guides/generating-retroarch-logs/#generating-logs-in-windows","title":"Generating Logs in Windows","text":"<p>Tip</p> <p>You can hold <code>shift</code> then <code>right click</code> on the folder that contains retroarch.exe  Select <code>Open PowerShell window here</code>. In the PowerShell window, use the <code>cmd</code> command to switch to the Windows console. Then jump to step 3.</p> <ol> <li>Open a console window with the <code>cmd</code> command, found either in the Start Menu or through use of the Windows \"Run\" menu.</li> <li>Navigate to the RetroArch folder using the <code>cd</code> command.</li> <li>Start RetroArch in 'verbose' mode with this command: <code>retroarch.exe -v --log-file retroarch.log</code> or <code>retroarch.exe -v &gt;&gt; retroarch.log 2&gt;&amp;1</code></li> <li>Once you exit RetroArch, a file called <code>retroarch.log</code> should be stored in the folder.</li> </ol>"},{"location":"guides/generating-retroarch-logs/#generating-logs-in-os-x","title":"Generating Logs in OS X","text":"<ol> <li>Open a console window with the OS X \"Terminal\" app.</li> <li>Navigate to the RetroArch.app folder using the <code>cd</code> command.</li> <li>Inside the RetroArch.app folder, navigate to the Contents/MacOS filter.</li> <li>Start RetroArch in 'verbose' mode with this command: <code>./RetroArch -v --log-file ~/retroarch.log</code> or <code>./RetroArch -v &gt;&gt; ~/retroarch.log 2&gt;&amp;1</code></li> <li>Once you exit RetroArch, a file called <code>retroarch.log</code> should be stored in your home directory.</li> </ol>"},{"location":"guides/generating-retroarch-logs/#generating-logs-in-android","title":"Generating Logs in Android","text":"<p>There is a range of variation in the logging systems available to Android device depending on the combination of hardware and operating system in use. There are two general approaches to generating logs in Android: tethering to a PC via a USB cable or using a <code>logcat</code> app.</p>"},{"location":"guides/generating-retroarch-logs/#generating-logs-via-usb-tether","title":"Generating Logs via USB Tether","text":"<p>Prerequisites: * Linux, Windows or Mac PC * USB cable for your device</p> <p>Instructions:</p> <ul> <li>Install your device driver for using adb on your PC from http://developer.android.com/tools/extras/oem-usb.html</li> <li>Download the adb executable for your OS -- it can be downloaded as part of the full Android SDK, but you might also be able to find the adb executable individually.</li> <li>Connect your Android device to the PC via USB cable.</li> <li>Enable the developer options on the Android.</li> <li>Enable USB debugging on the Android.</li> <li>Open a command prompt (Windows) or terminal (Linux/OS X) and navigate to the directory where the adb executable is located using the <code>cd</code> command. On Windows: Windows Key + R &gt; type <code>cmd</code> &gt; press Enter. On OS X: Type <code>Terminal</code> into Spotlight and open it. Alternately, on Windows: Go to the directory where you downloaded the adb executable, Shift+Right Click and select <code>Open Console</code> (or similar) | On Linux / OS X: Right Click in the directory and select <code>Open Terminal here</code></li> <li>Type in your console window: <code>adb devices</code> to verify your device is properly connected.</li> <li>If your device is selected, type in <code>adb logcat</code> to show the logcat, aka stacktrace.</li> <li>Reproduce your issue on your device.</li> <li>Paste the contents of your console window into a Github Gist to share on the forums or github.</li> </ul> <p>Based on Stackexchange posts by Leandros and Nicolas Raoul.</p>"},{"location":"guides/generating-retroarch-logs/#generating-logs-via-android-app","title":"Generating Logs via Android App","text":"<p>Gathering log files in Android requires a third-party app that can interface with the <code>logcat</code> system. Many free apps are available via Android's \"Play Store\" system. You can still generate RetroArch logs from the menu.</p>"},{"location":"guides/generating-retroarch-logs/#generating-logs-in-ios-and-tvos","title":"Generating Logs in iOS and tvOS","text":"<p>You can generate RetroArch logs from the menu, described above. Logs by default go into the RetroArch/logs directory accessible through the Files app on iOS or the webserver on tvOS.</p> <p>App Store installations can opt to send crash logs to the RetroArch developers for analysis, if desired. This can be configured through the Settings app in \"Privacy &amp; Security\" under \"Analytics &amp; Improvements\" by turning on \"Share With App Developers\".</p>"},{"location":"guides/generating-retroarch-logs/#generating-logs-with-nintendo-switch","title":"Generating Logs with Nintendo Switch","text":"<p>You need to have your console and your PC on the same local network.</p> <p>You need to have <code>nxlink</code> installed on your PC to generate logs. The devkitpro environment has it, see the switchbrew wiki for instructions on how to install it.</p> <p>Run the homebrew menu on your console, and press the Y button to open the netloader prompt.</p> <p>Take the NRO of the core you want to launch on your PC. Open a terminal and type this command  in :</p> <pre><code>nxlink /path/to/your/core.nro -s\n</code></pre> <p>Where <code>/path/to/your/core.nro</code> is the path to the core you want to generate logs from, on your PC. Be careful as it will overwrite any homebrew with the same name on your SD card !</p> <p>That will send the homebrew and run it on your console. Logs will be shown on the terminal you ran the command from.</p> <p>If you want to redirect logs to the file <code>libnx.logs</code>, use this command instead :</p> <pre><code>nxlink /path/to/your/core.nro -s &gt; libnx.logs 2&gt;&amp;1\n</code></pre>"},{"location":"guides/generating-retroarch-logs/#generating-logs-with-other-nintendo-consoles","title":"Generating Logs with other Nintendo Consoles","text":"<p>At the moment there are no logging docs available for other Nintendo consoles. Please feel free to post about your situation in the libretro forums.</p>"},{"location":"guides/generating-retroarch-logs/#generating-logs-with-playstation-consoles","title":"Generating Logs with PlayStation Consoles","text":"<p>At the moment there are no logging docs available for PlayStation consoles. Please feel free to post about your situation in the libretro forums.</p>"},{"location":"guides/generating-retroarch-logs/#generating-logs-in-opendingux-gcw-zero-and-rg350","title":"Generating Logs in OpenDingux (GCW-Zero and RG350)","text":"<p>At the moment there are no logging docs available for OpenDingux. Please feel free to post about your situation in the libretro forums.</p>"},{"location":"guides/generating-retroarch-logs/#posting-logs-in-the-forum-and-github","title":"Posting Logs in the Forum and Github","text":"<p>Generally, log files are lengthy which make them difficult to read when they're pasted directly into a post on the forums or github. If your log file is more than six or seven lines long, you will be asked to post a link to it instead.</p> <p>One free and straightforward system for posting and sharing logs is Github Gist. You can paste the contents of a log file, or the log file itself, into the Gist website. After you log has been added to the Gist, press the <code>Create Public Gist</code> button to create a shareable link.</p>"},{"location":"guides/glui/","title":"GLUI (GUI)","text":"<p>GLUI (formerly known as MaterialUI) is RetroArch's mobile interface for smartphones. This interface is designed around touchscreen and pointer devices like a mouse/trackball. It is based on Android's \"Material UI\" designs.</p> <p>GLUI was overhauled in RetroArch 1.6.6.</p> <p></p>"},{"location":"guides/glui/#menu-structure","title":"Menu structure","text":"<p>Content is displayed in a single column. The menus are organized into three tabs: Main Menu, Playlists, and Settings.</p> <p></p> <p>The three tabs of GLUI, side by side.</p>"},{"location":"guides/glui/#navigating-the-menus","title":"Navigating the menus","text":"<p>GLUI is designed primarily for touchscreen use, although a gamepad can also be connected via Bluetooth or USB.</p> <p>Swipe left or right (or tap on the icons at the bottom of the screen) to switch between the three columns. Swipe up or down to scroll through menus. Tap on a line once to select it and enter its submenu. Tap once on the 'back arrow' icon in the top left to go back a step.</p> <p>Tap once on an entry in a playlist to open the quick menu, from which you can launch the content.</p> <p>See Input and Controls</p>"},{"location":"guides/glui/#input","title":"Input","text":"<p>Content is controlled using Gamepad Overlays on the device's touchscreen. A gamepad can also be connected via Bluetooth or USB.</p> <p>See Overlays and Input and Controls</p> <p></p> <p>GLUI gameplay with the default gamepad overlay</p>"},{"location":"guides/glui/#thumbnails","title":"Thumbnails","text":"<p>By default, 2 thumbnails are displayed for each entry in a playlist. The left thumbnail is the boxart, while the right thumbnail is a gameplay screenshot. Hold on a thumbnail for 1 second then release to view the thumbnails full-screen (then tap once to close the popup).</p> <p></p>"},{"location":"guides/glui/#themes","title":"Themes","text":"<p>GLUI has a range of colour schemes built in. Go to <code>Settings &gt; User Interface &gt; Appearance &gt; Color Theme</code> to browse the themes and select one.</p> <p>GLUI does not support OS-level light/dark mode switching at this time.</p> <p></p>"},{"location":"guides/gui/","title":"The User Interface","text":"<p>RetroArch currently has 4 different \"Menu Drivers\" to choose from for its Graphical User Interface:</p> <ul> <li>Ozone: The default skin for many host systems.</li> <li>XMB: The \"old\" default skin.</li> <li>GLUI: The smartphone/touchscreen skin.</li> <li>RGUI: The \"basic\" skin.</li> </ul> <p>The Menu Driver can be changed under <code>Settings&gt; User Interface&gt; Menu</code>. A restart of RetroArch will be required.</p> <p></p> <p>Clockwise from top: Ozone, XMB, GLUI, RGUI.</p>"},{"location":"guides/import-content/","title":"Importing Content","text":"<p>Warning</p> <p>This guide assumes that you already have obtained the content legally, RetroArch does not provide users with copyrighted content.</p> <p>This guide uses the \"scan\" functionality to import your games into RetroArch's playlists sorted by console. The scan is recursive so you can organise your collection into sub-folders or potentially scan your whole computer.</p>"},{"location":"guides/import-content/#step-1-download-database","title":"Step 1: Download database","text":"<p>In order to have RetroArch recognise your games, you need to have a database of all the titles.</p> <p>Note</p> <p>Certain releases of Retroarch (e.g. Windows), come with the database files out-of-the-box.</p> <p>From the RetroArch main menu select \"Online Updater\", then choose \"Update Databases\".</p> <p>Wait for the download to finish.</p>"},{"location":"guides/import-content/#step-2-scan-and-import","title":"Step 2: Scan and import","text":"<p>From the RetroArch Main Menu navigate to \"Import Content\". You will see three options, \"Scan Directory\", \"Scan File\" and \"Manual Scan\".</p> <p>Note</p> <p>\"Scan Directory\" and \"Scan File\" are sometimes refered to as \"Auto Scan\". These options can only recognise content that match the database. Using the default settings, these scan options also need a coresponding core for the said content to be already added.</p> <p>1) Scan Directory: for importing a collection of content. Using the file browser, navigate to the folder of the content collection and select \"Scan This Directory\".</p> <p>2) Scan File: for importing a single file. Navigate to file and select it.</p> <p>3) Manual Scan: it scans based on content file names and does not require content to match the database.</p> <p>Please be patient while it scans. Large collections could take several minutes.</p>"},{"location":"guides/import-content/#step-3-add-box-art","title":"Step 3: Add box art","text":"<p>This is optional. Go back to the main menu, select \"Online Updater\", then choose \"Playlist Thumbnails Updater\". Here you need to select the console you want to download.</p> <p>Please be patient, these take quite some time to download, especially on a slow internet connection.</p> <p>Tip</p> <p>In order to be able to download thumbnails for manually scanned content, the name of the playlist and the names of the entries must match the ones on the thumbnail website.</p>"},{"location":"guides/input-and-controls/","title":"Getting started: Input and controls","text":""},{"location":"guides/input-and-controls/#game-controllers","title":"Game controllers","text":"<p>RetroArch is intended to be easily controlled with a controller. RetroArch uses the overall term controller which encompasses all input hardware that could be described by the terms joypad, gamepad, joystick, and others.</p> <p>Map controls by controller, core, or game</p> <p>RetroArch allows users to configure a controller once for many cores instead of having to configure each core individually. RetroArch also provides the freedom to configure specific cores and even individual games differently if the user wants.</p>"},{"location":"guides/input-and-controls/#what-is-a-retropad","title":"What is a RetroPad?","text":"<p>RetroArch maps real-world controller inputs to a virtual controller called a <code>RetroPad</code> . A RetroPad resembles the common modern controller layout, and has:</p> <ul> <li>a D-pad</li> <li>4 face buttons with an ABXY layout like a SNES gamepad (that is: A-right, B-bottom, X-top, Y-left)</li> <li>Select / Start buttons</li> <li>two shoulder buttons (L1, R1)</li> <li>two trigger buttons (L2, R2)</li> <li>dual analog sticks like a Sony DualShock, which can also be used as a button (L3, R3).</li> </ul> <p></p> <p>You don't have to map all of the RetroPad buttons to a real world button. If your real controller has less buttons than a DualShock, then the virtual RetroPad will have some unmapped buttons, that's perfectly fine. If your real controller has more buttons, the extra buttons may be used as freely configurable hotkeys.</p> <p>Conceptually, all RetroPad buttons can behave as analog (pressure sensitive), but the hardware typically only supports this for the trigger buttons. Gyroscope, acceleration, and illumination sensors may be supported, very much depending on the driver and the core.</p>"},{"location":"guides/input-and-controls/#controller-autoconfiguration","title":"Controller autoconfiguration","text":"<p>Most well-known controllers should work out of the box via the RetroArch autoconfiguration profile database. If the controller can be autoconfigured, the OSD will inform you of the autoconfiguration event. The menu hotkey is often pre-defined in the autoconfiguration profile. </p> <p>Manual RetroPad binding</p> <p>Not all controllers have autoconfigs. If that is the case for your controller, please refer to the Manual RetroPad Binding.</p>"},{"location":"guides/input-and-controls/#keyboard-controls","title":"Keyboard controls","text":"<p>RetroArch provides a remappable set of bindings between a keyboard and the RetroPad abstraction as well as between a keyboard and RetroArch's hotkeys, details are below.</p>"},{"location":"guides/input-and-controls/#cores-with-direct-keyboard-input","title":"Cores with direct keyboard input","text":"<p>Please be aware that some cores, for example arcade emulator cores and vintage computer emulator cores, can also be configured to directly read the keyboard or controls that use a keyboard interface. If you are using a core configured for direct keyboard access, it is recommended to use the <code>Game Focus</code> mode (default: Scroll Lock) to disable those bindings while using the keyboard device, or unbind the conflicting RetroArch keyboard-to-RetroPad and hotkey bindings if only a few keys are needed. Otherwise, keyboard input will be captured by the RetroArch hotkeys and the core will not get the input.</p> <p>Tip</p> <p>Controls with keyboard interfaces can also benefit from defining a Hotkey Enable button. If this hotkey is defined, other hotkeys will not be activated unless it is pressed.</p>"},{"location":"guides/input-and-controls/#manual-retropad-binding","title":"Manual RetroPad binding","text":"<p>If your gamepad is not recognized by autoconfiguration or if you would like to change its RetroPad binding, use the Input settings menu.</p> <p></p> <ul> <li>Navigate to Settings</li> <li>Navigate to Input</li> <li>Navigate to RetroPad Binds</li> <li>Navigate to Port 1 Controls</li> <li>Select Set All Controls</li> <li>Press the buttons as required.</li> </ul> <p>Tip</p> <p>If you have several different controllers, do Save Controller Profile after each binding so that controllers will be recognized next time automatically.</p>"},{"location":"guides/input-and-controls/#controls-for-multi-player","title":"Controls for multi-player","text":"<p>If you want to set-up local multi-player with games that support it:</p> <ul> <li>Navigate to Settings</li> <li>Navigate to Input</li> <li>Navigate to RetroPad Binds</li> </ul> <p>Here you will find the option to set binds for multiple users. Let's set-up User 1's controller:</p> <ul> <li>Navigate to Port 1 Controls</li> <li>Select Device Index</li> </ul> <p>Select which currently plugged-in controller will be assigned to this player. After you finish, go back, select Port 2 Controls and repeat for user 2.</p> <p>In case of multiple controllers, RetroArch will assign them by default in the order they are presented by the operating system. For more customization, use the device reservation options to explicitly assign a controller to a player.</p>"},{"location":"guides/input-and-controls/#hotkeys","title":"Hotkeys","text":"<p>Hotkeys are combinations of buttons you can press in order to access options such as saving, loading, and exiting games. Hotkey binds can be configured at <code>Settings</code> \u2192 <code>Input</code> \u2192 <code>Hotkeys</code> . If you map <code>Enable Hotkeys</code> to a button, it will require that button to be held in order to trigger any hotkeys.</p> <p>Tip</p> <p>To unbind (effectively, disable) a hotkey, press Del on your keyboard or the Y button (the left one of the 4 buttons) on the RetroPad. To reset a hotkey to its default, press Space on your keyboard or the Start button on the RetroPad.</p>"},{"location":"guides/input-and-controls/#remapping-controls-for-individual-cores-or-content","title":"Remapping controls for individual cores or content","text":"<p>Core Controls Remapping alters how the core receives input rather than how the gamepad is coded, for example you can tell an individual core to switch button A and B on the RetroPad for gameplay, but you can still use \"A\" to select in the RetroArch menu and \"B\" to go back. This is opposed to changing the gamepad bindings in RetroArch itself which would swap \"A\" and \"B\" in the core but would also make \"B\" select and \"A\" back in the RetroArch menu.</p> <p>How to remap the controls for a single core or game:</p> <ul> <li>Start content with the core for which you want to remap controls</li> <li>Go to Quick Menu and then Controls</li> <li>Configure the buttons the way you want</li> <li>Select Save Core Remap File</li> <li>OR, if you want to save this remapping for the current game only, select Save Game Remap File</li> </ul>"},{"location":"guides/input-and-controls/#default-retroarch-keyboard-bindings","title":"Default RetroArch keyboard bindings","text":""},{"location":"guides/input-and-controls/#key-bindings-cheat-sheet","title":"Key bindings cheat sheet","text":"<p>Commands as of 2025-05-12 superimposed on US laptop keyboard. For most recent key bindings see the following sections.</p>"},{"location":"guides/input-and-controls/#general-controller-mapping","title":"General controller mapping","text":"<p>These controls are valid both in-game and in the menu:</p> User 1 Keyboard Default RetroPad Mapping Menu Action Move cursor up Move cursor down Move cursor left Move cursor right Scroll one page up Scroll one page down Return to the previous screen Select Item Scan content / Remove highlighted input bind Search Help (see next section)"},{"location":"guides/input-and-controls/#menu-controls","title":"Menu controls","text":"<p>While in the menu, there are additional navigation keys defined for convenience.</p> Keyboard Input Retropad Input Menu Action Return to the previous screen Select Item (note: Enter key is mapped to Select button in-game) Scan content / Remove highlighted input bind Search Reset to default Scroll to previous letter Scroll to next letter Scroll to top Scroll to bottom <p>Analog sticks are also able to control the menu. If needed, additional hotkeys can be disabled in <code>Settings</code> \u2192 <code>Input</code> \u2192 <code>Menu Controls</code>, along with several other customization options.</p>"},{"location":"guides/input-and-controls/#hotkey-controls","title":"Hotkey controls","text":"<p>Hotkey binds can be configured at <code>Settings</code> \u2192 <code>Input</code> \u2192 <code>Hotkeys</code> . If you map <code>Enable Hotkeys</code> to a key, it will require that key to be held in order to trigger any hotkeys. This can be useful in avoiding keyboard mapping conflicts between RetroArch and cores cores that use the keyboard for input.</p> <p>Tip</p> <p>Hotkeys can also be mapped to controller buttons.</p> Keyboard Input In-Game Action Exit RetroArch Fast forward toggle Fast forward hold Pause Frame advance Slow motion Rewind Reset Menu toggle Save state Show FPS Load state Desktop menu Decrease current state slot Increase current state slot Take screenshot Mute Grab mouse Volume Up Volume Down Fullscreen toggle Next shader Previous shader Netplay toggle play/spectate Cheat toggle Next cheat Previous cheat"},{"location":"guides/input-and-controls/#platform-specific-controls","title":"Platform-specific controls","text":""},{"location":"guides/input-and-controls/#nintendo-switch","title":"Nintendo Switch","text":"<p>USB keyboards and mice: All keyboards seem to work. Not all mice seem to work. Mouse compatibility sheet.</p> <p>Touch mouse emulation: The Switch touchscreen can be used for mouse control like a laptop touchpad. The following gestures are supported.</p> Touch Input Effect single finger drag move the mouse pointer (indirectly like on a touchpad) single short tap left mouse click dual finger short tap* right mouse click dual finger drag drag'n'drop (left mouse button is held down) three finger drag drag'n'drop (right mouse button is held down) <p>*: hold one finger, short tap with another</p>"},{"location":"guides/input-controller-drivers/","title":"RetroArch input and controller drivers","text":"<p>RetroArch makes use of two input systems in order to support the full range of input devices available across RetroArch's supported platforms.</p> <ul> <li>Input Drivers provide access to keyboards, mice, and mouse-like devices such as lightguns or touch screens. Input drivers are typically set up automatically, and are either not changeable or there is only a limited selection.</li> <li>Controller Drivers provide access to gamepads and joysticks. On desktop platforms, controller drivers can be usually changed. The autoconfiguration profile database is different per controller driver.</li> </ul> <p>Note</p> <p>Controller drivers were previously referred to as joypad drivers. Some documentation may still use the older \"joypad\" terminology.</p> <ul> <li>Multi-mouse indicates if it is possible to select a separate mouse-type device (such as a lightgun) for each player. If multi-mouse is not supported, typically all pointing devices are controlling the same default cursor.</li> <li>Pointer device indicates if it is possible for the core to query the absolute coordinates of the pointer, as opposed to the default (relative) mouse. Certain cores may only support one or the other.</li> <li>Lightgun device indicates if it is possible for the core to query a specific lightgun device, which has a different button set compared to a RetroPad. A few platforms support physical lightguns natively, or lightguns may appear as pointer devices.</li> <li>Rumble support indicates if the driver can pass on haptic feedback (vibration) signals.</li> <li>Autoconfig support indicates if the driver can read the controller vendor/product identifiers and apply an automatic mapping for RetroPad.</li> </ul> <p>The listing below is not complete, but on the rest of the platforms, there is usually only 1 valid driver.</p>"},{"location":"guides/input-controller-drivers/#apple-oses","title":"Apple OSes","text":"<p>Apple Input Drivers</p> Input driver Conditions Multi-mouse support Pointer device Lightgun device <code>cocoa</code> - No Yes No <p>Apple Controller Drivers<sup>1</sup></p> Controller driver Conditions Rumble support Autoconfig support <code>mfi</code> - Yes Yes <code>sdl2</code> - Yes Yes"},{"location":"guides/input-controller-drivers/#linux","title":"Linux","text":"<p>Linux Input Drivers</p> Input driver Conditions Multi-mouse support Pointer device Lightgun device <code>x</code> Desktop environment is X11, video driver is OpenGL (any version) or Vulkan Yes Yes Yes <code>wayland</code> Desktop environment is Wayland, video driver is OpenGL (any version) or Vulkan No Yes Yes, button map is fixed <code>sdl</code> Video driver is sdl or sdl2 No Yes Yes, button map is fixed <code>udev</code> No desktop environment (KMS) or X11 Yes Yes Yes <code>linuxraw</code> No desktop environment (KMS) No mouse support at all No No <p>Multi-mouse support for X11 was added after RetroArch 1.20.0 and requires that RetroArch is compiled with XInput library. Use <code>xinput create-master</code> and <code>xinput reattach</code> commands to set up a second pointer and assign the physical device.</p> <p>Linux Controller Drivers</p> Controller driver Conditions Rumble support Autoconfig support <code>udev</code> Access to the udev interface (see below) Yes Yes <code>sdl2</code> - Yes Yes <code>linuxraw</code> - No Yes <code>parport</code> Special adapter on physical parallel port No No <code>hid</code> Only if enabled during compilation Yes Yes"},{"location":"guides/input-controller-drivers/#udev-drivers","title":"udev drivers","text":"<p>udev is the newest input driver and uses the evdev joypad interface at <code>/dev/input</code>. It supports hotplugging and force feedback (if supported by device). udev reads evdev events directly and supports keyboard callback, mice, and touchpads. <code>libudev</code> is used to discover devices and support hotplugging.</p> <p>The <code>libudev</code> and <code>libxkbdcommon</code> packages are required. udev does not require X11, but udev does depend on X11 keyboard layout files being installed.</p>"},{"location":"guides/input-controller-drivers/#setting-up-udev-permissions","title":"Setting up udev permissions","text":"<p>Most Linux distributions prevent users from capturing keyboard/mouse information by default. Only root and users in the group \"input\" are able to access raw input. This is a security feature in case the system is used by multiple users.</p> <p>The easiest way to gain access to this input is to:</p> <ul> <li>Step 1: Add your user to the group \"input\" with the command: <code>sudo usermod -a -G input `whoami`</code></li> <li>Step 2: Log out, and then log back in</li> </ul> <p>If adding your user to the input group does not succeed, you may also set up a udev rule which makes this input accessible to non-root users:</p> <ul> <li>Step 1: Add to <code>/etc/udev/rules.d/99-evdev.rules</code> the following text: <code>KERNEL==\"event*\", NAME=\"input/%k\", MODE=\"666\"</code></li> <li>Step 2: Reload the rules with <code>sudo udevadm control --reload-rules</code>.</li> <li>Step 3: Reboot</li> </ul>"},{"location":"guides/input-controller-drivers/#linuxraw-drivers","title":"linuxraw drivers","text":"<p>The linuxraw controller driver uses the legacy joystick API at <code>/dev/input/js*</code>. The linuxraw input driver requires an active TTY in order to read keyboard events.</p>"},{"location":"guides/input-controller-drivers/#hid-driver","title":"hid driver","text":"<p>The hid driver on Linux platform detects Human Interface Devices via libusb. By default it is not enabled during compilation.</p>"},{"location":"guides/input-controller-drivers/#windows","title":"Windows","text":"<p>Windows Input Drivers</p> Input driver Conditions Multi-mouse support Pointer device Lightgun device <code>dinput</code> Video driver is not sdl(2) No Yes Yes <code>raw</code> Video driver is not sdl(2) Yes Yes Yes <code>sdl</code> Video driver is sdl or sdl2 No Yes Yes, button map is fixed <p>Windows Controller Drivers</p> Controller driver Conditions Rumble support Autoconfig support <code>dinput</code> Controller is connected as a DirectInput device Yes Yes <code>xinput</code> Controller is connected as an XInput device Yes Yes <code>sdl2</code> - Yes Yes <code>hid</code> Only if enabled during compilation Yes Yes"},{"location":"guides/input-controller-drivers/#hid-driver_1","title":"hid driver","text":"<p>The hid driver on Windows platform detects Human Interface Devices via libusb. By default it is not enabled during compilation.</p>"},{"location":"guides/input-controller-drivers/#auxiliary-sensor-support","title":"Auxiliary sensor support","text":"<p>The libretro API provides a possibility to pass extra sensor inputs to cores: 3 axes of accelerometer/tilt sensor, 3 axes of gyroscope, and an illumination sensor. The following input drivers support extra sensors:</p> <ul> <li><code>linuxraw</code>: illumination</li> <li><code>sdl</code>: illumination (only on Linux)</li> <li><code>android</code>: accelerometer and gyroscope</li> <li><code>cocoa</code>: accelerometer and gyroscope</li> <li><code>vita</code>: accelerometer and gyroscope</li> <li><code>switch</code>: accelerometer, gyroscope and illumination</li> <li><code>udev</code>: illumination</li> <li><code>x</code>: illumination</li> </ul>"},{"location":"guides/input-controller-drivers/#footnotes","title":"Footnotes","text":"<ol> <li> <p>MFi controllers are primarily supported on Apple devices, which means that the operating systems supporting this configuration would include: - iOS: Used on iPhones and iPads. - macOS: Used on Mac computers. - tvOS: Used on Apple TV devices.\u00a0\u21a9</p> </li> </ol>"},{"location":"guides/install-3ds2ds/","title":"Downloading, Installing and Updating RetroArch for both 3DS and 2DS Family","text":""},{"location":"guides/install-3ds2ds/#prerequisites","title":"Prerequisites","text":"<ul> <li>CFW You must have custom firmware to run RetroArch on your 3DS or 2DS.</li> <li>Installer You can either use <code>FBI installer</code> or <code>Rosalina Menu</code> from <code>Luma</code>.  </li> </ul>  WARNING Hardware or software changes on your device may damage your device."},{"location":"guides/install-3ds2ds/#downloading-and-installing","title":"Downloading and installing","text":"<p>There are multiple ways of downloading RetroArch for your 3DS or 2DS.</p>"},{"location":"guides/install-3ds2ds/#installation","title":"Installation","text":"<p>You can either choose <code>Nightlies</code> or <code>Stable</code> bundle, you can find a bundle with RetroArch, all the cores and all the assets here, and download <code>RetroArch_3dsx.7z</code> or <code>RetroArch_cia.7z</code>.</p> <p>For Nightlies here - pick the latest version(based on date), and download <code>...RetroArch_3dsx.7z</code> or <code>...RetroArch_cia.7z</code>.</p> <p>Just extract <code>RetroArch</code> folder to the root of your SD card <code>RetroArch.cia</code> anywhere else, to install cores use <code>FBI installer</code>. Go to the <code>RetroArch</code>folder and open the <code>Cores</code> folder. Select and install the Cores you want to use. For example; install <code>pcsx_rearmed_libretro.cia</code> for Playstation 1 Roms.</p>"},{"location":"guides/install-3ds2ds/#reduce-core-and-content-loading-times","title":"Reduce Core and Content loading times","text":"<p>By default, all Cores are installed in the directory <code>/RetroArch/Cores</code>.  With this configuration,  RetroArch Cores on 3DS take nearly 30 seconds to start, as each Core in <code>/RetroArch/Cores</code> must be initialized - including Cores which may not be needed.  The same delay is experienced when loading Content (games) as well; roughly 30 seconds to finish loading.  Slow MicroSD random access/transfer speeds on the 3DS may be a likely cause.</p> <p>To reduce loading time for Cores and Content to under 5 seconds each, complete the following steps:</p> <ul> <li>Determine Cores to be used.  These Cores will remain in the <code>/RetroArch/Cores</code> directory.</li> <li>Create directory for unused cores. A directory name such as <code>/RetroArch/Cores-Notused</code> could be created for unused Cores.</li> <li>Move the unused Cores. Finally, move unused Cores from <code>/RetroArch/Cores</code> to <code>/RetroArch/Cores-Notused</code></li> </ul> <p>After moving unused Cores as outlined above, RetroArch Cores should start in about 5 seconds.  Content should load in about 5 seconds as well.</p> <p>As additional Cores are needed, simply move them from <code>/RetroArch/Cores-Notused</code> to <code>/RetroArch/Cores</code>.  This ensures only the required Cores are initialized by RetroArch, minimizing start times for Cores and Content.</p>"},{"location":"guides/install-3ds2ds/#additional-notes-for-mame-cores","title":"Additional Notes for MAME Cores","text":"<p>MAME Content numbers in the thousands of items for MAME Cores.  To help reduce loading time for MAME Content, consider creating two directories for MAME Content.  This ensures frequently loaded Content is able to start faster.</p> <ul> <li>A directory for favorite MAME Content, containing Content which will be loaded often.</li> <li>A directory for all remaining MAME Content, containing Content which would be loaded infrequently.</li> </ul> <p>This approach will work fine as long as the MAME Content romset is a Full Non-Merged romset.  If the romset is not Full Non-Merged, then all MAME content will need to remain in the same directory.</p> <p>Full Non-Merged romsets are the simplest romset format to get started with because each romset zip contains all necessary files for one game.  For more information, please refer to Getting started with arcade emulation.</p>"},{"location":"guides/install-3ds2ds/#control-configuration-for-mame-cores","title":"Control Configuration for MAME Cores","text":"<p>Much of the Content loaded by the RetroArch MAME Cores uses a <code>Vertical display perspective</code> for the top 3DS screen, requiring the user to rotate the 3DS counter-clockwise in order to properly see the game content and access the game controls.  When using Content in this configuration, the default controls won't be suitable (as the controls are typically configured for <code>Horizontal display perspective</code>).</p> <p>One approach to address the issue is to configure <code>Global Options</code> for controls, which would apply to the majority of games (such as <code>Vertical display perspective</code>).  For games which have a different layout (<code>Horizontal display perspective</code>), the MAME menu may be used to configure a game controller configuration for that specific Content.</p> <p>A simple configuration example follows, in case the majority of Content uses a Vertical configuration.  Load <code>RetroArch</code>, then:</p> <ul> <li>Bind a Menu hotkey From <code>Main Menu</code> navigate to <code>Settings-&gt;Input-&gt;Hotkeys</code>.  Scroll down to <code>Menu Toggle Gamepad Combo</code> or <code>Menu (Toggle)</code> and configure as desired, to display the <code>Menu</code> within Content.</li> <li>Configure Global Control for Vertical Content From Main Menu navigate to <code>Settings-&gt;Input-&gt;Port 1 Controls</code>.  Configure as desired.</li> <li>Configure In-Game Control for a piece of Horizontal Content Load the content, then press the defined <code>Hotkey</code> to display the <code>Quick Menu</code>. Scroll down and select <code>Options</code>, then scroll down to select <code>Display MAME menu</code>; change to <code>ON</code>, then resume content.  On the <code>MAME menu</code> select <code>Input (this game)</code> and adjust the settings as desired. Finally, use the previous steps to set <code>Display MAME menu</code> back to <code>OFF</code>.  Controls are now set properly for the game.</li> </ul> <p>Following the above ensures all Content may use the proper control configuration.</p>"},{"location":"guides/install-android/","title":"Downloading, Installing and Updating RetroArch for Android devices.","text":""},{"location":"guides/install-android/#downloading-and-installing","title":"Downloading and installing","text":"<p>There are multiple ways of downloading RetroArch for your Android device. Depending on your Android phone's architecture, you may want to install 64 bit instead of 32 bit.</p>"},{"location":"guides/install-android/#installation-via-google-play","title":"Installation via Google Play","text":"<ol> <li>Open the Google Play Store app </li> <li>Note: you can also go to play.google.com</li> <li>Search for RetroArch.</li> <li>Select RetroArch then Download.</li> </ol> <p>This will download the latest stable version. Or you can go to the Google Play Store page by clicking here for 64bit or by clicking here for 32bit.</p>"},{"location":"guides/install-android/#installation-via-website","title":"Installation via Website","text":"<p>Unknown Sources To avoid compromising the safety of your device, always use applications provided through our official channels.</p> <ol> <li>Go to www.retroarch.com then click Get RetroArch or click here on your device.</li> <li>Scroll down until Android section.</li> <li>Select either Download or Download (64bit). <p>There are several ways to determine if you have 64bit or 32bit version. You can use app like Antutu or AIDA64. You can still find out without app.</p> <p>Go to <code>Settings</code> - <code>System</code> and check <code>Kernel version</code>. If the code inside contains x64 string, your device has a <code>64-bit OS</code>; if you cannot find this string, then is 32-bit.</p> </li> <li>Click on the downloaded APK file.</li> </ol> <p>Before Android Oreo:</p> <ul> <li>Enter your device settings.</li> <li>Go to <code>Security</code>.</li> <li>Find the <code>Unknown Sources</code> option and check the box. A warning will pop up which you should definitely read. Once done, hit <code>OK</code> and this will enable you to install APKs from Unknown Sources.</li> </ul> <p>After Android Oreo:</p> <ul> <li>Begin installation with a file browser or through the web browser.</li> <li>Android will tell you that <code>the app doesn\u2019t have permission to install APKs</code>. Click the available <code>Settings</code> button in that prompt.</li> <li>In the next menu, tick the box that lets that app install APKs.</li> <li><code>Hit the back button</code> to return to your installation.</li> </ul>"},{"location":"guides/install-android/#installation-via-f-droid","title":"Installation via F-Droid","text":"<p>RetroArch can also be found in the F-Droid repository. You can find more information here. </p>"},{"location":"guides/install-android/#download-with-buildbot","title":"Download with Buildbot","text":"<p>You can either choose <code>Nightlies</code> or <code>Stable</code> bundle, you can find a bundle with RetroArch, all the cores and all the assets here, and download <code>RetroArch.apk</code> or <code>RetroArch_aarch64.apk</code>.</p> <p>For Nightlies here - pick the latest version(based on date), and download <code>...RetroArch.apk</code> or <code>...RetroArch_aarch64.apk</code>. (where ... represents the date)</p>"},{"location":"guides/install-facebookportal/","title":"Facebook Portal","text":"<p>Facebook Portal is a device that allows you to have video calls with friends and family using Facebook Messenger. It has a built-in camera and microphone, and it's designed to make video chatting easier and more convenient.</p> <p>Now, if you want to use Facebook Portal for running RetroArch, we need to do a little tweaking. RetroArch is an emulator that allows you to play old video games on various platforms. While Facebook Portal is not specifically designed for gaming, it does have some capabilities that might make it possible.</p> <p>To run RetroArch on Facebook Portal, you would need to use browser. Remember that running RetroArch on Facebook Portal might not provide the best gaming experience. The device is primarily designed for video calling and might not have the same performance or compatibility as dedicated gaming devices or computers. So, while it's possible to run RetroArch on Facebook Portal, it might not be the ideal setup for gaming purposes.</p>"},{"location":"guides/install-facebookportal/#running-retroarch-on-facebook-portal","title":"Running RetroArch on Facebook Portal","text":"<p>Portal is built on an open-source Android platform but we can't access the Google Play Store.</p> <p>Sure! Here's a step-by-step guide to running RetroArch on Facebook Portal:</p> <ol> <li> <p>Connect your controller: Start by connecting your controller to the Facebook Portal. You can do this by using via Bluetooth. Go to the settings, then Bluetooth settings. Put your controller into the Pairing mode. You will see your controller in the list.</p> </li> <li> <p>Open the web browser: On the Facebook Portal, locate the web browser app. It's usually represented by an icon that looks like a globe or compass. Tap on the icon to open the web browser.</p> </li> <li> <p>Visit web.libretro.com: In the web browser, enter the URL \"web.libretro.com\" in the address bar. This website is the official RetroArch website.</p> </li> <li> <p>Select a core: On the RetroArch website, you'll find a list of cores. Choose the core that corresponds to the console you want to emulate.</p> </li> <li> <p>Run the homebrews: After selecting the core, go to the \"Downloads\" section under the main menu. Look for the homebrews available for the console you selected. Homebrews are unofficial games or software created by independent developers. Select the file and it will load.</p> </li> </ol> <p>Remember, running RetroArch on Facebook Portal might not offer the best gaming experience, as the device is primarily designed for video calling. So, manage your expectations accordingly, and have fun exploring the world of retro gaming!</p>"},{"location":"guides/install-genesismini/","title":"Downloading and Installing RetroArch for Sega Genesis Mini - Genesis","text":"<p>The installation steps or dowloading file parts of the project may differ over time.</p>"},{"location":"guides/install-genesismini/#sega-genesis-mini-genesis","title":"Sega Genesis Mini - Genesis","text":"<p>Note: You currently need the have a way to execute homebrew to run RetroArch on your Sega Genesis Mini.</p>"},{"location":"guides/install-genesismini/#prerequisites","title":"Prerequisites","text":"<ul> <li>FAT32 or exFat formatted USB</li> <li>USB Cable(The one came with Genesis does not support data transfer, it only works for power.</li> <li>optional OTG cable so you don't have to use second port</li> </ul>  DISCLAIMER: Project Lunar made by ModMyClassic and at RetroArch/LibRetro we all love community works. We think Project Lunar is as valuable for Sega Genesis Mini."},{"location":"guides/install-genesismini/#downloading-and-installing","title":"Downloading and installing","text":"<p>Project Lunar version of RetroArch is built by the ModMyClassic team. It may have a different version than RetroArch's current version. As Project Lunar is updated, the RetroArch it contains may be close to the current version.</p> <p>Project Page: https://modmyclassic.com/project-lunar/</p>"},{"location":"guides/install-genesismini/#downloading","title":"Downloading","text":"<p>You can download a bundle with RetroArch, all the supported cores and all the assets by going ModMyClassic's GitHub page in here. There will be few options for download, you may want to select Zip Version in most cases. </p>"},{"location":"guides/install-genesismini/#installing","title":"Installing","text":"<p>Extract the downloaded archive file from the zip. There will be an executable file which called ProjectLunarUI.exe. After running the program, choose Install/Uninstall. The system will warn you that it has not detected a device. When prompted, accept interactive setup support. Then follow the steps on the screen. After completing the setup, plug your USB into the second port of your device. Then click Tools &gt; Get RetroArch and download the _ALLCORES.ZIP file from the page you went to. Thanks to this file, you will not have to download one by one. To transfer the cores, first turn off your device and remove your USB after making sure it is completely turned off. Plug in your USB to the computer and move the contents of the downloaded archive file into the project_lunar &gt; retroarch &gt; cores folder. Move your contents to project_lunar &gt; roms as well.</p> <p>Remove your USB from your computer and insert it into the second USB port while your device is turned off, or you can plug it in from the back of the device with an OTG cable, so you can plug the controller to the second USB port. When the system is turned on, you can click on the RetroArch icon and continue.</p>"},{"location":"guides/install-gnu/","title":"Installing RetroArch on Linux","text":"<p>This page contains descriptions of several officially-supported methods of installing RetroArch on systems running the GNU/Linux kernel.</p>"},{"location":"guides/install-gnu/#flatpak-suitable-for-most-linux-distributions","title":"Flatpak (suitable for most Linux distributions)","text":"<p>Flatpak is a distribution-agnostic packaging format with broad support throughout the Linux ecosystem. An official RetroArch flatpak is published in the Flathub repository, and can be installed in just three easy steps:</p>"},{"location":"guides/install-gnu/#installation","title":"Installation","text":"<ol> <li> <p>Ensure that Flatpak is enabled on your system by opening the    terminal and confirming that the following command exits with no errors:</p> <pre><code>flatpak --installations\n</code></pre> </li> <li> <p>Confirm that the Flathub repository is configured as a flatpak    remote, so that packages from it may be installed. You can    examine the flatpak remotes currently enabled on your system with this    terminal command (shown with default output):</p> <pre><code>ra@libretro:~$ flatpak remotes --columns=name,url,homepage\n\nName    URL                          Homepage\nflathub https://dl.flathub.org/repo/ https://flathub.org/\n</code></pre> <p>If Flathub is not among the remotes shown, this command will add it to your system:</p> <pre><code>sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo\n</code></pre> </li> <li> <p>Finally, install the RetroArch Flatpak. You have the option of making it    available to only the current user, with this command:</p> <pre><code>flatpak install -y --user --from https://dl.flathub.org/repo/appstream/org.libretro.RetroArch.flatpakref\n</code></pre> <p>Or for all users with this command:</p> <pre><code>sudo flatpak install -y --from https://dl.flathub.org/repo/appstream/org.libretro.RetroArch.flatpakref\n</code></pre> </li> </ol>"},{"location":"guides/install-gnu/#launching-the-flatpak","title":"Launching the Flatpak","text":"<p>RetroArch should now be listed in your app launcher and can also be executed from the terminal with the command:</p> <pre><code>flatpak run org.libretro.RetroArch\n</code></pre>"},{"location":"guides/install-gnu/#updates","title":"Updates","text":"<p>You should keep RetroArch updated by running this command periodically from the terminal:</p> <pre><code>flatpak update -y --app org.libretro.RetroArch\n</code></pre>"},{"location":"guides/install-gnu/#ubuntu-based","title":"Ubuntu(-based)","text":"<p>Ubuntu provides RetroArch as a Debian package in their official \"universe\" archive, which is maintained by the community with no promise of support or regular update schedule. Nevertheless, for the casual user of Ubuntu or a derivative distribution, it represents the simplest method for installing RetroArch. All that is required is to open a terminal and issue this single command:</p> <pre><code>sudo apt --upgrade --yes install retroarch\n</code></pre>"},{"location":"guides/install-gnu/#personal-package-archives-ppas","title":"Personal Package Archives (PPAs)","text":"<p>In an effort to improve the experience of RetroArch users on Ubuntu, official Ubuntu flavors, and all of the many Linux distributions based on Ubuntu (such as Linux Mint, Zorin OS, Pop! OS, elementary OS, etc.), the Libretro Team has long been committed to producing its own Debian packages as an alternative to the ones supplied by Ubuntu in the \"universe\" package archive. These packages are updated much faster to keep pace with each new RetroArch version, and compiled with a greater range of features than the Ubuntu package. In addition, Debian packages are created for the vast majority of popular Libretro cores, simplifying their installation and allowing them to be updated by the system package manager on the same schedule as all other package updates.</p> <p>These packages are built and distributed using the Launchpad platform operated by Canonical itself (the company which distributes Ubuntu), and split into two channels called \"Personal Package Archives\" (PPAs) that each cater to a specific type of user. By simply enabling one (or both) the PPAs listed below, users can seamlessly replace the Ubuntu RetroArch package on their system with those provided by the Libretro team.</p> <ul> <li> <p>Stable (recommended) \u2014 includes only official releases   (as announced on libretro.com / retroarch.com)</p> </li> <li> <p>Testing \u2014 builds of RetroArch and most Libretro cores from   the latest source code, for test new fixes and features as soon as they're   added</p> </li> </ul>"},{"location":"guides/install-gnu/#installation_1","title":"Installation","text":"<p>Follow these steps to enable the Libretro PPAs on your Ubuntu(-based) system.</p> <ol> <li> <p>In order to add PPAs to your system's package sources, some tools from the    official package repositories are needed. Open the terminal and run this    command to ensure they are installed:</p> <pre><code>sudo apt --update --yes install software-properties-common\n</code></pre> </li> <li> <p>Just a single command is needed to add a PPA to your system's package    sources.</p> <ul> <li> <p>To add the Stable PPA, run this command in your   terminal:</p> <pre><code>sudo add-apt-repository --yes --no-update --ppa libretro/stable\n</code></pre> </li> <li> <p>Or to add the Testing PPA, run:</p> <pre><code>sudo add-apt-repository --yes --no-update --ppa libretro/testing\n</code></pre> </li> </ul> </li> <li> <p>You can now install the RetroArch package from the PPAs with this command:</p> <pre><code>sudo apt --update --yes install retroarch\n</code></pre> </li> </ol>"},{"location":"guides/install-gnu/#verifying-ppa-package-installation","title":"Verifying PPA package installation","text":"<p>You can verify that the PPA package is installed (rather than the one from the official distribution repositories) with the <code>apt show retroarch</code> command (shown with expected output for the Testing PPA package):</p> <pre><code>ra@libretro:~$ apt show retroarch\nPackage: retroarch\nVersion: 1.21.0+r202408170734~bf25bd9149-179~ubuntu24.04.1\nPriority: optional\nSection: games\nMaintainer: Libretro Team &lt;libretro@gmail.com&gt;\nOriginal-Maintainer: Debian Games Team &lt;pkg-games-devel@lists.alioth.debian.org&gt;\nInstalled-Size: 25.2 MB\nProvides: retroarch-dbg\nDepends: fonts-dejavu-core, libretro-core-info, libegl1, libgl1, [\u2026]\nRecommends: libgamemode0, retroarch-assets\nSuggests: xdg-utils\nDownload-Size: 6,349 kB\nAPT-Sources: https://ppa.launchpadcontent.net/libretro/testing/ubuntu [\u2026]\nDescription: Simple frontend for the libretro library\n RetroArch is an open source, multi-platform frontend for the libretro API. It\n can be used as a modular multi-emulator system, game engine, media player and\n 3-D technical demonstration. These features are available through libretro\n cores.\n .\n It provides four built-in graphical user interface flavors: RGUI, XMB, Ozone\n and GLUI.\n\nNotice: There is 1 additional record. Please use the '-a' switch to see it\n</code></pre> <p>What to look for</p> <p>Look at the <code>APT-Sources:</code> line in the output. If one of the PPA packages is installed, its value will begin with <code>https://ppa.launchpadcontent.net/libretro/</code>.</p>"},{"location":"guides/install-gnu/#updates_1","title":"Updates","text":"<p>With this installation method, RetroArch updates will automatically be included with your system's regular package upgrades. However, you are always able to trigger an update specifically for RetroArch (if one is available) with the command:</p> <pre><code>sudo apt --update --yes upgrade retroarch\n</code></pre>"},{"location":"guides/install-gnu/#arch-linux-based","title":"Arch Linux(-based)","text":""},{"location":"guides/install-gnu/#installation_2","title":"Installation","text":""},{"location":"guides/install-gnu/#official-package","title":"Official package","text":"<p>Arch Linux provides a <code>retroarch</code> package for x86_64 systems in their official Extra repository. You can install it by searching for RetroArch by name in a graphical package manager like Octopi, or from the terminal with the command:</p> <pre><code>sudo pacman -S retroarch\n</code></pre>"},{"location":"guides/install-gnu/#arch-user-repository-aur-package","title":"Arch User Repository (AUR) package","text":"<p>A \"git\" package named <code>retroarch-git</code> which offers prerelease builds (similar to the Testing PPA described above) is also available in the AUR. As above, it can be installed from a package manager GUI or in the terminal using an \"AUR helper\" like <code>yay</code>, as in:</p> <pre><code>yay retroarch-git\n</code></pre> <p>Installing an AUR helper</p> <p>If you wish to install the AUR package but don't yet have an AUR helper installed on your system, the following shell \"one-liner\" will download, compile and install <code>yay</code> for you:</p> <pre><code>pacman -S --needed git base-devel &amp;&amp; git clone https://aur.archlinux.org/yay-bin.git &amp;&amp;\n  cd yay-bin &amp;&amp; makepkg -si\n</code></pre>"},{"location":"guides/install-gnu/#updates_2","title":"Updates","text":"<p>With this installation method, RetroArch updates will automatically be included with your system's regular package upgrades. However, you are always able to trigger an update specifically for RetroArch (if one is available) with the following commands.</p>"},{"location":"guides/install-gnu/#official-package_1","title":"Official package","text":"<pre><code>pacman -Syyuu retroarch\n</code></pre>"},{"location":"guides/install-gnu/#aur-package","title":"AUR package","text":"<pre><code>yay -Syyuu retroarch-git\n</code></pre>"},{"location":"guides/install-ios/","title":"Downloading, Installing and Running RetroArch on iOS","text":""},{"location":"guides/install-ios/#installation","title":"Installation","text":""},{"location":"guides/install-ios/#app-store","title":"App Store","text":"<p>As of May 15<sup>th</sup> 2024, RetroArch is available on the App Store worldwide.</p> <p>App Store : https://apps.apple.com/us/app/retroarch/id6499539433</p>"},{"location":"guides/install-ios/#sideloading","title":"Sideloading","text":"<p>You can still sideload the app onto your devices if you want. There are 4 ways of sideloading:</p> <ul> <li>Jailbreaking, not something covered here</li> <li>Build RetroArch from source using Xcode, as described here</li> <li>Using a third party tool such as AltStore that can install a built application by performing many of the same actions Xcode performs.</li> <li>Use Xcode with a developer account to load the IPA file directly, employing a signing tool like iOS App Signer</li> </ul> <p>Warning</p> <p>RetroArch or Libretro is not affiliated with AltStore or iOS App Signer in any way. You can also use alternative applications that can perform this function.</p>"},{"location":"guides/install-ios/#app-store-vs-sideloading","title":"App Store vs Sideloading","text":"<p>There are very few differences between the App Store and sideload builds. Installing via the App Store is easier, and sideload builds expire and need to be refreshed; for these reasons it is preferable to use the App Store version, and new users should start with that. However, there are a few reasons you may prefer to sideload:</p> <ul> <li>Additional cores. We only include cores we maintain in-house or whose upstream teams have given us explicit approval to distribute it via marketplaces. This includes most but not all cores.</li> <li>Dynamic Recompilation (a.k.a. dynarec or JIT). This will speed up some cores (e.g. ppsspp) and enable other cores (e.g. flycast).</li> </ul>"},{"location":"guides/install-ios/#downloading","title":"Downloading","text":"<p>Download one of the following IPA files depending on your needs:</p> iOS 12+ Stable Nightly iOS 9+ (reduced feature set; may not work on newer devices) Stable Nightly tvOS 13+ Stable Nightly <p>Most people should start with the Stable build. The Nightly build contains the latest commits available on GitHub, and the latest enhancements and features that are added daily. The Nightly build may not be as stable as the Stable version.</p> <p>It is possible to build RetroArch for older versions of iOS, though due to resource constraints these are not provided. See the instructions for building iOS to build it yourself.</p>"},{"location":"guides/install-ios/#installation-for-non-jailbreak-devices","title":"Installation for non-Jailbreak devices","text":"<p>In order to install the RetroArch on your non-Jailbreak device, we need to use a third-party application.</p> <p>You cannot add or update cores after installation as they are signed executables and can only be updated by updating and resigning the entire application. The IPA files linked above contain all of the available iOS/tvOS cores.</p>"},{"location":"guides/install-ios/#ios-app-signer","title":"iOS App Signer","text":"<ol> <li>Download and launch iOS App Signer, and add the downloaded <code>.ipa</code> file.</li> <li>Use an existing Apple Development certificate or sign up for a free or paid developer account.</li> <li>Ensure your device is registered. Refer to link for details.</li> <li>Create a provisioning profile for your device. Follow these instructions.</li> <li>Use reverse-domain formatting, e.g., <code>com.myname.retroArch</code> (replace 'myname' with your name).</li> <li>Click start and save the new <code>.ipa</code> file.</li> <li>Open Xcode, go to <code>Window -&gt; Devices and Simulators</code>, and select your device.</li> <li>In the right pane under 'INSTALLED APPS,' either drag and drop the new <code>.ipa</code> file or click '+' to navigate to the file.</li> </ol>"},{"location":"guides/install-ios/#altstore","title":"AltStore","text":"<ol> <li>Install and launch AltServer.</li> <li>Hold Option (macOS) or Left Shift (Windows) when clicking the AltServer icon to reveal new \"Sideload .ipa\u2026\" menu option</li> <li>Select the device you want to install RetroArch on (must be on the same Wi-Fi network as AltServer)</li> <li>Enter the email and password for your Apple ID</li> </ol>"},{"location":"guides/install-ios/#using-retroarch","title":"Using RetroArch","text":"<p>On an iPhone, you'll be presented with the \"GLUI\" touch interface; in versions after 1.19.1 on iPad the default switched to the \"Ozone\" interface. If you have an mFi controller, you can control both interfaces that way as well.</p> <p>On the Apple TV, you'll be shown the \"Ozone\" interface. You need to use an mFi controller with an Apple TV. The Siri Remote only functions as an LRUD interface; it will not work as a controller.</p> <p>When you first start RetroArch, you'll notice that you're missing images. You'll want to run the Online Updater:</p> <ul> <li>From the main menu, choose \"Online Updater\"</li> <li>Choose:</li> <li>Update Core Info Files</li> <li>Update Assets</li> <li>Update Databases</li> <li>Update Overlays</li> <li>Update GLSL Shaders</li> </ul>"},{"location":"guides/install-ios/#adding-content","title":"Adding Content","text":""},{"location":"guides/install-ios/#ios","title":"iOS","text":"<p>The easiest way to add content into RetroArch's sandbox is through the Apple Files app. Run RetroArch first and it will create several folders. After running RetroArch, open the Files app, and in Browse -&gt; On My iPhone, you should now see a RetroArch folder. You can place your content in any directory or subdirectory in that folder (including creating your own subdirectories). You can use the Files app to copy the content from iCloud to the folder on your phone.</p> <p>Additionally, in the <code>Load Content</code> menu, selecting <code>Open...</code> will open the system file chooser screen, and from there you can select files to copy. Copied files go into the <code>downloads</code> folder by default.</p>"},{"location":"guides/install-ios/#tvos","title":"tvOS","text":"<p>RetroArch on tvOS has a built-in webserver. While RetroArch is running, open a browser on your computer and open the URL that RetroArch displays. You can use the web-based UI to create subdirectories and upload or download files. You can place your content in any directory or subdirectory in that folder (including creating your own subdirectories).</p> <p>Additionally, on versions newer than 1.19.1, there is a built-in WebDAV server that listens on port 8080. You can connect to it using Finder on macOS by choosing \"Connect to Server...\" in the \"Go\" menu (\u2318-K) and entering <code>http://appletv.local:8080</code>, replacing \"appletv.local\" with the name of your AppleTV or its IP address.</p> <p>Warning</p> <p>tvOS does not provide apps with a persistent storage area; instead it allows for up to 500kb meant for configuration data. The disk space shown through the web UI is a cache space. If the OS needs to reclaim disk space, it will delete files from that cache space without warning. This includes state and saves! When this happens, you will immediately see that the appearance of RetroArch is wrong, as the assets will need to be re-downloaded.</p>"},{"location":"guides/install-ios/#jit","title":"JIT","text":"<p>Several cores are improved by enabling JIT, while others will not work at all without it. The only way to enable JIT is to convince the OS that RetroArch is being debugged. One way of doing this is to build with Xcode, launch the app from Xcode with the debugger attached, and leave Xcode running. Another way is to use AltServer to enable JIT on RetroArch after it has been opened (but before a core has been loaded).</p> <p>Note: JIT is not enabled on the App Store version of RetroArch. Apple doesn't allow apps to run with JIT. Some core will not function as intended.</p>"},{"location":"guides/install-lakka/","title":"Downloading, Installing and Updating Lakka for PC.","text":""},{"location":"guides/install-lakka/#what-is-it","title":"What is it?","text":"<p>Lakka is the official Linux distribution of RetroArch and the libretro ecosystem. Each game system is implemented as a libretro core, while the frontend RetroArch takes care of inputs and display. This clear separation ensures modularity and centralized configuration. Lakka is a lightweight Linux distribution that transforms a small computer into a full blown retrogaming console.</p>  DISCLAIMER Lakka is still under heavy development. In its current state, the project allows you to play most games on most platforms. However, expect bugs, missing features or features not working as intended, and hardware that is yet to be supported. If you find a bug, you can declare it in our tracker, unless already reported."},{"location":"guides/install-lakka/#prerequisites","title":"Prerequisites","text":"<ul> <li>SD card or USB You need a USB or SD Card to write the installation image.</li> <li>Flashing Software You can use either <code>Etcher</code> or <code>Win32 disk imager</code>.</li> </ul>"},{"location":"guides/install-lakka/#download-lakka","title":"Download Lakka","text":"<p>Click here to get the 64bit version or click here to get the 32bit version.</p> <p>Please note that due to the wide variety of PC hardware, Lakka may not work on your hardware. Those image are USB images, not CD or DVD images, those installation mediums are unsupported. Also, we don't support virtualization and dualboot. Lakka is meant to be installed on real hardware.</p>"},{"location":"guides/install-lakka/#flashing-lakka-image","title":"Flashing Lakka Image","text":"<p>The following softwares are fine however you can use any other software you want. The following softwares are not related to RetroArch or Libretro in any way. You must act consciously when providing or using these softwares.</p>"},{"location":"guides/install-lakka/#etcher","title":"Etcher","text":"<p>Etcher is a free and open-source utility used for burning image files such as .iso and .img files, as well as zipped folders to create live SD cards and USB flash drives.</p> <p>\u2022 Run Etcher \u2022\u00a0Select <code>Lakka Image</code> \u2022\u00a0Select USB drive \u2022\u00a0Click Flash</p>"},{"location":"guides/install-lakka/#win32-disk-imager","title":"Win32 Disk Imager","text":"<p>This program is designed to write a raw disk image to a removable device or backup a removable device to a raw image file.</p> <p>\u2022 Click on the folder icon \u2022\u00a0Select the image file \u2022\u00a0Select drive letter UNDER DEVICE \u2022 Click Write</p>"},{"location":"guides/install-lakka/#installation","title":"Installation","text":"<p>Lakka is still under heavy development. In its current state, the project allows you to play most games on most platforms. However, expect bugs, missing features or features not working as intended, and hardware that is yet to be supported.</p>"},{"location":"guides/install-lakka/#the-live-usb-mode","title":"The Live USB Mode","text":"<p>Lakka can be installed on an USB key, and be booted in Live Mode on any PC that supports Lakka\u2019s requirements. This Live Mode is persistent: all changes will be saved to the key, safely storing games within the USB.</p> <p>Unknown Sources To avoid compromising the safety of your device, always use applications provided through our official channels.</p> <ol> <li>Insert your USB drive into your computer.</li> <li>Boot from USB.<ol> <li>You can use Boot Device Options by pressing the key specified by your motherboard manufacturer.</li> <li>You can choose to boot from USB in the BIOS. The above options may vary depending on your motherboard model.</li> </ol> </li> <li>Wait during the <code>bootloader phase</code>.</li> </ol> <p>This will start the Lakka operating system via USB. This Live Mode is persistent: all changes will be saved to the key, safely storing games within the USB. You will be able to check if Lakka works on your hardware, without altering your PC\u2019s hard drive or partitions. Certain settings and configurations may not be saved in spite of the persistence property.</p>"},{"location":"guides/install-lakka/#full-setup","title":"Full Setup","text":"<p>Installing Lakka on your device is as simple as installing any other operating systems. You may experience unexpected errors during setup. Lakka is still under construction.</p> <ol> <li>Insert your USB drive into your computer.</li> <li>Boot from USB.<ol> <li>You can use Boot Device Options by pressing the key specified by your motherboard manufacturer.</li> <li>You can choose to boot from USB in the BIOS. The above options may vary depending on your motherboard model.</li> </ol> </li> <li>Type <code>installer</code> or <code>live</code></li> <li>Select Install Lakka.</li> <li>Use the up/down arrows to select the drive to install. Observe the warnings on the screen. If you continue the targeted drive will be wiped out.</li> <li>Select Yes in confirmation alerts.</li> <li>After the installation, you will return to the Main menu. Remove the USB and select Reboot.</li> </ol> <p>Your computer will launch Lakka on the next Boot.</p>"},{"location":"guides/install-lakka/#conclusion","title":"Conclusion","text":"<p>Lakka is still under heavy development. In its current state, the project allows you to play most games on most platforms. More information can be found in the Lakka documents. You may also want to check the Official Forum.</p>"},{"location":"guides/install-libnx/","title":"Downloading, Installing and Updating RetroArch for Switch","text":"WARNING You need to have Atmosph\u00e8re custom firmware to run RetroArch on your Switch. Hardware or software changes on your device may damage your device."},{"location":"guides/install-libnx/#prerequisites","title":"Prerequisites","text":"<p>Neither RetroArch nor LibRetro support or recommend that your device run CFW.</p> <ul> <li>Atmosph\u00e8re <sup>1</sup></li> <li>FAT32 formatted SD card</li> </ul>"},{"location":"guides/install-libnx/#downloading-and-installing","title":"Downloading and installing","text":"<p>There are multiple ways of downloading RetroArch for your Switch.</p>"},{"location":"guides/install-libnx/#using-the-stable-bundle-recommended","title":"Using the stable bundle (recommended)","text":"<p>You can find a bundle with RetroArch, all the cores and all the assets here.</p> <p>Just extract the archive to the root of your SD card to install or update your copy of RetroArch (overwrite any existing file).</p>"},{"location":"guides/install-libnx/#using-the-nightlies-andor-the-online-updater-advanced-users","title":"Using the nightlies and/or the online updater (advanced users)","text":"<p>If you don't want to download all cores at once, you can go here and only pick the ones you want. Put the downloaded NROs in <code>retroarch/cores</code> on your SD card. You can run them directly using the homebrew menu.</p> <p>Alternatively, you can download only one core and use the Online Updater inside of RetroArch to download or update additional cores later.</p>"},{"location":"guides/install-libnx/#running-retroarch-using-title-takeover","title":"Running RetroArch using title takeover","text":"<p>The preferred way of running RetroArch is to use Atmosph\u00e8re's title takeover feature. This allows you to (temporarily) replace a game with the homebrew loader, which will then be used to load RetroArch. Make sure to use the latest version of Atmosph\u00e8re before continuing.</p>  WARNING You need at least one title on the console (whether it's a digitally puchased game or a demo or a cartridge game or even an homebrew NSP). If you can pick an up to date game that's better as you won't be nagged everytime you run it. <p>Atmosph\u00e8re now contains everything needed to run homebrews out of the box. To do so, simply run any game while holding the R key. Make sure to hold the key until you can actually see the homebrew menu. Select RetroArch in the list to start!</p> <p>If you wish to change the key, you can edit <code>/atmosphere/loader.ini</code> and change <code>override_key</code> here. You can add a <code>!</code> in front of the key to flip the condition (\"run homebrew if the key is pressed\" versus \"run homebrew if the key isn't pressed\").</p>"},{"location":"guides/install-libnx/#updating","title":"Updating","text":"<p>Updating RetroArch is the same as installing it, download a higher or lower version (in this case, downgrade) than the version you have and overwrite existing files.</p>"},{"location":"guides/install-libnx/#glossary","title":"Glossary","text":""},{"location":"guides/install-libnx/#atmosphere","title":"\"Atmosph\u00e8re\"","text":"<pre><code>Atmosph\u00e8re is a work-in-progress customized firmware for the Nintendo Switch.\n</code></pre>"},{"location":"guides/install-libnx/#nro","title":"\"NRO\"","text":"<pre><code>An NRO file is an executable file used by the Nintendo Switch. It contains compiled code for an application or game. NRO files may also store assets for Homebrew Launcher, such as a icon and metadata.\n</code></pre> <ol> <li> <p>https://github.com/Atmosphere-NX/Atmosphere \u21a9</p> </li> </ol>"},{"location":"guides/install-ludo/","title":"Downloading, Installing and Updating Ludo for PC.","text":""},{"location":"guides/install-ludo/#what-is-it","title":"What is it?","text":"<p>Ludo is an Emulator Frontend able to run retro video games. Ludo does not emulate the consoles itself, but does it through emulator plugins called libretro cores. Libretro cores are well known emulators (like Snes9x or Genesis Plus GX or PCSX) stripped from their user interface. They contain only console specific logic.</p>  DISCLAIMER Ludo is still under heavy development. In its current state, the project allows you to play most games on most platforms. However, expect bugs, missing features or features not working as intended, and hardware that is yet to be supported. If you find a bug, you can declare it in our tracker, unless already reported."},{"location":"guides/install-ludo/#prerequisites","title":"Prerequisites","text":"<ul> <li>GLFW 3.3</li> <li>OpenGL &gt;= 2.1</li> <li>OpenAL</li> </ul>"},{"location":"guides/install-ludo/#download-ludo","title":"Download Ludo","text":"<p>Click here to get the latest version.</p> <p>Please note that due to early development phase, Ludo may not work on your OS as expected. In most scenarios, Ludo works as intended.</p>"},{"location":"guides/install-ludo/#ludo","title":"Ludo","text":"<p>Ludo is a minimalist frontend for emulators. Ludo is part of LibRetro. Separating the frontend from the emulation logic has the following advantages:</p> <ul> <li>Frontend developers only have to code the user interface once</li> <li>Developing a new frontend functionality can benefit all the emulators at once</li> <li>Emulator developers can benefit from a mature user interface without coding it</li> <li>Gamers can configure emulators all at once</li> <li>The user interface, configuration, and storage are consistent across emulators</li> </ul> <p>From the gamer perspective, Ludo is a universal retro game browser and player. It offers a gaming experience optimized for TV and gamepads, but can also be used on a traditional PC with a keyboard.</p> <p>Currently, Ludo can run on the following platforms:</p> <ul> <li>Windows 64-bit (Tested on Windows 10)</li> <li>Max OS X 64-bit</li> <li>Linux 64-bit</li> <li>Linux on Raspberry Pi 32-bit</li> </ul> <p>There is also an Operating System version of Ludo called LudOS. It looks and behaves exactly the same, but can be burnt to a USB drive or an SD card to recreate a video games console experience. You can setup LudOS on a dedicated TV box to enjoy gaming from your couch. You can also boot it off USB on any laptop in a perfectly portable way.</p>"},{"location":"guides/install-ludo/#features","title":"Features","text":"<p>Ludo's User Interface has the following functionalities:</p> <ul> <li>Gamepad driven: everything can be done through the gamepad instead of the mouse</li> <li>TV optimized: looks nice on a wide screen</li> <li>Controller auto configuration when plugged</li> <li>Automatic configuration of literally everything</li> <li>Game collection scanner for generating playlists with thumbnails</li> <li>Video filters through simple shaders</li> <li>Taking game screenshots</li> <li>Saving/Loading game state anytime, organized by date with screenshots</li> <li>Emulator specific settings</li> <li>Soft-patching .ips and .ups</li> </ul>"},{"location":"guides/install-ludo/#focus-on-playing","title":"Focus on playing","text":"<p>Ludo's user interface is distraction free and configuration is always optional.</p> <p></p> <p>Scan your games and browse your collection categorized by system with playlists showing in-game screenshots.</p> <p></p> <p>A contextual menu gives you access to actions and quick save / quick load anytime.</p> <p></p> <p>We chose the best emulators for the job, configured with sane defaults guaranteeing a balance of speed and accuracy.</p> <p></p>"},{"location":"guides/install-ludo/#ludo-as-an-operating-system","title":"Ludo as an Operating System","text":"<p>Ludo also exists in the form of an Operating System called LudOS. It behaves and looks exactly the same and can be installed directly on a TV Box to recreate a game console experience.</p> <ul> <li>PC 64bit</li> <li>Raspberry Pi \u2154</li> <li>Raspberry Pi 4</li> </ul> <p>The OS version of Ludo, LudOS, adds these OS centric functionalities:</p> <ul> <li>Flash-able using Etcher</li> <li>Auto expanded filesystem on first boot</li> <li>Connecting to Wi-Fi networks, with a virtual keyboard</li> <li>Robust monolithic updates for the OS</li> <li>Adding games through Windows Share protocol or SSH</li> <li>Controlling services like SSH, Samba, Bluetooth</li> </ul>"},{"location":"guides/install-ludo/#frequently-asked-questions","title":"Frequently Asked Questions","text":"<p>You may have a lot of questions or ideas about Ludo, some of which we tried to answer below. Apart from that, you can also ask your questions via Discord.</p>"},{"location":"guides/install-ludo/#how-is-ludo-different-from-retroarch","title":"How is Ludo different from RetroArch?","text":"<p>Ludo will stay smaller than RetroArch by only implementing the core features and by targeting less platforms. By not adding advanced functionalities we aim to deliver a stable frontend for beginner users on Windows, Mac OSX and Linux. Some design choices are different, for example we support less cores, and choose cores for the user. The cores are packaged in the frontend so no additional step is required to launch a game.</p>"},{"location":"guides/install-ludo/#how-is-ludo-similar-to-retroarch","title":"How is Ludo similar to RetroArch?","text":"<p>As RetroArch, Ludo is a libretro frontend, so the way of communicating with the emulators is the same. Same cores, similar UI patterns, gamepad driven UI, same game thumbnails, mostly the same game database, same terminology. I think we can also say same developers, as I am an important contributor of the libretro team, and all the people who provided me with help are also member of the libretro community. It definitely shares the same values.</p>"},{"location":"guides/install-ludo/#why-not-implementing-ludo-as-a-menu-driver-in-retroarch","title":"Why not implementing Ludo as a menu driver in RetroArch?","text":"<p>To keep a software stable on a number of different platforms, it is important to keep a small codebase with a good test coverage. It is also important to not introduce changes at a high rate. RetroArch is an extremely active project and has a growing codebase that makes it harder to reach stability. Also, RetroArch is a very powerful and sophisticated frontend, and one of the common criticism is that it exposes too many configuration options for the average retro gamer. Implementing Ludo as a menu driver of RetroArch would solve none of these issues.</p>"},{"location":"guides/install-ludo/#does-ludo-offer-a-better-scanning-method-compared-to-retroarch","title":"Does Ludo offer a better scanning method compared to RetroArch?","text":"<p>No, the scanner logic is basically the same and Ludo supports even less ROM formats. CDs are scanned based on file name instead of serial number. Ludo's scanner faster for this reason and because it leverages goroutines.</p>"},{"location":"guides/install-ludo/#can-you-add-feature-x-to-ludo","title":"Can you add feature X to Ludo?","text":"<p>The answer is likely to be no, as we're trying to keep the code small, only bugfixes are really welcome. We encourage you to fork Ludo and add the feature yourself. It should be fairly easy given the scope of the project. If you are able to author a very useful improvement with a minimum of changes we might merge your change.</p>"},{"location":"guides/install-ludo/#emulated-consoles","title":"Emulated consoles","text":"<p>Ludo includes the following libretro cores (emulators):</p> <p>bluemsx fbneo fceumm gambatte genesis_plus_gx handy mednafen_ngp mednafen_pce_fast mednafen_psx mednafen_saturn mednafen_supergrafx mednafen_vb mednafen_wswan mgba np2kai o2em pcsx_rearmed picodrive pokemini prosystem snes9x stella vecx virtualjaguar</p> <p>Ludo can run games from these consoles:</p> <p>Atari 5200, Atari 7800, Atari Jaguar, Atari Lynx, GCE Vectrex, MSX, MSX2, Various Arcade Games, Game Boy, Sega SG-1000, Sega Game Gear, Sega Master System, Sega Genesis / Mega Drive, Sega 32X, Sega CD, Sega Saturn, Nintendo NES, Super Nintendo / Super Famicom, Nintendo Virtual Boy, Nintendo Game Boy, Nintendo Game Boy Advance, NEC PC Engine, NEC PC Engine CD, NEC PC-98, NEC PC-FX, Sharp X68000, Sony PlayStation, 3DO</p>"},{"location":"guides/install-ludo/#conclusion","title":"Conclusion","text":"<p>Ludo is still under heavy development. In its current state, the project allows you to play most games on most platforms. More information can be found in the Ludo documents.</p>"},{"location":"guides/install-macos/","title":"Downloading, Installing and Updating RetroArch for macOS","text":""},{"location":"guides/install-macos/#downloading-and-installing","title":"Downloading and installing","text":"<p>Download one of the .dmg files from here:</p> <ul> <li>Stable Metal</li> <li>Nightly Metal</li> <li>Stable non-Metal</li> <li>Nightly non-Metal</li> </ul> <p>The install follows the standard process of opening the .dmg file and copying RetroArch.app into the Applications folder.</p>"},{"location":"guides/install-macos/#metal-vs-non-metal-builds","title":"Metal vs non-Metal builds","text":"<p>Most people should start with the Metal build. The Metal has more features, and is a Universal binary. The non-Metal build is x86_64-only and only includes the OpenGL graphics driver. However, the Metal build only supports macOS 10.13+, whereas the non-Metal build supports 10.9+.</p> <p>It is possible to build RetroArch for older versions of macOS, though due to resource constraints these are not provided. See the instructions for building on macOS to build it yourself.</p>"},{"location":"guides/install-macos/#stable-vs-nightly-builds","title":"Stable vs nightly builds","text":"<p>Most people should start with the Stable build. The Nightly build contains the latest commits available on GitHub, and the latest enhancements and features that are added daily. The Nightly build may not be as stable as the Stable version.</p>"},{"location":"guides/install-macos/#updating","title":"Updating","text":"<p>There are no automatic updates in RetroArch. When updating, simply download and open the new .dmg file, and copy RetroArch.app into Applications. When prompted, choose to overwrite the old version.</p>"},{"location":"guides/install-ps2/","title":"Downloading and Installing RetroArch for PlayStation 2","text":"DISCLAIMER You currently need the have a way to execute homebrew to run RetroArch on your PlayStation 2."},{"location":"guides/install-ps2/#prerequisites","title":"Prerequisites","text":"<p>This is probably the most straightforward way to install RetroArch.</p> <ul> <li>FreeMCBoot</li> </ul>"},{"location":"guides/install-ps2/#downloading-and-installing","title":"Downloading and installing","text":""},{"location":"guides/install-ps2/#downloading","title":"Downloading","text":"<p>Info</p> <p>Nightly files will give you the latest developments. This is sometimes dangerous and sometimes innovative. We will use the Stable version and recommend it.</p> <p>You can download a bundle with Stable version of RetroArch, all the supported cores and all the assets by clicking here. You can download Nightly version of RetroArch by clicking here.</p>"},{"location":"guides/install-ps2/#installing","title":"Installing","text":"<p>Installation is also very simple. Just create <code>RetroArch</code> folder where put all the cores (.elf). Copy this folder into a USB stick. Finally, use your favorite file explorer (usually <code>UlaunchELF</code>) to navigate to <code>mass0:\\</code>, then enter in <code>RetroArch</code> folder and launch the core you wish.</p>"},{"location":"guides/install-ps3/","title":"Downloading and Installing RetroArch for PlayStation 3","text":"DISCLAIMER You need to have any-CFW(Rebug, Ferrox etc.) custom firmware to run RetroArch on your PlayStation 3. Hardware or software changes on your device may damage your device."},{"location":"guides/install-ps3/#prerequisites","title":"Prerequisites","text":"<p>This is probably the most straightforward way to install RetroArch.</p> <ul> <li>FAT32 formatted USB, It should be partitioned as MBR rather than GPT.</li> <li>any-CFW</li> </ul>"},{"location":"guides/install-ps3/#downloading-and-installing","title":"Downloading and installing","text":"<p>There are multiple ways of downloading RetroArch for your Playstation 3.</p>"},{"location":"guides/install-ps3/#download-the-correct-file","title":"Download the correct file","text":"<p>There are two types of CFW files. One of them is <code>CEX</code> and the other is <code>DEX</code>. CFW devices with <code>CEX</code> systems are more specific to the end user. On the other hand the <code>DEX</code> version is more for developers. You can use RetroArch in two ways and benefit from the same features. Always check which version of your CFW you have and download the correct file.</p> <p>You can find a bundle with RetroArch, all the cores and all the assets for <code>CEX</code> and <code>DEX</code> by clicking here and scroll down to the PlayStation 3 section.</p>"},{"location":"guides/install-ps3/#installing","title":"Installing","text":"<p>Installation is also very simple. Just extract the archive to the root of your USB. Put your USB to right USB port. Use the CFW package installer to select and install RetroArch's pkg file. You can watch the short video Demonstration by clicking on the image below.</p>"},{"location":"guides/install-psc/","title":"Downloading and Installing RetroArch for PlayStation Classic","text":"<p>You currently need the have a way to execute homebrew to run RetroArch on your PlayStation Classic.</p>"},{"location":"guides/install-psc/#prerequisites","title":"Prerequisites","text":"<ul> <li>FAT32 or exFat formatted USB2.0(some USB 3.0 are working as well)</li> <li>USB needs to be renamed as \"SONY\"</li> </ul>  DISCLAIMER Project Eris made by ModMyClassic and RetroBoot made by u/genderbent, at RetroArch/LibRetro we all love community works. We think Project Eris and RetroBoot is as valuable for PlayStation Classic.  DISCLAIMER The installation steps or dowloading file parts of the project may differ over time."},{"location":"guides/install-psc/#downloading-and-installing","title":"Downloading and installing","text":"<p>Project Eris version of RetroArch is built by the ModMyClassic team. It may have a different version than RetroArch's current version. As Project Eris is updated, the RetroArch it contains may be close to the current version.</p>"},{"location":"guides/install-psc/#downloading","title":"Downloading","text":"<p>These two versions may contain different contents from each other. While the main purpose of Project Eris may be the Ultimate PlayStation Classic, RetroBoot runs RetroArch directly.</p>"},{"location":"guides/install-psc/#project-eris","title":"Project Eris","text":"<p>You can download a bundle with RetroArch, all the supported cores and all the assets by going ModMyClassic website in here. There will be few options for download, you may want to select Full Package in most cases. </p>"},{"location":"guides/install-psc/#retroboot","title":"RetroBoot","text":"<p>You can find more details at u/genderbent's post down below. https://www.reddit.com/r/PlaystationClassic/comments/g8ht0y/release_retroboot_11_the_lightweight_alternative/?utm_source=reddit&amp;utm_medium=usertext&amp;utm_name=PlaystationClassic&amp;utm_content=t3_fd652s</p>"},{"location":"guides/install-psc/#installing","title":"Installing","text":"<p>Installation may sound complicated but it's not. Format your USB to <code>exFat</code> or <code>FAT32</code> and rename as <code>SONY</code>. Transfer all files in Package to USB. Make sure your device fully power-off, you should remove power cable, then plug your USB to second port or use OTG cable then plug into power socket. Plug back power cable, you will see Power led will turn Amber then press power button. Follow on screen instruction if you use Project Eris, RetroBoot will boot directly RetroArch.</p>"},{"location":"guides/install-psp/","title":"Downloading and Installing RetroArch for PlayStation Portable","text":"<p>You currently need to have a custom firmware called PRO-C to run RetroArch on your PlayStation Portable. Hardware or software changes on your device may damage your device. PRO-C must be running before running RetroArch, if you run RetroArch before running PRO-C, the device will say the executable is corrupted..</p>"},{"location":"guides/install-psp/#prerequisites","title":"Prerequisites","text":"<ul> <li>Pro CFW(latest version)<sup>1</sup></li> </ul>"},{"location":"guides/install-psp/#downloading-installing-and-updating","title":"Downloading, Installing and Updating","text":""},{"location":"guides/install-psp/#downloading","title":"Downloading","text":"<p>You can download a bundle with the Stable version of RetroArch, all the supported cores and all the assets by clicking here. You can download the Nightly version of RetroArch with all the same extras by clicking here.</p> <p>Info</p> <p>Nightly builds will give you the latest development changes. This is sometimes unstable! We will use the Stable version for this guide.</p>"},{"location":"guides/install-psp/#installing","title":"Installing","text":"<p>Installation is also very simple. Just create a <code>RetroArch</code> folder under <code>PSP/Game</code> directory on your Memory Stick and transfer the archive files to the <code>PSP/Game/RetroArch</code> folder, then go to <code>Memory Stick\u2122</code> under Game press X, and then select RetroArch. Press X again to open.</p>"},{"location":"guides/install-psp/#updating","title":"Updating","text":"<p>Download the latest version and extract it into 'PSP/Game/RetroArch' on the Memory Stick. Accept when prompted to overwrite.</p> <ol> <li> <p>https://code.google.com/archive/p/procfw/downloads \u21a9</p> </li> </ol>"},{"location":"guides/install-psv/","title":"Downloading and Installing RetroArch for PlayStation Vita","text":"<p>You need to have custom firmware(HENkaku) to run RetroArch on your PlayStation Vita. Hardware or software changes on your device may damage your device. </p>"},{"location":"guides/install-psv/#prerequisites","title":"Prerequisites","text":"<p>This is probably the most straightforward way to install RetroArch.</p> <ul> <li>HENkaku (latest version)<sup>1</sup></li> <li>VitaShell<sup>2</sup></li> </ul>"},{"location":"guides/install-psv/#downloading-and-installing","title":"Downloading and Installing","text":"<p>We're gonna download two files to get the full experience. One of these files is the <code>.vpk</code> version of RetroArch and the other is the <code>data</code> package with assets. RetroArch.vpk by itself does not have any important assets. Thus, it is lighter than other versions. We will need the data file for the assets.</p>"},{"location":"guides/install-psv/#downloading","title":"Downloading","text":"<p>Info</p> <p>A Piglet/ShaccCg Wrapper Library for OpenGL ES 2.0 Support on the Vita. RetroArch Piglet is still WIP and not finished however you can try it but you will need PIB-Configuration-Tool.</p> <p>You can download a stable RetroArch by clicking here. If you want to install the Nightly version, you can also use this link. Nightly files will give you the latest developments. This is sometimes dangerous and sometimes innovative. We will use the Stable version and recommend it. You can download <code>RetroArch's data</code> file from this link or nightly.</p> <p>Info</p> <p>Nightly files will give you the latest developments. This is sometimes dangerous and sometimes innovative. We will use the Stable version and recommend it.</p>"},{"location":"guides/install-psv/#installing","title":"Installing","text":"<p>Connect your PS Vita with your PC via VitaShell. Move your <code>RetroArch.vpk</code> to root of your sdcard. Disconnect PS Vita from your PC. Enter the <code>ux0:</code> directory, you will see a lot of files, scroll down to the bottom until you see <code>RetroArch.vpk</code>. Press your action key, it can be O or X. You may receive a warning asking for the reliability of the file you downloaded, if you downloaded this file from our channels, you can accept and continue.</p> <p>Once the installation is complete, run the RetroArch once and you will see that Fonts and Images are missing. Close <code>RetroArch</code> and connect PS Vita to PC with <code>VitaShell</code>. Once you have made the connection, move the files of the downloaded <code>data.7z</code> archive to <code>ux0:/data/retroarch/</code>. After successful file transfers, close the application and run RetroArch again.</p> <p>Info</p> <p>If you want higher resolution you could use Sharpscale<sup>3</sup> plugin.</p> <ol> <li> <p>https://github.com/henkaku \u21a9</p> </li> <li> <p>https://github.com/TheOfficialFloW/VitaShell \u21a9</p> </li> <li> <p>https://github.com/cuevavirus/Sharpscale \u21a9</p> </li> </ol>"},{"location":"guides/install-steamlink/","title":"Downloading and Installing RetroArch for Steam Link","text":"<p>Steam Link build isn't in automated build due both SteamLink SDK and LibRetro changes. However you can download here for decent version. The download and installation process is as follows, and may change in the future. Threads, alsa, pulse, neon and shaderpipeline are disabled, RGUI theme is pre-configured and most Cores installed into the root folder for full efficiency.</p>"},{"location":"guides/install-steamlink/#prerequisites","title":"Prerequisites","text":"<p>This is probably the most straightforward way to install RetroArch.</p> <ul> <li>FAT32 formatted USB</li> </ul>"},{"location":"guides/install-steamlink/#download","title":"Download","text":"<p>You can find a cores bundle with RetroArch by clicking here and scroll down until you see the Steam Link section.</p>"},{"location":"guides/install-steamlink/#getting-usb-ready","title":"Getting USB Ready","text":""},{"location":"guides/install-steamlink/#setting-up-retroarch","title":"Setting up RetroArch","text":"<p>Getting RetroArch ready to install is very simple. Create the file structure in the root directory of your USB as follows:</p> <p>steamlink/apps/</p> <p>Unzip the <code>RetroArch.zip</code>,  move the <code>RetroArch</code> folder into the <code>apps</code> folder we just created.</p>"},{"location":"guides/install-steamlink/#content-management","title":"Content Management","text":"<p>Transferring files to Steam Link can be a bit tedious. You can put your contents inside the <code>Content</code> folder in the <code>RetroArch</code> folder, however our goal is to make this process more sustainable. In this case SSH or USBmount will help us.</p>"},{"location":"guides/install-steamlink/#ssh","title":"SSH","text":"<p>In order to use an SFTP connection with SSH, we must first enable SSH. It's easy to enable SSH on your Steam Link. To do this, go to <code>steamlink</code> folder and create two nested folders first create the <code>Config</code> directory then enter it and create the <code>System</code> directory there. The directory structure should be as follows;</p> <p>steamlink/config/system/</p> <p>Then, enter the <code>System</code> directory and create an empty text file named <code>enable_ssh.txt</code>.</p> <p>Within this, create a blank text file, and label it enable_ssh.txt. The final directory structure should be as follows:</p> <p>steamlink/config/system/enable_ssh.txt </p>"},{"location":"guides/install-steamlink/#usbmount","title":"USBmount","text":"<p>USBmount is an alternative way to connect <code>/mnt/disk</code>. You can find more detailed information in the link below.</p> <p>https://steamcommunity.com/app/353380/discussions/1/152393186490496699/</p> <p>Put your USBmount folder into <code>steamlink/apps/</code></p> <p>RetroArch is not affiliated with the above link this link may change in the future or may not be original, this subject may vary.</p>"},{"location":"guides/install-steamlink/#installation","title":"Installation","text":"<p>After completing the above operations, you should have a directory structure like the one below. Repeat the above steps until you reach the final result.</p> steamlink apps retroarch ... config system enable_ssh.txt <p>Format your USB to FAT32 type for fresh install. Move the <code>steamlink</code> folder we just created into your USB root. Unplug your USB and make sure your SteamLink is completely turned off by unplugging the power cord. Plug your USB into the first USB port, and then plug in the power cable. When Steam Link boots, RetroArch structure will be read, and RetroArch will be installed. Remove the USB after you see the RetroArch logo on the home screen. You can run the application by pressing the RetroArch logo.</p>"},{"location":"guides/install-steamlink/#content-transfer","title":"Content Transfer","text":"<p>We can transfer our content with SSH or USBmount we have previously configured.</p>"},{"location":"guides/install-steamlink/#ssh_1","title":"SSH","text":"<p>Find out the IP address that SteamLink receives, which you can learn from your router or SteamLink network settings. Create an SFTP connection with your trusted FTP tool. SteamLink SSH username is <code>root</code> and password is <code>steamlink123</code>, 21 for FTP and 22 for SFTPthe sample scenario for this is as follows. It may be different(ip address) in your case. RetroArch is not related to the specified applications and cannot be held responsible.</p> <p>FileZilla</p> Host Username Passoword Port 192.168.1.5 root steamlink123 22 <p>Go to root folder and open <code>apps</code> folder, you will see RetroArch folder in there. Open it and move your contents to <code>contents</code> folder.</p>"},{"location":"guides/install-steamlink/#usbmount_1","title":"USBmount","text":"<p>Install USBmount the same way we install RetroArch. Remove the <code>RetroArch</code> folder from the <code>apps</code> directory before installation. Otherwise it will re-install on every boot.</p> <p>After completing the installation, create a folder on your USB and move your contents. Then plug the USB into your SteamLink and run the installed <code>USBmount</code> application.</p>"},{"location":"guides/install-windows-2000-me-98SE/","title":"Downloading, Installing and Updating RetroArch for Windows 2000 / ME / 98SE operating systems.","text":"<p>You must have <code>WinRAR 4.11 (32-bit)</code> in order to unzip <code>RetroArch.7z</code> in Windows 2000.</p>"},{"location":"guides/install-windows-2000-me-98SE/#downloading-and-installing","title":"Downloading and installing","text":"<p>There are multiple ways of downloading RetroArch for your Windows 2000 / ME / 98SE operating systems. <code>Installer</code> or <code>Download</code> in here both options provide you with the lastest RetroArch, the only difference is that one is a self extracting installer, and the other one an archive you have to extract manually.</p>"},{"location":"guides/install-windows-2000-me-98SE/#downloading","title":"Downloading","text":"<p>You can either choose <code>Nightlies</code> or <code>Stable</code> bundle, you can find a bundle with RetroArch, all the cores and all the assets here, and download <code>RetroArch.7z</code> or <code>RetroArch-MSVC05-Win32-setup.exe</code>.</p> <p>For Nightlies here - pick the latest version(based on date), and download <code>...RetroArch.7z</code> or <code>RetroArch-...-msvc2005-x86-setup.exe</code>.</p> <p>Info</p> <p>You can download <code>RetroArch_cores.7z</code> file to download only Core files.</p>"},{"location":"guides/install-windows-2000-me-98SE/#installing","title":"Installing","text":"<p>If you pick the 7z archive package, extract it in a folder that doesn't require administrator permissions such as C:\\Users\\yourusername\\RetroArch. Don't extract it to Program Files or your Windows folder.</p> <p>If you pick the executable file, double click exe file and follow the instructions on-screen to install...</p>"},{"location":"guides/install-windows/","title":"Downloading, Installing and Updating RetroArch for Windows 7 and Later","text":""},{"location":"guides/install-windows/#downloading","title":"Downloading","text":"<p>First decide if you want a stable release or a nightly. Both options provide you with the latest RetroArch, the only difference is that one is a self extracting installer, and the other one an archive you have to extract manually. Both are portable installation which means the RetroArch setup is: - It's self-contained - It doesn't need users to guess random locations for configurations files - It's easy to update by just replacing files</p>"},{"location":"guides/install-windows/#stable","title":"Stable","text":"<p>The stable version is our first priority and the main distribution version. Since it is the major release, it comes out periodically. Stable releases take more time to manufacture, but new features become available in the next version. For example: A version can have a new theme and feature, and in the next version, this theme and feature can be removed, improved or changed. As can be understood from the name of Stable, this version is more stable because it is controlled accordingly to make it work better on the platform it is suitable for.</p> <p>Stable release are here, and then select the architecture of your computer.</p>"},{"location":"guides/install-windows/#nightly","title":"Nightly","text":"<p>This version contains the latest commits available on GitHub, and the latest enhancements and features are added daily. This version may not be as stable as Stable version because it is built daily, but this does not mean that it is not stable.</p> <p>The current nightly is here. There are several files you can download in these folders. For a new installation you want RetroArch.7z or the setup package (RetroArch-20XX-XX-XX-setup.exe).</p>"},{"location":"guides/install-windows/#installing","title":"Installing","text":"<p>If you pick the 7z archive package, extract it in a folder that doesn't require administrator permissions such as C:\\Users\\yourusername\\RetroArch or any other drive. Don't extract it to Program Files or your Windows folder. This could case some issues.</p>"},{"location":"guides/install-windows/#updating","title":"Updating","text":"<p>You can update the installation by downloading the latest 20XX-XX-XX-RetroArch.7z package and overwriting the executable.</p> <p>If you pick the installer package we recommend to use the default location, follow the installation steps and you should be good to go. You can update the installer version by downloading the latest version and re-running the installer.</p>  WARNING If you were running a stable release prior to 1.4.0. you will need to update the system libraries. You can do so by downloading the full RetroArch.7z package or redist.7z from the download locations."},{"location":"guides/install-windows/#starting-retroarch","title":"Starting RetroArch","text":"<p>On the first run you will be greeted by this screen:</p> <p></p> <p>From here you can launch content, change settings and build up your content collection.</p>"},{"location":"guides/install-windows/#keyboard-controls","title":"Keyboard Controls","text":"<p>The RetroArch user interface is designed with gamepad navigation in mind but it also features robust keyboard and mouse support. Learn more about keyboard input at Input and Controls.</p>"},{"location":"guides/install-windows/#gamepad-controls","title":"Gamepad Controls","text":"<p>XINPUT controllers should work out of the box. If the controller can be autoconfigured the OSD will inform you of the autoconfiguration event. We also include autoconf profiles for many popular controllers. If your controller doesn't auto configure you can follow this procedure:</p> <p></p> <ul> <li>Navigate to Settings</li> <li>Navigate to Input</li> <li>Navigate to Input User 1 Binds</li> <li>Select User 1 Bind All</li> <li>Press the buttons as required</li> </ul>  TIP If you have several different controller types you may want to use the User 1 Save Autoconfig followed by User 1 Bind Default All options after binding in order to achieve hotplug functionality"},{"location":"guides/install-windows/#directory-configuration","title":"Directory Configuration","text":"<p>Configuring directories is an important aspect to get the best RetroArch experience possible. To configure the directories follow these steps:</p> <ul> <li>Navigate to Settings</li> <li>Navigate to Directory</li> <li>Select the directory you want to changed</li> <li>Navigate to the desired location</li> </ul> <p>You should always configure the following paths:</p> <ul> <li>System Directory for system files</li> <li>Savefile Directory for save files</li> <li>Savestate Directory save state files</li> <li>Browser Directory for your content</li> </ul>  TIP The Browser Directory is used as a startup location which allows easy access to your content library."},{"location":"guides/install-windows/#installing-cores","title":"Installing Cores","text":"<p>RetroArch requires cores to run any content. You can download cores directly from RetroArch's interface by following this procedure:</p> <p></p> <ul> <li>Navigate to Online Updater</li> <li>Navigate to Select Core Downloader</li> <li>Select the core you want to download</li> </ul>"},{"location":"guides/install-windows/#running-content","title":"Running Content","text":"<p>After you have installed one or more cores you can run your content following this procedure:</p> <ul> <li>Navigate to Load Content</li> <li>Browse to the folder that contains the content you want to run</li> <li>Select the content that you want to run</li> <li>If you have more than one compatible core you will be asked to select the core you want to use for that purpose</li> </ul> <p></p>  TIP By default loading content will trigger a content scan. If your content matches with any of our databases it will be added to a playlist for easy access. You can find the playlists by navigating to the right of the main menu. Every content you launch is added to a history playlist that you can use to load it again quickly at any time"},{"location":"guides/install-windows/#glossary","title":"Glossary","text":"<p>Here is the list of terms in a LibRetro, RetroArch or platform subject, field, or area of usage, with accompanying definitions.</p> <code>frontend</code> <p>A frontend is a program designed to run libretro cores such as Kodi's RetroPlayer, RetroArch, Phoenix, Minir</p> <code>core</code> <p>A core is a program that has been ported to the libretro API and runs inside a libretro frontend</p> <code>content</code> <p>Content can be a game, an image, a video, an audio file that is executed by a core. In most cases contents are the ROMs of an emulated platform</p> <code>retropad</code> <p>RetroPad is libretro\u2019s input abstraction controller, it\u2019s the interface between the physical controller and the core inputs </p> <code>save files</code> <p>Save files are saves that are made from within a game, usually cross platform and should work across emulators in most cases</p> <code>save states</code> <p>Save states are snapshots of the content memory at a particular moment, these are not always cross platform and most certainly won\u2019t work on a different emulator than the one used to create them</p> <code>system files</code> <p>Additional files that might or not be part of the romset that might be needed to get some content to work (usually referred to by the BIOS term)</p> <code>autoconf</code> <p>A configuration file that has button definitions for a particular gamepad</p>"},{"location":"guides/kms-mode/","title":"Linux KMS Mode","text":""},{"location":"guides/kms-mode/#purpose","title":"Purpose","text":"<p>KMS (Kernel Mode Setting) mode is a feature where RetroArch can use the OpenGL or Vulkan driver outside Xorg/Wayland, running straight in the virtual terminal. It is a fairly obscure feature, but very powerful in a console scenario.</p>"},{"location":"guides/kms-mode/#requirements","title":"Requirements","text":"<p>To use KMS mode you need:</p> <ul> <li>MESA version 9.0+ (including dev package)</li> <li>Use of Vulkan requires KHR_Display extension, present from Mesa 21 onwards</li> <li>libgbm 9.0+, libdrm (including dev package)</li> <li>Open source driver which supports KMS</li> <li>./configure with flags \"--enable-kms\" and \"--enable-egl\"</li> </ul> <p>After compiling RetroArch, you should see this when running <code>retroarch --features</code>:</p> <pre><code>KMS:\n    KMS/EGL context support: yes\n</code></pre> <p>If KMS mode is working correctly, RetroArch should start up without any desktop environment as well, straight from the terminal.</p>"},{"location":"guides/latency/","title":"Latency","text":"<p>RetroArch is capable of next-frame responsive time. This means that there should be no nearly no perceivable difference in terms of input latency from real hardware, FPGA/clone or original hardware.</p> <p>On top of all that, there are various settings you can configure to optimize the results even more.</p>"},{"location":"guides/latency/#next-frame-response-time-indistinguishable-from-real-hardware","title":"Next-frame response time indistinguishable from real hardware","text":"<p>RetroArch is truly in a league of its own when it comes to input responsiveness, and it keeps confounding even us here at Libretro. Several independent researchers did their own research on RetroArch's latency and came away being quite blown away by the results, completely shattering several long-held myths that up until now had been accepted as gospel in emulation circles: The hierarchy for loading is:</p> <ul> <li>That emulation will always have an implicit 3 to 5 frames of input lag, and that therefore FPGA-based hardware will always hold a distinct advantage over software-based emulation.</li> <li>That there's nothing one can do to avoid this</li> </ul> <p>RetroArch shatters these myths. It has been demonstrated by independent researchers that a next-frame response time (\u226416ms!) achievable with RetroArch! This means zero frames of input lag is achievable, indistinguishable from real hardware.</p> <p>Whoever told you that input lag was a given with emulators and that you needed FPGA in order to avoid this latency, should get him/herself acquainted with RetroArch. Post-RetroArch, latency indistinguishable from real hardware is perfectly possible!</p> <p>Check out people's findings here on our forum and participate, don't just take our word for it! Link here.</p>  Your browser does not support the video tag.  <p>\"With Pitfall, I witnessed a response on the very next frame. In the video shown to the left, you can clearly see me hit the button near the end of one frame, and on the next, Harry jumps! Essentially no way to improve compared to original hardware. Pack it up. We\u2019re done here\"</p> <p>\"Ever since I tried Retroarch for the first time there was no doubt in my mind that it was the future. It overcame the crippling input lag that plagues many stand alone emulators.\"</p> <p>\"[With RetroArch], it is possible to get to the same input lag as the original hardware, which may be as little as whatever is left of the current frame. At 60fps (16ms) this could be anywhere from 0ms to 16ms, which averages out to about 8ms. There is no room for improvement above that as far as the software is concerned.\"</p>"},{"location":"guides/latency/#configurable-latency-mitigation-tools","title":"Configurable latency mitigation tools","text":"<p>RetroArch provides you with all the tools you need to combat latency in your games. This includes options such as:</p> <ul> <li>Frame Delay</li> <li>Synchronization Fences (GPU Hard Sync)</li> <li>Video drivers for new graphics technology APIs like Vulkan, which can drive latency down even further.</li> <li>Maximum amount of configurable swap chains.<ul> <li>Can be set from 1 to 3 depending on your video driver, your GPU, and the video context driver that is being used by RetroArch.</li> <li>Vulkan supports this feature natively, but video drivers might not implement setting lower max swapchains.</li> </ul> </li> <li>You can choose between different audio drivers which can have an effect on overall perceived latency<ul> <li>Windows: You can choose between WASAPI (available since Windows 7), XAudio (available since Windows XP), and DirectSound.</li> <li>Linux: Depending on the build, you can choose between ALSA, PulseAudio, OSS, and audio servers like JACK.</li> </ul> </li> <li>Adjustable audio buffering for lower/higher audio latency</li> <li>Adjustable audio resampler quality</li> <li>Several video context drivers to choose from<ul> <li>Linux: Some video driver contexts like DRM/KMS on Linux allow for granular swapchain control, which should allow for an even better gameplay experience. It also allows you to boot RetroArch without an active X Server running (assuming your video driver supports this).</li> <li>Wayland is supported on Linux. This is an advanced display server that is being increasingly pushed as a replacement for X11. Note that whether or not you can use this depends on your video driver.</li> </ul> </li> <li>Ability to turn off window compositing for better latency results (NOTE: This is only possible on Windows 7, Microsoft disallows this on Windows 8 and later)</li> <li>Configurable swap interval</li> </ul>"},{"location":"guides/launch-content/","title":"Launching Content","text":"<p>Warning</p> <p>This guide assumes that you already have obtained the content legally, RetroArch does not provide users with copyright content.</p> <p>You should already have both cores and content, now we just have to launch it!</p>"},{"location":"guides/launch-content/#launching","title":"Launching","text":"<p>Go back to the Main Menu and select Load content. From the last guide you should have already set the default start directory, if this is the case choose Start directory. If you haven't set it or you are choosing other content (such as downloaded content) select the relevant option.</p> <p>From here it is up to you to navigate your game folder and find the game you want to try, select it once you have.</p> <p>Note</p> <p>If the game is zipped you will be presented with two options. Browse archive will allow you to open it and select the contents. While Load archive will try and load the archive as an image. In most cases if you simply just compressed the image, either option will do.</p> <p>Note</p> <p>RetroArch will automatically choose the appropriate core for your content based on file extension. However if two or more cores use the same file extension, it will ask you to choose the core. You should always choose the platform the game was suppose to run on.</p>"},{"location":"guides/launch-content/#playing","title":"Playing","text":"<p>Well done, you have finally launched your first game with RetroArch.</p> <p>If you setup your controller take note of the RetroPad concept. With this you will not have to setup a controller for each console, instead the RetroPad will adapt depending on what console your playing.</p> <p>To return to RetroArch, press F1 or the RetroArch button on mobile. This will bring up the menu where you can change core settings, or otherwise configure the current content, or close it.</p> <p>Warning</p> <p>On PC's pressing Esc twice will close RetroArch without saving.</p>"},{"location":"guides/led-drivers/","title":"LED drivers for RetroArch","text":"<p>Libretro cores can have extra on/off outputs, that provide simple visual feedback such as illuminated Start buttons for arcade or disk activity happening inside the emulated system.</p> <p>Available LED drivers:    * <code>overlay</code> - control individual elements of a RetroArch overlay    * <code>rpi</code> - control physical LEDs connected to GPIO pins    * <code>keyboard</code> - control keyboard state LEDs    * <code>sysled</code> - control built-in LEDs under Linux</p>"},{"location":"guides/led-drivers/#configuration","title":"Configuration","text":"<p>In case of all drivers, the LED driver type and the individual LED mapping needs to be added to <code>retroarch.cfg</code>. At present, this is not possible via the RetroArch menu system, the configuration file needs to be edited directly. Note: first LED is referred as <code>led1_map</code> in configuration file, but indexing starts from 0 on core side. There is no common mapping of LEDs for cores, but some of them use first LED for indicating power status, and second for disk drive activity.</p>"},{"location":"guides/led-drivers/#overlay-driver","title":"Overlay driver","text":"<p>For overlay driver to have effect, make sure to activate a compatible overlay. The driver will set the visibility of <code>overlay0_desc0_overlay</code>, <code>overlay0_desc1_overlay</code> etc. items according to the input from the core.</p>"},{"location":"guides/led-drivers/#example-overlay-driver-with-2-leds","title":"Example: overlay driver with 2 LEDs","text":"<pre><code>led_driver = \"overlay\"\nled1_map = \"0\"\nled2_map = \"1\"\n</code></pre>"},{"location":"guides/led-drivers/#rpi-driver","title":"RPi driver","text":"<p>The RPi driver will set the specified GPIO pins to <code>out</code> direction and then set the value via filesystem entry <code>/sys/class/gpio/gpio%d/value</code>. This entry is present typically on Raspberry Pi single board computers.</p>"},{"location":"guides/led-drivers/#example-rpi-driver-with-first-led-assigned-for-gpio-pin-18","title":"Example: RPi driver with first LED assigned for GPIO pin 18","text":"<pre><code>led_driver = \"rpi\"\nled1_map = \"18\"\n</code></pre>"},{"location":"guides/led-drivers/#keyboard-driver","title":"Keyboard driver","text":"<p>The keyboard driver will utilize the keyboard Num Lock (0), Caps Lock (1), and Scroll Lock (2) LEDs. It works under Windows, and X11 (since RetroArch 1.9.1). Note: this driver does not work under Linux Wayland or KMS mode, and in case of X11, access to Num Lock and Caps Lock may be limited, check this answer.</p>"},{"location":"guides/led-drivers/#example-keyboard-driver-with-second-led-assigned-for-scroll-lock-while-leaving-first-led-explicitly-unassigned","title":"Example: keyboard driver with second LED assigned for Scroll Lock, while leaving first LED explicitly unassigned.","text":"<pre><code>led_driver = \"keyboard\"\nled1_map = \"-1\"\nled2_map = \"2\"\n</code></pre>"},{"location":"guides/led-drivers/#sysled-driver","title":"Sysled driver","text":"<p>The sysled driver will set the brightness of supported mainboard LEDs via filesystem entry <code>/sys/class/leds/led%d/brightness</code>. This entry is present typically on Raspberry Pi single board computers, where led0 is the green LED usually indicating MMC card activity, and led1 is the red LED. Note that these filesystem entries may be writable by root only, enable access with e.g. <code>sudo chmod a+w /sys/class/leds/led*/trigger /sys/class/leds/led*/brightness</code> before running RetroArch. This driver was added in RetroArch 1.15.0.</p>"},{"location":"guides/led-drivers/#example-sysled-driver-with-first-led-output-from-core-assigned-to-led1-second-to-led0","title":"Example: sysled driver with first led output from core assigned to led1, second to led0","text":"<pre><code>led_driver = \"sysled\"\nled1_map = \"1\"\nled2_map = \"0\"\n</code></pre>"},{"location":"guides/libretro-overlays/","title":"What is a Libretro Overlay?","text":"<p>Imagine a libretro core playing a game or video on your screen. Now imagine attaching a clear piece of glass over your screen that you can draw on, attach touchscreen buttons to, or use to display an image of a vintage CRT television in your old bedroom.</p> <p>That layer of glass would be the overlay -- a virtual 'layer' between you and the video signal.</p>"},{"location":"guides/libretro-overlays/#whats-the-difference-between-an-overlay-and-a-bezel","title":"What's the difference between an Overlay and a Bezel?","text":"<p>With Libretro, bezels are one subtype of overlay. If you have experience with game emulators, you may be familiar with the term Bezel, which describes images that wrap around the emulated screen. Often this is to display an image of the original arcade cabinet or game console being emulated.</p> <p>dan2hos demonstrated this bezel-style overlay for Sonic 2 in the libretro forums;</p>"},{"location":"guides/libretro-overlays/#whats-the-difference-between-an-overlay-and-a-shader","title":"What's the difference between an Overlay and a Shader?","text":"<p>Shaders manipulate the video image being displayed by the Libretro core, so often the two are used in tandem. For example, you might want to use shaders to manipulate a Sega Genesis emulator core's video output to look just like a vintage Trinitron CRT television. Then you might use an overlay to wrap an image of that exact television around the emulated video.</p> <p>Another way that shaders and overlays are used together is to 1) use a shader to enhance dithered or low resolution images from a handheld emulator core as they are displayed on a modern HD smartphone and then 2) use an overlay to add touchscreen buttons to that emulator.</p>"},{"location":"guides/libretro-overlays/#overlay-touchscreen-functionality","title":"Overlay Touchscreen Functionality","text":"<p>Overlay touch functionality allows users to create an input interface that is mouse or touch oriented regardless of whether the original system or libretro core was built for these forms of input. The overlay images are displayed with transparency over the regular game image, and the user is able to trigger input by pressing on designated parts of the overlay.</p> <p>Overlays are built from a collection of images and a text configuration file which makes it straightforward to change both the look and functionality of this overlay. Learn more about this aspect of Libretro's Overlay tech over in the Overlay Spec.</p> <p>An example of a touchscreen overlay, demonstrated with the Dinothawr core: </p>"},{"location":"guides/libretro-overlays/#activating-an-overlay-via-the-gui","title":"Activating an Overlay via the GUI","text":"<p>Overlays require at least one image (<code>.png</code>) and a configuration file (<code>.cfg</code>) in order to activate them.</p> <p>Notes: - The configuration file should have the exact same name as the first image file (the only image file if your overlay only has one image). - Do not use spaces in the filename. - These files should be placed together in the libretro <code>overlay</code> folder.</p> <p>In order to activate an overlay, go to the RetroArch <code>Settings</code> menu. Find the <code>Onscreen Display</code> submenu. From this menu you can activate the Overlay system and select which overlay file to display.</p>"},{"location":"guides/libretro-overlays/#setting-up-per-core-overlays-in-retroarch","title":"Setting Up Per-Core Overlays in RetroArch","text":""},{"location":"guides/libretro-overlays/#per-core-overlays-via-the-retroarch-gui","title":"Per-Core Overlays via the RetroArch GUI","text":"<ol> <li>Go to the <code>Settings</code> menu and find the <code>User Interface</code> submenu and enable <code>Show Advanced Settings</code></li> <li>Go to the <code>Settings</code> menu and find the <code>Configuration</code> submenu. Make sure that <code>Use Content-Specific Core Options If Available</code> and <code>Load Override Files Automatically</code> are enabled.</li> <li>Set up the Overlay according to your preferences.</li> <li>Load a game. Open the RA \"Quick Menu\" and then use the GUI to set up the Overlay according to your preferences.</li> <li>From the Quick Menu, select <code>Save Core Overrides</code>.</li> </ol>"},{"location":"guides/libretro-overlays/#per-core-overlays-via-retroarch-cfg-files","title":"Per-Core Overlays via RetroArch CFG Files","text":"<p>To be written</p>"},{"location":"guides/libretro-overlays/#setting-up-per-game-overlays-in-retroarch","title":"Setting Up Per-Game Overlays in Retroarch","text":""},{"location":"guides/libretro-overlays/#per-game-overlays-via-the-retroarch-gui","title":"Per-Game Overlays via the RetroArch GUI","text":"<ol> <li>Go to the <code>Settings</code> menu and find the <code>User Interface</code> submenu and enable <code>Show Advanced Settings</code></li> <li>Go to the <code>Settings</code> menu and find the <code>Configuration</code> submenu. Make sure that <code>Use Content-Specific Core Options If Available</code> and <code>Load Override Files Automatically</code> are enabled.</li> <li>Load a game. Open the RA \"Quick Menu\" and then use the GUI to set up the Overlay according to your preferences.</li> <li>From the Quick Menu, select <code>Save Game Overrides</code>.</li> </ol>"},{"location":"guides/libretro-overlays/#per-game-overlays-via-retroarch-cfg-files","title":"Per-Game Overlays via RetroArch CFG Files","text":"<p>The first time you set up a per-game overlay: 1. Ensure that these two options are set in retroarch.cfg: <code>game_specific_options = \"true\"</code> and <code>auto_overrides_enable = \"true\"</code> 2. The first time you load content with these settings, RetroArch will create a settings override directory structure and a <code>.opts</code> configuration file which you can use as a template to correctly name and locate your overlay configuration files. 3. If the automatically-generated file is named <code>Dinothawr.opts</code>, you would name your per-game override <code>Dinothawr.cfg</code>. 3. The new RetroArch <code>.cfg</code> should only include the options you want to change for this single game.</p>"},{"location":"guides/libretro-overlays/#overlay-options-that-can-be-changed-include","title":"Overlay options that can be changed include:","text":"<ul> <li><code>input_overlay</code> - Path to the correct overlay</li> <li><code>input_overlay_enable</code></li> <li><code>input_overlay_opacity</code></li> <li><code>input_overlay_scale</code></li> <li><code>input_overlay_enable_autopreferred</code></li> <li><code>input_overlay_show_physical_inputs</code></li> <li><code>input_overlay_hide_in_menu</code></li> </ul> <p>Note: You can change more than just the overlay by specific any content-specific options -- for example you might also decide to set <code>video_shader_enable = \"true\"</code> and <code>video_shader = \"/usr/share/libretro/shaders/classic-crt-television.slang\"</code>, etc.</p>"},{"location":"guides/libretro-overlays/#where-can-one-find-overlays-to-use","title":"Where can one find Overlays to use?","text":"<ul> <li>Interactive overlays are managed within: https://github.com/libretro/common-overlays</li> <li>Decorative border overlays are managed within: https://github.com/libretro/overlay-borders</li> </ul>"},{"location":"guides/libretro-overlays/#more-about-overlays","title":"More about Overlays","text":"<ul> <li>Visit the official Libretro Overlays Forum</li> </ul>"},{"location":"guides/memorymonitoring/","title":"Memory Monitoring in libretro","text":"<p>There are many reasons someone might want to peek into the memory contents of a core to see what is happening at a given memory address at a given time. The most common use is for awarding achievements, like those from RetroAchievements, but it can also be used for speedrunning/streaming assistant programs, machine learning applications, and more.</p> <p>Cores that support memory monitoring can typically fetch and award RetroAchievements, but if a core is not specifically mentioned on the RetroAchievements team's official list of supported cores, there may be issues with some achievement-awarding logic not functioning properly or other unexpected behavior. Unsupported cores may be excluded from RetroAchievements' \"hardcore\" mode and leaderboards, as well. If you need to use an unsupported core to interact with RetroAchievements for whatever reason (e.g., on platforms where no officially supported core is available), please do not bother them with tickets or manual unlock requests, which will be closed without investigation. They are offering a free service through volunteer labor, and we should respect their time.</p> <p>To be clear: the cores listed on this page support libretro's memory monitoring functionality but may or may not be supported by the RetroAchievements team. Please consult their official list of supported cores before requesting support from them.</p>"},{"location":"guides/memorymonitoring/#cores-compatibility","title":"Cores Compatibility","text":""},{"location":"guides/memorymonitoring/#arcade-various-manufacturers","title":"Arcade (various manufacturers)","text":""},{"location":"guides/memorymonitoring/#arcade","title":"Arcade","text":"Core Supported Notes FinalBurn Neo \u2714 AES bios is required for many Neo Geo achievements. AES Asia (neo-epo.bin) is generally English. MAME \u2715 Support is not likely to ever be possible. The same is true for all MAME variants."},{"location":"guides/memorymonitoring/#apple","title":"Apple","text":""},{"location":"guides/memorymonitoring/#apple-ii","title":"Apple II","text":"Core Supported Notes AppleWin \u2715"},{"location":"guides/memorymonitoring/#arduboy","title":"Arduboy","text":"Core Supported Notes Arduous \u2714 RetroArch 1.10.2 or higher required"},{"location":"guides/memorymonitoring/#atari","title":"Atari","text":""},{"location":"guides/memorymonitoring/#2600","title":"2600","text":"Core Supported Notes Stella \u2714 Stella 2014 \u2715"},{"location":"guides/memorymonitoring/#7800","title":"7800","text":"Core Supported Notes ProSystem \u2714"},{"location":"guides/memorymonitoring/#jaguar","title":"Jaguar","text":"Core Supported Notes Virtual Jaguar \u2714 Due to vast core issues, support of this system is extremely limited."},{"location":"guides/memorymonitoring/#lynx","title":"Lynx","text":"Core Supported Notes Beetle Lynx \u2714 Handy \u2714 Holani \u2714"},{"location":"guides/memorymonitoring/#bandai","title":"Bandai","text":""},{"location":"guides/memorymonitoring/#wonderswan-wonderswan-color","title":"Wonderswan / Wonderswan Color","text":"Core Supported Notes Beetle Cygne \u2714"},{"location":"guides/memorymonitoring/#coleco","title":"Coleco","text":""},{"location":"guides/memorymonitoring/#colecovision","title":"ColecoVision","text":"Core Supported Notes blueMSX \u2714 FinalBurn Neo \u2715 Gearcoleco \u2714 JollyCV \u2714 SMS Plus GX \u2715"},{"location":"guides/memorymonitoring/#gce","title":"GCE","text":""},{"location":"guides/memorymonitoring/#vectrex","title":"Vectrex","text":"Core Supported Notes vecx \u2714"},{"location":"guides/memorymonitoring/#magnavox","title":"Magnavox","text":""},{"location":"guides/memorymonitoring/#odyssey-2","title":"Odyssey 2","text":"Core Supported Notes o2em \u2714"},{"location":"guides/memorymonitoring/#mattel","title":"Mattel","text":""},{"location":"guides/memorymonitoring/#intellivision","title":"Intellivision","text":"Core Supported Notes FreeIntV \u2714 Controls involve an on-screen overlay that may not be easy to use for all games."},{"location":"guides/memorymonitoring/#microsoft","title":"Microsoft","text":""},{"location":"guides/memorymonitoring/#msx-msx2","title":"MSX / MSX2","text":"Core Supported Notes blueMSX \u2714 fMSX \u2715 Some games may require mapper adjustment in core options to run. FinalBurn Neo \u2715 MSX2 is not supported."},{"location":"guides/memorymonitoring/#nec","title":"NEC","text":""},{"location":"guides/memorymonitoring/#pc-engine-turbografx-16-pc-engine-cd-turbografx-cd","title":"PC Engine - TurboGrafx-16 / PC Engine CD - TurboGrafx-CD","text":"Core Supported Notes Beetle PCE FAST \u2714 Highest speed. Does not support SuperGrafx games. Beetle SuperGrafx \u2714 High speed. Supports SuperGrafx games. Beetle PCE \u2715 Geargrafx \u2714 FinalBurn Neo \u2715"},{"location":"guides/memorymonitoring/#pc-fx","title":"PC-FX","text":"Core Supported Notes Beetle PC-FX \u2714"},{"location":"guides/memorymonitoring/#pc-8000-pc-8800","title":"PC-8000 / PC-8800","text":"Core Supported Notes QUASI88 \u2715"},{"location":"guides/memorymonitoring/#nintendo","title":"Nintendo","text":""},{"location":"guides/memorymonitoring/#nintendo-ds","title":"Nintendo DS","text":"Core Supported Notes MelonDS 2021 \u2714 External BIOS recommended, but no longer required. RetroArch 1.9.14 nightly or newer required for hashing to work. DSi mode currently is not supported for achievements. MelonDS DS \u2714 Achievements supported for DS and DSi mode. DeSmuME \u2714 External BIOS recommended, needs to be enabled in core options DeSmuME 2015 \u2714"},{"location":"guides/memorymonitoring/#game-boy-game-boy-color","title":"Game Boy / Game Boy Color","text":"Core Supported Notes Gambatte \u2714 Preferred core. SameBoy \u2715 Gearboy \u2714 mGBA \u2714 Robust feature set. Currently the only core with GB Camera support. VBA-M \u2714 Currently the only core with gyro support via analog sticks Mesen-S \u2715 Emux GB \u2715 TGB Dual \u2715 bsnes \u2715 SGB only bsnes-hd \u2715 SGB only higan Accuracy \u2715 SGB only, Achievement support isn't going to be added nSide Balanced \u2715 SGB only, Achievement support isn't going to be added"},{"location":"guides/memorymonitoring/#game-boy-advance","title":"Game Boy Advance","text":"Core Supported Notes mGBA \u2714 VBA-M \u2714 VBA Next \u2714 gpSP \u2715 Very high speed, but has not been thoroughly tested with achievements. A few games will fail to start or crash frequently. Please prefer other cores when device performance allows. Beetle GBA \u2714 Experimental core, should not be used without good reason. Meteor \u2715"},{"location":"guides/memorymonitoring/#nes","title":"NES","text":"Core Supported Notes Mesen \u2714 Supports FDS, very high accuracy, relatively high performance cost FCEUmm \u2714 Supports FDS QuickNES \u2714 Nestopia \u2715 Achievements are not fully supported yet bnes \u2715 Emux NES \u2715 FinalBurn Neo \u2715"},{"location":"guides/memorymonitoring/#nintendo-64","title":"Nintendo 64","text":"Core Supported Notes Mupen64Plus-Next \u2714 Preferred core. Supports greater graphic customization and upscaling. ParaLLEl N64 \u2714 Supports 64DD games. Can play -some- hacks reliant on low accuracy via alternate plugins."},{"location":"guides/memorymonitoring/#pokemon-mini","title":"Pokemon Mini","text":"Core Supported Notes PokeMini \u2714"},{"location":"guides/memorymonitoring/#snes","title":"SNES","text":"Core Supported Notes Snes9x \u2714 Preferred core. High speed, moderate accuracy. Actively maintained. Snes9x 2010 \u2715 Has many issues with achievements, unlikely to ever be supported. Snes9x 2005 Plus \u2715 Snes9x 2005 \u2715 Snes9x 2002 \u2715 Mesen-S \u2714 High accuracy, high performance cost. Beetle Supafaust \u2715 Only SRAM is exposed currently. Beetle bsnes \u2715 bsnes \u2715 bsnes-hd \u2715 bsnes-mercury Accuracy \u2715 SRAM is not exposed currently bsnes-mercury Balanced \u2715 SRAM is not exposed currently bsnes-mercury Performance \u2715 SRAM is not exposed currently bsnes 2014 Accuracy \u2715 bsnes 2014 Balanced \u2715 bsnes 2014 Performance \u2715 bsnes C++98 (v085) \u2715 Has some color rendering issues higan Accuracy \u2715 Achievement support isn't going to be added nSide Balanced \u2715 Achievement support isn't going to be added"},{"location":"guides/memorymonitoring/#virtual-boy","title":"Virtual Boy","text":"Core Supported Notes Beetle VB \u2714"},{"location":"guides/memorymonitoring/#sega","title":"Sega","text":""},{"location":"guides/memorymonitoring/#dreamcastnaomi","title":"Dreamcast/Naomi","text":"Core Supported Notes Flycast \u2714 Must disable threaded rendering to use save states. RetroArch 1.10.1 or higher required."},{"location":"guides/memorymonitoring/#master-system-megadrive-genesis","title":"Master System / MegaDrive - Genesis","text":"Core Supported Notes Genesis Plus GX \u2714 Preferred core. BlastEm \u2715 Cycle accurate. Genesis/MegaDrive only. Has known issues with game RAM and is incompatible with achievements. ClownMDEmu \u2714 Picodrive \u2714 SMS Plus GX \u2714 Master System only Gearsystem \u2714 Master System only Emux SMS \u2715 FinalBurn Neo \u2715"},{"location":"guides/memorymonitoring/#32x-32x-cd","title":"32X / 32X CD","text":"Core Supported Notes Picodrive \u2714 Emulation quality can be dodgy."},{"location":"guides/memorymonitoring/#game-gear","title":"Game Gear","text":"Core Supported Notes Genesis Plus GX \u2714 SMS Plus GX \u2715 Gearsystem \u2714 FinalBurn Neo \u2715"},{"location":"guides/memorymonitoring/#sg-1000","title":"SG-1000","text":"Core Supported Notes Genesis Plus GX \u2714 Preferred core. SMS Plus GX \u2715 Gearsystem \u2715 blueMSX \u2714 FinalBurn Neo \u2715"},{"location":"guides/memorymonitoring/#sega-cd-mega-cd","title":"Sega CD - Mega-CD","text":"Core Supported Notes Genesis Plus GX \u2714 ClownMDEmu \u2714 Picodrive \u2714"},{"location":"guides/memorymonitoring/#saturn","title":"Saturn","text":"Core Supported Notes Beetle Saturn \u2714 Preferred core. High accuracy, but low speed Yabause \u2715 Technically supported, but use at your own risk. Higher speed Kronos \u2715 Technically supported, but use at your own risk. High speed, supports graphic enhancements, but requires a GPU that supports at least OpenGL 4.2 YabaSanshiro \u2715"},{"location":"guides/memorymonitoring/#snk","title":"SNK","text":""},{"location":"guides/memorymonitoring/#neo-geo-pocket-neo-geo-pocket-color","title":"Neo Geo Pocket / Neo Geo Pocket Color","text":"Core Supported Notes Beetle NeoPop \u2714 RACE \u2715 FinalBurn Neo \u2715"},{"location":"guides/memorymonitoring/#sony","title":"Sony","text":""},{"location":"guides/memorymonitoring/#playstation","title":"PlayStation","text":"Core Supported Notes Beetle PSX HW \u2714 Preferred core. Identical to Beetle PSX, with extra hardware features. High accuracy. Beetle PSX \u2714 Identical to Beetle PSX HW in software mode. SwanStation \u2714 Fork of DuckStation. Fairly high accuracy, extremely high speed. PCSX ReARMed \u2715 Technically supported, but use at your own risk. Lower accuracy than Beetle PSX (HW), higher speed."},{"location":"guides/memorymonitoring/#playstation-portable","title":"PlayStation Portable","text":"Core Supported Notes PPSSPP \u2714 RetroArch 1.9.9 or higher required"},{"location":"guides/memorymonitoring/#the-3do-company-various-manufacturers","title":"The 3DO Company (various manufacturers)","text":""},{"location":"guides/memorymonitoring/#3do","title":"3DO","text":"Core Supported Notes Opera \u2714 If you run into issues, try switching to a different BIOS."},{"location":"guides/memorymonitoring/#wasm-4","title":"WASM-4","text":"Core Supported Notes WASM-4 \u2714 RetroArch 1.10.2 or higher required"},{"location":"guides/memorymonitoring/#watara","title":"Watara","text":""},{"location":"guides/memorymonitoring/#supervision","title":"Supervision","text":"Core Supported Notes Potator \u2714 RetroArch 1.9.2 or higher required"},{"location":"guides/memorymonitoring/#misc","title":"Misc","text":"Core Supported Notes VaporSpec \u2715"},{"location":"guides/navigating/","title":"Navigating","text":"<p>Navigating on RetroArch is as easy as you can imagine. Depending on the device you have, the control scheme is determined automatically. For example, if you are going to use it on a computer, the basic key combinations of the keyboard will apply. You move with the arrow keys and select with the Enter key, and you return with the Backspace key. If you plug a controller, you can also move with the D-Pad buttons.</p> <p>The default GUI for RetroArch is Ozone. While the \"skin\" may differ on certain platforms, basic layout and navigation remains broadly the same.</p>"},{"location":"guides/navigating/#pc","title":"PC","text":"<p>By default the keyboard should be ready to use.</p> <p>Using the left and right arrow keys, you move to a different tab, each tab will relate to an aspect of the RetroArch experience (main menu for game loading, settings for settings etc.). Once the desired tab is selected, use the up and down arrow to move to an option.</p> <p>To advance in the menu press Enter (or Return). To go back to the previous menu push Backspace.</p> <p>Whilst in a game use the F1 key to open the Quick Menu.</p> <p>Pushing Esc twice will quit the program.</p>"},{"location":"guides/navigating/#main-menu","title":"Main Menu","text":"<p>Welcome to the main menu. This is where you will launch games, download and update cores, and have access to freely available content. Load Core, Load Content and the Online Updater are the menu items you will probably be using the most.</p> <p>See Starting a Game</p>"},{"location":"guides/navigating/#settings","title":"Settings","text":"<p>Here you will find all the options available to configure RetroArch, from Graphics, Input, Sound and everything else.</p>"},{"location":"guides/navigating/#favorites","title":"Favorites","text":"<p>Favorites allow yous to maintain a short list of games for quick access. You can add content to this playlist from the Quick Menu or before launching it.</p>"},{"location":"guides/navigating/#history","title":"History","text":"<p>Recently launched content will be added to this Playlist. The content you ran last will be at the top.</p>"},{"location":"guides/navigating/#image-music-and-video","title":"Image, Music and Video","text":"<p>These tabs will handle all your media. Images will contain any screenshots you've made.</p>"},{"location":"guides/navigating/#netplay","title":"Netplay","text":"<p>RetroArch relies on peer-to-peer networking to reduce network latency and ensure the best possible experience. It allows multiplayer over the internet. The user can host or join a network gaming session, or use the Spectator mode to watch others play. RetroArch has a built-in netplay lobby.</p>"},{"location":"guides/navigating/#import-content","title":"Import content","text":"<p>Either you scan automatically, so that any content that matches the internal database will be added to Playlists, or you scan manually, not being dependent on the database so you can freely add your content to Playlists.</p>"},{"location":"guides/navigating/#mobile","title":"Mobile","text":"<p>The mobile interface, GLUI, is more minimalistic compared to the PC's interface. Touch is the default input, although depending on device other options may be available. There are three different tabs, which can be switched at the bottom of the menu.</p>"},{"location":"guides/navigating/#main-menu_1","title":"Main Menu","text":"<p>The main menu will be where you launch games, download and update cores, start or join netplay sessions and pretty much anything to do with gaming.</p> <p>See Starting a Game</p>"},{"location":"guides/navigating/#playlists","title":"Playlists","text":"<p>Handles anything to do with creating and maintaining playlists. It gives you scanning options to recognise your game collection. It also provides access to your images, music and videos.</p>"},{"location":"guides/navigating/#settings_1","title":"Settings","text":"<p>Here you will find all the options available to configure RetroArch, from Graphics, Input, Sound and everything else.</p>"},{"location":"guides/netplay-faq/","title":"FAQ","text":""},{"location":"guides/netplay-faq/#faq","title":"FAQ","text":""},{"location":"guides/netplay-faq/#what-is-netplay","title":"What is netplay?","text":"<ul> <li>Netplay is RetroArch's mechanism for emulating local multiplayer over the internet, by continuously synchronizing multiple RetroArch instances running the same emulation core and same content. Currently, this approach is only for emulating classic single-system local multiplayer, not link cable play or network multiplayer modes.</li> </ul>"},{"location":"guides/netplay-faq/#does-retroarch-require-port-forwarding-to-work","title":"Does RetroArch require port-forwarding to work?","text":"<ul> <li>The host needs to accept incoming connections on port TCP 55435. For most people, this requires port-forwarding: the network connections have to be forwarded from your local network access point (i.e. gateway or router) to the device running RetroArch. RetroArch requests a port-forwarding from the local network using the UPnP IGD protocol, or, you can manually create a port-forwarding rule on your network device. For those who can't forward the ports for whatever reason, please refer to the Setup Guide below.</li> </ul>"},{"location":"guides/netplay-faq/#does-it-support-more-than-two-players","title":"Does it support more than two players?","text":"<ul> <li>Yes! See Getting Started Guide for more details.</li> </ul>"},{"location":"guides/netplay-faq/#does-it-support-more-than-one-player-on-one-computer","title":"Does it support more than one player on one computer?","text":"<ul> <li>Yes! See Multiple Controllers Guide for more details.</li> </ul>"},{"location":"guides/netplay-faq/#does-it-support-the-host-spectating-while-a-client-performs-as-player-1","title":"Does it support the host spectating while a client performs as player 1?","text":"<ul> <li>Yes! By default, the host is always assigned Controller 1, but see Multiple Controllers Guide on how a client can 'Request Device' to be controller 1.</li> </ul>"},{"location":"guides/netplay-faq/#what-do-you-need-for-retroarch-netplay-to-work","title":"What do you need for RetroArch netplay to work?","text":"<ul> <li>Same RetroArch version, same core version, and the same exact content.</li> </ul>"},{"location":"guides/netplay-faq/#does-retroarch-support-cross-platform-netplay","title":"Does RetroArch support cross-platform netplay?","text":"<ul> <li>Yes, but your mileage may vary, particularly when endianness differs.</li> </ul>"},{"location":"guides/netplay-faq/#which-cores-work-for-netplay","title":"Which cores work for netplay?","text":"<ul> <li>On a technical level, every core that supports save states should work but the performance requirements may be too high for it to work in any practical level.</li> </ul>"},{"location":"guides/netplay-faq/#does-psx-n64-dreamcast-gamecube-wii-3ds-netplay-work","title":"Does PSX / N64 / Dreamcast / GameCube / Wii / 3DS netplay work?","text":"<ul> <li>No, the performance requirements make the current model unsuitable for those.</li> </ul>"},{"location":"guides/netplay-faq/#can-i-play-gb-gbc-gba-psp-3ds-games-with-multiple-people-via-retroarch-netplay","title":"Can I play GB / GBC / GBA / PSP / 3DS games with multiple people via RetroArch Netplay?","text":"<ul> <li>No, RetroArch's netplay is not link-cable emulation, GB, GBA, PSP netplay are currently not possible with our implementation. One notable exception is same game GB/GBC Netplay via the TGB-Dual and Sameboy cores.</li> </ul>"},{"location":"guides/netplay-faq/#can-i-trade-pokemon-via-retroarch-netplay","title":"Can I trade Pok\u00e9mon via RetroArch Netplay?","text":"<ul> <li>Yes. For now, the only two cores providing this functionality are gpSP (it emulates the GBA wireless adapter) and MelonDS DS (a MelonDS fork that lets you use GTS).</li> </ul>"},{"location":"guides/netplay-faq/#troubleshooting-netplay","title":"Troubleshooting NetPlay","text":""},{"location":"guides/netplay-faq/#retroarch-says-content-not-found-try-loading-content-manually","title":"RetroArch says \"Content not found, try loading content manually\"","text":"<ul> <li>Either load content manually, have the content in your recent history list, or scan your content to a playlist.</li> </ul>"},{"location":"guides/netplay-faq/#as-client-failed-to-initialize-netplay","title":"As Client: \"Failed to Initialize Netplay\"","text":"<p>\"Failed to Initialize Netplay\" often means you were not able to connect to the host. Confirm that you have the correct IP address for the host, and that the host has begun hosting a NetPlay session. Tell the host to check if their host-based firewall is allowing RetroArch to accept connections, and confirm that they have port-forwarding working.</p>"},{"location":"guides/netplay-faq/#as-host-port-mapping-failed","title":"As Host: \"Port Mapping Failed\"","text":"<p>\"Port Mapping Failed\" probably indicates a UPnP port-forwarding problem. If you can manually configure your network gateway to forward TCP port 55435 to the local-network IP address of your RetroArch device, then you can do that. Alternatively, enable the use of a Relay Server.</p>"},{"location":"guides/netplay-getting-started/","title":"Getting Started","text":""},{"location":"guides/netplay-getting-started/#getting-started","title":"Getting Started","text":""},{"location":"guides/netplay-getting-started/#configure-a-nickname","title":"Configure a Nickname","text":"<ul> <li>Navigate to Settings</li> <li>Navigate to User</li> <li>Select Username</li> <li>Configure your preferred nickname</li> </ul>"},{"location":"guides/netplay-getting-started/#host-a-netplay-server","title":"Host a Netplay Server","text":"<p>If you are going to host a game, simply configure your network parameters and \"Start Hosting\" from the netplay menu. After doing that, load the content you want to netplay and wait for players to connect.</p> <p></p>"},{"location":"guides/netplay-getting-started/#check-your-lobby","title":"Check your lobby","text":"<p>Once you start hosting, you can check to see if your lobby is visible at lobby.libretro.com.</p> <p>Tip</p> <p>If your router doesn't support UPnP, you can't forward your ports, or you are just uncertain how, enable the Use Relay Server option. This routes both sides of the connection through one of the public proxy servers.</p> <p>Tip</p> <p>If you want to run a private game, set up a Server Password to prevent random people from connecting. Alternatively, you can disable the Publicly Announce Netplay option. The clients will need to enter your IP address or hostname directly.</p> <p>Warning</p> <p>By default, RetroArch attempts to use UPnP to automatically port-forward (it asks the gateway to forward incoming connections on TCP 55435 to itself), but it doesn't check to see if it succeeded (i.e., if it is actually reachable on TCP 55435 from elsewhere on the internet). The lobby server doesn't verify the host's reachability either. Make sure you have correctly port-forwarded, using this tool: enter your Netplay TCP Port once you are hosting, and it will tell you if the port is open or not. If this port is not open, people won't be able to connect to your session, and you might have to enable the use of a Relay Server.</p>"},{"location":"guides/netplay-getting-started/#configure-netplay-clients","title":"Configure Netplay Clients","text":"<p>You don't need to configure anything to connect to netplay rooms. Browse to the netplay menu, Select Refresh and then select the room you want to connect to.</p> <p></p> <p>You will be asked for a password if one is required, and if you have matching content scanned or in the Content History it will connect right away. Otherwise, it will tell you to load the core and content manually and it will attempt to connect right away.</p>"},{"location":"guides/netplay-multiple-controllers/","title":"Multiple Controllers","text":""},{"location":"guides/netplay-multiple-controllers/#assigning-controllers-during-netplay","title":"Assigning Controllers During Netplay","text":""},{"location":"guides/netplay-multiple-controllers/#request-device","title":"Request Device","text":"<p>Request Device is an advanced network option used for NetPlay, that allows each RetroArch instance to request which device(s)/controller(s) to control. This, for example, enables four players from two instances of RetroArch, or for a connecting client to request the player 1 controller from the host. To make this option visible, RetroArch must have Show Advanced Settings set to ON.</p>"},{"location":"guides/netplay-multiple-controllers/#turning-on-show-advanced-settings","title":"Turning on Show Advanced Settings","text":"<ul> <li>Navigate to Settings</li> <li>Navigate to User Interface</li> <li>Toggle Show Advanced Settings to ON</li> </ul> <p>Once Show Advanced Settings is on, proceed to the Network configurations in the Settings menu (NetPlay menu also has a path to Network configurations). Scroll down through Network configuration, and the advanced configuration options are now visible. Request Device # (where # is any number from 1 to 16) options will allow the computer to control any number of controllers during NetPlay.</p>"},{"location":"guides/netplay-multiple-controllers/#example-setup-step-by-step-guide","title":"Example Setup: Step-by-Step Guide","text":"<p>The following example of Super Bomberman 2 on the SNES will be used to demonstrate four players using two computers. The host will be controlling players 1 and 3, and the client will be controlling players 2 and 4.</p>"},{"location":"guides/netplay-multiple-controllers/#on-the-host","title":"On the Host","text":""},{"location":"guides/netplay-multiple-controllers/#configure-hosts-input-devices","title":"Configure Host's Input Devices","text":"<p>Set up Input Devices while the game is loaded:</p> <ul> <li>Connect two controllers</li> <li>Start SNES Super Bomberman 2 game</li> <li>Set Inputs for each controller 1 and 2:</li> <li>Navigate to Settings</li> <li>Navigate to Inputs</li> <li>Navigate to Port 1 Binds</li> <li>Ensure Device Index is set to *Controller Name 1</li> <li>Return to Inputs configuration menu</li> <li>Navigate to Port 2 Binds</li> <li>Ensure Device Index is set to *Controller Name 2</li> <li> <p>Set Device Type to MultiTap</p> <ul> <li>MultiTap is only available when SNES core is loaded. This plugs in a virtual SNES MultiTap into the SNES so more than two controllers can connect to the SNES.</li> </ul> <p>* Controller Name 1 and 2 are unique to the computer and to the controllers connected to it (e.g., PS4 controller shows as \"Wireless Controller #1\")</p> </li> </ul>"},{"location":"guides/netplay-multiple-controllers/#configure-hosts-requested-devices","title":"Configure Host's Requested Devices","text":"<p>Set host computer's RetroArch NetPlay to request control of the running core's devices/controllers:</p> <ul> <li>Navigate to Settings -or- NetPlay</li> <li>Navigate to Network</li> <li>Set Request Device 1 to YES</li> <li>Set Request Device 3 to YES</li> <li>Ensure all other Request Device # are set to NO</li> </ul> <p>Host is now able to start a NetPlay game controlling controllers 1 and 3. See Getting Started Guide for more details.</p> <p></p>"},{"location":"guides/netplay-multiple-controllers/#client","title":"Client","text":""},{"location":"guides/netplay-multiple-controllers/#configure-clients-input-devices","title":"Configure Client's Input Devices","text":"<p>Set up Input Devices while the game is loaded:</p> <ul> <li>Connect two controllers</li> <li>Start SNES Super Bomberman 2 game</li> <li>Set Inputs for each controller 1 and 2:</li> <li>Navigate to Settings</li> <li>Navigate to Inputs</li> <li>Navigate to Port 1 Binds</li> <li>Ensure Device Index is set to *Controller Name 1</li> <li>Return to Inputs configuration menu</li> <li>Navigate to Port 2 Binds</li> <li> <p>Ensure Device Index is set to *Controller Name 2</p> <p>* Controller Name 1 and 2 are unique to the computer and to the controllers connected to it (e.g., PS4 controller shows as \"Wireless Controller #1\")</p> </li> </ul>"},{"location":"guides/netplay-multiple-controllers/#configure-clients-requested-devices","title":"Configure Client's Requested Devices","text":"<p>Set client computer's RetroArch Netplay to request control of the running core's devices/controllers:</p> <ul> <li>Navigate to Settings -or- Netplay</li> <li>Navigate to Network</li> <li>Set Request Device 2 to YES</li> <li>Set Request Device 3 to YES</li> <li>Ensure all other Request Device # are set to NO</li> </ul> <p>Client is now able to join the Host in a NetPlay game controlling controllers 2 and 4. See the Getting Started Guide for more details.</p> <p></p> <p>Warning</p> <p>RetroArch Network typically has all Request Device # set to NO. When all Request Device # are set to NO, this allows NetPlay to automatically set host as device/controller 1. When the client connects to the host, the client will connect to device/controller 2 for the NetPlay session. Each subsequent client that connects will continue connect to the next available device/controller. For this automatic client-to-controller assignment in a RetroArch NetPlay session to work, all Request Device # settings must be set to NO. If any connecting clients request a device, automatic assignment is disabled for everyone and all clients must request a device via the settings menu.</p>"},{"location":"guides/optimal-vsync/","title":"Getting Optimal Vsync Performance","text":"<p>RetroArch uses Dynamic Rate Control to synchronize both video and audio at the same time. Synchronizing in this way is a very demanding task timing-wise and dynamic rate control helps smooth out imperfections in timing which are guaranteed to arise. However, when Dynamic Rate Control is functioning as intended, the frame pacing and audio synchronization will be perfectly smooth. </p> <p>It can be disabled, but be aware that proper video/audio sync is nearly impossible to obtain in that case.</p> <p>Tip</p> <p>+In order to propose improvements to this document, visit it's corresponding source page on github. Changes are proposed using \"Pull Requests.\"</p>"},{"location":"guides/optimal-vsync/#basic-configuration","title":"Basic Configuration","text":"<p>While using RetroArch, the default settings might not be adequate, and you might experience video stuttering and/or audio crackling. For correct synchronization, <code>Settings-&gt;Video-&gt;Output-&gt;Vertical Refresh Rate</code> must be configured for your display. It cannot be detected accurately enough by OS-provided APIs (i.e. they tend to blatantly lie). For proper behavior, an accuracy of roughly ~0.1% is needed for dynamic rate control to smooth out the drifting. This is trivial to obtain by measuring manually under normal conditions. Without dynamic rate control one would need a \"perfect\" measurement which obviously isn't possible without special hardware.</p> <p>RetroArch gives you an estimate of your display's refresh rate at <code>Settings-&gt;Video-&gt;Output-&gt;Estimated Screen Refresh Rate</code>, which is updated in real-time using a running average over frame times. Make sure VSync is enabled and working. Also make sure you're running in full-screen for more accurate results (compositors can easily interfere with timing). Press accept button on the estimated refresh rate to configure RetroArch with the estimated rate. If the running average isn't drifting much anymore, it's probably a good result.</p> <p>You can also have RetroArch log the output at the end and configure things more manually. Start RetroArch directly in RGUI with <code>retroarch --verbose --menu</code>. Let it run uninterrupted for at least 4096 frames (displayed in title bar), and exit. In the log, you should see something like:</p> <p><pre><code>RetroArch: Average monitor Hz: 59.869485 Hz. (1.347 % frame time deviation, based on 2048 last samples).\n</code></pre> If you're unsure about the result, run this test several times and see if the results are consistent. Some systems tend to have very unreliable VSync behavior and this result will wildly fluctuate. You can use this value in <code>Vertical Refresh Rate</code> and the video and audio should ideally be exceptionally smooth without any static or 'popping' audio. If you have ensured your refresh rate is dialed in well, and this is still not the case, read on.</p>"},{"location":"guides/optimal-vsync/#advanced-configuration-considerations","title":"Advanced Configuration Considerations","text":"<p>If you continue to find the audio and/or video output after the above basic configuration to be incorrect or insufficient, there are a multitude of settings and other factors, both inside of RetroArch and external to the program, that can have a significant impact on your ability to obtain smooth frame pacing and proper synchronization. Adjusting these settings in a haphazard fashion or adjusting more than one at a time can lead to skipping over a correct solution by fixing one part of the problem while simultaneously breaking another part. If instead it does work afterwards, then it can lead to an inability to determine which change actually contributed to success.</p> <p>The next section is an attempt at a step by step guide to configuring and diagnosing most frame pacing related settings. It is ordered starting from the most critical and directly audio/visual synchronization related settings first and continues towards settings that have other uses and effects, yet also impact synchronization, farther down. You can skip over any configuration changes you are unwilling to compromise on just for possibly improved frame pacing, or stop after any point in the process that you are satisfied with the output, of course. </p> <p>If you want to be able to judge the impact of a setting change by more than just 'eyeballing' the results, RetroArch provides a running statistics HUD by toggling <code>Settings-&gt;User Interface-&gt;On-Screen Display-&gt;On-Screen Notifications-&gt;Notification Visibility-&gt;Display Statistics</code>. You can also use an external program to monitor frame pacing, but keep in mind just the act of running it is possibly introducing a small amount of jitter itself.</p> <p>Notable internal RetroArch statistics regarding frame pacing are:</p> <ul> <li> <p>Core AV_INFO-&gt;FPS - The exact frame timing the core is requesting.</p> </li> <li> <p>Video-&gt;Refresh - What your <code>Settings-&gt;Video-&gt;Output-&gt;Vertical Refresh Rate</code> is currently set to.</p> </li> <li> <p>Video-&gt;FPS - The rate at which you are currently outputting actual frames. With VRR on, this should match <code>Core AV_INFO-&gt;FPS</code>, and with VRR off, this should be very close to <code>Settings-&gt;Video-&gt;Output-Vertical Refresh Rate</code> divided by <code>Vsync Swap Interval</code> after the averaging settles. If <code>Video-&gt;FPS</code> is far above these values, possibilities include your Vsync or your VRR settings are not engaging properly, depending on which you are using, while having <code>Settings-&gt;Audio-&gt;Synchronization-&gt;Synchronization</code> disabled. If instead <code>Video-&gt;FPS</code> is substantially beneath, possibilities include Swap Interval set wrong, or your hardware not being able to keep up with the system demands. Note that neither <code>Video-&gt;FPS</code> nor <code>Core AV_INFO-&gt;FPS</code> will display 30 for 30 fps content most of the time, as internal frame doubling is performed.</p> </li> <li> <p>Audio-&gt;Underrun - This keeps track of the amount of time slices over a recent period that the audio buffer is near emptying. If this value settles at a percentage higher than 0%, after running for a while (and without menu access, slow motion, or fast forward having recently been used), you can use this to diagnose that the audio and video aren't in great sync, as the audio is not keeping up with the video. In this situation RetroArch will either occasionally stutter briefly to maintain sync, or if <code>Settings-&gt;Audio-&gt;Synchronization-&gt;Synchronization</code> is off, you will get static and popping audio noises.</p> </li> <li> <p>Audio-&gt;Blocking - The opposite of <code>Audio-&gt;Underrun</code> in practice. This time, if it settles at a percentage higher than 0%, after running for a while (and again, without menu access, slow motion, or fast forward having recently been used), it means the audio is running ahead of the video.</p> <p>Note that on some cores it is possible to have moderate amounts of both Underrun and Blocking present while your hardware is capable of performing at full core requested speed and all settings are correct, but this is more common for actual variable framerate content that tends to be more present from the 5<sup>th</sup> generation of consoles on. So it might be best to test your overall settings with an earlier generation, less complex core. </p> </li> </ul>"},{"location":"guides/optimal-vsync/#advanced-configuration-step-by-step-guide","title":"Advanced Configuration Step-By-Step Guide","text":"<ol> <li> <p>Choose one of the following synchronization methods depending on whether your screen is capable of Variable Refresh Rate (VRR) and if you want to use it:</p> <ul> <li> <p>For synchronization without VRR, you should set <code>Settings-&gt;Video-&gt;Output-&gt;Vertical Refresh Rate</code> very close to an evenly divisible multiple of the core requested refresh rate, still using <code>Settings-&gt;Video-&gt;Output-&gt;Estimated Screen Refresh Rate</code> to get a more accurate value as mentioned in the Basic Configuration section. You should end up with a value right around 60/120/180/240/etc Hz for NTSC, 50/100/150/200/etc for PAL. Uneven, but fairly common, display refresh rates like 75/90/144/165 Hz are only able to maintain smooth frame pacing and audio synchronization while <code>Variable Refresh Rate (VRR)</code> is active, which is discussed below.</p> <p>Setting your actual display refresh rate to 60Hz, and then configuring the real refresh rate as per the Basic Configuration section, combined with a complementary <code>Vsync Swap Interval</code> of 1, will always be the most default and thus supported mode of operation to obtain perfect frame timing. But if you want to be able to run RetroArch on your &gt;60Hz display without having to lower the actual screen refresh rate, this section explains how to do so correctly with minimized chance of issues.</p> <p>After you have verified the rate is set appropriately, you should check under <code>System-&gt;Video Settings-&gt;Synchronization</code> and make sure that <code>Vertical Sync (Vsync)</code> is on, and set the <code>Vsync Swap Interval</code> to either <code>Auto</code>, which will try to determine the right value for your applied refresh rate on its own, or you can manually set the value yourself. Unless you note specific issues with your system, <code>Auto</code> is likely the superior choice, as it will avoid the 'math problem' required for manual configuration and respond to changes in others settings including <code>Black Frame Insertion</code> and <code>Sync to Exact Content Framerate (G-Sync, Freesync)</code> without needing to be updated again itself. </p> <p>If you choose to set it manually, the value you should set it to is the value such that when you divide <code>Settings-&gt;Video-&gt;Output-Vertical Refresh Rate</code> by it, gives you a result near your 60/50Hz goal. I.e. 60Hz/1 = 60Hz, so set <code>Vsync Swap Interval</code> to 1. 120Hz/2 = 60Hz, so set <code>Vsync Swap Interval</code> to 2, 180Hz/3 = 60Hz so set <code>Vsync Swap Interval</code> to 3, and so on.</p> <p>Lastly, when syncing with this method to a value other than <code>Auto</code> or 1, ensure that <code>Black Frame Insertion</code> is off, and that <code>Sync to Exact Content Framerate (G-Sync, Freesync)</code> is off. These are each separate methods to sync the display and audio, and they should not be combined.</p> </li> <li> <p>For a VRR capable display, configuring settings is less error prone, at least inside of RetroArch, and also has a benefit of being able to sync to the exact originally intended speed of the core. <code>Settings-&gt;Video-&gt;Output-&gt;Vertical Refresh Rate</code> will not be in use to attempt to adjust the timing, and is not required to be set correctly, but it is still good practice.</p> <p>To setup RetroArch to use VRR timing, turn on <code>Sync to Exact Content Rate (G-Sync, Freesync)</code> under <code>System-&gt;Video Settings-&gt;Synchronization</code>, and verify <code>Vsync Swap Interval</code> is set to either 1 or Auto, and that <code>Black Frame Insertion</code> is off. Just as above, these settings should not be combined.</p> </li> </ul> </li> <li> <p>Ensure <code>Settings-&gt;Audio-&gt;Synchronization-&gt;Synchronization</code> is enabled. Also in this same menu, for a non-VRR setup, <code>Maximum Timing Skew</code> will decide how far Retroarch will be willing to adjust the core requested speed to attempt to sync with your refresh and swap interval settings.</p> <p>For the most part, the default value will be fine, but some arcade content runs at Hz significantly farther in the middle between 50Hz and 60Hz. The older Mortal Kombat arcade machines request a rate around 54Hz, for instance. Further, if you desire to run 50Hz PAL content at 60Hz NTSC speed, you must set the maximum skew even higher. 60Hz NTSC is ~17% faster than 50Hz PAL, so you would want to set the <code>Maximum Timing Skew</code> to .17. Note that a higher maximum will not cause content that is not far from your set refresh rate to run at a less correct speed, it will only allow content that is farther away to sync so that you can obtain smooth frame pacing and audio.</p> </li> <li> <p>Check Display Control Panel and Other External Program Settings</p> <ul> <li> <p>Make sure you are not overriding application settings to force <code>Vsync</code> off. </p> </li> <li> <p>Check if you decided to use VRR in step 1.</p> <ul> <li> <p>If you aren't using VRR, and have a maximum framerate cap set (in the driver or through a third party software tool like RTSS), verify that it is at least as high as the set refresh rate of your display. You might think a 60 fps cap would be all you need for 60 fps content, but a display set to 240Hz using a swap interval of 4, still needs 240 potential vblanks per second to sync correctly to 60 actual fps.</p> </li> <li> <p>If you are using VRR, you must verify that it enabled at the display driver level, and on the display as well. Also you should ensure, if you have a configured maximum framerate cap, that it is set slightly above 60 at the least, not right at 60. NTSC NES/SNES request 60.1Hz for instance, and this could interfere with proper frame timing even with VRR, if you have a 60 fps framerate cap.</p> </li> </ul> </li> <li> <p>If your system has a strong GPU and it is available for your display driver, consider looking for a setting similar to <code>Power Management Mode</code> and configure it for <code>Prefer Maximum Performance</code>, either globally or specifically for RetroArch.</p> <p>Some higher powered GPU's are designed to downclock on lower loads by default, which they may see RetroArch as. If your GPU can stay in this downclocked state while maintaining full performance, there might not be any interference with smooth synchronization. However, if instead if it responds to RetroArch as a load where it constantly shifts back and forth between a high power state and a low power state, this can cause inconsistent frame times.</p> </li> <li> <p>Consider disabling possibly unnecessary overlays like from RTSS, Discord, or Steam. RTSS has been known with previous versions, for instance, to cause issues with Vulkan in Retroarch, even when not running, just merely by being installed! For reference: Vulkan Frame Pacing Stutter</p> </li> <li> <p>Active video recording or streaming software has the potential to interfere with perfect frame pacing, but if your stream or recording is important, obviously perfect frame pacing will have to become a secondary concern. Just set all other settings as appropriately as you can.</p> </li> </ul> </li> <li> <p>Back inside of RetroArch consider adjusting settings that can have an impact on frame pacing and synchronization.</p> <ul> <li> <p>Windowed mode, and even windowed full-screen mode can contribute to frame pacing issues, so <code>Settings-&gt;Video-&gt;Fullscreen Mode-&gt;Windowed Full-Screen Mode</code> can be disabled to test if this improves your frame pacing.</p> </li> <li> <p><code>Settings-&gt;Video-&gt;Output-&gt;Automatic Refresh Rate Switch</code> can be considered to be disabled, as if it changes your actual display refresh rate, in non-VRR mode this can interfere with your set Vsync Swap Interval and cause large mistiming, and in VRR mode, you want the display to maintain the maximum potential refresh rate so that it can be more accurate in accomodating small requested timing differences.</p> </li> <li> <p><code>Settings-&gt;Video-&gt;Output-&gt;Threaded Video</code> is well known to interfere with smooth frame pacing and audio sync, but can be the only choice for hardware otherwise too weak for the intended content to run at near the correct frame rate at all.</p> </li> <li> <p>Using a very heavy shader like an accurate CRT emulation shader, especially on a higher resolution display, can also increase performance requirements to obtain smooth synchronization.</p> </li> <li> <p>Your preferred renderer API of Vulkan/OpenGL/DirectX 11/etc might not interact perfectly with your system or the core you are using, and you can try an alternative.</p> </li> <li> <p>Core specific settings can be checked for things such as overclocks which can increase system requirements to where you might not be able to run full speed, or internal run-ahead, or frame duplication.</p> </li> <li> <p>Under <code>Settings-&gt;Latency</code>, <code>Frame Delay (ms)</code>, <code>Automatic Frame Delay</code>, <code>Run-Ahead to Reduce Latency</code> and <code>Run Pre-Emptive Frames</code> should be adjusted down or off if smooth frame pacing is a priority for you over latency and you continue to have issues at this point in the process.  These settings can cause inability to reach proper sync if your system can not handle the increased load or they are simply set too high even on very capable hardware.</p> </li> <li> <p><code>Settings-Latency-&gt;Audio Latency</code> perhaps unintuitively should be kept higher, not lower. Too low of an audio latency causes RetroArch to stutter while waiting to refill the now smaller audio buffer when <code>Settings-&gt;Audio-&gt;Synchronization-&gt;Synchronization</code> is enabled, or can cause very poor audio output when <code>Settings-&gt;Audio-&gt;Synchronization-&gt;Synchronization</code> is not set.</p> <p>How low you can set this to without issue can vary per content, but the default value of 64 ms was chosen for avoiding issues like this. If you still decide to push lower, keep in mind a 60Hz NTSC frame is approximately 16.66 ms long, so you might want to try a value a little longer than 2 frames, like 35ms, and then a little longer than 3 frames like 52ms, et cetera.</p> </li> <li> <p>Under <code>System-&gt;Video Settings-&gt;Synchronization</code>, <code>Hard GPU Sync</code>, <code>Max Swapchain Images</code>, or <code>Waitable Swapchains</code>, any of which might be available with your current renderer API, are designed to reduce latency by limiting how many frames ahead that the cpu can calculate beyond the currently displayed frame. If you are still experiencing frame pacing issues having reached this poing in the document, and care more about that than increased latency, you can disable <code>Hard GPU Sync</code>, <code>Waitable Swapchains</code>, or increase the value of <code>Max Swapchain Images</code> to give your system more performance headroom.</p> </li> </ul> </li> </ol>"},{"location":"guides/optimal-vsync/#further-considerations","title":"Further Considerations","text":"<p>If you've gone through all the above, there is not much more to configure settings-wise. It is possible your hardware is just not capable of running the desired content at full speed. You can try to see if an alternative core exists for your content that is perhaps designed to run on lower specification hardware than the one you were previously using. Also (though no specific offenders will be named as this can change for better or worse with any core update any given day) some content on some cores simply have somewhat poorer timing control. Odds are higher of finding this on 5<sup>th</sup> generation and beyond console cores that are dealing with content that ran at very unstable framerates on original hardware. </p> <p>Lastly, a couple things to keep in mind that don't fit neatly in any section above without being a large digression:</p> <ul> <li> <p>Most VRR displays have a feature called Low Framerate Compensation (LFC). What this means is that there is a minimum fps below which VRR can no longer actually sync, and it will compensate for this with , depending on display implementation, a combination of internal frame doubling and screen tearing. If this rate is right near the output rate, and some 240Hz+ displays are indeed coming with a LFC minimum rate directly around 60 as of this writing, you can experience significant impact on frame pacing. 30 fps content will also be below this LFC rate on a large number of VRR displays, but if it is a very stable 30 fps and the display has a good frame doubling algorithm, this might not be an issue.</p> <p>If you check your display specifications and believe you are experiencing LFC related issues, you might well be better served using a fixed refresh rate for RetroArch. Note that you should not have to disable VRR in your display driver or on your display, just discontinue use of <code>Sync to Exact Content Rate (G-Sync, Freesync)</code> inside Retroarch, and instead follow the instructions above for using <code>Vsync Swap Interval</code> to sync.   </p> </li> <li> <p>It has been noted previously that for macOS, that having more than one display active can cause interference with obtaining good frame pacing and audio synchronization. This can be extended as a possible solution to try regardless of operating system. Relatedly, it is potentially helpful if you do leave multiple displays active, to leave them all set to the same refresh rate.</p> <p>Also, running videos or other screen updating content at the same time on a secondary display is a potential source of issues. Windows 10/11 compositor handles multiple active contents like this better as of writing than in the past, but this could change at any point and there are also a multitude of other Operating Systems and devices that will have their own possible compositor issues with running multiple separate contents simultaneously.</p> </li> </ul> <p>Thanks for reading, and have a smooth day!</p>"},{"location":"guides/overlay-pointing-devices/","title":"Overlay Mouse, Lightgun, and Pointer","text":"<p>When using an overlay, RetroArch can send pointing device input alongside gamepad input using <code>Enable Overlay Lightgun, Mouse, and Pointer</code> in the <code>On-Screen Overlay</code> menu.</p> <p>This allows more natural control of lightgun overlays, emulated touchscreens, mouse-controlled first-person shooters, and anything else requiring simultaneous button + pointer input.</p> <p>Note: This overrides any platform-specific touchscreen controls, which might behave differently.</p>"},{"location":"guides/overlay-pointing-devices/#mouse-behavior","title":"Mouse behavior","text":"<p>Dragging 1 finger moves the mouse cursor. 1-, 2-, and 3-finger taps are left, right, and middle mouse button clicks.</p> <p>By default, a 0.2s long press begins holding a button, and you'll feel haptic feedback when it starts. A double-tap hold method is also available but adds some latency to clicks. With either method, dragging 2 or 3 fingers immediately holds the right or middle button.</p> <p>There are settings for mouse speed, long-press and double-tap time thresholds, and a \"swipe threshold\" to distinguish swipes from taps and long presses.</p>"},{"location":"guides/overlay-pointing-devices/#lightgun-behavior","title":"Lightgun behavior","text":"<p>Lightgun x, y, and trigger are normally sent together to every lightgun port. There are settings to choose the port, disable the trigger, delay the trigger, and clamp off-screen aim to the in-bounds edge. The trigger delay is needed for content that doesn't instantly move the gun cursor to a screen tap.</p> <p>More lightgun buttons can be assigned to 2-, 3-, and 4-finger inputs. The trigger delay is used to wait for the correct multi-touch count. A 1-frame delay is usually enough to distinguish these inputs.</p> <p>Note: A few cores have a <code>Touchscreen</code> option for lightgun input. That needs to be set to <code>Lightgun</code> for this.</p>"},{"location":"guides/overrides/","title":"Using Content, Folder, and Core Overrides for Custom Settings","text":"<p>There are various and comprehensive ways to save customized settings within the RetroArch menus. 99% of settings can be adjusted and saved from the menu but are only plain text files and can be adjusted manually with a text editor.</p> <ul> <li>Global settings can be overridden on a per core, per content directory, or per game basis using the config override system.</li> <li>Input settings are handled separately with the input core and game Remap system.</li> <li>Likewise, Shader Preset settings are also their own entity for per core and game settings</li> <li>A standalone file also saves the Option settings for all cores that support them. The settings in this file can be overridden on a per game basis.</li> </ul> <p>Tip</p> <p>Please read the Getting Started guide.</p>"},{"location":"guides/overrides/#logic","title":"Logic","text":""},{"location":"guides/overrides/#overrides-cfg-remaps-rmp","title":"Overrides (.cfg) &amp; Remaps (.rmp)","text":"<p>Overrides and Remaps are designed to be lightweight and easily maintained configuration methods. They save only settings that differ from the preceding settings files.</p> <p>For example if only one setting differs between your <code>retroarch.cfg</code> and a <code>core.cfg</code>, then the <code>core.cfg</code> file will only contain one setting.</p> <p>The hierarchy for loading is:</p> <ol> <li>Game settings -&gt; Applied when loading a particular game (content)</li> <li>Content directory settings -&gt; Applied when loading content from a particular directory</li> <li>Core settings -&gt; Applied when loading content with a specific core</li> <li>Default settings -&gt; The default settings from 'retroarch.cfg'</li> </ol> <p>The RetroArch loading process is:</p> <ul> <li>Load <code>retroarch.cfg</code><ul> <li>Apply <code>&lt;name-of-core&gt;.cfg</code> &amp; <code>&lt;name-of-core&gt;.rmp</code> override<ul> <li>Apply <code>&lt;name-of-content-directory&gt;.cfg</code> &amp; <code>&lt;name-of-content-directory&gt;.rmp</code> override<ul> <li>Apply <code>&lt;name-of-game&gt;.cfg</code> &amp; <code>&lt;name-of-game&gt;.rmp</code> override</li> </ul> </li> </ul> </li> </ul> </li> </ul> <p>Note</p> <p>Core-specific or content directory-specific overrides that are not in game-specific overrides persist and will be loaded. Also once you have created an override any future changes will need to be saved via the Quick Menu.</p>"},{"location":"guides/overrides/#options-opt-shader-presets-cgpglslpslangp","title":"Options (.opt) &amp; Shader Presets (.cgp|.glslp|.slangp)","text":"<p>Custom per game core options and shader presets work slightly differently. These are full configurations and are loaded instead of the base shader preset and core option settings.</p>"},{"location":"guides/overrides/#configuration-files-location","title":"Configuration Files &amp; Location","text":"<p>Note</p> <p>Depending on your chosen platform the location of these files after installation may vary.</p> <p>Warning</p> <p>Some settings cannot be saved in an override file from the menu. You can manually add settings to the override file to workaround most situations.</p> <p>The default and global settings file</p> <ul> <li><code>retroarch.cfg</code> (located in the base install path)</li> </ul> <p>The global file for core option settings, for cores that support options</p> <ul> <li><code>retroarch-core-options.cfg</code> (located with the <code>retroarch.cfg</code>)</li> </ul>"},{"location":"guides/overrides/#core-options","title":"Core options","text":"<ul> <li><code>name-of-game.opt</code> If not found load<ul> <li><code>retroarch-core-options.cfg</code></li> </ul> </li> </ul> <p>The options files list the settings found under <code>Quick Menu -&gt; Options</code>. The <code>retroarch-core-options.cfg</code> is created automatically on loading a core that supports Options.</p> <p>A game-specific options file is created when you select <code>Quick Menu -&gt; Options -&gt; Game-options file</code>. (located in <code>/config/&lt;name-of-core&gt;/&lt;name-of-game&gt;.opt</code>. The path is set under <code>Settings-&gt;Directory-&gt;Config</code>)</p> <p>Attention</p> <p>Load Content Specific Core Options Automatically must be set to On in RetroArch's Configuration settings in order for game-specific options to be automatically loaded upon content load.</p>"},{"location":"guides/overrides/#override-configs","title":"Override Configs","text":"<p>The override system activates on loading of content. RetroArch applies config settings with the logic as explained above.</p> <p>Per Core Override</p> <ul> <li><code>/config/&lt;name-of-core&gt;/name-of-core.cfg</code> (This path is set under <code>Settings -&gt; Directory -&gt; Config</code>)</li> </ul> <p>These settings files are created from the <code>Quick Menu -&gt; Save Core Overrides</code> option and contain ANY (supported) settings you have changed since loading content. These settings will be loaded every time you load content with that core.</p> <p>Per Content Directory Override</p> <ul> <li><code>/config/&lt;name-of-core&gt;/name-of-content-directory.cfg</code> (located with per core override)</li> </ul> <p>These settings files are created as above with the <code>Quick Menu -&gt; Save Content Directory Overrides</code>. The settings will take precedence over <code>name-of-core.cfg</code></p> <p>Per Game Override</p> <ul> <li><code>/config/&lt;name-of-core&gt;/name-of-game.cfg</code> (located with per core override file)</li> </ul> <p>These settings files are created as above with the <code>Quick Menu -&gt; Save Game Overrides</code>. The settings will take precedence over <code>name-of-content-directory.cfg</code></p>"},{"location":"guides/overrides/#input-remaps","title":"Input Remaps","text":"<p>Input remaps use the same logic as core/directory/game overrides and use the <code>.rmp</code> extension. They can be adjusted and saved from: - <code>Quick Menu -&gt; Controls -&gt; Save Core Remap File</code> - <code>Quick Menu -&gt; Controls -&gt; Save Content Directory Remap File</code> - <code>Quick Menu -&gt; Controls -&gt; Save Game Remap File</code></p> <p>Set the save directory in <code>Settings -&gt; Directory -&gt; Input Remapping</code> (by default they will save to <code>/config/remaps/&lt;name-of-core&gt;/</code>)</p>"},{"location":"guides/ozone/","title":"Ozone (GUI)","text":"<p>Ozone is the default graphical user interface (gui) of RetroArch. Based on the Switch's menu design, this menu driver was introduced in RetroArch 1.7.6.</p> <p></p> DISCLAIMER Keyboard key assignments may differ by platform and configuration: Most of the examples below are for PC."},{"location":"guides/ozone/#menu-structure","title":"Menu structure","text":"<p>Ozone's main categories and playlists are in a column on the left, and subcategories are in a panel to the right. A third column will appear on the right hand side when certain selections are made.</p> <p></p> <p>Entering a subcategory will hide the top-level menu's text labels. When you return to Main Categories, the descriptions will reappear. The sidebar does not collapse while in Main Menu or Settings.</p> <p>If you want the labels to always be hidden, go to <code>Settings&gt; User Interface&gt; Appearance</code>, then turn <code>Collapse the Sidebar</code> on.</p> <p></p>"},{"location":"guides/ozone/#navigating-the-menus","title":"Navigating the menus","text":"<p>Ozone is controlled like any other user interface. Regular input binds will apply, and binds here are defined in terms of the RetroPad, RetroArch's gamepad and joystick abstraction.</p> Controller Default PC Action A button Z/ENTER/Left mouse click Accept/OK B button X/Backspace/Right mouse click Back/Cancel D-pad Up/Down/Left/Right Arrow keys Scroll through menu options N/A Right shift Toggle description label N/A S key Toggle search N/A F1 Toggle quick menu N/A F5 Toggle desktop menu <p>See Input and Controls.</p>"},{"location":"guides/ozone/#searching-through-lists-with-the-keyboard","title":"Searching through lists with the keyboard","text":"<p>When using a keyboard, it can be slow to navigate a large list using gamepad-like controls. To help this, you can type <code>/</code> (forward slash) or <code>S</code> (S key) at any time to bring up a search box.</p> <p>Type a search string and hit <code>Return</code>. The cursor should jump to the first entry that matches.</p> <p>The search will match mid-path strings. However, if a match is found at the beginning of the path (like when searching for the first letter), the start-of-path match will take priority.</p>"},{"location":"guides/ozone/#input","title":"Input","text":"<p>See Input and Controls.</p>"},{"location":"guides/ozone/#thumbnails","title":"Thumbnails","text":"<p>Thumbnails appear in a side bar on the right side of the screen. With a playlist item selected, you can press the <code>spacebar</code> on your keyboard to toggle the full-screen view on/off.</p> <p>The default thumbnail is Boxart. Two thumbnails can be displayed simultaneously by going to <code>Settings&gt; User Interface&gt; Appearance</code> and enabling <code>Secondary Thumbnail</code>. The user can choose to display boxart, the title screen, or a gameplay screenshot.</p> <p></p>"},{"location":"guides/ozone/#audio","title":"Audio","text":"<p>Ozone has OK, Cancel, Notice and Scroll sound effects. It also has background music, created by ViRiX Dreamcore.</p> <p> </p> <p>These are turned off by default. To enable them, go to <code>Settings&gt; Audio&gt; Menu Sounds</code> and turn on the <code>Mixer</code>. Then in the same menu, turn on the sounds you want (the background music option is called <code>Enable BGM Sound</code>).</p>"},{"location":"guides/ozone/#applying-shaders","title":"Applying shaders","text":"<p>See the shaders user guide.</p>"},{"location":"guides/ozone/#themes","title":"Themes","text":"<p>Ozone has a range of color schemes to choose from. They can be found in <code>Settings&gt; User Interface&gt; Appearance&gt; Color Theme</code>.</p> <p></p>"},{"location":"guides/quick-menu/","title":"Quick Menu","text":"<p>The Quick Menu is effectively RetroArch's pause menu.</p>"},{"location":"guides/quick-menu/#controls","title":"Controls","text":"<p>The Quick Menu can be accessed by pressing a certain gamepad combination, pressing the <code>F1</code> key on your keyboard, or tapping on the \"Invader\" or \"Menu\" button on most Gamepad Overlays.</p> <p>The RetroPad button combination for opening the Quick Menu can be changed at <code>Settings&gt;Input&gt; Hotkeys&gt; Menu Toggle</code>. Users select the combination from a list (Custom combinations cannot the applied):</p> <ul> <li>None</li> <li>Done + Y + L1 + R1</li> <li>L3 + R3</li> <li>L1 + R1 + Start + Select</li> <li>Start + Select</li> <li>L3 + R1</li> <li>L1 + R1</li> <li>Hold Start (2 seconds)</li> <li>Hold Select (2 seconds)</li> <li>Down + Select</li> <li>L2 + R2</li> </ul>"},{"location":"guides/quick-menu/#features","title":"Features","text":"<p>The Quick Menu provides access to many core-specific settings and options while the content is paused in the background. Options include (but are not limited to) adjusting the video resolution and system region, remapping controller inputs, managing Load/Save States, cheats or shaders, and taking screenshots or recording video clips.</p>"},{"location":"guides/quick-menu/#close-content","title":"Close Content","text":"<p>The most important function exclusive to the Quick Menu (aside from <code>Resume Content</code>) is <code>Close Content</code>. This safely 'shuts off' the emulated system and its content, returning the user to RetroArch's main menu without having to quit RetroArch completely.</p>"},{"location":"guides/quick-menu/#disc-control","title":"Disc Control","text":"<p>Another \"exclusive\" function that appears with certain cores is swapping discs using the <code>Disc Control</code> option: See Disc Swapping.</p>"},{"location":"guides/recording-and-streaming/","title":"Recording and streaming video from RetroArch","text":"<p>RetroArch has the capability to record gaming footage in real-time using libavcodec (FFmpeg). Both lossless and lossy coding is supported. It is possible to configure most encoding options for libavcodec using a separate config file.</p>"},{"location":"guides/recording-and-streaming/#ffmpeg-version","title":"FFmpeg version","text":"<p>RetroArch requires a very recent version of FFmpeg to work correctly. If you are on Linux or OSX, your distros FFmpeg build is likely out of date, and you should build FFmpeg from Git. A recommended command line is:</p> <pre><code>./configure --prefix=/opt/ffmpeg --enable-libx264 --enable-gpl --enable-libmp3lame &lt;enable stuff you fancy here&gt;\nmake\nsudo make install\n</code></pre> <p>This assumes you will install a custom FFmpeg build into <code>/opt/ffmpeg</code>. For Windows users, the redist includes recent enough libav* binaries.</p> <p>Now you can configure RetroArch with:</p> <p><code>PKG_CONFIG_PATH=/opt/ffmpeg/lib/pkgconfig ./configure</code></p> <p>and the configure script should pick up the FFmpeg libraries in <code>/opt/ffmpeg/lib</code>. Check config.mk to make sure. After successfully compiling, make sure that the RetroArch binary picks up the correct FFmpeg libs by adding <code>/opt/ffmpeg/lib</code> to LD_LIBRARY_PATH (or the equivalent on OSX).</p>"},{"location":"guides/recording-and-streaming/#lossless-coding","title":"Lossless coding","text":"<p>By default (not providing an encoding config), lossless coding is used. This means libx264/RGB, with -qp 0 (lossless). The audio codec used is FLAC. libx264/RGB ensures very nice bitrates even when lossless and very fast encoding.</p>"},{"location":"guides/recording-and-streaming/#lossy-and-flexible-coding-config","title":"Lossy and flexible coding config","text":"<p>By adding the <code>--recordconfig &lt;config&gt;</code> parameter, you have more control over encoding. The recognized config options are:</p> <pre><code>vcodec = &lt;codec&gt; # Same as -vcodec\nacodec = &lt;codec&gt; # Same as -acodec\nformat = &lt;format&gt; # Muxer format to use. E.g. mkv, flv or mp4. This is normally inferred, but must be set when using extensionless formats like RTMP (streaming).\nthreads = &lt;threads&gt; # Threads to use when encoding video. Should be set to (# of CPU threads - 1).\nframe_drop_ratio = &lt;ratio&gt; # Only encodes every &lt;ratio&gt; frames.\npix_fmt = &lt;pix_fmt&gt; # Same as -pix_fmt, no default is assumed, must be set!\nscale_factor = &lt;factor&gt; # Scales input by &lt;factor&gt;. Useful when encoding in chroma subsampled formats like yuv420p.\nsample_rate = &lt;rate&gt; # Audio output sampling rate.\naudio_global_quality = &lt;qual&gt; # Global quality for audio (VBR). Maps to codec-&gt;global_quality in API. Play around with it. Higher = better. 75 seems to be a fair value.\naudio_bit_rate = &lt;bitrate&gt; # Audio bit rate (CBR). This is in bit/s, so use e.g. 192000 for 192 kb/s.\n\nvideo_{option} = &lt;value&gt; # Sets generic video option {option} to &lt;value&gt;. This is codec specific. Mostly useful for libx264.\naudio_{option} = &lt;value&gt; # Sets generic audio option {option} to &lt;value&gt;. This is codec specific.\n</code></pre>"},{"location":"guides/recording-and-streaming/#live-streaming","title":"Live streaming","text":"<p>RetroArch can live stream to RTMP services like twitch. To live stream there, create a config that is tailored for twitch. Example:</p> <pre><code>vcodec = libx264\nacodec = libmp3lame\npix_fmt = yuv420p\nscale_factor = 2\nthreads = 3\nvideo_crf = 25\nvideo_preset = superfast\nvideo_tune = animation\naudio_global_quality = 75\nsample_rate = 44100\nformat = flv\n</code></pre> <p>You can stream to twitch with a command such as:</p> <pre><code>retroarch --record rtmp://live.twitch.tv/app/$YOUR_TWITCH_ID --recordconfig twitch.cfg\n</code></pre>"},{"location":"guides/retroachievements/","title":"RetroAchievements In RetroArch","text":""},{"location":"guides/retroachievements/#what-are-retroachievements","title":"What are RetroAchievements?","text":"<p>retroachievements.org is a service that provides a trophy/achievement unlocking mechanism similar to modern consoles, for retro games.</p> <p>Warning</p> <p>The service is not maintained by RetroArch or the Libretro team.</p> <p>Warning</p> <p>In order to get better compatibility with the RetroAchievements feature it's recommended to always use the latest version of RetroArch and the cores.</p>"},{"location":"guides/retroachievements/#how-to-setup-achievements","title":"How to setup achievements","text":"<ol> <li>Register an account on retroachievements.org (don't forget to confirm your account creation with the email they send to you).</li> <li>Open Retroarch and go to Settings-&gt;Achievements.</li> <li>Enable the functionality and fill in your retroachievements credentials.</li> </ol> <p>Note</p> <p>The hardcore mode prevents you from using emulation features like savestates, slow motion, and cheats, BUT it places you on a separate leaderboard and allows you to participate in site events.</p> <p></p>"},{"location":"guides/retroachievements/#check-your-connection-to-the-service","title":"Check your connection to the service","text":"<p>You need an active internet connection.</p> <p>In this example, we are using the game Chrono Trigger (USA) with the Snes9x core.</p> <p>Launch the game and trigger the Quick Menu.</p> <p>Go to Achievements and you should see a list of the unlockable trophies for this game.</p> <p></p>"},{"location":"guides/retroachievements/#check-your-progress","title":"Check your progress","text":"<p>On the retroachievements website, you can login and access your account page.</p> <p>You should be able to check your progress in the games and see which trophies you unlocked.</p> <p>Trophies unlocked in hardcore mode are marked with a special color.</p> <p>You can also check the progress of your friends and add comments on their trophies.</p> <p></p>"},{"location":"guides/retroachievements/#cores-compatibility","title":"Cores Compatibility","text":"<p>For a list of supported cores, take a look at the Emulator Support page on RetroAchievements.</p> <p>Cores that are not listed as supported are likely to have issues with achievement logic, and tickets from players using those can be closed without investigation.</p> <p>In the future, it is likely that unsupported cores will be blocked in hardcore mode, as well.</p>"},{"location":"guides/retroachievements/#troubleshooting-faq","title":"Troubleshooting FAQ","text":"<p>Question: RetroAchievements were working fine last time I played, but now it suddenly says I can't login! I haven't changed anything!</p> <p>Answer: Your login token may have expired, and you will need to generate a new one by clearing out your login information in Settings &gt; User &gt; Accounts &gt; RetroAchievements and re-entering it.</p> <p>Question: I did whatever the achievement required, but it didn't award me the achievement!</p> <p>Answer: When offline, awarded achievement status is cached and will be awarded once you reconnect to the internet. This only applies to the current session, though, so make sure you don't quit out of RetroArch before reconnecting. If you've had a working internet connection and it still doesn't trigger, make sure you're using an officially supported core before requesting support.</p>"},{"location":"guides/retroarch-accessibility-guide/","title":"Retroarch Getting Started guide for users of the accessibility mode","text":""},{"location":"guides/retroarch-accessibility-guide/#introduction","title":"Introduction","text":"<p>This user guide is to aid users of screen readers who are newcomers to Retroarch begin using the program. Retroarch is an emulation front-end which allows one to play many games from many video game consoles, Arcades, and vintage computers. As of version 1.8.2, the user interface is accessible to blind people. Using the AI service within games, one is able to read textual content: menus, character dialog, statistics screens, ETC. Along with the game\u2019s sound design, this makes many games which were playable even more enjoyable, or games which use only text playable at all. For now, accessibility mode works on Windows, macOS, and Linux operating systems.</p>"},{"location":"guides/retroarch-accessibility-guide/#retroarch-terminology","title":"Retroarch Terminology","text":"<ul> <li>Retroarch: A front-end for many video game emulators.</li> <li>Front-end: A program that brings multiple other programs into one universal interface.</li> <li>Core: a video game console, game engine, or media player within Retroarch.</li> <li>content: a video game, media file, or Homebrew program that can be loaded by a Retroarch core.</li> <li>accessibility: In Retroarch, a setting which speaks the user interface of the program.</li> <li>AI service: A service which takes a screenshot of a game and acts upon it based on the setting chosen in the AI service settings. In this guide, we\u2019ll focus on Narrator mode.</li> <li>Netplay: Playing an originally offline video game across the local network or Internet.</li> <li>bind: To link one thing with another. In Retroarch terms, to link a key or button with an action.</li> </ul>"},{"location":"guides/retroarch-accessibility-guide/#download-retroarch","title":"Download Retroarch","text":"<p>To download Retroarch, go to Retroarch's download page and choose the download for your system. Windows users should choose the 64-bit installer version, unless they have an old computer with a 32-bit operating system. Mac users should download the version under the \u201cApple macOS / OSX\u201d heading; iOS and tvOS users are encouraged to install from the App Store. Linux users should see if version 1.8.2 or higher is in their package manager, and get that and the cores through APT, Pacman, DNF, and so on, or compile it yourself. For Android and game consoles, accessibility features are not implemented.</p>"},{"location":"guides/retroarch-accessibility-guide/#open-the-program","title":"Open the Program","text":"<p>After installing Retroarch, launch the program in the usual way according to your system. Right now, it will not speak, but if it opens, that means it\u2019s at least installed correctly, and you can press escape twice to close it, or using the usual quit command of your operating system.</p>"},{"location":"guides/retroarch-accessibility-guide/#turn-on-accessibility","title":"Turn on accessibility","text":"<p>To turn on the accessibility feature, do the following:</p> <ul> <li>Open Retroarch.</li> <li>Press Left Arrow, Down Arrow, then Enter.</li> <li>Press up arrow seven times.</li> <li>Press Enter twice, or Enter then Right arrow.</li> <li>You\u2019ll hear \u201cRetroarch accessibility on.\u201d</li> </ul> <p>Now, you can either keep exploring the menu, or quit and reopen Retroarch for a fresh start. Accessibility mode will stay on, and if not, after enabling accessibility, arrow left once, then down arrow until you hear \"settings\", then arrow down to configuration, press Enter, and enable \u201csave on exit\u201d with enter.</p> <p>note: in later versions of Retroarch, the default menu has been set to Ozone. For an easier experience, especially with gamepads, you may switch to the \"XMB\" menu by going to settings, drivers, menu driver, and changing \"ozone\" to \"XMB.\" The rest of this guide assumes that you are using the XMB menu.</p>"},{"location":"guides/retroarch-accessibility-guide/#set-narrator-speed","title":"Set Narrator Speed","text":"<p>If you find that Retroarch is speaking too quickly or too slowly, you can change the speed.</p> <ul> <li>From the Retroarch accessibility menu, press Down arrow.</li> <li>Press the Left arrow to decrease the speed, and the Right arrow to increase it.</li> </ul>"},{"location":"guides/retroarch-accessibility-guide/#navigate-the-interface","title":"Navigate the Interface","text":"<p>The Retroarch user interface is composed of menus, dialog boxes, text-entry boxes, and so on. This does not include the games played using Retroarch. To navigate the interface, use the arrow keys to traverse menus, Enter to activate items, left and right arrow keys to adjust options, and backspace to go back to the previous menus. You can press the Shift key to get information on the currently focused menu item, and then Enter or Backspace to exit that dialog.</p> <p>There are two main navigation elements to be aware of in Retroarch\u2019s user interface. Menus are vertical, so you use the Up and Down arrows to navigate these. Tabs, sometimes called Vertical menus, are navigated with the Left and Right arrows. Main Menu, Settings, Netplay, Favorites, ETC. are tabs, but Load Core, Load Content, and Quit are menu items. To the left of the Main Menu, you\u2019ll find the \u201cHorizontal Menus,\u201d which are lists of game systems and games which you\u2019ve played on that system. For example, if you play Play Station games, there will be a menu of those. The games in each tab are in a vertical list, but the other game systems, like PlayStation Portable, will be in another tab to the left of that. Tabs like Favorites, Netplay, and Settings are to the right of the Main Menu.</p>"},{"location":"guides/retroarch-accessibility-guide/#ai-service","title":"AI Service","text":"<p>The AI service is a retroarch feature which takes a screenshot of the game being played, and can either translate the text in the image, speak the text, or speak the text with the same voice as the Narrator used for the Retroarch user interface. You will have to configure the AI service yourself, linking it with a translator, and setting up a key for it.</p> <p>This can be useful for reading menus in games, unspoken character dialog, character dialog in another language, or other textual content, like instructions. Because the AI service uses Artificial Intelligence, the spoken text may not be completely accurate, as is all optical character recognition technology. If there is a table, it will be read one column at a time.</p>"},{"location":"guides/retroarch-accessibility-guide/#how-to-enable-the-ai-service","title":"How to Enable the AI Service","text":"<p>From the Main menu, press Right Arrow to move to the Settings menu. There, press Down Arrow until you reach the AI Service item, and press Enter to open it. Here, you can choose which mode the AI service will be in:</p> <ul> <li>Image Mode: The service will capture an image of text, translate it, and send it back to the screen as an image.</li> <li>Speech Mode: The Service will grab an image of text in a game, translate it if needed, and speak it using a third-party text to speech engine.</li> <li>Narrator Mode: The AI service will grab an image of text, translate it if necessary, and send it to Retroarch\u2019s accessibility system to be spoken by your operating system\u2019s speech synthesizer.</li> </ul> <p>For now, choose Narrator mode by pressing Right Arrow and down arrow to \u201cAi Service Enabled,\u201d and if needed, turn it on with Enter.</p> <p>Also, while you\u2019re here, you can set the language to translate, and to translate to. For example, if you primarily play Japanese games, but you prefer to hear your games spoken in Esperanto, assuming you have a voice for that language, set the source language to \u201cJapanese,\u201d and the target language to \u201cEsperanto.\u201d You can also leave the source language at \u201cDon\u2019t care,\u201d and the Service will guess the language of the game.</p>"},{"location":"guides/retroarch-accessibility-guide/#sign-up-for-ztranslate","title":"Sign up for ZTranslate","text":"<p>To use the AI Service, you need to link it with an online translation service. The easiest method is to use ZTranslate.</p> <ul> <li>In your web browser, go to https://ztranslate.net</li> <li>Find the \u201cSign Up\u201d link, and press Enter on it.</li> <li>Fill out the form, and submit it to make an account there.</li> <li>Check your email, and verify the account by clicking the included link.</li> <li>When logged in, go to the \u201cSettings\u201d link, and press Enter.</li> <li>Move to the \u201cQuota\u201d heading, and arrow down to the \u201cAPI key\u201d section.</li> <li>Copy the API key, and paste it into a Notepad, text edit, GEdit, Pluma, or Nano file.</li> </ul>"},{"location":"guides/retroarch-accessibility-guide/#configure-the-service","title":"Configure the Service","text":"<p>To configure the service, go to the Settings link on ZTranslate\u2019s site, and find the OCR Page. There, you can set confidence levels, which tell the Service what level, from 0 to 1, of confidence to translate the text with. In the Profile page, you can set and change personal information.</p>"},{"location":"guides/retroarch-accessibility-guide/#link-retroarch-with-your-account","title":"link Retroarch with your account","text":"<p>To link Retroarch with your ZTranslate account, find your Retroarch configuration file. Find your Retroarch folder:</p> <ul> <li>Open Retroarch</li> <li>Right arrow to Settings</li> <li>Down Arrow to directories</li> <li>Press Enter</li> <li>Find the configuration directory and note the path to it, then exit retroarch.</li> </ul> <p>Open the configuration directory, and then open Retroarch.cfg. There, change the line starting with</p> <p>#+begin<sub>example</sub> ai<sub>service</sub><sub>url</sub> = \"http://ztranslate.net/service?api_key=\" #+end<sub>example</sub> <p>Here, you can simply copy and paste the URL in quotes to your configuration file, replacing  with your own key, getting rid of the less-than and greater-than signs."},{"location":"guides/retroarch-accessibility-guide/#bind-a-key-to-the-ai-service","title":"Bind a key to the AI Service","text":"<p>Now, for easy access, we can bind the AI Service command to a key. To do this:</p> <ul> <li>Go into retroarch\u2019s settings menu.</li> <li>Arrow down to Input and press Enter.</li> <li>Arrow down to \u201chotkey binds,\u201d and press Enter.</li> <li>Arrow down to \u201cAI Service,\u201d and press Enter and quickly press the key, just once, that you\u2019d like to bind to it.</li> <li>Press Up Arrow then Down Arrow to read the key that AI Service is bound to, to make sure it\u2019s what you want.</li> <li>Press Backspace a few times to exit those menus.</li> </ul>"},{"location":"guides/retroarch-accessibility-guide/#use-controllers","title":"Use controllers","text":"<p>Retroarch not only works with keyboards. One can, if their headphones have a long enough chord, or their controller has a headphone jack, play games, and use the AI Service, right from a game controller. Usually, all one has to do is plug in a controller, and retroarch automatically configures and works with it. Sometimes, though, Retroarch\u2019s control mappings are not to the user\u2019s liking, some some reconfiguration is in order.</p>"},{"location":"guides/retroarch-accessibility-guide/#map-controls","title":"Map controls","text":"<p>To map controls, go to the settings menu in Retroarch, arrow down to User one binds, press Enter, and down arrow to a button you want to configure. Press Enter, and then quickly press once the button you want the command, like \u201cD-Pad Up,\u201d to be mapped to. Repeat this with all other buttons, and press Backspace to exit that menu.</p>"},{"location":"guides/retroarch-accessibility-guide/#bind-hotkeys","title":"Bind Hotkeys","text":"<p>You can also bind hotkeys. This is useful for binding commands, like AI Service, Rewind, or Fast Forward, to a controller button. To do this, go into the Settings menu, then \u201cInput,\u201d then \u201cHotkey Binds.\u201d Arrow down to the command you\u2019d like to configure a key for, press Enter, press a key on the keyboard or button on the controller, and it\u2019ll be bound.</p>"},{"location":"guides/retroarch-accessibility-guide/#download-cores","title":"Download Cores","text":"<p>In retroarch, cores are video game console emulators, game engines, video and picture viewers, or game music players. To download one, from the main menu, go to \u201cload core,\u201d and press Enter. Then, arrow down to \u201cDownload a core,\u201d and press Enter.</p> <p>In this list, you\u2019ll find a lot of cores which have year numbers or other differentiating words after it. These are alternatives, in case the main core, the one without year numbers or specifying words beside it, do not work. For example, if there is \u201cPPSSPP,\u201d and \u201cPPSSPP 2019,\u201d it is good to go with \u201cPPSSPP\u201d first.</p>"},{"location":"guides/retroarch-accessibility-guide/#update-cores","title":"Update Cores","text":"<p>Cores, like many other programs, receive updates to make games run faster, more smoothly, or add compatibility with new games. Particularly, the \u201cPlay\u201d core, which allows one to play PlayStation Two cores, will have future updates addressing speed and compatibility in many games, as it is a relatively new emulator. To check for updates, do the following:</p> <ul> <li>In the Main Menu, arrow down to \u201conline updater\u201d.</li> <li>Arrow down to \u201cUpdate Installed cores,\u201d and press Enter.</li> </ul>"},{"location":"guides/retroarch-accessibility-guide/#load-content","title":"Load Content","text":"<p>Now that we have cores, we can load content into them. Content can be a game, video file, picture, or game music file, depending on what core you use. Retroarch comes with Doom and Tomb Hunter open game engines, which are not yet accessible, but you can find enjoyable games for other systems that you can play using other cores.</p> <p>To load content, choose \u201cLoad Content\u201d from the main menu, use the arrow keys and Enter to navigate directories to the game on your computer, and press Enter on the game file to open it. If you do not see the game file, download a core that can play that kind of game.</p> <p>Once you\u2019ve pressed Enter on the game file, you\u2019ll be presented with a list of cores that could open that type of file. Choose the right one for your game, and press Enter. The game will start, and you can begin having fun.</p>"},{"location":"guides/retroarch-accessibility-guide/#use-the-quick-menu","title":"Use The Quick Menu","text":"<p>The Quick menu is a menu you can open within the game to customize controls, use Cheat Codes, save or load save states in the game, reset, or close the game. To open the Quick actions menu, press F1. To close it without making changes, press Escape.</p>"},{"location":"guides/retroarch-accessibility-guide/#other-gaming-resources","title":"Other gaming resources","text":"<p>Other gaming resources for people who are blind include:</p> <ul> <li>The Audio Games site has a listing of accessible games and an active forum.</li> <li>AppleVis has mobile game listings and a gaming forum.</li> <li>This project is a voluntery listing of accessible retro games playable by the blind.</li> </ul>"},{"location":"guides/retroarch-accessibility-guide/#getting-more-help","title":"Getting More Help","text":"<p>If you run into an error in Retroarch itself, not cores or games, or a problem with the accessibility service, please check the Retroarch Issues page, and if you cannot find it, create a Github account and submit one of your own. If you\u2019d like general help with using retroarch, join its Discord server and ask your questions there.</p>"},{"location":"guides/retroarch-cloud-sync/","title":"What is it?","text":"<p>RetroArch Cloud Sync enables a seamless synchronization of the most important system configuration and save data to a dedicated private webdav server, from where these data can be synchronized across your devices.</p> <p>RetroArch Cloud Sync currently syncs all data from the following directories:</p> <p>/\"YourUser\"/Documents/RetroArch/saves - original system saves /\"YourUser\"/Documents/RetroArch/states - RetroArch save states /\"YourUser\"/Library/Application Support/RetroArch/config - all core-specific configurations, core options and shader configurations, MAME/FBNeo hiscores, but not the global retroarch.cfg</p> <p>\"YourUser\" refers to your $HOME user in MacOS</p>"},{"location":"guides/retroarch-cloud-sync/#how-to-configure-it","title":"How to configure it","text":"<p>As with any sync solution, it is recommended to start with one device and ensure a proper functioning. Only then further devices should be added.</p>"},{"location":"guides/retroarch-cloud-sync/#initial-configuration-with-first-device","title":"Initial configuration with first device","text":"<p>In order to start with Cloud sync, you need an own webdav account that is accessible by MacOS via the Menu/Connect to Server -&gt; https://webdav.xxxxxx.xxx/.</p> <p>Tip</p> <p>It is obviously the best way to start with your leading RetroArch system, as this will bring the most important data into the webdav account first. In this account, create an own folder called RetroArch.</p> <p>Within RetroArch, go to Settings/Saving/Cloud Sync     Enable Cloud Sync -&gt; ON     Destructive Cloud Sync -&gt; OFF (keeps a backup in a dedicated subfolder called \"deleted\", and the file names get a time stamp of deletion)     Cloud Sync Backend -&gt; webdav     Cloud Storage URL -&gt; https://webdav.xxxxxx.xxx/RetroArch/ (here is the RetroArch subfolder that you created before)     Username -&gt; your webdav user     Password -&gt; your webdav password</p> <p>Save this configuration and restart Retroarch. After this restart, the initial sync should start immediately (see progress indicator in the bottom left status line of RetroArch). Depending on your amount of sync data, this can take some time. When this is finished, you could do some testing. For example, launch a game and set a new hiscore, then close the game. Let the sync do its job, then look into the webdav account, and the new hiscore should be there.</p>"},{"location":"guides/retroarch-cloud-sync/#configuration-of-a-second-device-and-further-devices","title":"Configuration of a second device and further devices","text":"<p>With any additional device, you do the identical steps in RetroArch as with the first device. From now on, these devices should be in sync!</p> <p>Tip</p> <p>Be very careful that these directory save settings are also identical on all sync devices: - Sort Saves into Folders by Core Name - ON/OFF - Sort Save States into Folders by Core Name - ON/OFF - Sort Saves into Folders by Content Directory - ON/OFF - Sort Save States into Folders by Content Directory - ON/OFF If these settings are not matching, the sync is likely to fail, as the devices store its data in different directories.</p>"},{"location":"guides/retroarch-cloud-sync/#further-details-of-the-solution","title":"Further details of the solution","text":""},{"location":"guides/retroarch-cloud-sync/#sync-status","title":"Sync Status","text":"<p>Syncing is displayed in the bottom left status line of RetroArch.</p> <p>As soon as the solution is properly configured, Cloud Sync starts immediately at launching RetroArch. This is apparently important if other devices synced new data to the webdav repository. They are then immediately picked up. As of more recent nightly iOS builds, RetroArch also starts Cloud Sync if it is launched from a Background/Suspended State (important for avoiding sync conflicts).</p> <p>Another sync is triggered with every closing of a game and returning to the RetroArch menu. Be conscious that RetroArch cannot sync a new game status if RetroArch is closed from within a game by pressing Escape/Escape.</p>"},{"location":"guides/retroarch-cloud-sync/#ds_store-files-will-be-ignored-in-sync","title":".DS_Store files will be ignored in sync","text":"<p>As of more recent nightly builds, Cloud Sync ignores .DS_Store files during sync. You can monitor this in the logfiles after turning on logging in RetroARch. But it is nevertheless recommended to delete all .DS_Store files from the synced directories.</p> <p>For example, you can delete the .DS.Store files from the relevant RetroArch directories from the terminal as follows (easiest way is that you create an .sh file containing these lines and make it executable via chmod 755):</p> <p>cd /\"YourUser\"/Documents/RetroArch  find . -name '.DS_Store' -type f -delete cd /\"YourUser\"/Library/Application Support/RetroArch find . -name '.DS_Store' -type f -delete</p>"},{"location":"guides/retroarch-cloud-sync/#troubleshooting","title":"Troubleshooting","text":"<p>If the Cloud Sync returns an error, turn logging on and set the logging level to debug, log into a file. Cloud Sync logs reliably into the logfile, so the errors can be read easily. Not all conflicts that RetroArch Cloud Sync returns are critical (e.g. cache conflicts that can be easily resolved by deleting the conflicting local cache file according to the logfile). Other conflicts may even be desired, e.g. if core configurations shall differ between the MacOS core and the iOS core.</p>"},{"location":"guides/rgui/","title":"RGUI (GUI)","text":"<p>RGUI is a simple built-in user interface for RetroArch. It was originally introduced in the Wii port of RetroArch. RGUI was later refitted for use on low-powered and/or low-resolution devices.</p> <p></p>"},{"location":"guides/rgui/#features","title":"Features","text":"<p>While RGUI cannot configure absolutely everything, it can do the most common things you would want to do while using RetroArch.</p> <ul> <li>Selecting libretro core</li> <li>Load a game</li> <li>Tweak per-libretro core options (e.g. colorization in GameBoy)</li> <li>Load game from history (previous games played)</li> <li>Save/load savestates</li> <li>Configure shaders</li> <li>Configure aspect ratios</li> <li>Configure integer scale</li> <li>Toggle fullscreen</li> <li>Swap disk images (needed for PlayStation, see notes below!)</li> <li>Take screenshots</li> <li>Enable/disable real-time rewind</li> <li>Simple input configuration</li> <li>Mute/unmute audio</li> <li>Exit RetroArch</li> </ul>"},{"location":"guides/rgui/#navigating-the-menus","title":"Navigating the menus","text":"<p>Regular input binds will apply, and binds here are defined in terms of the RetroPad, RetroArch's joypad abstraction.</p> Button PC Default Action A button X/Return Accept/OK B button Z/Backspace Back/Cancel Select Right shift Display tooltip Up/Down D-pad Up/Down keys Move up/down menus Left/Right D-pad Left/Right keys Toggle settings, or jump up/down menus"},{"location":"guides/rgui/#searching-through-lists-with-keyboard","title":"Searching through lists with keyboard","text":"<p>When using a keyboard, it can be slow to navigate a large list using gamepad-like controls. To help this, you can type <code>/</code> (forward slash) at any time to bring up a search box. Type a search string and hit Return. The cursor should jump to the first entry that matches. The search will match mid-path strings: However, if a match is found at the beginning of the path (like when searching for the first letter), the start-of-path match will take priority.</p> <p>The forward slash is recognized on character basis, not on the key itself. This allows e.g. Norwegian layouts to type forward slash by pressing 'shift + 7'. Characters which are outside the ASCII set are recognized but ignored, as RGUI cannot render such characters anyway.</p>"},{"location":"guides/rgui/#config-file","title":"Config file","text":"<p>By default, RetroArch looks for a config in various places depending on OS:</p> <ul> <li>Linux/OSX: <code>$XDG_CONFIG_HOME/retroarch/retroarch.cfg</code>, then <code>~/.config/retroarch/retroarch.cfg</code>, then <code>~/.retroarch.cfg</code>, and finally, as a fallback, <code>/etc/retroarch.cfg</code>.</li> <li>Windows: <code>retroarch.cfg</code> in same folder as <code>retroarch.exe</code>, then <code>%APPDATA%\\retroarch.cfg</code>.</li> </ul> <p>To override this, use <code>retroarch --config customconfig.cfg</code>. If you have some special options you want to store in separate config files you can use <code>retroarch --config baseconfig.cfg --appendconfig specialconfig.cfg</code>. See man-page and/or <code>--help</code> for detail.</p> Warning While you are changing settings in runtime, they are not saved to disk afterwards on PC by default. If you want RetroArch to automatically write back the config, either set <code>config_save_on_exit = true</code> in config, or enable this under Settings -&gt; Config Save On Exit from within RGUI. <p>By design, the config file is considered immutable as it is likely maintained by the user, and should not be overwritten behind the users back. This is not the case on consoles however, where looking at the config manually isn't really an option for most users.</p>"},{"location":"guides/rgui/#configuring-input","title":"Configuring input","text":"<p>Currently you can configure two settings per player (on PC):</p> <ul> <li>Device: Picks which gamepad to use for player N. The name of the pad is available.</li> <li>Device Type: Picks which device type to use. This is relevant for the libretro core itself, and mostly useful for PlayStation, which needs to know if you're using a DualAnalog device or not.</li> </ul>"},{"location":"guides/rgui/#configuring-controller-input","title":"Configuring controller input","text":"<ul> <li>Configuring controller input is supported from within RGUI.</li> <li>Normal gameplay binds as well as RGUI hotkey binding is supported. It is possible to bind everything in succession for convenience.</li> </ul>"},{"location":"guides/rgui/#configuring-keyboard-input","title":"Configuring keyboard input","text":"<p>Configuring keyboard input is currently not supported. To configure keyboard binds, it must be done outside RGUI.</p>"},{"location":"guides/rgui/#thumbnails","title":"Thumbnails","text":"<p>RGUI thumbnail support requires the use of playlist files and thumbnail image packs: See ROMs, Playlists, and Thumbnails.</p> <p>To view existing playlists choose <code>Playlists</code> from the main menu or the <code>Load Content</code> menu. Select a playlist, and while browsing its contents use the RetroPad Y button (or Spacebar on PC) to toggle the full-screen thumbnail associated with the currently highlighted entry:</p> <p>Thumbnails off:</p> <p></p> <p>Thumbnails on: </p> <p>Any thumbnail image larger than 320x240 will be downscaled automatically to fit the screen. Three downscaling methods are provided, allowing a choice between performance and quality. To switch between them, from the top menu select <code>Settings &gt; User Interface &gt; Appearance</code> and set the <code>Thumbnail Downscaling Method</code> option to one of:</p> <ul> <li>Nearest Neighbour (Fast): Simple (pixelated) nearest neighbour scaling. Has a very low impact on performance, and should be usable on any hardware.</li> <li>Bilinear: Smooth (although potentially blurry) resampling. Slower than nearest neighbour, but should be usable on most hardware.</li> <li>Sinc/Lanczos3 (Slow): High quality resampling (although sometimes generates artefacts when source image contains dithering). May cause lag on very low end devices, but has no discernable performance impact on desktop-class hardware.</li> </ul> <p>Note that it is possible to display thumbnails on the right of a system's playlist:</p> <p></p> <p>This option can be toggled on at <code>Settings &gt; User Interface &gt; Appearance&gt; Show Playlist Thumbnails</code>. The options immediately below it, <code>Top Thumbnail</code> and <code>Bottom Thumbnail</code>, can be set to display:</p> <ul> <li>Boxart</li> <li>Title Screen</li> <li>Screenshot</li> </ul>"},{"location":"guides/rgui/#applying-shaders","title":"Applying Shaders","text":"<p>See the shaders user guide.</p>"},{"location":"guides/rgui/#themes","title":"Themes","text":"<p>The visual appearance of RGUI may altered by choosing one of 32 built-in color themes. These change both the color scheme and sometimes the background wallpaper.</p> <p>From the top menu select <code>Settings &gt; User Interface &gt; Appearance</code> and cycle through the various <code>Menu Color Theme</code> options:</p> <p></p> <p>Setting <code>Menu Color Theme</code> to <code>Custom</code> allows for an even greater degree of personalisation via the use of custom menu theme presets. A number of examples are provided in the RetroArch assets package, which may be downloaded by selecting from the top menu <code>Online Updater &gt; Update Assets</code>.</p> <p>To choose one of these examples, go to <code>Settings &gt; User Interface &gt; Appearance</code> and select the <code>Custom Menu Theme Preset</code> option. In the file browser that opens, navigate to the <code>rgui</code> directory and select a <code>.cfg</code> file.</p> <p></p> <p>Icons are not supported by RGUI: It instead uses ASCII characters where possible.</p>"},{"location":"guides/rgui/#creating-custom-menu-theme-presets","title":"Creating custom menu theme presets","text":"<p>A custom menu theme preset is a plain text configuration file (e.g. <code>my_theme.cfg</code>) with the following contents:</p> <pre><code>rgui_entry_normal_color = \"0xAARRGGBB\"\nrgui_entry_hover_color = \"0xAARRGGBB\"\nrgui_title_color = \"0xAARRGGBB\"\nrgui_bg_dark_color = \"0xAARRGGBB\"\nrgui_bg_light_color = \"0xAARRGGBB\"\nrgui_border_dark_color = \"0xAARRGGBB\"\nrgui_border_light_color = \"0xAARRGGBB\"\nrgui_wallpaper = \"wallpaper_file.png\"\n</code></pre> <ul> <li>rgui_entry_normal_color: Specifies the color of all 'normal' text displayed in any list.</li> <li>rgui_entry_hover_color: Specifies the color of the currently selected entry, along with the core name and clock displayed at the bottom of the screen.</li> <li>rgui_bg_dark/light_color: Specifies the menu background color. Setting <code>rgui_bg_dark_color</code> and <code>rgui_bg_light_color</code> to different values creates a chequerboard effect. Also used for the background of message boxes, and the title text when displaying thumbnails.</li> <li>rgui_border_dark/light_color: Specifies the color of the border 'frame' drawn around the perimeter of the menu. Setting <code>rgui_border_dark_color</code> and <code>rgui_border_light_color</code> to different values creates a chequerboard effect. Also used for the frame of message boxes.</li> <li>rgui_wallpaper: The relative file path to an optional wallpaper image. If this entry is omitted or left empty, no wallpaper is used.</li> </ul>"},{"location":"guides/rgui/#color-selection","title":"Color selection","text":"<p>All color values are given in 0xAARRGGBB 8-digit hex code format - i.e. the first two digits correspond to the alpha (transparency) value, while the remaining 6 are a normal hex triplet. For example: fully opaque red would correspond to <code>0xFFFF0000</code>; 50% transparent green would correspond (approximately) to <code>0x7F00FF00</code>.</p> <p>For maximum legibility, the alpha value for all text colors should be set to <code>FF</code> (fully opaque). For the background and border, setting partial transparency allows the currently loaded content to be seen 'through' the menu when opening it while running a game. Note, however, that setting partial transparency causes colors to appear darker than expected, so careful tuning of the hex triplet values is required. Appropriate transparency values are as follows:</p> <ul> <li>When creating a dark theme without wallpaper, the border/bg alpha component should be set to <code>C0</code>.</li> <li>When creating a light theme without wallpaper, the border/bg alpha component should be set to <code>E0</code>.</li> <li>When creating a theme with wallpaper, the border/bg alpha component should be set to <code>FF</code>. (This is because it is very difficult to create a semi-transparent wallpaper image with proper colors, and so it is most practical to make everything fully opaque when using wallpapers)</li> </ul>"},{"location":"guides/rgui/#creating-wallpaper-images","title":"Creating wallpaper images","text":"<p>RGUI wallpapers must have the following properties:</p> <ul> <li>A resolution of exactly 320x240.</li> <li>A color depth of 4 bits per pixel. (This is not strictly required, but using an image with greater color depth will not produce expected results)</li> </ul> <p>Wallpapers should be generated in PNG format.</p> <p>To produce a suitable image, the user should first create a regular 320x240 PNG file via any means at their disposal. Inkscape users may find the following simple template beneficial: rgui_wallpaper_template.svg</p> <p>Once the image is complete, it is necessary to reduce its color depth. This may be done via one of two methods:</p>"},{"location":"guides/rgui/#1-using-pngquant-recommended","title":"1) Using pngquant (recommended):","text":"<p>pngquant is a command-line utility for lossy compression of PNG files. It supports very high quality conversion of images to indexed color, in a manner appropriate for most kinds of wallpaper.</p> <p>Download/compile/install the latest version, then use the following command to process a wallpaper source file:</p> <pre><code>&gt; pngquant --posterize=4 --force -o \"WALLPAPER_NAME_indexed.png\" \"WALLPAPER_SOURCE.png\"\n</code></pre> <p>Open the output <code>WALLPAPER_NAME_indexed.png</code> file and check that colors/gradients appear correct. In most cases, the result will be agreeable. If odd 'speckles' are apparent, it may be necessary to adjust the colors in the source image (this is a black art, and beyond the scope of this document). If the image has unacceptable, uncorrectable dithering then the <code>WALLPAPER_NAME_indexed.png</code> file should be discarded, and the following alternate method used instead:</p>"},{"location":"guides/rgui/#2-using-gimp","title":"2) Using GIMP","text":"<p>GIMP is a well known image editor. In general it produces lower quality color reduction than pngquant, but it can handle certain gradients and patterns that cause pngquant to stumble. Download/install the latest version, then:</p> <ul> <li>Open the wallpaper source file.</li> <li>From the menu, select <code>Image &gt; Mode &gt; Indexed...</code></li> <li> <p>In the <code>Indexed Color Conversion</code> pop-up, select:</p> <ul> <li><code>Generate optimum palette</code></li> <li><code>Maximum number of colors:</code> <code>16</code></li> <li><code>Color dithering:</code> EITHER <code>Floyd-Steinberg (normal)</code> OR <code>Floyd-Steinberg (reduced color bleeding</code> (use whichever looks best, but the other options here will not work).</li> <li>Press <code>Convert</code>.</li> </ul> </li> <li> <p>Inspect the result. Some manual touch-up may be required. (If the image is disagreeable at this stage, then the wallpaper probably isn't going to work - so start over...)</p> </li> <li>If all is well, select from the menu <code>File &gt; Export As...</code> and name the file <code>WALLPAPER_NAME_indexed.png</code></li> <li>In the <code>Export Image as PNG</code> pop-up, untick <code>Save color values from transparent pixels</code> and click <code>Export</code>.</li> </ul> <p>Whether pngquant or GIMP is used to create <code>WALLPAPER_NAME_indexed.png</code>, a final stage of optimisation should be applied to generate a 'clean' output wallpaper. This can be done using OptiPNG. Download/compile/install the latest version, then run the following command:</p> <pre><code>&gt; optipng -o7 -strip=all -force -clobber -out `WALLPAPER_NAME.png` `WALLPAPER_NAME_indexed.png`\n</code></pre> <p>Edit the custom menu theme preset configuration file such that <code>rgui_wallpaper</code> points to the resultant <code>WALLPAPER_NAME.png</code> image. Once appropriate text/background/border colors have been set, the theme is complete.</p>"},{"location":"guides/roms-playlists-thumbnails/","title":"ROMs, Playlists, and Thumbnails","text":""},{"location":"guides/roms-playlists-thumbnails/#storing-games-and-other-content","title":"Storing games and other content","text":"<p>Game ROMs are the source media of the games that can be played using RetroArch cores. They can be actual dumps of read-only memory, tape/floppy/compact disc images, or some other format. The ROM files may be placed anywhere in the file system where RetroArch has access - note that some platforms (notably Android) are not able to browse the full storage. It is practical if the file browser start directory is configured to the directory where ROMs are stored.</p> <p>Many users sort their ROMs into subfolders named after the system which the ROMs belong to, which results in a folder arrangement such as:</p> <pre><code> roms/\n      Atari - 2600/\n           Atari Game 1.zip\n           Atari Game 2.zip\n           Atari Game 3.zip\n      Nintendo - Nintendo Entertainment System/\n           NES Game 1.zip\n      Sega - 32X/\n           32X Game 1.zip\n           32X Game 2.zip\n      etc.\n      etc.\n</code></pre> <p>This arrangement is not required and you are free to organize your ROMs as you prefer.</p> <p>Also, as a general guideline, content from disc-based systems (Compact Disc images, etc.) should not be zipped for RetroArch use.</p>"},{"location":"guides/roms-playlists-thumbnails/#working-with-playlists","title":"Working with Playlists","text":"<p>Playlists are the lists of games and other content that can be generated automatically by the RetroArch playlist scanner, generated by a third-party playlist utility or script, or edited by hand in a text editor.</p>"},{"location":"guides/roms-playlists-thumbnails/#retroarch-playlist-scanner","title":"RetroArch Playlist Scanner","text":"<p>RetroArch incorporates a ROM scanning system to automatically produce playlists. Each ROM that is scanned by the playlist generator is checked against a database of ROMs that are known to be good copies.</p> <p>In order for content to be correctly scanned, you must:</p> <ul> <li>Have a compatible core already downloaded and installed (note: Scan Without Core Match setting removes this requirement)</li> <li>Update <code>Core Info Files</code> via <code>Online Updater</code></li> <li>Update <code>Databases</code> via <code>Online Updater</code></li> <li>Restart RetroArch if any of the above was just done</li> </ul> <p>For a normal scan, the content must match existing databases from the libretro-database README. If those conditions are met but content is still not being added automatically to a playlist, consider submitting an issue report on github.</p> <p>There is an option to do manual scan, which does not require a database, and just needs the file names to match. Results from the manual scan will be playable (as long as the respective core supports them), but may lack thumbnails and do not appear in the Explore menu.</p>"},{"location":"guides/roms-playlists-thumbnails/#designating-which-core-to-use","title":"Designating which core to use","text":"<p>RetroArch will attempt to detect and use the correct core for use with the ROMs that are used as part of a playlist. Under some circumstances, it may be useful to manually set a particular core for one of its playlists. This can be accomplished within the Playlists submenu in the RetroArch settings.</p>"},{"location":"guides/roms-playlists-thumbnails/#the-explore-menu","title":"The Explore menu","text":"<p>RetroArch provides an Explore menu which can be used for browsing all content that were added to playlists using any database attribute - release year, genre, etc.</p>"},{"location":"guides/roms-playlists-thumbnails/#thumbnails","title":"Thumbnails","text":"<p>RetroArch can display three types of thumbnails (small still pictures) for games in playlists:</p> <ul> <li>In-game snapshots</li> <li>Title screen snapshots</li> <li>Boxart</li> </ul> <p></p> <p>Most menu drivers support displaying two pictures when browsing the playlist. Displayed thumbnail types can be configured system-wide and also per playlist. All menu drivers can display fullscreen thumbnails when pressing Start, and Y button (left) can be used to cycle between available pictures.</p> <p>Thumbnails can be retrieved in multiple ways:</p> <ul> <li>Playlist thumbnail downloader (recommended): under Online Updater menu, all available thumbnails can be downloaded for a playlist. RetroArch will connect to http://thumbnails.libretro.com and retrieve the available thumbnail.<ul> <li>WARNING: the Playlist Thumbnails Updater process will over-write custom thumbnails set by the user for any game that has an associated thumbnail on the server.</li> </ul> </li> <li>Individual thumbnail downloader: there is a Download Thumbnails option for each entry in playlists. For RetroArch version 1.17.0 or later, you may hit download up to 3 times to try the flexible matches.</li> <li>On-demand thumbnail downloader: if the respective option is enabled, RetroArch will try to download each thumbnail as the playlist is browsed. For RetroArch versions 1.17.0 or later, you may try flicking back and forth between entries up to 3 times to try the flexible matches. By default, on-demand thumbnail downloader does not try to fetch thumbnails based on ROM name, enable Settings / Playlist / Use filenames for thumbnail matching options for that.</li> </ul> <p>Thumbnail packs are no longer available, use one of the above methods, or see Custom Thumbnails section below.</p>"},{"location":"guides/roms-playlists-thumbnails/#playlist-file-format-details","title":"Playlist File Format Details","text":"<p>Each playlist is a plain text file with an extension of <code>.lpl</code>. RetroArch 1.7.5 and later uses a JSON playlist format, although the backwards compatibility remains for the deprecated \"6-Line\" playlist format.</p> <p>Note: The paths in playlist files need to use the correct 'slash' character for the user's platform. Linux, OS X, and Android systems including Lakka and LudOS require forward slashes <code>/</code>, while Windows and DOS systems require backslashes <code>\\</code>.</p> <p>Hint for Windows Users</p> <p>The built-in Notepad editor cannot work with cross-platform text files such as RetroArch playlist files. Many users and developers recommend the free Notepad++ as a replacement although most alternative text editors will also work.</p>"},{"location":"guides/roms-playlists-thumbnails/#json-playlist-format","title":"JSON Playlist Format","text":"<p>The following example is a single-entry MAME 2003-Plus playlist for Alien Arena -- the silent version of this game is available through the RetroArch Content Downloader found in the Online Updater menu.</p> <p>The romset with the <code>label</code> Alien Arena is located at <code>path</code> being <code>C:\\retroarch\\downloads\\alienar.zip</code>; note that the backslashes are doubled in JSON-formatted playlist entries so that the value of the <code>path</code> entry is <code>C:\\\\retroarch\\\\downloads\\\\alienar.zip</code>.</p> <p>The ROM's corresponding <code>db_name</code> is <code>MAME 2003-Plus.lpl</code> which tells the menu driver which ROM database to use for looking up the game's metadata, thumbnails and game-system-specific icon-type. Menu drivers which implement playlist icons will use it to display it next to the ROM's name.</p>"},{"location":"guides/roms-playlists-thumbnails/#mame-2003-pluslpl","title":"<code>MAME 2003-Plus.lpl</code>","text":"<pre><code>{\n  \"version\": \"1.0\",\n  \"items\": [\n    {\n      \"path\": \"C:\\\\retroarch\\\\downloads\\\\alienar.zip\",\n      \"label\": \"Alien Arena\",\n      \"core_path\": \"DETECT\",\n      \"core_name\": \"DETECT\",\n      \"crc32\": \"01ACE2AB|crc\",\n      \"db_name\": \"MAME 2003-Plus.lpl\"\n    }\n  ]\n}\n</code></pre> <p>Alert</p> <p>You can omit the CRC or Serial for a manually created playlist entry by using the word <code>DETECT</code>  instead, although it may limit your ability to use netplay for this playlist entry.</p>"},{"location":"guides/roms-playlists-thumbnails/#6-line-playlist-format-deprecated","title":"6-Line Playlist Format (Deprecated)","text":"<p>Warning</p> <p>This playlist format is deprecated and may not always be supported by RetroArch in the future. New playlists should be created in the JSON format.</p> <p>Each entry in a playlist must be composed of 6 lines:</p>"},{"location":"guides/roms-playlists-thumbnails/#mame-2003-pluslpl_1","title":"<code>MAME 2003-Plus.lpl</code>","text":"<pre><code>C:\\retroarch\\downloads\\alienar.zip\"\nAlien Arena\n/tmp/cores/mame2003_plus_libretro.so\nDETECT\n01ACE2AB|crc\nMAME 2003-Plus.lpl\n</code></pre> <ol> <li>The path to the ROM. This can either be an 'absolute' path or a path relative to the current working directory.</li> <li>The display name (you can use any name here)</li> <li>The path to the core, this libretro core will be used to launch the ROM. You can use the word DETECT in place of the core path here. Once this is done you can set the core to be used for this playlist via the RetroArch GUI.</li> <li>The displayname of the core, not really useful, we keep it there because the history list is also using this format</li> <li>CRC or Serial number for database and other matching purposes. You can omit the CRC or Serial for a manually created playlist entry by using the word DETECT here instead, although it may limit your ability to use Netplay for this playlist entry.</li> <li>The name of the system playlist to which this ROM is associated for looking up database metadata and thumbnails.</li> </ol>"},{"location":"guides/roms-playlists-thumbnails/#creating-custom-playlists-cross-platform-cross-folders","title":"Creating custom playlists (cross-platform, cross-folders)","text":"<p>The standard playlists in RetroArch are usually platform-specific, i.e. <code>Nintendo - Game Boy.lpl</code> or <code>Sony - PlayStation.lpl</code>.</p> <p>Maybe you want to create custom playlists not limited within game-platforms or ROM-folders, e.g. \"Multiplayer Racing Games\" or \"Medieval Themed Games\".</p> <p><code>content_favorites.lpl</code> and <code>content_history.lpl</code> are examples of default playlists which have this cross-platform behavior. So study them as an example first.</p>"},{"location":"guides/roms-playlists-thumbnails/#to-create-a-custom-playlist","title":"To create a custom playlist","text":"<ul> <li>Copy/merge content from platform-playlists files into a fresh playlist file inside <code>&lt;RetroArchRoot&gt;/playlists/</code> entitled <code>My Sorting Prefix - My Playlist Name.lpl</code>.</li> <li>Be sure that the ROM entries follow the syntax as described in section: JSON Playlist Format.</li> <li>The <code>db_name</code> attribute entry must be the ROM's corresponding <code>Exact Game Platform Playlists Name.lpl</code> (e.g. <code>Nintendo - Game Boy.lpl</code>) in order to be associated with the correct metadata and thumbnails.</li> </ul>"},{"location":"guides/roms-playlists-thumbnails/#customize-howwhere-your-playlists-are-shown","title":"Customize how/where your playlists are shown","text":"<ul> <li>Name your playlist in the scheme <code>My Sorting Prefix - My Playlist Name.lpl</code> or just <code>My Playlist Name.lpl</code>.</li> <li>To tweak how playlists are displayed (with or without prefix) and how they are sorted (by prefix or by main name):</li> <li>Go to: Settings &gt; Playlists</li> <li>Set options Truncate Playlist Names and Sort Playlists After Name Truncation to your liking.</li> </ul>"},{"location":"guides/roms-playlists-thumbnails/#how-to-set-up-custom-playlists-screenshots","title":"How to set up custom playlists (Screenshots)","text":""},{"location":"guides/roms-playlists-thumbnails/#third-party-applications","title":"Third-Party Applications","text":"<p>Since playlists are managed in text-only JSON format, there are a few third-party applications to help manage your playlists.</p> <ul> <li>RetroArch Playlist Editor (Source)</li> <li>RetroArch Playlist Buddy (Source)</li> </ul>"},{"location":"guides/roms-playlists-thumbnails/#custom-thumbnails","title":"Custom thumbnails","text":"<p>Users can set a custom thumbnail (i.e. a thumbnail that is different from the one automatically provided by RetroArch) by following the process below.</p> <p>Terminology Note: Game Name</p> <p>The term Game Name refers to the name displayed within a playlist in RetroArch, not to the filename of the underlying file on the computer or device.  Game Name in this document is synonymous with playlist item label, playlist entry, content name, game title.</p> <ul> <li>File &amp; Filename. Name a PNG image file with a base filename that matches a game title displayed in a playlist.  Example: if the game name is <code>Q-Bert's Qubes (USA)</code>, the intended image file must be named <code>Q-Bert's Qubes (USA).png</code> (See below for additional flexible name matching options.)</li> <li>Location. Place the PNG in the correct folder for the relevant playlist.</li> <li>Use a compatible image type. In RetroArch versions later than 1.19.1, image formats other than PNG can be enabled (jpg, bmp, tga).</li> <li>Replace invalid characters. The thumbnail's base filename should exactly match the game's title displayed in the playlist with an important exception. The characters <code>&amp;*/:`&lt;&gt;?\\|</code> in playlisted game titles must be replaced with <code>_</code> in the corresponding thumbnail filename.</li> </ul> <p>Flexible name matching. RetroArch versions 1.17.0 or later will attempt up to 3 different match techniques to associate a playlist item with a properly located local thumbnail image file, in the following order:</p> <ol> <li>ROM file name &lt;-&gt; .png file name match. A ROM file <code>Q-Bert's Qubes (USA) (1983).a26</code> would receive the local thumbnail <code>Q-Bert's Qubes (USA) (1983).png</code> if it exists, regardless of how the game name appears in the RetroArch interface.</li> <li>Game name &lt;-&gt; .png file name match. <code>Q*Bert's Qubes (USA)</code> in a playlist would receive the local thumbnail <code>Q_Bert's Qubes (USA).png</code> if it exists. <code>*</code> is an invalid character and must be replaced with <code>_</code> in the image filename.</li> <li>Short game name &lt;-&gt; .png file name match. RetroArch looks for a local thumbnail named after a shortened form of the game name ignoring all text starting at the first round bracket, in other words ignoring informational tags like Region etc. <code>Q-Bert's Qubes (USA) (1983) (Parker Brothers) [h]</code> in a playlist would receive <code>Q-Bert's Qubes.png</code> if that local image file exists.</li> </ol>"},{"location":"guides/roms-playlists-thumbnails/#thumbnail-folder-paths","title":"Thumbnail folder paths","text":"<p>Thumbnail image files must be stored in subfolders according to this structure:</p> <ul> <li><code>thumbnails</code> directory within Retroarch folder (or in different location configured by user via Settings &gt; Directory &gt; Thumbnails)<ul> <li><code>Playlist Name</code> folder with the exact same name as the playlist, except without <code>.lpl</code> at the end. For example, <code>Atari - 2600</code></li> <li><code>Named_Boxarts</code> subfolder for boxart/cover art</li> <li><code>Named_Snaps</code> subfolder for in-game snapshots</li> <li><code>Named_Titles</code> subfolder for in-game introductory title screens</li> </ul> </li> </ul> <p>Example of a Windows path to a correctly set boxart folder: <code>RetroArch-Win64\\thumbnails\\Atari - 2600\\Named_Boxarts</code></p> <p>Example of correct thumbnail file setup for content named <code>Q*bert's Qubes (USA)</code> in a default Atari 2600 playlist:</p> <p><pre><code>     thumbnails/\n          Atari - 2600/\n               Named_Boxarts/\n                    Q_bert's Qubes (USA).png\n               Named_Snaps/\n                    Q_bert's Qubes (USA).png\n               Named_Titles/\n                    Q_bert's Qubes (USA).png\n</code></pre> Note the replacement of the playlist game name's <code>*</code> with <code>_</code> in the filenames, in accordance with invalid characters described above.</p>"},{"location":"guides/roms-playlists-thumbnails/#contributing-thumbnails-how-to","title":"Contributing Thumbnails: How To","text":"<p>Thumbnails (along with documentation) are an area where users who are not experienced in programming can contribute to RetroArch and in a way that helps all users. If you are interested in:</p> <ul> <li>adding a thumbnail that you see is missing</li> <li>correcting a thumbnail that is inaccurate or mistaken</li> <li>replacing an existing thumbnail with a more representative or more aesthetic image</li> </ul> <p>follow the steps below.</p>"},{"location":"guides/roms-playlists-thumbnails/#overview","title":"Overview","text":"<ol> <li>Make an account on github.com</li> <li>\"Fork\" (copy) a libretro thumbnail repository to your own working area in github</li> <li>Make your image file changes to your copy of the project (aka your fork), while following libretro thumbnail rules and the detailed guidelines below</li> <li>Create a \"Pull Request\" to request that the official project members review your proposed changes in order to accept it into RetroArch</li> </ol>"},{"location":"guides/roms-playlists-thumbnails/#detailed-steps","title":"Detailed Steps","text":"<ul> <li>Fork the repository. Visit the github.com libretro thumbnail repository directory that you want to contribute to and click the fork button.  You must fork it at the level of specific console. The Fork button won't appear if you're viewing a lower level folder in the respository like \"boxart\" or \"snaps.\u201d Example. If you are doing GBA thumbnail work you should fork  Nintendo_-_Game_Boy_Advance.<ul> <li>Why \"Fork\" your own?  Every part RetroArch's code and materials are open and accessible on github for input from any public volunteer (via Pull Request), but only official admins have direct edit access.  Forking means copying your own copy of the project to freely draft changes in your own separate work area.  Later you\u2019ll send your proposed changes to the official project.</li> <li>Warning: You must visit and fork the current github project for the libretro thumbnail repository, for example this one for SNES, not to be confused with the similar-looking archived version which is inactive.<ul> <li>Correct: https://github.com/libretro-thumbnails/</li> <li>Incorrect:  https://github.com/libretro/libretro-thumbnails</li> </ul> </li> </ul> </li> <li>Add / Upload your new image file. When viewing a specific thumbnail type folder (e.g. Named_boxarts, Named_titles, Named_snaps) within your fork of the thumbnails repository, click the pulldown button (near top right) that says Add file to see 2 options:<ul> <li>+Create new File</li> <li>Upload File.</li> </ul> </li> <li>Choose \"Upload File\".  Select your new chosen image file.  In this stage you are uploading to your fork/branch of the project.</li> <li>Follow all guidelines for a proper contribution.<ul> <li>Your choice of image file should meet the libretro thumbnail rules in the ReadMe, e.g. width scaled down to 512px.</li> <li>For snaps (in-game screenshots), choose a good clear artful image that shows the art, spirit, or action of the game in normal or ideal gameplay. For examples of well-chosen well-composed in-game screenshots, see the back-of-box images printed on officially published games.</li> <li>Name your image file correctly.<ul> <li>If replacing an existing image, name your new image file exactly as the previous one to guarantee that it will be matched to the relevant game name in RetroArch. (Unless your contribution is to correct an erroneous filename that doesn't match the game name database.)</li> <li>If uploading a new thumbnail that has no prior existing version, research the naming conventions of libretro and how the game is named in databases. Name the image file according to the game name that RetroArch assigns in the playlist.</li> </ul> </li> <li>Use the correct path.  Choose the correct console system folder and thumbnail type folder in the repository.</li> </ul> </li> <li>Commit. The \"Commit\" button will save your change to your copy of the repository. You should generally commit to your own master. </li> <li>Pull Request (PR).  Look for the button or option for a Pull Request when you Commit, though you may wait until you have finalized multiple changes (commits) and then include them all in a single PR. A Pull Request means sending a request to the official members to take your contribution (i.e. merge your fork) into the RetroArch repository.  Admins will review your proposed changes and decide whether to accept it.  You will eventually see a confirmation that it was approved or a discussion message if changes are needed.  It may take time (even weeks or months) before an admin is able to examine the request, so please be patient.</li> <li>Verify that your Pull Request is active and correct. For example, if you made a Pull Request to contribute a Gameboy thumbnail then you can view the request publicly listed at the official repository.<ul> <li>Warning: It is possible to accidentally send a Pull Request to yourself if you committed your changes to your sub-branch instead of your own master. If needed, approve your PR to yourself to merge your sub-branch changes to your master, then do a Pull Request from your master to the official Libretro master project. For clarity on github.com, you can hover on any abbreviated branch path label to see a pop-up of the full path label. </li> </ul> </li> </ul> <p>About \"Syncing.\" Contribution work involves changing your copy of the project while other people may be changing the official repository after you created your fork.  Github provides options to keep both your copy (\"downstream\") and the official repository (\"upstream\") up-to-date with ongoing changes.  If you make multiple changes within your fork, you can use the Contribute button &gt; Open Pull Request to send all your changes as one PR.  You can use the Sync button button to update your fork with other people\u2019s changes that have happened upstream.</p>"},{"location":"guides/roms-playlists-thumbnails/#the-thumbnail-server","title":"The Thumbnail Server","text":"<p>RetroArch retrieves thumbnails from a server (https://thumbnails.libretro.com/) that is updated periodically with imports from the Libretro thumbnail repository on github. After a pull request is approved for a contribution, some time may pass before the updates are sent to the server. The final server update must occur before users will see new image contributions in RetroArch playlists.</p>"},{"location":"guides/roms-playlists-thumbnails/#custom-iconslogos-for-playlist-items","title":"Custom icons/logos for playlist items","text":"<p>RetroArch versions later than 1.19.1 include an option for the XMB menu driver to display custom per-game icons/logos in the playlist, instead of the default content icon, see this example. The required file format and subfolder structure follows the same pattern as custom thumbnails:</p> <ul> <li>Create a folder called <code>Named_Logos</code> alongside the <code>Named_Boxarts</code> thumbnail subfolder for the intended playlist</li> <li>Put the logo image files there with base filenames that match the associated game's displayed name in the RetroArch playlist.</li> </ul> <p>Limitations. Logo support is only possible with XMB menu driver. The online thumbnail repositories do not contain logo collections. </p>"},{"location":"guides/rpi/","title":"Raspberry Pi","text":"<p>The simple and optimized way to run RetroArch on Raspberry Pi is Lakka. However, if you already have a working Linux distribution on a Raspberry Pi, and just want to add RetroArch to it, that is also possible.</p>"},{"location":"guides/rpi/#installing-from-distribution-repositories","title":"Installing from distribution repositories","text":"<p>Several repositories carry RetroArch for the armhf/aarch64 architecture used by the RPi models. Some issues that can be encountered when using these:</p> <ul> <li>RetroArch version may be old</li> <li>Binary may be too generic and not optimized for the actual model</li> <li>Package may be set up to not allow core downloads</li> </ul> <p>But there is no harm in trying it. Use the system package manager (apt, yum or similar) to install <code>retroarch</code>.</p>"},{"location":"guides/rpi/#compiling-from-source","title":"Compiling from source","text":""},{"location":"guides/rpi/#major-hardware-and-software-variables","title":"Major hardware and software variables","text":"<p>A RetroArch binary on Raspberry Pi may be created in several flavors. The major factors are:</p> <ul> <li>32/64 bit OS. Only Pi 3 and 4 have a choice, older models can only use 32 bit OS. RetroArch can be compiled for both.</li> <li>legacy or open source GL drivers (64-bit and Pi 4 does not have a choice). This can be set in <code>raspi-config</code>. Open source drivers (mesa) are recommended, see later for the legacy driver instructions.</li> <li>GUI environment (X11 or Wayland) or special terminal based setup (KMS). Distributions that have no windowing environment, such as the \"lite\" versions of Raspberry Pi OS, may still run RetroArch using KMS mode.</li> <li>audio driver in use: alsa or PulseAudio. If <code>pactl list cards</code> produces a list of sound devices, PA is in use, otherwise use alsa.</li> <li>GPU memory: while it has no effect on compilation, at least 128 MB is recommended for Pi 0..3, for Pi 4 the default 76 MB is OK.</li> </ul>"},{"location":"guides/rpi/#installing-necessary-packages-for-compilation","title":"Installing necessary packages for compilation","text":"<p>Preinstalled packages may vary between distribution and releases. List is given using Raspberry Pi OS (Debian Bullseye).</p> <ul> <li>base packages needed for all described compilations: <code>sudo apt install -y build-essential libudev-dev libegl-dev libgles-dev libx11-xcb-dev</code></li> <li>sound driver for PulseAudio, if it is in use: <code>sudo apt install -y libpulse-dev</code></li> <li>sound driver for alsa, if PulseAudio is not used: <code>sudo apt install -y libasound2-dev</code> (there is no harm in installing both audio libraries)</li> <li>vulkan driver for Pi 4: <code>sudo apt install -y libvulkan-dev mesa-vulkan-drivers</code></li> <li>additional packages for KMS build: <code>sudo apt install -y libavcodec-dev libavdevice-dev libavformat-dev libavresample-dev libdrm-common libdrm-dev libdrm2 libegl1-mesa-dev libfreetype6-dev libgbm-dev libgbm-dev libgbm1 libgles2 libgles2-mesa libgles2-mesa-dev libsdl-image1.2-dev libsdl2-dev libswresample-dev libswscale-dev libv4l-dev libxkbcommon-dev libxml2-dev yasm zlib1g-dev</code></li> </ul>"},{"location":"guides/rpi/#retrieving-retroarch-code","title":"Retrieving RetroArch code","text":"<p>RetroArch can be retrieved from Git (it may be needed to install git: <code>sudo apt install git</code>):</p> <pre><code>git clone https://github.com/libretro/RetroArch -b v1.15.0\ncd RetroArch\n</code></pre> <p>or alternatively, just downloaded as a specific version (somewhat faster, but can not be easily updated and recompiled):</p> <pre><code>wget https://github.com/libretro/RetroArch/archive/refs/tags/v1.15.0.tar.gz\ntar xvfz v1.15.0.tar.gz\ncd RetroArch-1.15.0\n</code></pre>"},{"location":"guides/rpi/#configuration-options","title":"Configuration options","text":"<p>Configuration for RPi 0..3 32-bit, disabling the legacy GL driver, GL1 support, enabling OpenGL ES instead of OpenGL, and adding support for the floating point unit found in all Pi's:</p> <pre><code>./configure --disable-videocore --disable-opengl1 --enable-opengles --enable-floathard\n</code></pre> <p>Configuration for RPi 3 64-bit, where the floating point unit is default:</p> <pre><code>./configure --disable-videocore --disable-opengl1 --enable-opengles\n</code></pre> <p>Configuration for RPi 4, adding OpenGL ES 3.1 support:</p> <pre><code>./configure --disable-videocore --disable-opengl1 --enable-opengles --enable-opengles3 --enable-opengles3_1\n</code></pre> <p>Several options can be added as a doublecheck. If the necessary libraries are installed, these are picked up automatically, adding the option ensures that missing libraries can not go unnoticed.</p> <ul> <li><code>--enable-pulse</code> for PulseAudio sound driver</li> <li><code>--enable-alsa</code> for ALSA sound driver</li> <li><code>--enable-udev</code> for udev input/joypad driver</li> <li><code>--enable-ssl</code> for SSL connection (for downloading via https)</li> <li><code>--enable-vulkan</code> for Vulkan video driver (usable on Pi 4 only)</li> <li><code>--enable-kms</code> and <code>--enable-egl</code> for libraries necessary for KMS mode</li> </ul> <p>In case of RPi 2 and 3 with 32-bit OS, NEON support can be explicitly enabled, by adding <code>CFLAGS='-mfpu=neon'</code> in front of <code>./configure</code> and <code>--enable-neon</code> to the options. In RetroArch, this has effect on the audio resampling algorithm compilation. In all platforms, code optimization can be triggered by adding adding <code>CFLAGS='-march=native'</code> in front of .configure. This also means resulting binary may not be executable on an other Pi model.</p>"},{"location":"guides/rpi/#compiling-and-first-updates","title":"Compiling and first updates","text":"<p>Compilation is done with make command. In case of Pi 2 and later, compilation can be made faster by using 2 threads (-j 2). Using more than 2 threads is only recommended on Pi4 with 4GB or more RAM, as compilation of certain parts can eat up available memory and crawl system to a halt.</p> <pre><code>make -j2\n</code></pre> <p>Compiling depends on SD card access speed as well. On a Pi 1, it can take two hours, on Pi 2, around 30 min, Pi 4 can finish under 10 minutes.</p> <p>RetroArch can be also installed to the default location, which is usually not writable without sudo:</p> <pre><code>sudo make install\n</code></pre> <p>Start RetroArch with logging enabled (<code>./retroarch -v</code>) to catch any potential problems, and carry out initial updates in the Online Updater:</p> <ul> <li>download assets</li> <li>download core info files</li> <li>download controller profiles</li> <li>download shaders</li> </ul> <p>In some cases, it may happen that input driver is not found and RetroArch will not start. In this case, add following line into <code>~/.config/retroarch/retroarch.cfg</code>, which at this point is almost empty:</p> <pre><code>input_driver = \"udev\"\n</code></pre>"},{"location":"guides/rpi/#downloading-or-compiling-cores","title":"Downloading or compiling cores","text":"<p>Libretro cores are built automatically for most platform, but for <code>armhf</code> (all Pi 32-bit) or <code>armv7-neon-hf</code> (Pi 2 onwards 32-bit), there are only some quite old versions on libretro buildbot. For <code>aarch64</code> (Pi 3 and 4 64-bit), there is none.</p> <p>Building cores can be tried using libretro-super scripts. It is not guaranteed that all cores can be compiled for these platforms, as it depends on the core itself. Example with vitaquake2 core:</p> <pre><code>git clone https://github.com/libretro/libretro-super\ncd libretro-super\n./libretro-fetch.sh vitaquake2\n./libretro-build.sh vitaquake2\ncp dist/unix/*.so ~/.config/retroarch/cores\n</code></pre>"},{"location":"guides/rpi/#further-retroarch-settings","title":"Further RetroArch settings","text":"<p>It is worth to check if the audio driver matches the one you want. Threaded video setting may be enabled for speed enhancement. In KMS mode, the resolution setting is not exposed in the GUI if Vulkan is used, but it can still be modified. Edit following entries in <code>retroarch.cfg</code>, example for 1920x1080 50Hz:</p> <pre><code>video_fullscreen = \"true\"\nvideo_fullscreen_x = \"1920\"\nvideo_fullscreen_y = \"1080\"\nvideo_windowed_fullscreen = \"false\"\nvideo_refresh_rate = \"50.0\"\n</code></pre> <p>For Pi 4 to enable 4K 60 Hz refresh, a line is needed in <code>config.txt</code>:</p> <pre><code>hdmi_enable_4kp60=1\n</code></pre> <p>LED driver may also be enabled.</p>"},{"location":"guides/rpi/#legacy-gl-drivers-and-dispmanx","title":"Legacy GL drivers and dispmanx","text":"<p>Initially, RPi's VideoCore IV GPU (used for models earlier than RPi 4) was supported through vendor-specific Broadcom OpenGL/EGL libraries. This library is linked when <code>--enable-videocore</code> option is specified for <code>./configure</code>. To compile RetroArch with legacy drivers, specify the <code>--enable-videcore</code> option instead of <code>--disable-videocore</code> above. Note that this library is only available for 32-bit systems. The binaries must be present in <code>/opt/vc</code> for compilation to work. Legacy drivers (or \"userland\") may be installed as <code>libraspberrypi-dev</code> package, or retrieved from https://github.com/raspberrypi/userland, and installed as:</p> <pre><code>sudo apt install cmake\ngit clone https://github.com/raspberrypi/userland.git\ncd userland/\n./buildme /\n</code></pre> <p>To start RetroArch built this way, system must be switched to \"Legacy GL\" driver using <code>raspi-config</code>. This is not possible starting from Debian 12 Bookworm, so make sure you are running an older distribution. In addition to this, RetroArch has a specific <code>dispmanx</code> video driver that utilizes the vendor-specific API instead of OpenGL. This video driver can be enabled with <code>--enable-dispmanx</code>, however it has only limited functionalities, in particular only RGUI is supported, and there are no widgets/overlays. As a corner case, dispmanx driver works in fake KMS mode. Neither dispmanx driver nor legacy GL drivers work with RetroArch in KMS mode. If you run into problems with compilation, try adding the userland to package-cfg by issuing <code>export PKG_CONFIG_PATH=/opt/vc/lib/pkgconfig/</code> before running <code>./configure</code>.</p>"},{"location":"guides/rpi/#checking-opengl-details","title":"Checking OpenGL details","text":"<p>Active GL driver can be checked by running <code>lsmod | grep vc4</code>. If this shows a loaded module, then the open source GL driver is in use. OpenGL performance can be checked with <code>glxgears</code> command:</p> <pre><code>vblank_mode=0 glxgears -info\n</code></pre> <p>This command should display a window with spinning gears, and an FPS counter in the command line. Few hundred FPS is expected (even on RPi 1), since vblank_mode=0 will decouple refresh from the display refresh rate. If glxgears can not be found, install <code>mesa-utils</code> package. If weird textures appear, you are running the legacy GL driver. If image is correct, but performance is low, check if the renderer has fallen back to software (LLVMpipe). In this case, run <code>raspi-config</code> and enable Glamor for acceleration.</p> <p>Pi 0..3 supports OpenGL ES 2, Pi 4 supports OpenGL ES 3.1. To doublecheck the supported versions, use <code>glxinfo | grep version</code>.</p>"},{"location":"guides/rpi/#some-tests-in-2023","title":"Some tests in 2023","text":"<p>Tests were done as follows:</p> <ul> <li>fresh installation of 2023-02-21 versions of Raspberry Pi OS</li> <li>download, configure and build RetroArch 1.15.0</li> <li>keep default settings of RA, download assets and core info files</li> <li>run RA in the native monitor resolution (fullscreen, 1920x1080x60hz)</li> <li>no shaders</li> <li>Pi4 is also tested with 4kp60</li> </ul> <p>FPS of Ozone menu, after downloading assets, gl driver:</p> Setup RPi 1 RPi 2 RPi 3 RPi 4 RPi 4 4K Bullseye 32-bit, Mesa ~5 ~23 ~29 ~50 \u00ac10 Bullseye 64-bit, Mesa - - ~25 ~55 \u00ac13 Bullseye lite 32-bit, Mesa/KMS ~20 ~42 ~50 ~55 ~26 Bullseye lite 64-bit, Mesa/KMS - - ~48 ~55 ~23 Buster 32-bit, legacy ~6/21 ~9/40 ~10/42 - - <p>On Pi 4, where there is a choice of gl, glcore and vulkan drivers, both glcore and vulkan gave an increase of a few fps in the menu. With legacy drivers, Ozone is much slower than XMB, so XMB values are also given. With Mesa, there is not much difference.</p> <p>FPS of VitaQuake2, default demo, default internal resolution (960x544), gl driver:</p> Setup RPi 1 RPi 2 RPi 3 RPi 4 RPi 4 4K Bullseye 32-bit, Mesa &lt;1 ~12 ~15 ~52 ~25 Bullseye 64-bit, Mesa - - ~23 &gt;60 ~26 Bullseye lite 32-bit, Mesa/KMS ~3 ~16 ~25 &gt;60 ~40 Bullseye lite 64-bit, Mesa/KMS - - ~29 &gt;60 ~45-50 Buster 32-bit, legacy ~2 ~13 ~19 - -"},{"location":"guides/rpi/#problems-experienced","title":"Problems experienced","text":"<p>Following problems were experienced while writing this guide:</p> <ul> <li>KMS mode: Vulkan with KMS does not work in Bullseye. This is due to Mesa version being too old for the necessary KHR_display extension (added in version 21).</li> <li>KMS mode: Display can become shifted (even the menu) in some configurations.</li> <li>KMS mode: VC4 driver is needed for RetroArch, but some distributions (like Ubuntu Server) do not include necessary <code>dtoverlay=vc4-kms-v3d</code> line in <code>config.txt</code> by default.</li> <li>On Buster, the terminal that is used to launch RetroArch, will continue to receive keypresses</li> <li>Compiling for Pi4 needs all 3 of the opengles command line switches, even though they seem redundant</li> </ul>"},{"location":"guides/runahead/","title":"RetroArch Run Ahead","text":"<p>Every game has a certain built-in amount of lag, some react on the next displayed frame, some can take 2, 3 or even more frames before an action on the gamepad finally get rendered on screen. The Run Ahead feature calculates the frames as fast as possible in the background to \"rollback\" the action as close as possible to the input command requested.</p> <p>That feature deals with \"internal\" game logic lag. This means you can still take advantage of other RetroArch lag reduction methods that happens later, such as Hard GPU Sync or Frame Delay.</p> <p>It's located in Quickmenu &gt; Latency (also in Settings &gt; Latency).</p>"},{"location":"guides/runahead/#how-many-frames-to-run-ahead","title":"How many frames to Run Ahead?","text":"<p>We need to find the shortest internal input lag a game can have, it's usually just moving the character:</p> <ul> <li>Pause emulation (press \"P\" hotkey on keyboard).</li> <li>Press and hold a direction on the controller.</li> <li>Advance emulation frame by frame (press \"K\" hotkey on keyboard) until the character moves.</li> </ul> <p>At best an action will be visible on the next frame, so the frames of lag are the amount of time you pushed \"K\" minus 1.</p> <p>If you did select an higher number than needed, you will see a stutter/rollback when pushing buttons and possibly various weirdness. If you selected a lower number, repeating the test above will take more than 1 push on the \"K\" hotkey to see your character move.</p>"},{"location":"guides/runahead/#can-i-always-use-run-ahead","title":"Can I always use Run Ahead?","text":"<p>Run Ahead relies on save states so they need to be clean and fast enough. If a core doesn't support them, this can not work. Using Second Instance mode works around some save states limitation, use it if possible.</p> <p>Calculating several frames in advance means that your machine must be fast enough to run the core at that level of speed. The higher the number of frames you are going to run ahead of emulation, the higher demands it places on your CPU.</p>"},{"location":"guides/runahead/#more-detailed-explanation","title":"More detailed explanation","text":"<p>Here is a more detailed explanation on runahead by its author Dwedit.</p> <p>How the Run-Ahead feature currently works:</p> <p>There are two modes of operation.</p> <ul> <li>Single-Instance Mode</li> <li>Two-Instance Mode</li> </ul> <p>In Single-Instance mode, when it wants to run a frame, instead it does this:</p> <ul> <li>Disable audio and video, run a frame, Save State</li> <li>Run additional frames with audio and video disabled if we want to run ahead more than one frame</li> <li>Enable audio and video and run the frame we want to see</li> <li>Load State</li> </ul> <p>All save states and load states are done to ram and never reach the disk.</p> <p>In Two-Instance mode, it does this:</p> <ul> <li>Primary core does Audio only, then saves state</li> <li>Secondary core loads state, runs frames ahead discarding audio and video, then runs a frame with video only.</li> </ul> <p>For performance reasons, it only resyncs the secondary core when input is dirty, otherwise it keeps running additional frames on the secondary core while the input is clean.</p> <p>Why bother with Two-Instance mode at all? Many of the cores do not leave audio emulation in a clean state after loading state, so you would get buzzing. Using Two-Instance mode makes the primary core not do any load states and avoids that.</p> <p>In Single-Instance mode, it is possible to improve performance further by running ahead without loading state while input is clean, but I am not currently doing that. I'd imagine there would be issues if calling the \"run a frame\" function left you in a state further along than a single frame.</p> <p>I'm also not doing any speculative inputs at all.</p>"},{"location":"guides/shaders/","title":"Shaders","text":""},{"location":"guides/shaders/#shader-presets","title":"Shader Presets","text":"<p>Shader Presets are combinations of one or more shaders. They can be loaded via <code>Quick Menu -&gt; Shaders -&gt; Load Shader Preset</code> and if you want to keep the shader between play sessions, you can save them as an \"automatic\" preset via <code>Quick Menu -&gt; Shaders -&gt; Save -&gt; Save Global/Core/Content Directory/Game Preset</code>.</p> <p>Global presets are automatically applied in any content for any core, while the Core presets are applied in any content for that specific core. Content Directory presets apply to all content in a certain folder and Game presets apply just to one game. Note that content directory and game presets are also core specific.</p> <p>If more than one automatic presets exist that could be applied, the most specific one wins out, so for example, if both a global and a game preset exists, the game preset will be used.</p> <p>You can also save other shader presets via <code>Quick Menu -&gt; Shaders -&gt; Save -&gt; Save Shader Preset As</code>, so if you create your \"perfect\" combination of shaders you can recall this at any time with <code>Load Shader Preset</code> then continue on to save it as an automatic preset. This will save time if using the same preset for multiple games or cores.</p> <p>By default automatic presets will save to the retroarch config directory </p> <p>E.G. <code>/config/\"name-of-core\"/\"name-of-core/directory/\"game\".slangp|glslp|cgp</code> </p> <p>or </p> <p><code>/config/global.slangp|glslp|cgp</code> </p> <p>Presets saved with save as are saved in the base <code>shaders</code> directory. The shader directory can be changed via <code>Settings -&gt; Directory -&gt; Video Shader</code>.</p> <p>There are plenty of user created presets that come bundled with the RetroArch installation and these can be updated from <code>Main Menu -&gt; Online Updater -&gt; Update Slang|Glsl|Cg Shaders</code> (You can find these presets in the shaders_glsl, shaders_slang, or shaders_cg subfolders of your shaders directory.)</p> <p>Example Screenshots</p>"},{"location":"guides/shaders/#editing-shader-parameters","title":"Editing Shader Parameters","text":"<p>You can edit shader presets or build your own using these tools: - Shader Parameters: Shows the list of all tweakable shader parameters, which are previewed live. If you save a Simple Preset all these changes can be saved without changing the shader chain</p>"},{"location":"guides/shaders/#editing-the-shader-chain","title":"Editing the Shader Chain","text":"<p>The Shader Chain which is a stack of shader passes each one pointing to a specific shader file. All Changes to the shader chain will force a Full Preset to be saved even if you have chosen to save a Simple Preset</p> <ul> <li>Prepend</li> <li> <p>Prepend Preset adds a preset you choose before the currently loaded shader chain</p> </li> <li> <p>Append</p> </li> <li> <p>Append Preset adds a preset you choose after the currently loaded shader chain</p> </li> <li> <p>Shader Passes: The number of shader passes to use.</p> </li> <li> <p>For every Shader Pass you can configure:</p> </li> <li>Shader #N: Path to a shader. <ul> <li>All shaders must be of the same type (i.e. .glsl, .slang, or .cg).</li> </ul> </li> <li>Shader #N Filter: Hardware filter used for scaling. <ul> <li>Don't Care uses <code>Settings -&gt; Video -&gt; Bilinear Scale</code>.</li> </ul> </li> <li>Shader #N Scale: Scale for this pass. <ul> <li>The scale factor accumulates, i.e. 2x for first pass and 2x for second pass will give you a 4x total scale.</li> <li>The last pass in the chain then is stretched to fullscreen using the <code>Settings -&gt; Video -&gt; Bilinear Scale</code> filter setting.</li> <li>\"Don't Care\" uses source scale mode at 1x which means this pass will have the same resolution as the previous pass.</li> <li>If the pass uses scaling methods which are not simple, (i.e. source scaling, different scaling factor for X/Y), the scaling factors can\u2019t be displayed in the UI so the value shown may not be correct.</li> </ul> </li> <li>Apply Changes: You must use this to rebuild the shader chain to see your changes after adjusting any settings in the shader passes or the number of passes with Shader Passes.</li> </ul>"},{"location":"guides/shaders/#simple-presets-vs-full-presets","title":"Simple Presets vs Full Presets","text":"<p>There are two different kind of presets, a Simple Preset, and a Full Preset. </p> <p>a Simple Preset uses the <code>#reference</code> directive to reference an existing preset and apply parameter and texture path adjustments to it without affecting the original preset.</p> <p>A Full Preset is complete independent preset which includes all the passes and defines the Shader Chain used. </p> <p>If the original preset a Simple Preset is referencing changes, the changes will be inherited. Conversely the Full Preset is completely independent from all other presets.</p>"},{"location":"guides/shaders/#simple-presets","title":"Simple Presets","text":"<p>A Simple Preset uses a <code>#reference \"&lt;preset path&gt;\"</code> directive, which when loaded acts as if the preset with the given path was loaded, after this any parameter values and texture paths are applied on top, overriding the existing values. There is also a possibility to have a chain of presets, each preset a referencing another. The last <code>#reference</code> needs to point to a full preset (one which has the definition of all the passes and required textures)</p> <p>From the shader menu you can create a Simple Preset by loading any shader preset, making changes to the shader parameters then saving the preset with the <code>Quick Menu -&gt; Save -&gt; Simple Presets</code> option set to <code>ON</code>. Only the shader parameter changes you made will be saved as values inside the simple preset. When the simple preset is loaded these values will be applied on top of the values from the original preset referred to in the <code>#reference</code> line. </p> <p>If you make any changes to the Shader Chain like using Prepend, Append, or changing settings on any of the passes, a Full Preset will be saved instead which will include a full copy of all the passes and textures.</p> <p>Note that if a Simple Preset has been automatically loaded (Global, Core, Content Directory, Game Preset) and is then saved again the <code>#reference</code> path will point to the path specified inside the automatically loaded preset rather than at the automatically loaded preset itself. </p> <p>Simple Preset Special Cases when Saving</p> <ul> <li>Saving Over the loaded Preset: </li> <li>E.G. there are presets Preset_A, Preset_B, Preset_B references Preset_A.  Preset_B is loaded then the user chooses to save over top of Preset_B. The reference to Preset_A is used instead of creating a a new reference to Preset_B which would be a cyclical reference. All current parameter values which differ from Preset_A will all be saved.</li> <li>Saving Over the preset referenced by the loaded preset: </li> <li>E.G. there are presets Preset_A, Preset_B and Preset_C, Preset_C references Preset_B which references Preset_A. The user loads Preset_C then saves over of Preset_B. The reference path to Preset A will be used to avoid a cyclical reference chain. All current parameter values which differ from Preset_A will all be saved.</li> <li>Saving Over a preset further up the chain: </li> <li>E.G. there are presets Preset_A, Preset_B, Preset_C and Preset_D. Preset_D references Preset_C which references Preset_B which references Preset_A. The user loads Preset_C then saves over of Preset_A. A full preset will be saved with all the passes and parameter values to avoid a cyclical reference chain.</li> </ul>"},{"location":"guides/shaders/#advanced-referencing-and-params-files","title":"Advanced Referencing and .params files","text":"<ul> <li>A <code>Simple Preset</code> can/must include one and only one reference to a <code>Full Preset</code> or a chain terminating in a full preset. If you have references to more than one Full preset this will be considered an error and the preset will not load.</li> <li>A simple preset can also include 0 or more references to <code>.params</code> files.</li> <li>A <code>.params</code> file only includes parameter values and texture paths as well as references to other <code>.params</code> files.</li> <li>Parameter value and texture paths in the reference chain are evaluated backward from the end of the chain, so the <code>.params</code> #references and parameter and texture values you see at the end of the chain will be applied last.</li> </ul>"},{"location":"guides/shaders/#paths-in-shader-presets","title":"Paths in Shader Presets","text":"<p>Paths can be specified as relative paths or abbreviated root paths</p> <p>Abbreviated Root Path Format E.G.  - <code>:/shaders/shaders_slang/stock.slang</code> - <code>:/</code> stands for the root of the Retroarch folder</p> <p>Relative Format E.G.  - <code>shaders_slang/stock.slang</code> - This path corresponds to the path to stock.slang relative to a preset which is saved in the shaders folder</p> <p>When a shader preset is saved all paths will be automatically saved in whichever format creates the path with least directory depth.</p>"},{"location":"guides/shaders/#wildcard-path-replacement","title":"Wildcard Path Replacement","text":"<p>Preset Wildcard Path replacement allows you to have fewer presets while addressing many scenarios by changing paths in response to the retroarch state when the preset is loaded. An example would be having one preset which could be used with the entire list of images from the Bezel Project.</p> <p>When a preset loads, text wildcards which are found in paths inside the presets will be replaced with values coming from the current RetroArch context. The replacement will be executed on both texture paths and reference paths, one or more wildcards can be placed in the filenames or paths. If no wildcards are found within the path, or the new path after replacing the wildcards does not exist on disk, the path will be left as it was before any replacement.</p> <p>Note: This replacement only happens only on preset load. If any retroarch context has changed since the preset was loaded the preset will need to be reloaded to react to this change.</p> <p>You can see real-time logging, including info from the wildcard replacement, live in Retroarch by turning on logging and turn off log to file. This causes an additional text window to appear when launching Retroarch.</p> <p>Example 1 - Have one preset show a different image for each game</p> <ul> <li><code>/shaders/MyBackground_$GAME$.png</code></li> </ul> <p>if you were playing Ms. Pacman it would be replaced with:</p> <ul> <li><code>/shaders/MyBackground_mspacman.png</code></li> </ul> <p>If no file (image or preset file) is found at the new path with the replacements, we revert to the original path. If there is no file at this path the shader will fail to load.</p> <ul> <li><code>/shaders/MyBackground_$GAME$.png</code></li> </ul> <p>Example 2 - Have one preset show a specific image for all games who's ROMs are in the same folder</p> <ul> <li><code>/shaders/MyBackground_$CONTENT-DIR$.png</code></li> </ul> <p>if your games were in a <code>MyVerticalGames</code> directory it would be replaced with:</p> <ul> <li><code>/shaders/MyBackground_MyVerticalGames.png</code></li> </ul> <p>If no file found at the new path with the replacements, we revert to the original path. If there is no file at this path the shader will fail to load.</p> <ul> <li><code>/shaders/MyBackground_$CONTENT-DIR$.png</code></li> </ul> <p>Example 3:</p> <ul> <li><code>/shaders/MyBackground_$VID-DRV$_$CORE$.png</code></li> </ul> <p>If you were playing a Saturn game on the YabaSanshiro core it would be replaced with</p> <ul> <li><code>/shaders/MyBackground_glcore_YabaSanshiro.png</code></li> </ul> <p>If no file found at the new path with the replacements, we revert to the original path. If there is no file at this path the shader will fail to load.</p> <ul> <li><code>/shaders/MyBackground_$VID-DRV$_$CORE$.png</code></li> </ul>"},{"location":"guides/shaders/#-","title":"-----","text":""},{"location":"guides/shaders/#possible-wildcardstokens-to-be-replaced","title":"Possible wildcards/tokens to be replaced:","text":"<p><code>$CONTENT-DIR$</code>   -&gt; Content Directory of the game rom</p> <p><code>$CORE$</code>       -&gt; Core name</p> <p><code>$GAME$</code>       -&gt; Game file's name, E.G. ROM name</p> <p><code>$VID-DRV$</code>   -&gt; Video Driver: Currently active driver, possible replacement values:  * <code>glcore</code>  * <code>gl</code>  * <code>vulkan</code>  * <code>d3d11</code>  * <code>d3d9_hlsl</code>  * <code>N/A</code></p> <p><code>$VID-DRV-SHADER-EXT$</code>   -&gt; Video Driver Shader File Extension: The extension of shaders type supported by the current video driver:  * <code>cg</code>  * <code>glsl</code>  * <code>slang</code></p> <p><code>$VID-DRV-PRESET-EXT$</code>   -&gt; Video Driver Preset File Extension: The extension of shaders type supported by the current video driver:  * <code>cgp</code>  * <code>glslp</code>  * <code>slangp</code></p> <p><code>$CORE-REQ-ROT$</code>   -&gt; Core Requested Rotation: Rotation the core is requesting, possible replacement values:  * <code>CORE-REQ-ROT-0</code>  * <code>CORE-REQ-ROT-90</code>  * <code>CORE-REQ-ROT-180</code>  * <code>CORE-REQ-ROT-270</code></p> <p><code>$VID-ALLOW-CORE-ROT$</code>   -&gt; Video Allow Core Rotation: Reflects Retroarch's setting allowing the core requested rotation to affect the final rotation:  * <code>VID-ALLOW-CORE-ROT-OFF</code>  * <code>VID-ALLOW-CORE-ROT-ON</code></p> <p><code>$VID-USER-ROT$</code>   -&gt; Video User Rotation: Rotation the core is requesting, possible replacement values, does not affect the UI:  * <code>VID-USER-ROT-0</code>  * <code>VID-USER-ROT-90</code>  * <code>VID-USER-ROT-180</code>  * <code>VID-USER-ROT-270</code></p> <p><code>$VID-FINAL-ROT$</code>   -&gt; Video Final Rotation: Rotation which is the sum of the user rotation and the core rotation if it has been allowed, does not affect the UI:  * <code>VID-FINAL-ROT-0</code>  * <code>VID-FINAL-ROT-90</code>  * <code>VID-FINAL-ROT-180</code>  * <code>VID-FINAL-ROT-270</code></p> <p><code>$SCREEN-ORIENT$</code>   -&gt; Screen Orientation: User adjusted screen orientation, will change windows from landscape to portrait, including the Retroarch UI:  * <code>SCREEN-ORIENT-0</code>  * <code>SCREEN-ORIENT-90</code>  * <code>SCREEN-ORIENT-180</code>  * <code>SCREEN-ORIENT-270</code></p> <p><code>$VIEW-ASPECT-ORIENT$</code>   -&gt; Viewport Aspect Orientation: Orientation of the aspect ratio of the RetroArch viewport  * <code>VIEW-ASPECT-ORIENT-HORZ</code>  * <code>VIEW-ASPECT-ORIENT-VERT</code></p> <p><code>$CORE-ASPECT-ORIENT$</code>   -&gt; Core Aspect Orientation: Orientation of the aspect ratio requested by the core  * <code>CORE-ASPECT-ORIENT-HORZ</code>  * <code>CORE-ASPECT-ORIENT-VERT</code></p> <p><code>$PRESET_DIR$</code>  -&gt; Preset directory's name</p> <p><code>$PRESET$</code>     -&gt; Preset's name</p>"},{"location":"guides/shaders/#command-line","title":"Command Line","text":"<p>The <code>--set-shader</code> command line option allows to set shaders directly, bypassing even automatic shader presets.</p> <p>Example use:</p> <pre><code>retroarch --set-shader \"D:\\RetroArch\\shaders\\shaders_glsl\\blurs\\kawase_blur_5pass.glslp\" -L &lt;core&gt; &lt;content&gt;\n</code></pre> <p>The shader path can be relative to the shader directory:</p> <pre><code>retroarch --set-shader \"shaders_glsl\\blurs\\kawase_blur_5pass.glslp\" -L &lt;core&gt; &lt;content&gt;\n</code></pre> <p>An empty parameter effectively disables any automatic presets:</p> <pre><code>retroarch --set-shader \"\" -L &lt;core&gt; &lt;content&gt;\n</code></pre>"},{"location":"guides/shaders/#converting-cg-shaders-to-glsl","title":"Converting Cg shaders to GLSL","text":"<p>In some cases, Cg shaders cannot be supported. This goes for OpenGL ES drivers, and when EGL OpenGL contexts are used (KMS mode for instance). Using Nvidia's <code>cgc</code> compiler, you can convert Cg shaders to GLSL shaders with the <code>cg2glsl</code> tool developed by us here. It can convert single shaders as well as whole folder structures in batch. 100% compatibility is not guaranteed, but almost all shaders should work fine. Cg presets (.cgp) are not converted at the moment, but converting them is as simple as copying over the .cgp, renaming it to .glslp, and replacing references to .cg files to .glsl.</p>"},{"location":"guides/softpatching/","title":"Softpatching ROMs with RetroArch","text":"<p>RetroArch currently supports the UPS, IPS, BPS, and XDelta<sup>1</sup> patching formats. If you load <code>rom.bin</code> and one of the following is present, the ROM will be autopatched: <code>rom.ups</code>, <code>rom.ips</code> or <code>rom.bps</code>. Autopatching only takes place if the libretro implementation supports loading ROMs from memory.</p> <p>You can apply multiple patches to one ROM by naming the patches with the <code>.ips$</code> extension, where <code>$</code> is a number. For example, given the following files...</p> <pre><code>rom.bin\nrom.ips\nrom.ips1\nrom.ips2\n</code></pre> <p>...<code>rom.bin</code> will have <code>rom.ips</code>, <code>rom.ips1</code>, and <code>rom.ips2</code> applied to it in that order.</p>"},{"location":"guides/softpatching/#cores-compatibility","title":"Cores Compatibility","text":""},{"location":"guides/softpatching/#bandai-wonderswancolor","title":"Bandai - WonderSwan/Color","text":"Core Supported Beetle Cygne \u2714"},{"location":"guides/softpatching/#coleco-colecovision","title":"Coleco - ColecoVision","text":"Core Supported Gearcoleco \u2714"},{"location":"guides/softpatching/#nec-pc-engine-turbografx-16-pc-engine-cd-turbografx-cd","title":"NEC PC Engine - TurboGrafx-16 / PC Engine CD - TurboGrafx-CD","text":"Core Supported Geargrafx \u2714"},{"location":"guides/softpatching/#nintendo-ds","title":"Nintendo - DS","text":"Core Supported melonDS DS \u2714"},{"location":"guides/softpatching/#nintendo-game-boy-color","title":"Nintendo - Game Boy / Color","text":"Core Supported Gambatte \u2714 Gearboy \u2714 Mesen-S \u2714 mGBA \u2714 SameBoy \u2715 TGB Dual \u2714 VBA-M \u2714"},{"location":"guides/softpatching/#nintendo-game-boy-advance","title":"Nintendo - Game Boy Advance","text":"Core Supported Meteor \u2714 mGBA \u2714 VBA-M \u2714 VBA Next \u2714"},{"location":"guides/softpatching/#nintendo-nes-famicom","title":"Nintendo - NES / Famicom","text":"Core Supported bnes \u2714 FCEUmm \u2714 Mesen \u2714 Nestopia \u2714 QuickNES \u2714"},{"location":"guides/softpatching/#nintendo-snes-famicom","title":"Nintendo - SNES / Famicom","text":"Core Supported Beetle bsnes \u2714 bsnes-mercury Accuracy \u2714 bsnes-mercury Balanced \u2714 bsnes-mercury Performance \u2714 bsnes Accuracy \u2714 bsnes Balanced \u2714 bsnes C++98 (v085) \u2714 bsnes Performance \u2714 higan Accuracy \u2714 nSide Balanced \u2714 Mesen-S \u2714 Snes9x \u2714 Snes9x 2002 \u2714 Snes9x 2005 \u2714 Snes9x 2005 Plus \u2714 Snes9x 2010 \u2714"},{"location":"guides/softpatching/#sega-master-system","title":"Sega - Master System","text":"Core Supported SMS Plus GX \u2714 Gearsystem \u2714 Genesis Plus GX \u2715 PicoDrive \u2715"},{"location":"guides/softpatching/#sega-megadrive-genesis","title":"Sega - MegaDrive / Genesis","text":"Core Supported BlastEm \u2714 ClownMDEmu \u2714 Genesis Plus GX \u2714 PicoDrive \u2715"},{"location":"guides/softpatching/#snk-neo-geo-pocket-neo-geo-pocket-color","title":"SNK - Neo Geo Pocket / Neo Geo Pocket Color","text":"Core Supported Beetle NeoPop \u2714 RACE \u2715 <ol> <li> <p>When enabled at compile-time.\u00a0\u21a9</p> </li> </ol>"},{"location":"guides/softwarelist-getting-started/","title":"Getting started with Non-Acrcade/Software Emulation in Libretro MAME/MESS cores","text":"<p>In this chapter, the terms 'software' and 'software lists' are used to define non-arcade machines that are emulated by MAME/MESS. This kind of emulation requires a different planning approach than arcade machine emulation - it is more complicated to set up.</p> <p>The basic principle is that software lists contained in the hash database are used to tell MAME/MESS how to start the game. This is an example entry from an Atari 7800 game also used further below (just for illustration purposes, no need to configure anything):</p> <pre><code>&lt;software name=\"asteroid\"&gt;\n    &lt;description&gt;Asteroids (NTSC)&lt;/description&gt;\n    &lt;year&gt;1984&lt;/year&gt;\n    &lt;publisher&gt;Atari&lt;/publisher&gt;\n    &lt;info name=\"serial\" value=\"CX7802\"/&gt;\n    &lt;sharedfeat name=\"compatibility\" value=\"NTSC\"/&gt;\n    &lt;part name=\"cart\" interface=\"a7800_cart\"&gt;\n        &lt;feature name=\"slot\" value=\"a78_rom\" /&gt;\n        &lt;dataarea name=\"rom\" size=\"16384\"&gt;\n            &lt;rom name=\"astroids.bin\" size=\"16384\" crc=\"dfb93f40\" sha1=\"d96ec4e043fcdacab367d8a69d29904b3b2896f1\"/&gt;\n        &lt;/dataarea&gt;\n    &lt;/part&gt;\n&lt;/software&gt;\n</code></pre>"},{"location":"guides/softwarelist-getting-started/#understand-the-core-variants","title":"Understand the core variants","text":"<p>The libretro core ecosystem currently includes many multi software emulators that support software emulation. Three families exist: MAME, MESS and UME. These emulators are in turn available in multiple versions to allow users to best match a core to their preference.</p>"},{"location":"guides/softwarelist-getting-started/#mame-current","title":"MAME current","text":"<p>Arcade (MAME) is currently the only MAME core for most host systems that supports the emulation of both software &amp; arcade systems. The Arcade (MAME) core is updated regularly and most of the time in line with the official MAME project release. For an overview of the vast number of system that are emulated, have a look into the github directory of the hash files: https://github.com/mamedev/mame/tree/master/hash - every xml contains the readable metadata of one system, i.e. the games it supports.</p> <p>Arcade (MAME 2016) is an archived snapshot of MAME from the 0.174 release. Currently it is no longer built for RetroArch.</p>"},{"location":"guides/softwarelist-getting-started/#mess-no-longer-provided","title":"MESS (no longer provided)","text":"<p>Currently there is no dedicated MESS core in Retroarch, except for Android ARM64. It is also still provided in RetroPie as MESS2016_libretro core. Multi (MESS 2016) is a snapshot of the MESS project from v0.160. The MESS project later merged with the MAME project in MAME v0.162, i.e. in May 2015. The documentation of MESS is here: http://mess.redump.net/start - however some of its pages no longer work.</p>"},{"location":"guides/softwarelist-getting-started/#ume-no-longer-provided","title":"UME (no longer provided)","text":"<p>UME cores are no longer in RetroArch. Multi (UME 2015) was a snapshot of the Universal Machine Emulator. This was a precursor to the MAME/MESS merger, released by David Haywood (haze). The MAME and MESS project codebases co-existed in the MESS SVN development tree before they officially merged. This allowed haze to build and release the emulator with unmodified code from both projects under the name UME.</p>"},{"location":"guides/softwarelist-getting-started/#use-the-correct-version-of-romset-for-the-desired-emulator","title":"Use the correct version of romset for the desired emulator","text":"<p>Arcade (MAME) will be the focus of this guide, but also the old Arcade (MAME 2016), the MULTI (MESS 2015) and MULTI (UME 2015) cores had this ability (so this information is also provided for documentation purposes). As in MAME arcade emulation, each core requires its own distinct version of software list \"romsets\", which the emulator supports.</p> Emulator Required ROM Version Notes MAME (latest version) MAME (latest version) or same version if not in sync with MAME upstream MAME 2016 MAME 0.174 RetroArch core no longer provided MESS 2015 MAME 0.160 RetroArch core no longer provided UME 2015 MAME 0.160 RetroArch core no longer provided <p>Tip</p> <p>For best results, start with a full software list ROM collection with a version that matches the emulator you are using. Individual romset zip files may not include BIOS ROMs, \"Parent\" romsets, necessary audio sample files, etc. Matching emulator and game versions is advised for maximum compatibility, but you may find mis-matched combinations also work.</p>"},{"location":"guides/softwarelist-getting-started/#running-software-list-machines","title":"Running software list machines","text":"<p>There are two ways of configuring Retroarch to launch software list machines and games with MAME cores.</p> <ol> <li>Method 1 - MAME Frontend direct launch: uses the inbuilt MAME logic and hash files to launch your games</li> <li>Method - RetroArch fontend friendly via Libretro CMD file launch: uses an extra libretro feature to pass command line functions to the core </li> </ol>"},{"location":"guides/softwarelist-getting-started/#method-1-mame-frontend-direct-launch","title":"Method 1: MAME Frontend direct launch","text":"<p>For using the internal software list functions of MAME, you will need the right supporting files from the mainline MAME standalone emulator, i.e. the hash files. E.g. for the MAME (current) core, download the newest version of the Windows MAME emulator here. For earlier versions, make sure to get the correct version you require: The version of the hash files must match with the Libretro Core version.</p> <p>Tip</p> <p>In RetroArch, launch the desired core standalone, and on the bottom left, you find the correct MAME version that you want to download.</p> <p>Extract the contents and take the \u201chash\u201d folder. Move this folder into the RetroArch folder structure. If your device has limited storage, just copy the hash files relating to the system you want to emulate.</p> <p>RetroArch MAME system folder structure: Folder structure/naming is very important here. The naming will depend on the machine you are trying to emulate but the folder structure will be the same. The example below is for the Atari 7800 system in MAME current.</p> <p>\u201cYourPath\u201d is the location of your Retroarch system folders. It varies depending on your operating system.</p> <p>Tip</p> <p>In RetroArch, head for Settings/Directory - the System/BIOS entry identifies the correct \"system\" folder.</p> <p>If not already existent, create the following folder in your RetroArch \u201csystem\u201d folder: \"YourPath\"/Retroarch/System/mame</p> <p>Copy the hash folder acquired earlier into the RetroArch system folder: \"YourPath\"/Retroarch/system/mame/hash</p> <p>So for Atari 7800 you would have the following hash file: YourPath/Retroarch/system/mame/hash/a7800.xml</p> <p>(To do: check about .hsi file or use another example)</p> <p>RetroArch MAME games folder structure: Create the following folders in your games directory of your choice (these will be mame naming dependent) \"YourPath\"/Games/Atari 7800/a7800 (The last folder MUST be named as MAME requires, in this case \u201ca7800\u201d)</p> <p>Place any .zip games and .zip bios files required here: \"YourPath\"/Games/Atari 7800/a7800.zip \"YourPath\"/Games/Atari 7800/a7800/asteroid.zip</p> <p>Note</p> <p>To place the bios file above a7800 is the way that official MAME stores the data and thus also recommended here. You could also put the bios into the a7800 folder, but that's not how official MAME does it. </p> <p>You may also put or even extract the bios file to their own folder within the games directory \"YourPath\"/Games/Atari 7800/a7800/a7800/7800.rom</p> <p>Now launch the game: In RetroArch, choose \"Load Content\" and browse to asteroid.zip and launch with MAME current.</p> <p>(To Do: Add note about SoftList xml specifying the game names and crc and only supporting only those specific file names. Dummy files for CD-based games.)</p>"},{"location":"guides/softwarelist-getting-started/#method-2-retroarch-frontend-friendly-via-libretro-cmd-file-launching","title":"Method 2: RetroArch frontend friendly via Libretro CMD file launching","text":"<p>This method follows the same folder structure as above, but you can use custom naming outside of the hash file included with MAME. It utilises some custom additions to the Libretro MAME Cores. Specifically the use of text files (.cmd) to replicate sending command line actions as you can with mainline MAME.</p> <p>Creating a .cmd file Let's follow the above example and create a dedicated asteroid.cmd file for the Atari 7800 game. It needs this line:</p> <p>a7800 -cart asteroid -rp \"/\"YourPath\"/mame/roms/a7800\"</p> <p>To do: Other path definitions, e.g. under Windows? Maybe explain the different sources, e.g. cart, flop etc?</p> <p>Now launch the game: In RetroArch, choose \"Load Content\" and browse to asteroid.cmd, and it should launch with MAME current.</p> <p>To do: Cmd file example</p>"},{"location":"guides/starting-a-game/","title":"Starting a game","text":""},{"location":"guides/starting-a-game/#requirements","title":"Requirements","text":"<ul> <li>To load a game you need two things: A libretro core, and a ROM file.<ul> <li>Some systems/games may also require additional system files (such as a BIOS to run correctly.</li> </ul> </li> </ul>"},{"location":"guides/starting-a-game/#via-load-contentcore","title":"via 'Load Content/Core'","text":""},{"location":"guides/starting-a-game/#load-the-core","title":"Load the core","text":"<ul> <li>Select <code>Load Core&gt; Core</code> from the main menu, then choose a libretro core from the list.</li> <li>Some releases of RetroArch come with a supply of cores built-in. If you don't have any cores installed, or want to add new ones, connect to the internet and select <code>Download a Core</code> from the bottom of the list.</li> <li>Select your core in the list to load it.</li> </ul> <p>See Download Cores.</p> <p>When a libretro core is loaded, you will see the name and version of the core in the bottom left of the screen (Ozone/XMB/RGUI) or in the notification bar (GLUI).</p>"},{"location":"guides/starting-a-game/#load-the-content","title":"Load the content","text":"<p>You can then browse for a ROM by selecting <code>Load Content</code>. Browse to your content's folder and select your ROM from the list. Then select <code>Current Core</code> or select another core from this list. The content will now launch.</p> <p>To set the folder for the <code>Start Directory</code> option (which will otherwise start in the user's root directory), set <code>File Browser</code> in <code>Settings&gt; Directory</code>.</p> <p>See File Browser</p>"},{"location":"guides/starting-a-game/#via-playlists","title":"via Playlists","text":"<p>Alternatively, you can launch content from Playlists.</p> <ul> <li>Scan for content to add to the playlist.</li> </ul> <p>See File Browser and Import Content.</p> <ul> <li>Open your chosen Playlist.</li> <li>Highlight your chosen row and select it. A new submenu will appear: Select <code>Run</code> to start the game.</li> <li>If you have already <code>Set Core Association</code>, then the content will launch immediately. If you have not, one more list will ask you which Core you want to run the Content with.</li> </ul> <p>This option will automatically choose the \"best\" core to run the content.</p>"},{"location":"guides/starting-a-game/#history-favorites","title":"History / Favorites","text":"<p>Content can be launched the 'History' and 'Favorites' playlists the same way as a regular Playlist.</p>"},{"location":"guides/starting-a-game/#exiting-a-game","title":"Exiting a game","text":"<p>Press the key/button combination to open the Quick Menu and select <code>Close Content</code>. This will safely close both the Content and its Core, and return you to the Main Menu of RetroArch.</p>"},{"location":"guides/themes/","title":"Making Custom Themes","text":"<p>This page will guide you through the essential information needed to customize the core RetroArch theme.</p> <p>Credit for information goes to @baxysquare from this forum post</p> <p>Tip</p> <p>For examples of Menu Icon Themes and how to change them please read this guide</p>"},{"location":"guides/themes/#skills-tools-needed-to-make-and-contribute-a-theme","title":"Skills &amp; Tools Needed to Make and Contribute a Theme","text":"<ul> <li> <p>A GitHub account and a basic understanding on how to fork a project and contribute via Pull Requests. The GitHub project that hosts the theme is the retroarch-assets repository.</p> </li> <li> <p>Computer application(s) to create source icons. You can use any photo editing application such as Photoshop or GIMP, but a Vector-based application such as Illustrator or Inkscape is preferred. The preferred source format is SVG.</p> </li> <li> <p>Conversion applications can come in handy. You can use ImageMagick to batch convert your source files to PNG format. Running your PNG files through ImageOptim can help reduce the icon file size without reducing the quality.</p> </li> <li> <p>Attention to detail, patience and time. Be prepared to create and revise as you learn and grow. Feel free to take an existing theme, make modifications and then test your new design.</p> </li> </ul>"},{"location":"guides/themes/#required-theme-components","title":"Required Theme Components","text":"<ul> <li> <p>A truetype font renamed to \"font.ttf.\" You need to choose a typeface that has an open license. There is a wide selection to choose from at Google Fonts. If you have the tools and skills to make your own font and wish to contribute it via open license, feel free to do so.</p> </li> <li> <p>A text file in GitHub Markdown format titled README.md. This file provides basic info on the theme itself along with specifications and guidelines to help others contribute to the theme. Make sure to include an attribution and license info for the included truetype font.</p> </li> <li> <p>A PNG folder that contains a complete set of icons and a default background image.</p> </li> </ul>"},{"location":"guides/themes/#optional-theme-components","title":"Optional Theme Components","text":"<ul> <li>A SRC file containing SVG or other source files. If you choose not to include your source files, please host them elsewhere and indicate in the README.</li> </ul>"},{"location":"guides/themes/#icons","title":"Icons","text":"<p>The majority of time and effort involved in creating a theme is creating and revising the icons. The default Monochrome set includes just over 200 icons as listed below. That number will continue to grow as more cores and features are added.</p>"},{"location":"guides/themes/#tips-tricks-for-creating-icons","title":"Tips &amp; Tricks for Creating Icons","text":"<ul> <li> <p>The icons should be set to a 256x256 pixel canvas and should be centered on a 64x64 grid. You need to snap your point and line elements to the grid wherever possible. Libretro icons are scaled down, so when design elements do not line up with the grid, they tend to render oddly.</p> </li> <li> <p>Give your icons room to breathe. While you are capable of using the full canvas, a 248x248 or 240x240 maximum icon size is highly recommended. Alternatively, you can keep your icons inside a 256x256 circular \"blueprint\". This will keep the top and the bottom of your icons from touching when you're scrolling through a list of icons.</p> </li> <li> <p>Create and stick to a color palette of 64 colors or less. While you can use an unlimited palette, your icons will look more uniform and consistent as a theme.</p> </li> <li> <p>Keep the details of your icons in harmony with one another. If one icon has too many design details, try to simplify it to match with the other icons. If an icon is lacking in detail, do what you can to add balance in comparison to the other designs.</p> </li> </ul> <p>Here's a complete list of icons (and wallpaper) in the default set. Category, Type, Menu Level and Size info has been included to help you understand an icon's purpose and use in the user interface.</p> Name Category Type Level Size FB Alpha - Arcade Games-content.png Arcade Content 1 256 MAME-content.png Arcade Content 1 256 MAME2003-content.png Arcade Content 1 256 MAME2010-content.png Arcade Content 1 256 Neo Geo-content.png Arcade Content 1 256 FB Alpha - Arcade Games.png Arcade System 0 256 MAME.png Arcade System 0 256 MAME2003.png Arcade System 0 256 MAME2010.png Arcade System 0 256 Neo Geo.png Arcade System 0 256 Lutro.png Computer Application 0 256 DOS.png Computer Application 0 256 Atari - ST-content.png Computer Content 1 256 Commodore Amiga-content.png Computer Content 1 256 DOS-content.png Computer Content 1 256 Microsoft - MSX-content.png Computer Content 1 256 Microsoft - MSX2-content.png Computer Content 1 256 ScummVM-content.png Computer Content 1 256 Sinclair - ZX 81-content.png Computer Content 1 256 Sinclair - ZX Spectrum +3-content.png Computer Content 1 256 Sinclair - ZX Spectrum-content.png Computer Content 1 256 Lutro-content.png Computer Content 1 256 Atari - ST.png Computer System 0 256 Commodore Amiga.png Computer System 0 256 Microsoft - MSX.png Computer System 0 256 Microsoft - MSX2.png Computer System 0 256 ScummVM.png Computer System 0 256 Sinclair - ZX 81.png Computer System 0 256 Sinclair - ZX Spectrum +3.png Computer System 0 256 Sinclair - ZX Spectrum.png Computer System 0 256 Atari - 2600-content.png Console Content 1 256 Atari - 5200-content.png Console Content 1 256 Atari - 7800-content.png Console Content 1 256 Atari - Jaguar-content.png Console Content 1 256 Bandai - WonderSwan Color-content.png Console Content 1 256 Bandai - WonderSwan-content.png Console Content 1 256 Coleco - ColecoVision-content.png Console Content 1 256 GCE - Vectrex-content.png Console Content 1 256 Magnavox - Odyssey2-content.png Console Content 1 256 NEC - PC Engine - TurboGrafx 16-content.png Console Content 1 256 NEC - PC Engine CD - TurboGrafx-CD-content.png Console Content 1 256 NEC - PC Engine SuperGrafx-content.png Console Content 1 256 NEC - PC-FX-content.png Console Content 1 256 Nintendo - Family Computer Disk System-content.png Console Content 1 256 Nintendo - GameCube-content.png Console Content 1 256 Nintendo - Nintendo 64-content.png Console Content 1 256 Nintendo - Nintendo 64DD-content.png Console Content 1 256 Nintendo - Nintendo Entertainment System-content.png Console Content 1 256 Nintendo - Satellaview-content.png Console Content 1 256 Nintendo - Sufami Turbo-content.png Console Content 1 256 Nintendo - Super Nintendo Entertainment System-content.png Console Content 1 256 Nintendo - Wii-content.png Console Content 1 256 Sega - 32X-content.png Console Content 1 256 Sega - Dreamcast-content.png Console Content 1 256 Sega - Master System - Mark III-content.png Console Content 1 256 Sega - Mega Drive - Genesis-content.png Console Content 1 256 Sega - Mega-CD - Sega CD-content.png Console Content 1 256 Sega - PICO-content.png Console Content 1 256 Sega - Saturn-content.png Console Content 1 256 Sega - SG-1000-content.png Console Content 1 256 SNK - Neo Geo CD-content.png Console Content 1 256 SNK - Neo Geo-content.png Console Content 1 256 Sony - PlayStation-content.png Console Content 1 256 The 3DO Company - 3DO-content.png Console Content 1 256 Uzebox-content.png Console Content 1 256 Atari - 2600.png Console System 0 256 Atari - 5200.png Console System 0 256 Atari - 7800.png Console System 0 256 Atari - Jaguar.png Console System 0 256 Bandai - WonderSwan Color.png Console System 0 256 Bandai - WonderSwan.png Console System 0 256 Coleco - ColecoVision.png Console System 0 256 GCE - Vectrex.png Console System 0 256 Magnavox - Odyssey2.png Console System 0 256 NEC - PC Engine - TurboGrafx 16.png Console System 0 256 NEC - PC Engine CD - TurboGrafx-CD.png Console System 0 256 NEC - PC Engine SuperGrafx.png Console System 0 256 NEC - PC-FX.png Console System 0 256 Nintendo - Family Computer Disk System.png Console System 0 256 Nintendo - GameCube.png Console System 0 256 Nintendo - Nintendo 64.png Console System 0 256 Nintendo - Nintendo 64DD.png Console System 0 256 Nintendo - Nintendo Entertainment System.png Console System 0 256 Nintendo - Satellaview.png Console System 0 256 Nintendo - Sufami Turbo.png Console System 0 256 Nintendo - Super Nintendo Entertainment System.png Console System 0 256 Nintendo - Wii.png Console System 0 256 Sega - 32X.png Console System 0 256 Sega - Dreamcast.png Console System 0 256 Sega - Master System - Mark III.png Console System 0 256 Sega - Mega Drive - Genesis.png Console System 0 256 Sega - Mega-CD - Sega CD.png Console System 0 256 Sega - PICO.png Console System 0 256 Sega - Saturn.png Console System 0 256 Sega - SG-1000.png Console System 0 256 SNK - Neo Geo CD.png Console System 0 256 SNK - Neo Geo.png Console System 0 256 Sony - PlayStation.png Console System 0 256 The 3DO Company - 3DO.png Console System 0 256 Uzebox.png Console System 0 256 Atari - Lynx-content.png Handheld Content 1 256 Game Park - GP32-content.png Handheld Content 1 256 Handheld Electronic Game-content.png Handheld Content 1 256 Nintendo - Game Boy Advance-content.png Handheld Content 1 256 Nintendo - Game Boy Color-content.png Handheld Content 1 256 Nintendo - Game Boy-content.png Handheld Content 1 256 Nintendo - Nintendo DS Decrypted-content.png Handheld Content 1 256 Nintendo - Nintendo DS-content.png Handheld Content 1 256 Nintendo - Pokemon Mini-content.png Handheld Content 1 256 Nintendo - Virtual Boy-content.png Handheld Content 1 256 Sega - Game Gear-content.png Handheld Content 1 256 SNK - Neo Geo Pocket Color-content.png Handheld Content 1 256 SNK - Neo Geo Pocket-content.png Handheld Content 1 256 Sony - PlayStation Portable-content.png Handheld Content 1 256 Tiger - Game.com-content.png Handheld Content 1 256 Atari - Lynx.png Handheld System 0 256 Game Park - GP32.png Handheld System 0 256 Handheld Electronic Game.png Handheld System 0 256 Nintendo - Game Boy Advance.png Handheld System 0 256 Nintendo - Game Boy Color.png Handheld System 0 256 Nintendo - Game Boy.png Handheld System 0 256 Nintendo - Nintendo DS Decrypted.png Handheld System 0 256 Nintendo - Nintendo DS.png Handheld System 0 256 Nintendo - Pokemon Mini.png Handheld System 0 256 Nintendo - Virtual Boy.png Handheld System 0 256 Sega - Game Gear.png Handheld System 0 256 SNK - Neo Geo Pocket Color.png Handheld System 0 256 SNK - Neo Geo Pocket.png Handheld System 0 256 Sony - PlayStation Portable.png Handheld System 0 256 Tiger - Game.com.png Handheld System 0 256 2048.png Port Application 0 256 Cave Story.png Port Application 0 256 Dinothawr.png Port Application 0 256 DOOM.png Port Application 0 256 Dungeon Crawl Stone Soup.png Port Application 0 256 Quake1.png Port Application 0 256 2048-content.png Port Content 1 256 Cave Story-content.png Port Content 1 256 Dinothawr-content.png Port Content 1 256 DOOM-content.png Port Content 1 256 Dungeon Crawl Stone Soup-content.png Port Content 1 256 Quake1-content.png Port Content 1 256 FFmpeg.png XMB Application 0 256 default.png XMB Application 0 256 Game.png XMB Application 0 256 history.png XMB Application 0 256 images.png XMB Application 0 256 lakka.png XMB Application 0 256 movies.png XMB Application 0 256 netplay.png XMB Application 0 256 retroarch.png XMB Application 0 256 settings.png XMB Application 0 256 musics.png XMB Application 0 256 add.png XMB Application 0 256 FFmpeg-content.png XMB Content 1 256 music.png XMB Content 1 256 image.png XMB Content 1 256 movie.png XMB Content 1 256 achievement-list.png XMB Content 1 256 default-content.png XMB Content 1 256 Game-content.png XMB Content 1 256 netplay - iRoom-locked.png XMB Content 1 256 netplay - iRoom.png XMB Content 1 256 netplay - LAN Room-locked.png XMB Content 1 256 netplay - LAN Room.png XMB Content 1 256 netplay - rooms-locked.png XMB Content 1 256 netplay - rooms.png XMB Content 1 256 room.png XMB Content 1 256 setting.png XMB Content 1 256 zip.png XMB Content 2 256 file.png XMB Content 2 Small folder.png XMB Content 2 Small dialog-slice.png XMB Dialog 2 256 Libretro - Pad.png XMB Help - 256 battery-charging.png XMB Info Bar - Small battery-full.png XMB Info Bar - Small clock.png XMB Info Bar - Small undo.png XMB Info Bar - Small wifi.png XMB Info Bar - Small key-hover.png XMB Key 2 256 key.png XMB Key 2 256 arrow.png XMB Nav 2 Small close.png XMB Nav 2 Small core-cheat-options.png XMB Nav 2 Small core-disk-options.png XMB Nav 2 Small core-infos.png XMB Nav 2 Small core-input-remapping-options.png XMB Nav 2 Small core-options.png XMB Nav 2 Small core-shader-options.png XMB Nav 2 Small core.png XMB Nav 2 Small cursor.png XMB Nav 2 Small database.png XMB Nav 2 Small loadstate.png XMB Nav 2 Small pointer.png XMB Nav 2 Small reload.png XMB Nav 2 Small resume.png XMB Nav 2 Small run.png XMB Nav 2 Small savestate.png XMB Nav 2 Small screenshot.png XMB Nav 2 Small subsetting.png XMB Nav 2 Small off.png XMB Selection 2 Small on.png XMB Selection 2 Small bg.png XMB Wallpaper - 1080p"},{"location":"guides/troubleshooting-retroarch/","title":"Troubleshooting RetroArch","text":""},{"location":"guides/troubleshooting-retroarch/#common-video-issues","title":"Common video issues","text":""},{"location":"guides/troubleshooting-retroarch/#optimal-vsync-performance-with-dynamic-rate-control","title":"Optimal vsync performance with dynamic rate control","text":"<p>RetroArch uses Dynamic Rate Control to synchronize both video and audio at the same time. Synchronizing like this is a very demanding task timing-wise and dynamic rate control helps smooth out imperfections in timing which are guaranteed to arise. It can be disabled, but be aware that proper video/audio sync is nearly impossible to obtain.</p> <p>While using RetroArch, the default settings might not be adequate, and you might experience video stuttering and/or audio crackling. For correct synchronization, video_refresh_rate must be configured for your monitor. It cannot be detected accurately enough by OS-provided APIs (i.e. they tend to blatantly lie). For proper behavior, an accuracy of roughly ~0.1% is needed for dynamic rate control to smooth out the drifting. This is trivial to obtain by measuring manually under normal conditions. Without dynamic rate control one would need a \"perfect\" measurement which obviously isn't possible without special hardware.</p> <p>RetroArch can give you an estimate of your monitors refresh rate under video settings, which is updated in real-time using a running average over frame times. Make sure vysnc is enabled and working. Also make sure you're running in full-screen for more accurate results (compositors can easily interfere with timing). Press accept button on the estimated refresh rate to configure RetroArch with the estimated rate. If the running average isn't drifting much anymore, it's probably a good result.</p> <p>You can also have RetroArch log the output at the end and configure things more manually. Start RetroArch directly in RGUI with retroarch --verbose --menu. Let it run uninterrupted for at least 4096 frames (displayed in title bar), and exit. In the log, you should see something like:</p> <pre><code>RetroArch: Average monitor Hz: 59.869485 Hz. (1.347 % frame time deviation, based on 2048 last samples).\n</code></pre> <p>If you're unsure about the result, run this test several times and see if the results are consistent. Some systems tend to have very unreliable vsync behavior and this result will wildly fluctuate. You can use this value in <code>video_refresh_rate</code> and the video and audio should ideally be butter smooth if the game's FPS and monitor FPS are relatively close to each other. Playing a PAL game on 60 Hz monitor won't be perfect no matter what you do, however.</p>"},{"location":"guides/troubleshooting-retroarch/#threaded-video","title":"Threaded video","text":"<p>If your video driver has very bad performance, it is possible to run it on a thread to avoid almost all video driver overhead. Set video_threaded = true in config. Butter smooth VSync behavior in this case is impossible however, and latency might increase slighly. Use only if you cannot obtain full speed otherwise.</p>"},{"location":"guides/troubleshooting-retroarch/#low-frame-rate","title":"Low frame rate","text":"<ul> <li>Make sure your system meets the requirement of the core you picked</li> <li>See if your core options aren't set too high for your system</li> <li>Disable shaders</li> <li>Lower the video scale setting</li> <li>Try another video driver</li> <li>Try enabling threaded video in the video options</li> <li>Try disabling VSYNC</li> <li>Disable Run-Ahead in the Latency options</li> </ul>"},{"location":"guides/troubleshooting-retroarch/#windows-vista-and-up-video-problems","title":"Windows Vista and up video problems","text":"<p>Windows Vista and up suffer problems with OpenGL in windowed mode where it appears to be impossible to obtain proper, smooth VSync behavior no matter what you do. If you are annoyed by this problem, and still want to play in windowed mode, you should use the D3D driver which doesn't have this problem. Disabling Aero sometimes helps OpenGL VSync behavior.</p>"},{"location":"guides/troubleshooting-retroarch/#input-latency","title":"Input latency","text":"<p>There have been cases reported on excessive input lag in Windows for some users. It's not really input latency, but video driver latency. Some video drivers tend to buffer way too much in the name of increased performance. This problem is explained by Carmack here.</p> <p>RetroArch recently got an option to use a swap/fence sync method in OpenGL driver, which is reported to greatly lower input latency (thread). To enable it, set video_hard_sync = true in config or enable it from RGUI. To ensure that this sync method is actually used, make sure that you see this in the log:</p> <pre><code>RetroArch: Querying GL extension: ARB_sync =&gt; exists\nRetroArch: [GL]: Using ARB_sync to reduce latency.\n</code></pre> <p>Do note that this sync method can greatly reduce performance, and can turn smooth 60 fps into crawling 30 fps if there was not enough headroom in the performance. If you use KMS mode, using <code>video_hard_sync</code> won't help as it already does something like this.</p>"},{"location":"guides/troubleshooting-retroarch/#why-isnt-my-bios-working","title":"Why isn\u2019t my BIOS working?","text":"<ol> <li>Make sure the BIOS files are placed into the correct directory</li> <li>Make sure they are named correctly so the core can identify them.</li> <li>Make sure it\u2019s the correct version/region of a BIOS.</li> <li>Make sure your files are not corrupted (bad source, broken download, etc.).</li> <li>Make sure to check the log for any errors.</li> </ol>"},{"location":"guides/troubleshooting-retroarch/#getting-ready-to-ask-for-help","title":"Getting ready to ask for help","text":"<p>When problems arise with RetroArch, it is helpful for the developers and other volunteers to have certain standard information in order to find a solution. When requesting help with a RetroArch issue, please try to include:</p> <ol> <li>A description of the problem: What did you expect to happen, and what happened instead?</li> <li>The version of RetroArch you are using</li> <li>The hardware and operating system that you are using</li> <li>If the problem occurs while using a core: What is the the core name, its version, and the name of the game or media you were playing?</li> <li>RetroArch log files recorded when the problem occurs</li> </ol> <p>See: Generating RetroArch Logs</p>"},{"location":"guides/troubleshooting-retroarch/#ok-ive-done-these-things-where-can-i-get-help","title":"\"OK, I've done these things. Where can I get help?\"","text":"<p>If you have questions or issues which cannot be resolved on your own, visit the RetroArch forum</p>"},{"location":"guides/troubleshooting-retroarch/#i-know-my-problem-is-a-bug-where-can-i-report-it","title":"\"I know my problem is a bug. Where can I report it?\"","text":"<p>You can report issues in the RetroArch issues tracker.</p>"},{"location":"guides/web-player/","title":"What is it?","text":"<p>It is a version that works on modern internet browsers with the basic features of RetroArch. You don't need to install this version. You can add your content after selecting the desired Core.</p>"},{"location":"guides/web-player/#how-to-use-it","title":"How to use it","text":"<p>You can access it from this link using a modern internet browser (For example: Google Chrome, Microsoft Edge etc.).</p> <p>Warning</p> <p>Using an old internet browser may ruin the whole experience.</p> <p></p> <ol> <li>Select the Core to run from the first tab(Clicking on the Core name will start running). Core loading time may vary depending on the selected Core. During this time, your system's performance and actively used processes can cause your browser to crash. In this case, the option Wait or End will be displayed on your screen. In this case, click Wait, it may come out several times. </li> <li>Choose your content to load by clicking Add Content from the second tab. This will add your content to your browser's cache. We will be able to delete it later.</li> <li>To access the file you uploaded <code>Load Content&gt; Start Directory &gt;</code> You will also see it in the Downloads folder, where you can access open source content, which you can download from RetroArch's Content Downloader. </li> </ol>"},{"location":"guides/web-player/#details","title":"Details","text":"<p>We can use the basic features of RetroArch.</p> <ul> <li>How can I toggle Quick Menu?</li> <li>You can either press F1 or click the Menu Toggle button which is </li> <li>How can I go full screen?</li> <li>You do not want to press F11 when the screen is selected, this key usually takes you to full screen, but in our scenario you need to use the Full Screen key which is .</li> <li>How can I delete the cache?</li> <li>There are many methods for this, you can do CTRL + F5, right click the cursor and go to the inspect and right click on the refresh button on the top left and clear the cache, press the clear cache key .</li> </ul> <p>You can also click the <code>Help</code> button and read this information there.</p>"},{"location":"guides/web-player/#cores","title":"Cores","text":"<p>Supported Cores for now are as follows, may vary in this list.</p> <pre><code>2048\nBeetle Lynx\nBeetle NeoPop\nBeetle PCE FAST\nBeetle PC-FX\nBeetle VB\nBeetle WonderSwan\nChaiLove\nCraft\nFB Alpha 2012\nFB Alpha 2012 CPS1\nFB Alpha 2012 CPS2\nFB Alpha 2012 NeoGeo\nFCEUmm\nFFmpeg\nGambatte\nGame Music Emu\nGenesi Plus GX\ngPSP\nHandy\nMAME 2000\nMu\nNestopia\nNX Engine\n02em\nOpera\nPicoDrive\nPrBoom\nQuickNES\nFlycast\nSnes9x 2002\nSnes9x 2005\nSnes9x 2010\nSnes9x\nSquirrelJME\nTGB Dual\nTheodore (Thompson T08/T09)\nTryQuake\nVBA Next\nVecx\nYabause\n</code></pre>"},{"location":"guides/xmb-menu-map/","title":"XMB Menu Map","text":""},{"location":"guides/xmb-menu-map/#tabs","title":"Tabs","text":""},{"location":"guides/xmb-menu-map/#main-menu","title":"Main Menu","text":"<ul> <li>Load Core ... / Quick Menu (Changes when a core is loaded)</li> <li>Load Content<ul> <li>Start Directory ...</li> <li>Downloads ...</li> <li>Playlists</li> <li>(Varies by platform/device)</li> <li>File Browser (Duplicate/Shortcut to Settings &gt; File Browser)</li> </ul> </li> <li>Show Desktop Menu</li> <li>Online Updater<ul> <li>Core Downloader</li> <li>(Availability of cores varies by platform/device)</li> <li>Update Installed Cores</li> <li>Playlist Thumbnails Updater</li> <li>Content Downloader</li> <li>Update Core Infor Files</li> <li>Update Assets</li> <li>Update Controller Profiles</li> <li>Update Cheats</li> <li>Update Databases</li> <li>Update Overlays</li> <li>Update (Slang/GLSL/Cg; varies by active video driver) Shaders</li> <li>On-Demand Thumbnail Downloads</li> </ul> </li> <li>Information</li> <li>Network Information<ul> <li>(Varies by device)</li> </ul> </li> <li>System Information<ul> <li>(Varies by device)</li> </ul> </li> <li>Database Manager<ul> <li>(Varies by available databases)</li> </ul> </li> <li>Cursor Manager<ul> <li>(Varies by available cursors)</li> </ul> </li> <li>Configuration File<ul> <li>Load Configuration ...</li> <li>Reset to Defaults</li> <li>Save Current Configuration</li> <li>Save New Configuration</li> </ul> </li> <li>Help<ul> <li>Basic Menu Controls</li> </ul> </li> <li>Restart RetroArch</li> <li>Quit RetroArch</li> </ul>"},{"location":"guides/xmb-menu-map/#settings","title":"Settings","text":"<ul> <li>Drivers<ul> <li>Input</li> <li>Controller</li> <li>Video</li> <li>Audio</li> <li>Audio Resampler</li> <li>Camera</li> <li>Location</li> <li>Menu</li> <li>Record</li> <li>MIDI</li> </ul> </li> <li>Video<ul> <li>CRT SwitchRes</li> <li>CRT SwitchRes</li> <li>CRT Super Resolution</li> <li>X-Axis Centering</li> <li>Porch Adjust</li> <li>Use Custom Refresh Rate</li> <li>Output</li> <li>Video (Duplicate/Shortcut to Settings &gt; Driver &gt; video)</li> <li>Monitor Index</li> <li>Video Rotation</li> <li>GPU Index</li> <li>Vertical Refresh Rate</li> <li>Estimated Screen Refresh Rate</li> <li>Set Display-Reported Refresh Rate</li> <li>Fullscreen Mode</li> <li>Start in Fullscreen Mode</li> <li>Windowed Fullscreen Mode</li> <li>Fullscreen Width</li> <li>Fullscreen Height</li> <li>Windowed Mode</li> <li>Windowed Scale</li> <li>Window Opacity</li> <li>Show Window Decorations</li> <li>Remember Window Position and Size</li> <li>Window Width</li> <li>Window Height</li> <li>Scaling</li> <li>Integer Scale</li> <li>Aspect Ratio</li> <li>Custom Aspect Ratio</li> <li>Crop Overscan</li> <li>Synchronization</li> <li>Vertical Sync (VSync)</li> <li>Vsync Swap Interval</li> <li>Frame Delay</li> <li>Max swapchain images</li> <li>Sync to Exact Content Framerate</li> <li>Suspend Screensaver</li> <li>Threaded Video</li> <li>Black Frame Insertion</li> <li>GPU Screenshot</li> <li>Bilinear Filtering</li> <li>Auto-Shader Delay</li> <li>Video Filter ...</li> </ul> </li> <li>Audio<ul> <li>Output</li> <li>Audio</li> <li>Audio (Duplicate/Shortcut to Settings &gt; Driver &gt; Audio)</li> <li>Device</li> <li>Audio Latency (ms)</li> <li>Resampler</li> <li>Audio Resampler</li> <li>Resampler Quality</li> <li>Output Rate (Hz)</li> <li>Synchronization</li> <li>Synchronization</li> <li>Maximum Timing Skew</li> <li>Dynamic Audio Rate Control</li> <li>MIDI</li> <li>Input</li> <li>Output</li> <li>Volume</li> <li>Mixer</li> <li>Mixer Stream #1</li> <li>Mixer Stream #2</li> <li>Mixer Stream #3</li> <li>Mixer Stream #4</li> <li>Mixer Stream #5</li> <li>Mixer Stream #6</li> <li>Mixer Stream #7</li> <li>Mixer Stream #8</li> <li>Mixer Stream #9</li> <li>Mixer Stream #10</li> <li>Mixer Stream #11</li> <li>Mixer Stream #12</li> <li>Mixer Stream #13</li> <li>Mixer Stream #14</li> <li>Mixer Stream #15</li> <li>Mixer Stream #16</li> <li>Menu Sounds</li> <li>Mixer</li> <li>Enable 'OK' Sound</li> <li>Enable 'Cancel' Sound</li> <li>Enable 'Notice' Sound</li> <li>Enable 'BGM' Sound</li> <li>Mute</li> <li>Mixer Mute</li> <li>Mute When Fast-Forwarding</li> <li>Volume Gain (dB)</li> <li>Mixer Volume Gain (dB)</li> <li>DSP Plugin ...</li> </ul> </li> <li>Input<ul> <li>Maximum Users</li> <li>Polling Behavior</li> <li>Remap Controls for This Core</li> <li>Autoconfig</li> <li>Input Button Axis Threshold</li> <li>Touch Scale</li> <li>Analog Deadzone</li> <li>Analog Sensitivity</li> <li>Bind Timeout</li> <li>Bind Hold</li> <li>Disable Windows Hotkeys (Restart)</li> <li>Auxiliary Sensor Input</li> <li>Auto Enable 'Game Focus' Mode</li> <li>Menu Controls</li> <li>Unified Menu Controls</li> <li>Menu Swap OK and Cancel Buttons</li> <li>Menu Scroll Acceleration</li> <li>Menu Scroll Delay</li> <li>Hotkeys</li> <li>Confirm Quit</li> <li>Menu Toggle Controller Combo</li> <li>Hotkey Enable</li> <li>Hotkey Enable Delay (Frames)</li> <li>Fast-Forward (Toggle)</li> <li>Fast-Forward (Hold)</li> <li>Slow-Motion (Toggle)</li> <li>Slow-Motion (Hold)</li> <li>Load State</li> <li>Save State</li> <li>Fullscreen (Toggle)</li> <li>Close Content</li> <li>Quit RetroArch</li> <li>Save State Slot +</li> <li>Save State Slot -</li> <li>Rewind</li> <li>Record Input Replay (Toggle)</li> <li>Pause (Toggle)</li> <li>Frameadvance</li> <li>Reset Game</li> <li>Next Shader</li> <li>Previous Shader</li> <li>Next Cheat Index</li> <li>Previous Cheat Index</li> <li>Cheats (Toggle)</li> <li>Take Screenshot</li> <li>Audio Mute (Toggle)</li> <li>On-Screen Keyboard (Toggle)</li> <li>Show FPS (Toggle)</li> <li>Send Debug Info</li> <li>Netplay Hosting (Toggle)</li> <li>Netplay Play/Spectate Mode (Toggle)</li> <li>Volume Up</li> <li>Volume Down</li> <li>Next overlay</li> <li>Disc Eject Toggle</li> <li>Next Disc</li> <li>Previous Disc</li> <li>Grab Mouse (Toggle)</li> <li>Game Focus (Toggle)</li> <li>Desktop Menu (Toggle)</li> <li>Menu (Toggle)</li> <li>Recording (Toggle)</li> <li>Streaming (Toggle)</li> <li>Run-Ahead (Toggle)</li> <li>AI Service</li> <li>Turbo Fire</li> <li>Turbo Period</li> <li>Turbo Duty Cycle</li> <li>Turbo Mode</li> <li>Turbo Default Button</li> <li>Port 1 Controls</li> <li>Device Type</li> <li>Analog to Digital Type</li> <li>Device Index</li> <li>Mouse Index</li> <li>Set All Controls</li> <li>Reset to Default Controls</li> <li>Save Controller Profile</li> <li>(RetroPad Mapping)</li> <li>(Gun Mapping)</li> <li>Turbo</li> <li>Port 2 Controls</li> <li>(Same as Port 1)</li> <li>Port 3 Controls</li> <li>(Same as Port 1)</li> <li>Port 4 Controls</li> <li>(Same as Port 1)</li> <li>Port 5 Controls</li> <li>(Same as Port 1)</li> <li>(possibly more/less based on 'Maximum Users' setting)</li> </ul> </li> <li>Latency<ul> <li>Max swapchain images (Duplicate/Shortcut to Settings &gt; Video &gt; Synchronization &gt; Max swapchain images)</li> <li>Frame Delay</li> <li>Audio Latency (ms)</li> <li>Polling Behavior</li> <li>Run-Ahead to Reduce Latency</li> <li>Number of Frames to Run-Ahead</li> <li>Use Second Instance for Run-Ahead</li> <li>Hide Run-Ahead Warnings</li> </ul> </li> <li>Core<ul> <li>Hardware Shared Context</li> <li>Allow Cores to Switch the Video Driver</li> <li>Load Dummy on Core Shutdown</li> <li>Check for Missing Firmware before Loading</li> <li>Allow Rotation</li> <li>Manage Cores</li> </ul> </li> <li>Configuration<ul> <li>Save Configuration on Quit</li> <li>Load Content-Specific Core Option</li> <li>Load Override Files Automatically</li> <li>Load Remap Files Automatically</li> <li>Use Global Core Options File</li> </ul> </li> <li>Saving<ul> <li>Sort Saves into Folders by Core Name</li> <li>Sort Save States into Folders by Core Name</li> <li>Sort Saves into Folders by Content Directory</li> <li>Sort Save states into Folders by Content Directory</li> <li>Don't Overwrite SaveRAM on Loading Save State</li> <li>SaveRAM Autosave Interval</li> <li>Increment Save State Index Automatically</li> <li>Auto Save State</li> <li>Load State Automatically</li> <li>Save State Thumbnails</li> <li>SaveRAM Compression</li> <li>Save State Compression</li> <li>Sort Screenshots into Folders by Content Directory</li> <li>Write Saves to Content Directory</li> <li>Write Save States to Content Directory</li> <li>System Files are in Content Directory</li> <li>Write Screenshots to Content Directory</li> <li>Save Runtime Log (Per Core)</li> <li>Save Runtime Log (Aggregate)</li> </ul> </li> <li>Logging<ul> <li>Logging Verbosity</li> <li>Frontend Logging Level</li> <li>Core Logging Level</li> <li>Log to File</li> <li>Performance Counters</li> </ul> </li> <li>File Browser<ul> <li>Show Hidden Files and Directories</li> <li>Filter Unknown Extensions</li> <li>Use Built-In Media Player</li> <li>Use Built-In Image Viewer</li> <li>Filter by Current Core</li> <li>Remember Last Used Start Directory</li> </ul> </li> <li>Frame Throttle<ul> <li>Rewind</li> <li>Rewind Support</li> <li>Rewind Frames</li> <li>Rewind Buffer Size (MB)</li> <li>Rewind Buffer Size Step (MB)</li> <li>Frame Time Counter</li> <li>Estimated Screen Refresh Rate</li> <li>Reset after Fast-Forward</li> <li>Reset after Load State</li> <li>Reset after Save State</li> <li>Fast-Forward Rate</li> <li>Slow-Motion Rate</li> <li>Sync to Exact Content Framerate (Duplicate/Shortcut to Settings &gt; Video &gt; Synchronization &gt; Sync to Exact Content Framerate)</li> <li>Throttle Menu Framerate</li> </ul> </li> <li>Recording<ul> <li>Recording Quality</li> <li>Custom recording Configuration ...</li> <li>Recording Threads</li> <li>Use Post Filter Recording</li> <li>Use GPU Recording</li> <li>Streaming Mode</li> <li>Streaming Quality</li> <li>Custom Streaming Configuration</li> <li>Stream Title</li> <li>Stream URL</li> <li>UDP Stream Port</li> </ul> </li> <li>On-Screen Display<ul> <li>On-Screen Overlay</li> <li>Display Overlay</li> <li>Hide Overlay in Menu</li> <li>Hide Overlay When Controller is Connected</li> <li>Show Inputs on Overlay</li> <li>Show Mouse Cursor With Overlay</li> <li>Auto-Rotate Overlay</li> <li>Auto-Scale Overlay</li> <li>Overlay Preset ...</li> <li>Overlay Opacity</li> <li>(Landscape) Overlay Scale</li> <li>(Landscape) Overlay Aspect Adjustment</li> <li>(Landscape) Overlay Horizontal Separation</li> <li>(Landscape) Overlay Vertical Separation</li> <li>(Landscape) Overlay X Offset</li> <li>(Landscape) Overlay Y Offset</li> <li>(Portrait) Overlay Scale</li> <li>(Portrait) Overlay Aspect Adjustment</li> <li>(Portrait) Overlay Horizontal Separation</li> <li>(Portrait) Overlay Vertical Separation</li> <li>(Portrait) Overlay X Offset</li> <li>(Portrait) Overlay Y Offset</li> <li>Video Layout</li> <li>Enable Video Layout</li> <li>Video Layout Path ...</li> <li>Selected View</li> <li>On-Screen Notification</li> <li>Notification Visibility<ul> <li>Display Framerate</li> <li>Display Frame Count</li> <li>Display Statistics</li> <li>Display Memory Usage</li> <li>\"Load Content\" Startup Notification</li> <li>Input (Autoconfig) Connection Notification</li> <li>Cheat Code Notifications</li> <li>Input Remap Loaded Notifications</li> <li>Config Override Loaded Notifications</li> <li>Initial Disc Restored Notifications</li> <li>Fast-Forward Notifications</li> <li>Screenshot Notifications</li> <li>Screenshot Notification Persistence</li> <li>Screenshot Flash Effect</li> <li>Refresh Rate Notifications</li> </ul> </li> <li>On-Screen Notifications</li> <li>Graphics Widgets</li> <li>Scale Graphics Widgets Automatically</li> <li>Notification Font ...</li> <li>Notification Size</li> </ul> </li> <li>User Interface<ul> <li>Menu Item Visibility</li> <li>Quick Menu<ul> <li>Show 'Resume'</li> <li>Show 'Restart'</li> <li>Show 'Close Content'</li> <li>Show 'Take Screenshot'</li> <li>Show 'Save/Load State'</li> <li>Show 'Undo Save/Load State'</li> <li>Show 'Add to Favorites'</li> <li>Show 'Start Recording'</li> <li>Show 'Start Streaming'</li> <li>Show 'Set Core Association'</li> <li>Show 'Reset Core Association'</li> <li>Show 'Options'</li> <li>Show 'Controls'</li> <li>Show 'Cheats'</li> <li>Show 'Shaders'</li> <li>Show 'Rewind'</li> <li>Show 'Latency'</li> <li>Show 'On-Screen Overlay</li> <li>Show 'Video Layout</li> <li>Show 'Save Core Overrides'</li> <li>Show 'Save Game Overrides'</li> <li>Show 'Information'</li> <li>Show 'Download Thumbnails'</li> </ul> </li> <li>Settings<ul> <li>Show 'Drivers'</li> <li>Show 'Video'</li> <li>Show 'Audio'</li> <li>Show 'Input'</li> <li>Show 'Latency'</li> <li>Show 'Core'</li> <li>Show 'Configuration'</li> <li>Show 'Saving'</li> <li>Show 'Logging'</li> <li>Show 'File Browser'</li> <li>Show 'Recording'</li> <li>Show 'On-Screen Display'</li> <li>Show 'User Interface'</li> <li>Show 'AI Service'</li> <li>Show 'Accessibility'</li> <li>Show 'Power Management'</li> <li>Show 'Achievements'</li> <li>Show 'Network'</li> <li>Show 'Playlists'</li> <li>Show 'User'</li> <li>Show 'Directory'</li> </ul> </li> <li>Show 'Load Core'</li> <li>Show 'Load Content'</li> <li>Show 'Load Disc'</li> <li>Show 'Dump Disc'</li> <li>Show 'Online Updater'</li> <li>Show 'Core Downloader'</li> <li>Show Legacy 'Thumbnails Updater'</li> <li>Show 'Information'</li> <li>Show 'Configuration File'</li> <li>Show 'Help'</li> <li>Show 'Quit RetroArch'</li> <li>Show 'Restart RetroArch'</li> <li>Show 'Settings'</li> <li>Set Password for Enabling 'Settings'</li> <li>Show 'Explore'</li> <li>Show 'Favorites'</li> <li>Show 'Images'</li> <li>Show 'Music'</li> <li>Show 'Videos'</li> <li>Show 'Netplay'</li> <li>Show 'History'</li> <li>Show 'Import Content'</li> <li>Show 'Playlists'</li> <li>Show Date and Time</li> <li>Style of Date and Time</li> <li>Date Separator</li> <li>Show Battery Level</li> <li>Show Core Name</li> <li>Show Menu Sub-Labels</li> <li>Display Start Screens</li> <li>Appearance</li> <li>Menu Scale Factor</li> <li>Background Image ...</li> <li>Dynamic Background</li> <li>Background Opacity</li> <li>Framebuffer Opacity</li> <li>Horizontal Animation</li> <li>Animation Horizontal Icon Highlight</li> <li>Animation Move Up/Down</li> <li>Animation Main Menu Opens/Closes</li> <li>Menu Alpha Factor</li> <li>Menu Font ...</li> <li>Menu Font Color (Red)</li> <li>Menu Font Color (Green)</li> <li>Menu Font Color (Blue)</li> <li>Menu Layout</li> <li>Menu Icon Theme</li> <li>Icon Shadows</li> <li>Menu Shader Pipeline</li> <li>Menu Color Theme</li> <li>Thumbnails</li> <li>Left Thumbnail</li> <li>Thumbnails Vertical Disposition</li> <li>Thumbnail Scale Factor</li> <li>Thumbnail Upscaling Threshold</li> <li>Ticker Text Animation</li> <li>Ticker Text Speed</li> <li>Smooth Ticker Text</li> <li>Menu (Duplication/Shortcut to Settings &gt; Driver &gt; Menu)</li> <li>Show Advanced Settings</li> <li>Kiosk Mode</li> <li>Navigation Wrap-Around</li> <li>Pause Content When Menu is Active</li> <li>Pause Content When Not Active</li> <li>Resume Content after Using Save States</li> <li>Resume Content after Changing Discs</li> <li>Quit on Close Content</li> <li>Menu Screensaver Timeout</li> <li>Mouse Support</li> <li>Touch Support</li> <li>Threaded Tasks</li> <li>UI Companion</li> <li>Start UI Companion on Boot</li> <li>Menu Bar</li> <li>Desktop Menu (Restart Required)</li> <li>Open Desktop Menu on Startup</li> <li>Disable Desktop Composition</li> </ul> </li> <li>AI Service<ul> <li>AI Service Enabled</li> <li>AI Service Output</li> <li>AI Service URL</li> <li>Pause During Translation</li> <li>Source Language</li> <li>Target Language</li> </ul> </li> <li>Accessibility<ul> <li>Accessibility Enable</li> <li>Text-to-Speech Speed</li> </ul> </li> <li>Power Management<ul> <li>(Only available on certain devices)</li> </ul> </li> <li>Achievements<ul> <li>Achievements</li> <li>Username</li> <li>Password</li> <li>Hardcore Mode</li> <li>Leaderboards</li> <li>Rich Presence</li> <li>Achievement Badges</li> <li>Test Unofficial Achievements</li> <li>Unlock Sound</li> <li>Verbose Mode</li> <li>Automatic Screenshot</li> <li>Start Active</li> </ul> </li> <li>Network<ul> <li>Publicly Announce Netplay</li> <li>Use Relay Server</li> <li>Server Address</li> <li>Netplay TCP Port</li> <li>Server Password</li> <li>Server Spectate-Only Password</li> <li>Netplay Spectator Mode</li> <li>Allow Slave-Mode Clients</li> <li>Disallow Non-Slave-Mode Clients</li> <li>Netplay Stateless Mode</li> <li>Netplay Check Frames</li> <li>Input Latency Frames</li> <li>Input Latency Frames Range</li> <li>Netplay NAT Traversal</li> <li>Digital Input Sharing</li> <li>Analog Input Sharing</li> <li>Request Device 1</li> <li>Request Device 2</li> <li>Request Device 3</li> <li>Request Device 4</li> <li>Request Device 5</li> <li>Request Device 6</li> <li>Request Device 7</li> <li>Request Device 8</li> <li>Request Device 9</li> <li>Request Device 10</li> <li>Request Device 11</li> <li>Request Device 12</li> <li>Request Device 13</li> <li>Request Device 14</li> <li>Request Device 15</li> <li>Request Device 16</li> <li>Network Commands</li> <li>Network RetroPad</li> <li>Network RetroPad Base Port</li> <li>User 1 Network RetroPad</li> <li>User 2 Network RetroPad</li> <li>User 3 Network RetroPad</li> <li>User 4 Network RetroPad</li> <li>User 5 Network RetroPad</li> <li>stdin Commands</li> <li>On-Demand Thumbnail Downloads</li> <li>Updater</li> <li>Buildbot Cores URL</li> <li>Buildbot Assets URL</li> <li>Automatically Extract Downloaded Archive</li> <li>Show Experimental Cores</li> <li>Backup Cores When Updating</li> <li>Core Backup History Size</li> </ul> </li> <li>Playlists<ul> <li>History</li> <li>History Size</li> <li>Favorites Size</li> <li>Allow to Rename Entries</li> <li>Allow to Remove Entries</li> <li>Sort Playlists Alphabetically</li> <li>Save Playlists Using Old Format</li> <li>Compress Playlists</li> <li>Show Associated Cores in Playlists</li> <li>Show Playlist Sub-Labels</li> <li>Playlist Sub-Label Runtime</li> <li>'Last Played' Date and Time Style</li> <li>Fuzzy Archive Matching</li> <li>Scan Without Core Match</li> <li>Save Runtime Log (Per Core)</li> <li>Save Runtime Log (Aggregate)</li> <li>Portable Playlists</li> <li>Manage Playlists</li> <li>(Varies by user's playlists)</li> </ul> </li> <li>User<ul> <li>Privacy</li> <li>(Varies by device)</li> <li>Accounts</li> <li>RetroAchievements<ul> <li>Username</li> <li>Password</li> </ul> </li> <li>YouTube<ul> <li>YouTube Stream Key</li> </ul> </li> <li>Twitch<ul> <li>Twitch Stream Key</li> </ul> </li> <li>Facebook Gaming<ul> <li>Facebook Gaming Stream Key</li> </ul> </li> <li>Username</li> <li>Language</li> </ul> </li> <li>Directory<ul> <li>System/BIOS</li> <li>Downloads</li> <li>Assets</li> <li>Dynamic Backgrounds</li> <li>Thumbnails</li> <li>File Browser</li> <li>Configs</li> <li>Cores</li> <li>Core Info</li> <li>Databases</li> <li>Cursor</li> <li>Cheat Files</li> <li>Video Filters</li> <li>Audio Filters</li> <li>Video Shaders</li> <li>Recordings</li> <li>Recording Configs</li> <li>Overlays</li> <li>Video Layouts</li> <li>Screenshots</li> <li>Input Autoconfig</li> <li>Input Remaps</li> <li>Playlists</li> <li>Favorites Playlist</li> <li>History Playlist</li> <li>Images Playlist</li> <li>Music Playlist</li> <li>Videos Playlist</li> <li>Runtime Logs</li> <li>Save Files</li> <li>Save States</li> <li>Cache</li> <li>System Event Logs</li> </ul> </li> </ul>"},{"location":"guides/xmb-menu-map/#favorites","title":"Favorites","text":""},{"location":"guides/xmb-menu-map/#history","title":"History","text":""},{"location":"guides/xmb-menu-map/#images","title":"Images","text":""},{"location":"guides/xmb-menu-map/#music","title":"Music","text":""},{"location":"guides/xmb-menu-map/#videos","title":"Videos","text":""},{"location":"guides/xmb-menu-map/#any-additional-user-created-playlists-appear-here","title":"Any Additional User-Created Playlists Appear Here","text":""},{"location":"guides/xmb-menu-map/#netplay","title":"Netplay","text":"<ul> <li>Host</li> <li>Connect to Netplay Host</li> <li>Network (Duplicate/Shortcut to Settings &gt; Network)</li> <li>Refresh Netplay Host List</li> </ul>"},{"location":"guides/xmb-menu-map/#import-content","title":"Import Content","text":"<ul> <li>Scan Directory</li> <li>Scan File</li> <li>Manual Scan<ul> <li>Content Directory</li> <li>System Name</li> <li>Custom System Name</li> <li>Default Core</li> <li>File Extensions</li> <li>Scan Recursively</li> <li>Scan Inside Archives</li> <li>Arcade DAT File</li> <li>Arcade DAT Filter</li> <li>Overwrite Existing Playlist</li> <li>Start Scan</li> </ul> </li> </ul>"},{"location":"guides/xmb-menu-map/#explore","title":"Explore","text":"<ul> <li>Search Name ...</li> <li>Show All</li> </ul>"},{"location":"guides/xmb-menu-map/#quick-menu","title":"Quick Menu","text":"<ul> <li>Resume</li> <li>Restart</li> <li>Close Content</li> <li>Take Screenshot</li> <li>State Slot</li> <li>Save State</li> <li>Load State</li> <li>Undo Load State</li> <li>Undo Save State</li> <li>Add to Favorites</li> <li>Start Recording</li> <li>Start Streaming</li> <li>Options<ul> <li>(Varies by core)</li> </ul> </li> <li>On-Screen Overlay (Duplicate/Shortcut to Settings &gt; On-Screen Display &gt; On-Screen Overlay)</li> <li>Rewind (Duplicate/Shortcut to Settings &gt; Frame Throttle &gt; Rewind)</li> <li>Latency (Duplicate/Shortcut to Settings &gt; Latency)</li> <li>Controls<ul> <li>Load Remap File ...</li> <li>Save Core Remap File</li> <li>Save Content Directory Remap File</li> <li>Save Game Remap File</li> <li>Turbo Fire (Duplicate/Shortcut to Settings &gt; Input &gt; Turbo Fire)</li> <li>Port 1 Controls</li> <li>Device Type</li> <li>Analog to Digital Type</li> <li>(RetroPad to Core functions; varies by core)</li> <li>Port 2 Controls</li> <li>(Same as Port 1 Controls)</li> <li>Port 3 Controls</li> <li>(Same as Port 1 Controls)</li> <li>Port 4 Controls</li> <li>(Same as Port 1 Controls)</li> <li>Port 5 Controls</li> <li>(Same as Port 1 Controls)</li> <li>(More or Fewer Ports based on Settings &gt; Input &gt; Maximum Users)</li> </ul> </li> <li>Cheats<ul> <li>Start or Continue Cheat Search</li> <li>Load Cheat File (Replace) ...</li> <li>Load Cheat File (Append) ...</li> <li>Reload Game Specific Cheats</li> <li>Save Cheat File As ...</li> <li>Add New Cheat to Top</li> <li>Add New Cheat to Bottom</li> <li>Delete All Cheats</li> <li>Auto-Apply Cheats During Game Load</li> <li>Apply After Toggle</li> <li>Apply Changes</li> </ul> </li> <li>Shaders<ul> <li>Video Shaders</li> <li>Watch Shader Files for Changes</li> <li>Remember Last Used Shader Directory</li> <li>Load ...</li> <li>Save</li> <li>Simple Presets</li> <li>Save Shader Preset As ...</li> <li>Save Global Preset</li> <li>Save Core Preset</li> <li>Save Content Directory Preset</li> <li>Save Game Preset</li> <li>Remove</li> <li>Apply Changes</li> <li>Shader Parameters</li> <li>(Varies by active shader preset)</li> <li>Shader Passes</li> <li>(Varies by active shader preset)</li> </ul> </li> <li>Overrides<ul> <li>Save Core Overrides</li> <li>Save Content Directory Overrides</li> <li>Save Game Overrides</li> </ul> </li> <li>Information<ul> <li>Name</li> <li>File Path</li> <li>Core</li> <li>Runtime</li> <li>Last Played</li> </ul> </li> <li>Download Thumbnails</li> </ul>"},{"location":"guides/xmb/","title":"XMB (GUI)","text":"<p>XMB was the default user interface for RetroArch, until it was succeeded by Ozone in RetroArch 1.7.6. It is based on Sony's \"cross-media bar\" GUI, most widely known from the PSP and PlayStation 3.</p> <p></p>"},{"location":"guides/xmb/#menu-structure","title":"Menu Structure","text":"<p>The top-level menus and playlists are displayed in a single \"primary\" row, running from left to right. For the selected row item, a submenu column will appear below it.</p>"},{"location":"guides/xmb/#navigating-the-menus","title":"Navigating the menus","text":"<p>XMB is designed for use with a gamepad or keyboard.</p> <p>Press <code>left</code> or <code>right</code> to move along the primary row, and press <code>up</code> or <code>down</code> to scroll the column. The selected item in this column is always the first line under the primary row.</p> <p>The user can press <code>backspace</code> to go back a step.</p>"},{"location":"guides/xmb/#input","title":"Input","text":"<p>Content is controlled using a keyboard or gamepad, connected via USB or Bluetooth.</p> <p>See Input and Controls</p>"},{"location":"guides/xmb/#thumbnails","title":"Thumbnails","text":"<p>By default, no thumbnails are displayed. Up to 2 can be enabled: The primary thumbnail will appear on the lower right side of the screen when a Playlist entry is selected. The secondary thumbnail will appear on the left. Press the <code>spacebar</code> key to view the thumbnails full-screen (press <code>spacebar</code> again to toggle the view off).</p> <p>Thumbnails can be enabled in <code>Settings&gt; User Interface&gt; Appearance</code>, toggling the <code>Primary Thumbnail</code> and/or <code>Secondary Thumbnail</code> option. Thumbnails can be boxart, a title screen screenshot, or a gameplay screenshot.</p> <p></p>"},{"location":"guides/xmb/#themes","title":"Themes","text":"<p>XMB has a number of styles built-in. They can be changed in the <code>Settings &gt; User Interface &gt; Appearance</code> menu.</p> <ul> <li> <p>The background color can be changed: Scroll through <code>Color Theme</code> to select a color.</p> </li> <li> <p>The animated background \"wallpaper\" can also be changed (<code>Shader Pipeline</code>), the default being a PlayStation-style animated ribbon.</p> <ul> <li>XMB can even show different wallpapers depending on the playlist selected: Follow this guide using these files.</li> </ul> </li> <li> <p>XMB also has a selection of icon sets to choose from (<code>Icon Theme</code>).</p> </li> </ul> <p> XMB with an alternative background color, background animation, and icon set.</p>"},{"location":"library/2048/","title":"2048","text":""},{"location":"library/2048/#background","title":"Background","text":"<p>This is a port of 2048, a game, to libretro.</p>"},{"location":"library/2048/#how-to-start-the-2048-core","title":"How to start the 2048 core:","text":"<ul> <li> <p>To start the 2048 core, go to RetroArch's main menu screen. Select 'Load Core', then '2048'.</p> </li> <li> <p>Now, select 'Start Core'.</p> </li> </ul> <p> </p> <p>The content should now start running!</p>"},{"location":"library/2048/#authorlicense","title":"Author/License","text":"<p>The 2048 game has been authored by</p> <ul> <li>Gabriele Cirulli</li> </ul> <p>The libretro implementation was authored by</p> <ul> <li>Higor Eur\u00edpedes</li> </ul> <p>The 2048 core is licensed under</p> <ul> <li>Public Domain</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/2048/#features","title":"Features","text":"<p>Frontend-level settings or features that the 2048 core respects.</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2715 Memory Monitoring (achievements) \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/2048/#directories","title":"Directories","text":"<p>The 2048 core's internal core name is '2048'</p> <p>The 2048 core saves/loads to/from these directories.</p> <p>Frontend's Save directory</p> <ul> <li>2048.srm (Previous game sessions and hiscores)</li> </ul> <p>Frontend's State directory</p> <ul> <li>2048.state# (State)</li> </ul>"},{"location":"library/2048/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The 2048 core's core provided FPS is 60</li> <li>The 2048 core's core provided sample rate is 30000 Hz</li> <li>The 2048 core's core provided aspect ratio is 1</li> </ul>"},{"location":"library/2048/#controllers","title":"Controllers","text":"<p>The 2048 core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/2048/#user-1-device-types","title":"User 1 device types","text":"<ul> <li>None - Doesn't disable input.</li> <li>RetroPad - Joypad</li> <li>RetroPad w/Analog - Joypad - There's no reason to switch to this.</li> </ul>"},{"location":"library/2048/#controller-tables","title":"Controller tables","text":""},{"location":"library/2048/#joypad","title":"Joypad","text":"User 1 Remap descriptors RetroPad Inputs Pause Start Up Down Left Right"},{"location":"library/2048/#external-links","title":"External Links","text":"<ul> <li>Official 2048 Website</li> <li>Official 2048 Github Repository</li> <li>Libretro 2048 Core info file</li> <li>Libretro 2048 Github Repository</li> <li>Report Libretro 2048 Core Issues Here</li> </ul>"},{"location":"library/3d_engine/","title":"3D Engine","text":""},{"location":"library/3d_engine/#contribute-to-this-documentation","title":"Contribute to this documentation","text":"<p>In order to propose improvements to this document, visit its corresponding source page on github. Changes are proposed using \"Pull Requests.\"</p>"},{"location":"library/3d_engine/#background","title":"Background","text":"<p>A tech demo for libretro GL with additional features (camera/location/etc).</p>"},{"location":"library/3d_engine/#why-use-this-core","title":"Why use this core?","text":"<p>Awaiting description.</p>"},{"location":"library/3d_engine/#how-to-get-and-install-the-3d-engine-core","title":"How to get and install the 3D Engine core:","text":"<ol> <li> <p>Start up RetroArch. Inside the main menu, go to 'Online Updater'.</p> </li> <li> <p>Just to make sure we have the latest info files, select 'Update Core Info Files'. Wait until this is done. Then, select 'Core Downloader'.</p> </li> <li> <p>Browse through the list and select '3D Engine'.</p> </li> </ol> <p>After this has finished downloading, the core should now be ready for use!</p>"},{"location":"library/3d_engine/#how-to-start-after-installation","title":"How to start (after installation):","text":"<ol> <li> <p>Go back to RetroArch's main menu screen. Select 'Load Content'.</p> </li> <li> <p>Browse to the folder that contains the content you want to run.</p> </li> <li> <p>Select the content that you want to run.</p> </li> <li> <p>If you are asked which core to select, choose '3D Engine'.</p> </li> </ol> <p>The content should now start running!</p>"},{"location":"library/3d_engine/#authors","title":"Authors","text":"<ul> <li>Team Libretro</li> </ul>"},{"location":"library/3d_engine/#license","title":"License","text":"<p>A summary of the licenses behind RetroArch and its cores can be found here.</p> <ul> <li>GPLv3</li> </ul>"},{"location":"library/3d_engine/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the 3D Engine core have the following file extensions:</p> <ul> <li>.png</li> <li>.jpg</li> <li>.mtl</li> <li>.obj</li> </ul>"},{"location":"library/3d_engine/#features","title":"Features","text":"<p>RetroArch features that the 3D Engine core respects.</p> Feature Supported Restart \u2715 Screenshots \u2714 Saves \u2715 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2714 Memory Monitoring (achievements) \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2715 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2714 Camera \u2714 Location \u2714 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715"},{"location":"library/3d_engine/#directories","title":"Directories","text":"<p>The 3D Engine core's directory name is 'Libretro 3DEngine'</p>"},{"location":"library/3d_engine/#geometry-and-timing","title":"Geometry and timing","text":"<p>The 3D Engine core's internal FPS is 60.0.</p> <p>The 3D Engine core's internal sample rate is 30000.0 Hz.</p> <p>The 3D Engine core's core provided aspect ratio is (Ratio).</p>"},{"location":"library/3d_engine/#core-options","title":"Core options","text":"<p>The 3D Engine core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded.</p> <p>Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch.</p> <ul> <li>Internal resolution (320x240/360x480/480x272/512x384/512x512/640x240/640x448/640x480/720x576/800x600/960x720/1024x768/1024x1024/1280x720/1280x960/1600x1200/1920x1080/1920x1440/1920x1600/2048x1152/2048x1536/2048x2048/320x240)</li> </ul> <p> Self explanatory. </p> <ul> <li>Cube size (0/\u00bd/4/8/16/32/64/128)</li> </ul> <p> Awaiting description. </p> <ul> <li>Cube stride (2.0 to 8.0 in increments of 1.0. 2.0 is default)</li> </ul> <p> Awaiting description. </p> <ul> <li>Camera enable (Off/On)</li> </ul> <p> Awaiting description. </p> <ul> <li>Camera FB Type (texture//raw framebuffer)</li> </ul> <p> Awaiting description. </p> <ul> <li>Sensor enable (Off/On)</li> </ul> <p> Awaiting description. </p> <ul> <li>Location enable (Off/On)</li> </ul> <p> Awaiting description. </p> <ul> <li>Location camera control (Off/On)</li> </ul> <p> Awaiting description. </p> <ul> <li>Discard hack enable (Off/On)</li> </ul> <p> Awaiting description. </p> <ul> <li>Location position OSD (Off/On)</li> </ul> <p> Awaiting description. </p>"},{"location":"library/3d_engine/#controllers","title":"Controllers","text":""},{"location":"library/3d_engine/#device-types","title":"Device types","text":"<p>The 3D Engine core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/3d_engine/#user-1-device-types","title":"User 1 device types","text":"<ul> <li>None - Doesn't disable input.</li> <li>RetroPad - Joypad</li> <li>RetroPad w/Analog - Joypad - There is no reason to switch to this.</li> </ul>"},{"location":"library/3d_engine/#controller-tables","title":"Controller tables","text":""},{"location":"library/3d_engine/#joypad-and-analog-device-type-table","title":"Joypad and analog device type table","text":"User 1 Remap descriptors RetroPad Inputs 3D Engine core inputs Jump/Zoom-in Move forwards Move backwards Turn left Turn right Zoom-out Move left Move right Adjust lighting Adjust lighting Adjust lighting  X Move right or left/Rotate model  Y Move forwards and backwards/Rotate model  X Look right and left  Y Look up and down/Zoom-in or Zoom-out"},{"location":"library/3d_engine/#external-links","title":"External Links","text":"<ul> <li>Libretro 3D Engine Core info file</li> <li>Libretro 3D Engine Github Repository</li> <li>Report Libretro 3D Engine Core Issues Here</li> </ul>"},{"location":"library/anarch/","title":"Anarch","text":""},{"location":"library/anarch/#background","title":"Background","text":"<p>Anarch is an extremely small, completely public domain, no-dependency, no-file, portable suckless anarcho-pacifist from-scratch 90s-style Doom clone that runs everywhere.</p> <p>The Anarch core has been authored by</p> <ul> <li>Miloslav \u010c\u00ed\u017e</li> <li>iyzsong</li> </ul> <p>The Anarch core is licensed under</p> <ul> <li>CC0</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/anarch/#features","title":"Features","text":"<p>Frontend-level settings or features that the RVVM core respects.</p> Feature Supported Restart - Saves \u2714 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2715 Memory Monitoring (achievements) \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping - Multi-Mouse - Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/anarch/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The Anarch core's core provided FPS is 60.</li> <li>The Anarch core's core provided sample rate is 8000 Hz.</li> <li>The Anarch core's base width is 700.</li> <li>The Anarch core's base height is 512.</li> <li>The Anarch core's max width is 700.</li> <li>The Anarch core's max height is 512.</li> <li>The Anarch core's core provided aspect ratio is 175/128.</li> </ul>"},{"location":"library/anarch/#user-1-device-types","title":"User 1 device types","text":"<p>The Anarch core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p> <ul> <li>RetroPad</li> <li>Keyboard</li> <li>Mouse</li> </ul>"},{"location":"library/anarch/#joypad","title":"Joypad","text":"RetroPad Inputs Anarch core inputs Button B Jump Menu Map Up Down Left Right Button A Button C Previous Weapon Next Weapon"},{"location":"library/anarch/#keyboard","title":"Keyboard","text":"RetroKeyboard Inputs Anarch core inputs Keyboard w Up Keyboard s Down Keyboard q Left Keyboard e Right Keyboard j Button A Keyboard k Button B Keyboard l Button C Keyboard p Next Weapon Keyboard f Cycle Weapon Keyboard Left Control Button A Keyboard Left Shift Button B Keyboard Space Jump Keyboard Tab Map Keyboard Escape Menu"},{"location":"library/anarch/#mouse","title":"Mouse","text":"RetroMouse Inputs Anarch core inputs  Mouse Cursor Movement  Mouse 1 Button A  Mouse 2 Toggle Freelook  Mouse 3 Cycle Weapon Wheel Up Previous Weapon Wheel Down Next Weapon"},{"location":"library/anarch/#external-links","title":"External Links","text":"<ul> <li>Game Manual</li> <li>Anarch Repository</li> <li>Anarch Issues Here</li> </ul>"},{"location":"library/ardens/","title":"Ardens","text":""},{"location":"library/ardens/#background","title":"Background","text":"<p>Ardens is a simulator for the Arduboy FX. </p> <p>The Ardens core has been authored by</p> <ul> <li>Peter Brown</li> </ul> <p>The Ardens core is licensed under</p> <ul> <li>MIT</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/ardens/#requirements","title":"Requirements\u00b6","text":"<p>None</p>"},{"location":"library/ardens/#bios","title":"BIOS\u00b6","text":"<p>The Ardens core does not feature BIOS use.</p>"},{"location":"library/ardens/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the Ardens core have the following file extensions:</p> <ul> <li><code>.hex</code> or <code>.arduboy</code></li> </ul> <p>RetroArch database(s) that are associated with the Ardens core:</p> <ul> <li><code>Arduboy Inc - Arduboy.rdb</code></li> </ul>"},{"location":"library/ardens/#features","title":"Features","text":"<p>Frontend-level settings or features that the Ardens core respects:</p> Feature Supported Restart \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2715 Core Options \u2715 Memory Monitoring (achievements) - RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/ardens/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The Ardens core's core provided FPS is 60</li> <li>The Ardens core's base width is 128</li> <li>The Ardens core's base height is 64</li> <li>The Ardens core's max width is 128</li> <li>The Ardens core's max height is 64</li> </ul>"},{"location":"library/ardens/#user-1-device-types","title":"User 1 device types","text":"<p>The Ardens core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p> <ul> <li>None - Doesn't disable input.</li> <li>RetroPad</li> <li>RetroPad w/Analog</li> </ul>"},{"location":"library/ardens/#joypad","title":"Joypad","text":"RetroPad Inputs User 1 input descriptors Button B Up Down Left Right Button A"},{"location":"library/ardens/#external-links","title":"External Links","text":"<ul> <li>Official Ardens Website</li> <li>Libretro Ardens Core info file</li> <li>Report Libretro Ardens Core Issues Here</li> </ul>"},{"location":"library/atari800/","title":"Atari 8-bit computer systems and 5200 (Atari800)","text":""},{"location":"library/atari800/#background","title":"Background","text":"<p>Atari 8-bit computer systems (400, 800, 600 XL, 800XL, 130XE) and 5200 game console emulator.</p> <p>The Atari800 core has been authored by</p> <ul> <li>Petr Stehlik</li> </ul> <p>The Atari800 core is licensed under</p> <ul> <li>GPLv2</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/atari800/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the Atari800 core have the following file extensions:</p> <ul> <li>.xfd</li> <li>.atr</li> <li>.atx</li> <li>.cdm</li> <li>.cas</li> <li>.bin</li> <li>.a52</li> <li>.xex</li> <li>.zip</li> </ul>"},{"location":"library/atari800/#databases","title":"Databases","text":"<p>RetroArch database(s) that are associated with the Atari800 core:</p> <ul> <li>Atari - 5200</li> </ul>"},{"location":"library/atari800/#bios","title":"BIOS","text":"<p>Required or optional firmware files go in RetroArch's system directory.</p> Filename Description md5sum 5200.rom 5200 BIOS - Required 281f20ea4320404ec820fb7ec0693b38 ATARIXL.ROM Atari XL/XE OS BIOS - Required 06daac977823773a3eea3422fd26a703 ATARIBAS.ROM BASIC interpreter BIOS - Required 0bac0c6a50104045d902df4503a4c30b ATARIOSA.ROM Atari 400/800 PAL BIOS - Required eb1f32f5d9f382db1bbfb8d7f9cb343a ATARIOSB.ROM BIOS for Atari 400/800 NTSC - Required a3e8d617c95d08031fe1b20d541434b2"},{"location":"library/atari800/#features","title":"Features","text":"Feature Supported Restart \u2715 Screenshots \u2714 Saves - States - Rewind \u2715 Netplay \u2715 Core Options \u2714 Memory Monitoring (achievements) \u2715 RetroArch Cheats \u2715 Native Cheats - Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Crop Overscan (in RetroArch's Video settings) \u2715"},{"location":"library/atari800/#directories","title":"Directories","text":"<p>The Atari800 core's directory name is 'Atari800'</p> <p>Atari800 config settings are saved/loaded to and from .atari800.cfg in RetroArch's home directory (where RetroArch.exe is in Windows).</p> <ul> <li>.atari800.cfg (Config)</li> </ul> <p>RetroArch.exe directory</p> <ul> <li>.atari800.cfg (config)</li> <li>.atari000.wav in exe directory (startup noise?)</li> <li>.atari000.pcx in exe directory (screenshot)</li> </ul>"},{"location":"library/atari800/#core-provided-aspect-ratio","title":"Core provided aspect ratio","text":"<p>Atari800's core provided aspect ratio is 4/3.</p>"},{"location":"library/atari800/#usage","title":"Usage","text":"<p>Make sure you have the appropriate system files in RetroArch's system directory. Then, load a content file.</p> <p>The Atari800 core should boot to the 'Atari Computer - Memo Pad' screen.</p> <p>The Atari800 core will generate a '.atari800.cfg' config file in RetroArch's home directory and will add the required BIOS files it detects in the system directory to the config file.</p> <p>Now you can manually select what Atari system you want to emulate through the 'Atari System' core option.</p> <p>Finally, you can load any content files compatible with the system chosen through RetroArch's Load Content menu.</p> <p>Attention</p> <p>You can set per-game core option settings by creating a game-options file through RetroArch's Core Options menu.</p> <p>Alternatively, you can manually configure how the Atari800 will look for and handle BIOS files.</p> <p>While the Atari800 core is running, you can press F1 to get into the internal emulator menu. There - emulator configuration, system rom settings.</p> <p>From there, You can go to the 'Emulator Configuration' section and then the System ROM settings section to configure BIOS options. (Press Enter to confirm menu selections and press Escape to go back a menu)</p> <p>Then press Escape a few times to go back to the 'Emulator Configuration' section and select Save Configuration File or alternatively change Save configuration file on exit from no to yes</p> <p>Then you can exit the emulator by pressing F9 and then try the game again or press Shift+F5 to reboot the game.</p>"},{"location":"library/atari800/#core-options","title":"Core options","text":"<p>The Atari800 core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch.</p> <ul> <li>Atari System (400/800 (OS B)/800XL (64K)/130XE (128K)/5200)</li> </ul> <p> Choose what Atari System to emulate. </p> <ul> <li>Video Standard (NTSC/PAL)</li> </ul> <p> Awaiting description. </p> <ul> <li>Internal BASIC (hold OPTION on boot) (Off/On)</li> </ul> <p> Awaiting description. </p> <ul> <li>SIO Acceleration (Off/On)</li> </ul> <p> Awaiting description. </p> <ul> <li>Boot from Cassette (Off/On)</li> </ul> <p> Awaiting description. </p> <ul> <li>Hi-Res Artifacting (Off/On)</li> </ul> <p> Awaiting description. </p> <ul> <li>Autodetect A5200 CartType (Off/On)</li> </ul> <p> Awaiting description. </p> <ul> <li>Joy hack A5200 for robotron (Off/On)</li> </ul> <p> Awaiting description. </p> <ul> <li>Internal resolution (336x240/320x240/384x240/384x272/384x288/400x300)</li> </ul> <p> Awaiting description. </p> <ul> <li>Retroarch Keyboard type (poll/callback)</li> </ul> <p> Awaiting description. </p>"},{"location":"library/atari800/#controllers","title":"Controllers","text":""},{"location":"library/atari800/#device-types","title":"Device types","text":"<p>The Atari800 core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/atari800/#user-1-2-device-types","title":"User 1 - 2 device types","text":"<ul> <li>None - Input disabled.</li> <li>RetroPad - Joypad - Don't use this, switch to ATARI Joystick for joypad usage.</li> <li>ATARI Joystick - Joypad</li> <li>ATARI Keyboard - Keyboard - For keyboard usage</li> </ul>"},{"location":"library/atari800/#controller-tables","title":"Controller tables","text":""},{"location":"library/atari800/#joypad-and-analog-device-type-table","title":"Joypad and analog device type table","text":"User 1 Remap descriptors RetroPad Inputs ATARI Joystick B KEY RETURN Y VKBD ON/OFF Select CONSOL_SELECT Start CONSOL_START Up Up Down Down Left Left Right Right A FIRE1/KEY RETURN IN GUI X FIRE2/KEY ESCAPE IN GUI L CONSOLE_OPTION R TOGGLE_UI L2 KEY SPACE R2 KEY ESCAPE L3 R3"},{"location":"library/atari800/#keyboard-device-type-table","title":"Keyboard device type table","text":"User # input descriptors ATARI Keyboard N/A Keyboard Numpad 2 Down N/A Keyboard Numpad 4 Left N/A Keyboard Numpad 6 Right N/A Keyboard Numpad 8 Up N/A Keyboard Up Up N/A Keyboard Down Down N/A Keyboard Right Right N/A Keyboard Left Left N/A Keyboard F1 Built in UI N/A Keyboard F2 Option key N/A Keyboard F3 Select key N/A Keyboard F4 Start key N/A Keyboard F5 Reset key N/A Keyboard F6 Help key (XL/XE only) N/A Keyboard F7 Break key N/A Keyboard F8 Enter monitor N/A Keyboard F9 Exit emulator N/A Keyboard F10 Save screenshot N/A Keyboard Right Control Fire N/A Keyboard Shift + F5 Reboot N/A Keyboard Shift + F10 Save interlaced screenshot N/A Keyboard Alt + R Run Atari program N/A Keyboard Alt + D Disk management N/A Keyboard Alt + C Cartridge management N/A Keyboard Alt + Y Select system N/A Keyboard Alt + O Sound settings N/A Keyboard Alt + W Sound recording start/stop N/A Keyboard Alt + S Save state file N/A Keyboard Alt + L Load state file N/A Keyboard Alt + A About the emulator"},{"location":"library/atari800/#external-links","title":"External Links","text":"<ul> <li>Libretro Atari800 Core info file</li> <li>Libretro Atari800 Github Repository</li> <li>Report Libretro Atari800 Core Issues Here</li> <li>Official Atari800 Website</li> <li>Official Atari800 Github Repository</li> </ul>"},{"location":"library/b2/","title":"Acorn - BBC Micro (b2-libretro)","text":""},{"location":"library/b2/#background","title":"Background","text":"<p>Emulate the BBC Micro, a series of microcomputers designed and built by Acorn Computers Limited in the 1980s for the Computer Literacy Project of the BBC.</p> <p>The b2-libretro core has been authored by:</p> <ul> <li>Tom Seddon (b2)</li> <li>Zoltan Balogh (libretro core specific modifications)</li> </ul> <p>The b2 core is licensed under GPL v3. A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/b2/#requirements","title":"Requirements","text":"<p>No special requirements. To be tested yet on low end platforms.</p>"},{"location":"library/b2/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the b2 core have the following file extensions:</p> <ul> <li><code>.ssd/.dsd</code> - Floppy disk image</li> </ul> <p>RetroArch database(s) that are associated with the b2 core:</p> <ul> <li>None yet</li> </ul>"},{"location":"library/b2/#features","title":"Features","text":"<p>Frontend-level settings or features that the b2 core respects.</p> Feature Supported Restart \u2714 Saves \u2715 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2714 Memory Monitoring (achievements) \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping - Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2714 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/b2/#directories","title":"Directories","text":"<p>No additional directories used, only content disk image is needed.</p>"},{"location":"library/b2/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The b2 core's core provided FPS is 50</li> <li>The b2 core's core provided sample rate is 250 kHz (to be optimized)</li> <li>The b2 core's base width is 768</li> <li>The b2 core's base height is 288</li> <li>The b2 core's max width is 768</li> <li>The b2 core's max height is 576 (interlace mode)</li> <li>The b2 core's core provided aspect ratio is 4:3</li> </ul>"},{"location":"library/b2/#usage","title":"Usage","text":"<p>Load any supported content file. Content type will be autodetected, and if possible, started:</p> <ul> <li>If disk image name contains an executable file name in brackets (such as <code>[CHUCKIE]</code>), a <code>CHAIN</code> command will be issued shortly after initial booting</li> <li>If disk image name does not contain such indication, Shift key press will be simulated during boot to trigger autoboot function</li> </ul> <p>In case of multi-disk games, use the Disk Control menu to add the subsequent images and switch between them.</p>"},{"location":"library/b2/#core-options","title":"Core options","text":"<p>The b2 core has the following option(s) that can be tweaked from the core options menu.</p> <ul> <li>Emulated machine</li> <li><code>B/Acorn 1770</code></li> <li><code>B/Watford 1770 (DDB2)</code></li> <li><code>B/Watford 1770 (DDB3)</code></li> <li><code>B/Opus 1770</code></li> <li><code>B/Opus CHALLENGER 256K</code></li> <li><code>B/Opus CHALLENGER 512K</code></li> <li><code>B+</code></li> <li><code>B+128</code></li> <li>Autoboot (on|off)</li> <li>Keyboard assignments for each RetroPad button</li> </ul>"},{"location":"library/b2/#joypad-mapping","title":"Joypad mapping","text":"<p>The analogue joysticks are mapped to the left analog stick and face button A for RetroArch player 1 and 2 slots.</p> <p>Joypad is fully assignable to keyboard keys in core options.</p>"},{"location":"library/b2/#keyboard","title":"Keyboard","text":"<p>Keyboard layout of the BBC Micro: </p> <p>Most mappings are straightforward positionally from an ISO UK keyboard:</p> <ul> <li>Dark green: natural mapping, both position and function matches nicely</li> <li>Light green: either position or function is slightly different</li> <li>Yellow: function is different</li> <li>Red: extra mapping</li> <li>Dark grey: keys intentionally reserved for RetroArch / OS functions</li> </ul> <p></p> <p>Exceptions are marked in the following table:</p> RetroKeyboard Inputs BBC Micro keyboard input Keyboard F10 f0 Keyboard F11 Break Keyboard Pause Break Keyboard Backspace Delete Keyboard Backquote ` Escape (alternative mapping) Keyboard Equals = ^ (caret) Keyboard Oem 102 \\ (backslash) Keyboard Home \\ (alternative mapping) Keyboard Backspace Delete Keyboard Left Bracket [ @ (at) Keyboard Right Bracket ] [ (left bracket) Keyboard End _ (underline) Keyboard Quote ' : (colon) Keyboard Backslash \\ ] (right bracket) (shown as # in ISO map) Keyboard Delete Delete Keyboard PgUp Caps Lock Keyboard PgDn Shift Lock Keyboard NumLock Shift Lock Keyboard Insert Copy"},{"location":"library/b2/#external-links","title":"External Links","text":"<ul> <li>Official b2-libretro core repository</li> <li>Libretro b2 Core info file</li> <li>Report Libretro b2 Core Issues Here</li> <li>Original b2 Implementation</li> <li>Complete BBC Micro Games Archive</li> <li>Stardot forums - BBC Micro community</li> </ul>"},{"location":"library/beetle_bsnes/","title":"Nintendo - SNES / Famicom (Beetle bsnes)","text":""},{"location":"library/beetle_bsnes/#background","title":"Background","text":"<p>Standalone port of Mednafen bSNES to libretro, itself a old fork of bsnes 0.59.</p> <p>This core exists as a side effect of porting/forking mednafen for its other cores in the past. There's no reason to use this core now that there's other more compatible and faster SNES cores.</p>"},{"location":"library/beetle_bsnes/#authorlicense","title":"Author/License","text":"<p>The Beetle bsnes core has been authored by</p> <ul> <li>byuu</li> <li>Mednafen Team</li> </ul> <p>The Beetle bsnes core is licensed under</p> <ul> <li>GPLv2</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/beetle_bsnes/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the Beetle bsnes core have the following file extensions:</p> <ul> <li>.smc</li> <li>.fig</li> <li>.bs</li> <li>.st</li> <li>.sfc</li> </ul>"},{"location":"library/beetle_bsnes/#databases","title":"Databases","text":"<p>RetroArch database(s) that are associated with the Beetle bsnes core:</p> <ul> <li>Nintendo - Super Nintendo Entertainment System</li> <li>Nintendo - Super Nintendo Entertainment System Hacks</li> <li>Nintendo - Sufami Turbo</li> </ul>"},{"location":"library/beetle_bsnes/#features","title":"Features","text":"<p>Frontend-level settings or features that the Beetle bsnes core respects.</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2715 Memory Monitoring (achievements) \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2715 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2714 LEDs \u2715"},{"location":"library/beetle_bsnes/#directories","title":"Directories","text":"<p>The Beetle bsnes core's internal core name is 'Mednafen bSNES'</p> <p>The Beetle bsnes core saves/loads to/from these directories.</p> <p>Frontend's Save directory</p> <ul> <li>'content-name'.srm (Cartridge battery save)</li> <li>'content-name'.rtc (Real time clock save)</li> </ul> <p>Frontend's State directory</p> <ul> <li>'content-name'.state# (State)</li> </ul>"},{"location":"library/beetle_bsnes/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The Beetle bsnes core's core provided FPS is 60.10</li> <li>The Beetle bsnes core's core provided sample rate is 44100 Hz</li> <li>The Beetle bsnes core's core provided aspect ratio is 4/3</li> </ul>"},{"location":"library/beetle_bsnes/#controllers","title":"Controllers","text":"<p>The Beetle bsnes core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/beetle_bsnes/#user-1-2-device-types","title":"User 1 - 2 device types","text":"<ul> <li>None - Doesn't disable input</li> <li>RetroPad - Joypad</li> <li>RetroPad w/Analog  - Joypad - There's no reason to switch to this.</li> </ul>"},{"location":"library/beetle_bsnes/#controller-tables","title":"Controller tables","text":""},{"location":"library/beetle_bsnes/#joypad","title":"Joypad","text":"RetroPad Inputs Beetle bsnes Inputs B Y Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A X L R"},{"location":"library/beetle_bsnes/#external-links","title":"External Links","text":"<ul> <li>Official Mednafen Website</li> <li>Official Mednafen Downloads</li> <li>Libretro Beetle bsnes Core info file</li> <li>Libretro Beetle bsnes Github Repository</li> <li>Report Libretro Beetle bsnes Core Issues Here</li> </ul>"},{"location":"library/beetle_bsnes/#see-also","title":"See also","text":""},{"location":"library/beetle_bsnes/#nintendo-sufami-turbo","title":"Nintendo - Sufami Turbo","text":"<ul> <li>Nintendo - SNES / Famicom (bsnes-jg)</li> <li>Nintendo - SNES / Famicom (bsnes-mercury Accuracy)</li> <li>Nintendo - SNES / Famicom (bsnes-mercury Balanced)</li> <li>Nintendo - SNES / Famicom (bsnes-mercury Performance)</li> <li>Nintendo - SNES / Famicom (bsnes Accuracy)</li> <li>Nintendo - SNES / Famicom (bsnes Balanced)</li> <li>Nintendo - SNES / Famicom (bsnes C++98 (v085))</li> <li>Nintendo - SNES / Famicom (bsnes Performance)</li> <li>Nintendo - SNES / Famicom (Snes9x)</li> <li>Nintendo - SNES / Famicom (Snes9x 2002)</li> <li>Nintendo - SNES / Famicom (Snes9x 2005 Plus)</li> <li>Nintendo - SNES / Famicom (Snes9x 2005)</li> <li>Nintendo - SNES / Famicom (Snes9x 2010)</li> </ul>"},{"location":"library/beetle_bsnes/#nintendo-super-nintendo-entertainment-system-hacks","title":"Nintendo - Super Nintendo Entertainment System (+Hacks)","text":"<ul> <li>Nintendo - SNES / Famicom (bsnes-jg)</li> <li>Nintendo - SNES / Famicom (bsnes-mercury Accuracy)</li> <li>Nintendo - SNES / Famicom (bsnes-mercury Balanced)</li> <li>Nintendo - SNES / Famicom (bsnes-mercury Performance)</li> <li>Nintendo - SNES / Famicom (bsnes Accuracy)</li> <li>Nintendo - SNES / Famicom (bsnes Balanced)</li> <li>Nintendo - SNES / Famicom (bsnes C++98 (v085))</li> <li>Nintendo - SNES / Famicom (bsnes Performance)</li> <li>Nintendo - SNES / Famicom (higan Accuracy)</li> <li>Nintendo - SNES / Famicom (nSide Balanced)</li> <li>Nintendo - SNES / Famicom (Mesen-S)</li> <li>Nintendo - SNES / Famicom (Snes9x)</li> <li>Nintendo - SNES / Famicom (Snes9x 2002)</li> <li>Nintendo - SNES / Famicom (Snes9x 2005 Plus)</li> <li>Nintendo - SNES / Famicom (Snes9x 2005)</li> <li>Nintendo - SNES / Famicom (Snes9x 2010)</li> </ul>"},{"location":"library/beetle_cygne/","title":"Bandai - WonderSwan/Color (Beetle Cygne)","text":""},{"location":"library/beetle_cygne/#background","title":"Background","text":"<p>Standalone port of Mednafen WonderSwan to libretro, itself a fork of Cygne.</p>"},{"location":"library/beetle_cygne/#authorlicense","title":"Author/License","text":"<p>The Beetle Cygne core has been authored by</p> <ul> <li>Dox</li> <li>Mednafen Team</li> </ul> <p>The Beetle Cygne core is licensed under</p> <ul> <li>GPLv2</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/beetle_cygne/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the Beetle Cygne core have the following file extensions:</p> <ul> <li>.ws</li> <li>.wsc</li> <li>.pc2 (Benesse Pocket Challenge v2 files)</li> </ul>"},{"location":"library/beetle_cygne/#databases","title":"Databases","text":"<p>RetroArch database(s) that are associated with the Beetle Cygne core:</p> <ul> <li>Bandai - WonderSwan</li> <li>Bandai - WonderSwan Color</li> </ul>"},{"location":"library/beetle_cygne/#features","title":"Features","text":"<p>Frontend-level settings or features that the Beetle Cygne core respects.</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 (not link-cable emulation) Core Options \u2715 Memory Monitoring (achievements) \u2714 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/beetle_cygne/#directories","title":"Directories","text":"<p>The Beetle Cygne core's internal core name is 'Beetle WonderSwan'</p> <p>The Beetle Cygne core saves/loads to/from these directories.</p> <p>Frontend's Save directory</p> <ul> <li>'content-name'.srm (Cartridge backup save)</li> </ul> <p>Frontend's State directory</p> <ul> <li>'content-name'.state# (State)</li> </ul>"},{"location":"library/beetle_cygne/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The Beetle Cygne core's core provided FPS is 75.47</li> <li>The Beetle Cygne core's core provided sample rate is 44100 Hz</li> <li>The Beetle Cygne core's core provided aspect ratio is 14/9</li> </ul>"},{"location":"library/beetle_cygne/#controllers","title":"Controllers","text":"<p>The Beetle Cygne core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/beetle_cygne/#user-1-device-types","title":"User 1 device types","text":"<ul> <li>None - Doesn't disable input.</li> <li>RetroPad - Joypad</li> <li>RetroPad w/Analog - There is no reason to switch to this.</li> </ul>"},{"location":"library/beetle_cygne/#controller-tables","title":"Controller tables","text":""},{"location":"library/beetle_cygne/#joypad","title":"Joypad","text":"User 1 Remap descriptors RetroPad Inputs B Rotate screen + active D-Pad Start X Cursor Up X Cursor Down X Cursor Left X Cursor Right A Y Cursor Left Y Cursor Right Y Cursor Down Y Cursor Up"},{"location":"library/beetle_cygne/#compatibility","title":"Compatibility","text":"Game Issue Tonpuusou Title screen announcer voice missing. Softlocks after picking a menu option."},{"location":"library/beetle_cygne/#external-links","title":"External Links","text":"<ul> <li>Official Mednafen Website</li> <li>Official Mednafen Downloads</li> <li>Libretro Beetle Cygne Core info file</li> <li>Libretro Beetle Cygne Github Repository</li> <li>Report Libretro Beetle Cygne Core Issues Here</li> <li>Gameplay Videos</li> </ul>"},{"location":"library/beetle_gba/","title":"Nintendo - Game Boy Advance (Beetle GBA)","text":""},{"location":"library/beetle_gba/#background","title":"Background","text":"<p>Standalone port of Mednafen GBA to libretro, itself a fork of VBA-M, itself a fork of Visual Boy Advance.</p>"},{"location":"library/beetle_gba/#authorlicense","title":"Author/License","text":"<p>The Beetle GBA core has been authored by</p> <ul> <li>Forgotten</li> <li>Mednafen Team</li> </ul> <p>The Beetle GBA core is licensed under</p> <ul> <li>GPLv2</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/beetle_gba/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the Beetle GBA core have the following file extensions:</p> <ul> <li>.gba</li> <li>.agb</li> <li>.bin</li> </ul>"},{"location":"library/beetle_gba/#databases","title":"Databases","text":"<p>RetroArch database(s) that are associated with the Beetle GBA core:</p> <ul> <li>Nintendo - Game Boy Advance</li> </ul>"},{"location":"library/beetle_gba/#bios","title":"BIOS","text":"<p>Required or optional firmware files go in the frontend's system directory.</p> Filename Description md5sum gba_bios.bin Game Boy Advance BIOS - Optional a860e8c0b6d573d191e4ec7db1b1e4f6"},{"location":"library/beetle_gba/#features","title":"Features","text":"<p>Frontend-level settings or features that the Beetle GBA core respects.</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2715 Core Options \u2714 Memory Monitoring (achievements) \u2714 RetroArch Cheats \u2715 RetroArch SaveRAM Autosave Interval support \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2714 LEDs \u2715"},{"location":"library/beetle_gba/#directories","title":"Directories","text":"<p>The Beetle GBA core's internal core name is 'Beetle GBA'</p> <p>The Beetle GBA core saves/loads to/from these directories.</p> <p>Frontend's Save directory</p> <ul> <li>'content-name'.'ROM MD5'.sav (SRAM)</li> <li>'content-name'.'ROM MD5'.eep (EEPROM)</li> </ul> <p>Frontend's State directory</p> <ul> <li>'content-name'.state# (State)</li> </ul>"},{"location":"library/beetle_gba/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The Beetle GBA core's core provided FPS is 59.73</li> <li>The Beetle GBA core's core provided sample rate is 44100 Hz</li> <li>The Beetle GBA core's core provided aspect ratio is 3/2</li> </ul>"},{"location":"library/beetle_gba/#core-options","title":"Core options","text":"<p>The Beetle GBA core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded.</p> <p>Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch.</p> <ul> <li> <p>HLE bios emulation [gba_hle] (enabled/disabled)</p> <p>Self-explanatory. When set to off, a Game Boy Advance BIOS is required.</p> </li> </ul>"},{"location":"library/beetle_gba/#controllers","title":"Controllers","text":"<p>The Beetle GBA core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/beetle_gba/#user-1-device-types","title":"User 1 device types","text":"<ul> <li>None - Doesn't disable input.</li> <li>RetroPad - Joypad</li> <li>RetroPad w/Analog - Joypad - There's no reason to switch to this.</li> </ul>"},{"location":"library/beetle_gba/#controller-tables","title":"Controller tables","text":""},{"location":"library/beetle_gba/#joypad","title":"Joypad","text":"User 1 Remap descriptors RetroPad Inputs B Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A L R"},{"location":"library/beetle_gba/#external-links","title":"External Links","text":"<ul> <li>Official Mednafen Website</li> <li>Official Mednafen Downloads</li> <li>Libretro Beetle GBA Core info file</li> <li>Libretro Beetle GBA Github Repository</li> <li>Report Libretro Beetle GBA Core Issues Here</li> </ul>"},{"location":"library/beetle_gba/#see-also","title":"See also","text":""},{"location":"library/beetle_gba/#nintendo-game-boy-advance","title":"Nintendo - Game Boy Advance","text":"<ul> <li>Nintendo - Game Boy Advance (gpSP)</li> <li>Nintendo - Game Boy Advance (Meteor)</li> <li>Nintendo - Game Boy Advance (mGBA)</li> <li>Nintendo - Game Boy Advance (VBA-M)</li> <li>Nintendo - Game Boy Advance (VBA Next)</li> <li>Nintendo - Game Boy Advance (TempGBA)</li> </ul>"},{"location":"library/beetle_lynx/","title":"Atari - Lynx (Beetle Lynx)","text":""},{"location":"library/beetle_lynx/#background","title":"Background","text":"<p>Beetle Lynx is an Atari Lynx video game system emulator that can be used as a libretro core. Specifically it's a port of Mednafen Lynx which is a fork of Handy.</p>"},{"location":"library/beetle_lynx/#authorlicense","title":"Author/License","text":"<p>The Beetle Lynx core has been authored by</p> <ul> <li>K. Wilkins</li> <li>Mednafen Team</li> </ul> <p>The Beetle Lynx core is licensed under</p> <ul> <li>zlib, GPLv2</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/beetle_lynx/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the Beetle Lynx core have the following file extensions:</p> <ul> <li>.lnx</li> <li>.o</li> </ul>"},{"location":"library/beetle_lynx/#databases","title":"Databases","text":"<p>RetroArch database(s) that are associated with the Beetle Lynx core:</p> <ul> <li>Atari - Lynx</li> </ul>"},{"location":"library/beetle_lynx/#bios","title":"BIOS","text":"<p>Required or optional firmware files go in the frontend's system directory.</p> Filename Description md5sum lynxboot.img Lynx Boot Image - Required fcd403db69f54290b51035d82f835e7b"},{"location":"library/beetle_lynx/#features","title":"Features","text":"<p>Frontend-level settings or features that the Beetle Lynx core respects.</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2715 States \u2714 Rewind \u2714 Netplay (State based) \u2714 (not link-cable emulation) Core Options \u2714 Memory Monitoring (achievements) \u2714 Cheats (Cheats menu) \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2714 LEDs \u2715"},{"location":"library/beetle_lynx/#directories","title":"Directories","text":"<p>The Beetle Lynx core's directory name is 'Beetle Lynx'</p> <p>The Beetle Lynx core saves/loads to/from these directories.</p> <p>Frontend's State directory</p> <ul> <li>'content-name'.state# (State)</li> </ul>"},{"location":"library/beetle_lynx/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The Beetle Lynx core's core provided FPS is 75</li> <li>The Beetle Lynx core's core provided sample rate is 44100 Hz</li> <li>The Beetle Lynx core's core provided aspect ratio is 80/51</li> </ul>"},{"location":"library/beetle_lynx/#loading-content","title":"Loading content","text":"<p>Beetle Lynx supports Lynx headered roms and non-headered roms. It also supports homebrews in *.o extensions.</p>"},{"location":"library/beetle_lynx/#core-options","title":"Core options","text":"<p>The Beetle Lynx core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded.</p> <p>Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch.</p> <ul> <li> <p>Auto-rotate Screen [lynx_rot_screen] (enabled/disabled)</p> <p>Virtually rotates the screen orientation and keymaps automatically for known games. When disabled, screen rotation is manually adjusted by pressing the SELECT button.</p> </li> </ul>"},{"location":"library/beetle_lynx/#controllers","title":"Controllers","text":"<p>The Beetle Lynx core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/beetle_lynx/#user-1-device-types","title":"User 1 device types","text":"<ul> <li>None - Doesn't disable input.</li> <li>RetroPad - Joypad</li> <li>RetroPad w/Analog - Joypad - There's no reason to switch to this.</li> </ul>"},{"location":"library/beetle_lynx/#controller-tables","title":"Controller tables","text":""},{"location":"library/beetle_lynx/#joypad","title":"Joypad","text":"User 1 Remap descriptors RetroPad Inputs Beetle Lynx core inputs B Pause D-Pad Up D-Pad Down D-Pad Left D-Pad Right A Option 1 Option 2 <p>Supported combinations</p> <ul> <li>Option 1 + Pause = Flips Screen</li> <li>Option 2 + Pause = Restarts game</li> </ul>"},{"location":"library/beetle_lynx/#compatibility","title":"Compatibility","text":"Game Issue RoadBlasters Graphics glitches. Minor flickering and glitches after starting a race."},{"location":"library/beetle_lynx/#external-links","title":"External Links","text":"<ul> <li>Official Mednafen Website</li> <li>Official Mednafen Downloads</li> <li>Libretro Beetle Lynx Core info file</li> <li>Libretro Beetle Lynx Github Repository</li> <li>Report Libretro Beetle Lynx Core Issues Here</li> </ul>"},{"location":"library/beetle_lynx/#see-also","title":"See also","text":""},{"location":"library/beetle_lynx/#atari-lynx","title":"Atari - Lynx","text":"<ul> <li>Atari - Lynx (Handy)</li> <li>Atari - Lynx (Holani)</li> </ul>"},{"location":"library/beetle_neopop/","title":"SNK - Neo Geo Pocket / Color (Beetle NeoPop)","text":""},{"location":"library/beetle_neopop/#background","title":"Background","text":"<p>Beetle/Mednafen NGP is a SNK Neo Geo Pocket (Color) video game system emulator based on NeoPop.</p>"},{"location":"library/beetle_neopop/#authorlicense","title":"Author/License","text":"<p>The Beetle NeoPop core has been authored by</p> <ul> <li>neopop_uk</li> <li>Mednafen Team</li> </ul> <p>The Beetle NeoPop core is licensed under</p> <ul> <li>GPLv2</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/beetle_neopop/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the Beetle NeoPop core have the following file extensions:</p> <ul> <li>.ngp</li> <li>.ngc</li> </ul>"},{"location":"library/beetle_neopop/#databases","title":"Databases","text":"<p>RetroArch database(s) that are associated with the Beetle Neopop core:</p> <ul> <li>SNK - Neo Geo Pocket</li> <li>SNK - Neo Geo Pocket Color</li> </ul>"},{"location":"library/beetle_neopop/#features","title":"Features","text":"<p>Frontend-level settings or features that the Beetle NeoPop core respects.</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 (not link-cable emulation) Core Options \u2714 Memory Monitoring (achievements) \u2714 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/beetle_neopop/#directories","title":"Directories","text":"<p>The Beetle NeoPop core's internal core name is 'Beetle NeoPop'</p> <p>The Beetle NeoPop core saves/loads to/from these directories.</p> <p>Frontend's Save directory</p> <ul> <li>'content-name'.flash (Cartrtidge battery save)</li> </ul> <p>Frontend's State directory</p> <ul> <li>'content-name'.state# (State)</li> </ul>"},{"location":"library/beetle_neopop/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The Beetle NeoPop core's core provided FPS is 60</li> <li>The Beetle NeoPop core's core provided sample rate is 44100 Hz</li> <li>The Beetle NeoPop core's core provided aspect ratio is 20/19</li> </ul>"},{"location":"library/beetle_neopop/#core-options","title":"Core options","text":"<p>The Beetle NeoPop core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded.</p> <p>Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch.</p> <ul> <li> <p>Language (restart) [ngp_language] (english/japanese)</p> <p>Choose the system language of the BIOS.</p> </li> </ul>"},{"location":"library/beetle_neopop/#controllers","title":"Controllers","text":"<p>The Beetle NeoPop core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/beetle_neopop/#user-1-device-types","title":"User 1 device types","text":"<ul> <li>None - Doesn't disable input.</li> <li>RetroPad - Joypad</li> <li>RetroPad w/Analog - Joypad - There's no reason to switch to this.</li> </ul>"},{"location":"library/beetle_neopop/#controller-tables","title":"Controller tables","text":""},{"location":"library/beetle_neopop/#joypad","title":"Joypad","text":"User 1 Remap descriptors RetroPad Inputs A Option D-Pad Up D-Pad Down D-Pad Left D-Pad Right B"},{"location":"library/beetle_neopop/#external-links","title":"External Links","text":"<ul> <li>Official Mednafen Website</li> <li>Official Mednafen Downloads</li> <li>Libretro Beetle NeoPop Core info file</li> <li>Libretro Beetle NeoPop Github Repository</li> <li>Report Libretro Beetle NeoPop Core Issues Here</li> </ul>"},{"location":"library/beetle_pc_fx/","title":"NEC - PC-FX (Beetle PC-FX)","text":""},{"location":"library/beetle_pc_fx/#background","title":"Background","text":"<p>Beetle PC-FX is a port of Mednafen PC-FX video game system emulator for the NEC PC-FX.</p>"},{"location":"library/beetle_pc_fx/#authorlicense","title":"Author/License","text":"<p>The Beetle PC-FX core has been authored by</p> <ul> <li>Mednafen Team</li> </ul> <p>The Beetle PC-FX core is licensed under</p> <ul> <li>GPLv2</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/beetle_pc_fx/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the Beetle PC-FX core have the following file extensions:</p> <ul> <li>.cue</li> <li>.ccd</li> <li>.toc</li> <li>.chd</li> </ul>"},{"location":"library/beetle_pc_fx/#databases","title":"Databases","text":"<p>RetroArch database(s) that are associated with the Beetle PC-FX core:</p> <ul> <li>NEC - PC-FX</li> </ul>"},{"location":"library/beetle_pc_fx/#bios","title":"BIOS","text":"<p>Required or optional firmware files go in the frontend's system directory.</p> Filename Description md5sum pcfx.rom PC-FX BIOS v1.00 - 2 Sep 1994 - Required 08e36edbea28a017f79f8d4f7ff9b6d7"},{"location":"library/beetle_pc_fx/#features","title":"Features","text":"<p>Frontend-level settings or features that the Beetle PC-FX core respects.</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 Memory Monitoring (achievements) \u2714 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2714 LEDs \u2715"},{"location":"library/beetle_pc_fx/#directories","title":"Directories","text":"<p>The Beetle PC-FX core's internal core name is 'Beetle PC-FX'</p> <p>The Beetle PC-FX core saves/loads to/from these directories.</p> <p>Frontend's Save directory</p> <ul> <li>'content-name'.srm (Save)</li> </ul> <p>Frontend's State directory</p> <ul> <li>'content-name-.state# (State)</li> </ul>"},{"location":"library/beetle_pc_fx/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The Beetle PC-FX core's core provided FPS is 60</li> <li>The Beetle PC-FX core's core provided sample rate is 44100 Hz</li> <li>The Beetle PC-FX core's core provided aspect ratio is 4/3</li> </ul>"},{"location":"library/beetle_pc_fx/#loading-pc-fx-content","title":"Loading PC-FX content","text":"<p>Beetle PC-FX needs a cue-sheet that points to an image file. A cue sheet, or cue file, is a metadata file which describes how the tracks of a CD or DVD are laid out.</p> <p>If you have e.g. <code>foo.bin</code>, you should create a text file and save it as <code>foo.cue</code>. If you're playing a single-track Saturn game, then the cue file contents should look like this:</p> <p><code>foobin.cue</code> <pre><code> FILE \"foo.bin\" BINARY\n  TRACK 01 MODE1/2352\n   INDEX 01 00:00:00\n</code></pre></p> <p>After that, you can load the <code>foo.cue</code> file in RetroArch with the Beetle PC-FX core.</p> <p>Attention</p> <p>Certain PC-FX games are multi-track, so their .cue files might be more complicated.</p>"},{"location":"library/beetle_pc_fx/#core-options","title":"Core options","text":"<p>The Beetle PC-FX core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded.</p> <p>Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch.</p> <ul> <li> <p>High Dotclock Width (Restart) [pcfx_high_dotclock_width] (1024/256/341)</p> <p>Emulated width for 7.16MHz dot-clock mode. Lower values are faster, but will cause some degree of pixel distortion.</p> </li> <li> <p>Suppress Channel Reset Clicks (Restart) [pcfx_suppress_channel_reset_clicks] (enabled/disabled)</p> <p>Hack to suppress clicks caused by forced channel resets.</p> </li> <li> <p>Emulate Buggy Codec (Restart) [pcfx_emulate_buggy_codec] (disabled/enabled)</p> <p>Hack that emulates the codec a buggy ADPCM encoder used for some games' ADPCM.</p> </li> <li> <p>Sound Quality (Restart) [pcfx_resamp_quality] (3/\u2158/0/\u00bd)</p> <p>Higher values correspond to better SNR and better preservation of higher frequencies(\"brightness\"), at the cost of increased computational complexity and a negligible increase in latency.</p> </li> <li> <p>Chroma channel bilinear interpolation  (Restart) [pcfx_rainbow_chromaip] (disabled/enabled)</p> <p>Enable bilinear interpolation on the chroma channel of RAINBOW YUV output. Enabling it may cause graphical glitches with some games.</p> </li> <li> <p>No Sprite Limit (Restart) [pcfx_nospritelimit] (disabled/enabled)</p> <p>Remove 16-sprites-per-scanline hardware limit.</p> </li> <li> <p>Initial scanline [pcfx_initial_scanline] ((0 to 40 in increments of 1. 4 is default.)</p> <p>Adjust first display scanline.</p> </li> <li> <p>Last scanline [pcfx_last_scanline] (208 to 238 in increments of 1. 235 is default.)</p> <p>Adjust last display scanline.</p> </li> <li> <p>Mouse Sensitivity [pcfx_mouse_sensitivity] (1.00 to 5.00 in increments of 0.25. 1.25 is default.)</p> <p>Configure the sensitivity of the 'PCFX Mouse' device type,</p> </li> </ul>"},{"location":"library/beetle_pc_fx/#controllers","title":"Controllers","text":"<p>The Beetle PC-FX core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/beetle_pc_fx/#user-1-2-device-types","title":"User 1 - 2 device types","text":"<ul> <li>None - Doesn't disable input.</li> <li>PCFX Joypad - Joypad</li> <li>PCFX Mouse - Mouse</li> </ul>"},{"location":"library/beetle_pc_fx/#controller-tables","title":"Controller tables","text":""},{"location":"library/beetle_pc_fx/#joypad","title":"Joypad","text":"User 1 - 6 Remap descriptors RetroPad Inputs II IV Select Run D-Pad Up D-Pad Down D-Pad Left D-Pad Right I III V VI MODE 1 (Switch) MODE 2 (Switch)"},{"location":"library/beetle_pc_fx/#mouse","title":"Mouse","text":"RetroMouse Inputs PCFX Mouse  Mouse Cursor PCFX Mouse Cursor  Mouse 1 PCFX Mouse Left Button  Mouse 2 PCFX Mouse Right Button"},{"location":"library/beetle_pc_fx/#compatibility","title":"Compatibility","text":"Game Issue"},{"location":"library/beetle_pc_fx/#external-links","title":"External Links","text":"<ul> <li>Official Mednafen Website</li> <li>Official Mednafen Downloads</li> <li>Libretro Beetle PC-FX Core info file</li> <li>Libretro Beetle PC-FX Github Repository</li> <li>Report Libretro Beetle PC-FX Core Issues Here</li> </ul>"},{"location":"library/beetle_pce_fast/","title":"NEC - PC Engine / CD (Beetle PCE FAST)","text":""},{"location":"library/beetle_pce_fast/#background","title":"Background","text":"<p>Beetle/Mednafen PCE FAST is a libretro port of Mednafen PCE Fast with the PC Engine SuperGrafx module removed.</p> <p>The Beetle PCE FAST core has been authored by</p> <ul> <li>Mednafen Team</li> </ul> <p>The Beetle PCE FAST core is licensed under</p> <ul> <li>GPLv2</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/beetle_pce_fast/#bios","title":"BIOS","text":"<p>Required or optional firmware files go in RetroArch's system directory.</p> <p>Which PCE CD BIOS file the Beetle PCE FAST core will use can be configured by the 'CD BIOS' core option.</p> <p>Any CD-ROM System BIOS will work, but some of them are known to be incompatible with certain games.</p> Filename Description md5sum syscard3.pce Super CD-ROM2 System V3.xx - Required 38179df8f4ac870017db21ebcbf53114 syscard2.pce CD-ROM System V2.xx - Optional syscard1.pce CD-ROM System V1.xx - Optional gexpress.pce Game Express CD Card - Optional"},{"location":"library/beetle_pce_fast/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the Beetle PCE FAST core have the following file extensions:</p> <ul> <li>.pce</li> <li>.cue</li> <li>.ccd</li> <li>.iso</li> <li>.img</li> <li>.bin</li> <li>.chd</li> </ul> <p>RetroArch database(s) that are associated with the [Core name] core:</p> <ul> <li>NEC - PC Engine - TurboGrafx 16</li> <li>NEC - PC Engine CD - TurboGrafx-CD</li> </ul>"},{"location":"library/beetle_pce_fast/#features","title":"Features","text":"<p>Frontend-level settings or features that the Beetle PCE FAST core respects.</p> Feature Supported Restart \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 Memory Monitoring (achievements) \u2714 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/beetle_pce_fast/#directories","title":"Directories","text":"<p>The Beetle PCE FAST core's library name is 'Beetle PCE Fast'</p> <p>The Beetle PCE FAST core saves/loads to/from these directories.</p> <p>Frontend's Save directory</p> File Description *.srm Save <p>Frontend's State directory</p> File Description *.state# State"},{"location":"library/beetle_pce_fast/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The Beetle PCE FAST core's core provided FPS is 59.82</li> <li>The Beetle PCE FAST core's core provided sample rate is 44100 Hz</li> <li>The Beetle PCE FAST core's base width is 512</li> <li>The Beetle PCE FAST core's base height is 243</li> <li>The Beetle PCE FAST core's max width is 512</li> <li>The Beetle PCE FAST core's max height is 243</li> <li>The Beetle PCE FAST core's core provided aspect ratio is 6/5</li> </ul>"},{"location":"library/beetle_pce_fast/#loading-pc-engine-cd-content","title":"Loading PC Engine CD content","text":"<p>To load PC Engine CD content, Beetle PCE FAST needs a cue-sheet that points to an image file. A cue sheet, or cue file, is a metadata file which describes how the tracks of a CD or DVD are laid out.</p> <p>If you have e.g. <code>foo.bin</code>, you should create a text file and save it as <code>foo.cue</code>. If you're playing a single-track Saturn game, then the cue file contents should look like this:</p> <p><code>foobin.cue</code> <pre><code> FILE \"foo.bin\" BINARY\n  TRACK 01 MODE1/2352\n   INDEX 01 00:00:00\n</code></pre></p> <p>After that, you can load the <code>foo.cue</code> file in RetroArch with the Beetle PCE FAST core.</p> <p>Certain PC Engine content are multi-track, so their .cue files might be more complicated.</p> <p>ISO + OGG and ISO + WAV format games are supported, but they require a properly formatted cue sheet. For iso files, tracks should be denoted as BINARY, for ogg files, they should be denoted as OGG, and for wav files, they should be denoted as WAVE.</p>"},{"location":"library/beetle_pce_fast/#chd","title":"CHD","text":"<p>Alternatively to using cue sheets with .bin/.iso files, you can convert your games to .chd (MAME Compressed Hunks of Data) to reduce file sizes and neaten up your game folder.</p> <p>To convert content to CHD format, use the chdman tool found inside the latest MAME distribution and point it to a .cue file, like so:</p> <pre><code>chdman createcd --input foo.cue --output foo.chd\n</code></pre>"},{"location":"library/beetle_pce_fast/#core-options","title":"Core options","text":"<p>The Beetle PCE FAST core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded.</p> <p>Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch.</p> <ul> <li> <p>CD Image Cache (Restart) [pce_fast_cdimagecache] (disabled/enabled)</p> <p>Loads the complete image in memory at startup. Can potentially decrease loading times at the cost of increased startup time.</p> </li> <li> <p>CD Bios (Restart) [pce_fast_cdbios] (System Card 3/Games Express/System Card 1/System Card 2)</p> <p>Select which PC Engine CD BIOS to use.</p> </li> <li> <p>No Sprite Limit (Restart) [pce_nospritelimit] (disabled/enabled\")</p> <p>Remove 16-sprites-per-scanline hardware limit.</p> </li> <li> <p>CPU Overclock Multiplier (Restart) [pce_ocmultiplier] (1/\u2154/\u2158/6/\u215e/9/10/20/30/40/50)</p> <p>Overclock the emulated CPU.</p> </li> <li> <p>Horizontal Overscan (352 Width Mode Only) [pce_hoverscan] (300 to 352 in increments of 2. 352 in default.)</p> <p>Modify the horizontal overscan.</p> </li> <li> <p>Initial scanline [pce_initial_scanline] (0 to 40 in increments of 1. 3 is default.)</p> <p>Adjust initial display scanline.</p> </li> <li> <p>Last scanline [pce_last_scanline] (208 to 242 in increments of 1. 242 is default.)</p> <p>Adjust last display scanline.</p> </li> <li> <p>(CD) CDDA Volume % [pce_cddavolume] (0 to 200 in increments of 10. 100 is default.)</p> <p>Adjust CDDA Volume %.</p> </li> <li> <p>(CD) ADPCM Volume % [pce_adpcmvolume] (0 to 200 in increments of 10. 100 is default.)</p> <p>Adjust ADPCM Volume %.</p> </li> <li> <p>(CD) CD PSG Volume % [pce_cdpsgvolume] (0 to 200 in increments of 10. 100 is default.)</p> <p>Adjust CD PSG Volume %.</p> </li> <li> <p>(CD) CD Speed [pce_cdspeed] (1/2/4/8)</p> <p>Set the speed of the emulated CD drive.</p> </li> <li> <p>Turbo Delay [pce_Turbo_Delay] (Fast/Medium/Slow)</p> <p>Adjust turbo delay.</p> </li> <li> <p>Turbo ON/OFF Toggle [pce_Turbo_Toggling] (disabled/enabled)</p> <p>Enables Turbo ON/OFF inputs.</p> <p>Look at the Joypad section for more information.</p> </li> <li> <p>Alternate Turbo Hotkey [pce_turbo_toggle_hotkey] (disabled/enabled)</p> <p>Enables Alternate Turbo ON/OFF inputs.</p> <p>You can avoid remapping Button III and IV when switching to 6-button gamepad mode with this.</p> <p>Look at the Joypad section for more information.</p> </li> <li> <p>P1 Turbo I [pce_p0_turbo_I_enable] (disabled/enabled)</p> <p>Awaiting description.</p> </li> <li> <p>P1 Turbo II [pce_p0_turbo_II_enable] (disabled/enabled)</p> <p>Awaiting description.</p> </li> <li> <p>P2 Turbo I [pce_p1_turbo_I_enable] (disabled/enabled)</p> <p>Awaiting description.</p> </li> <li> <p>P2 Turbo II [pce_p1_turbo_II_enable] (disabled/enabled)</p> <p>Awaiting description.</p> </li> <li> <p>P3 Turbo I [pce_p2_turbo_I_enable] (disabled/enabled)</p> <p>Awaiting description.</p> </li> <li> <p>P3 Turbo II [pce_p2_turbo_II_enable] (disabled/enabled)</p> <p>Awaiting description.</p> </li> <li> <p>P4 Turbo I [pce_p3_turbo_I_enable] (disabled/enabled)</p> <p>Awaiting description.</p> </li> <li> <p>P4 Turbo II [pce_p3_turbo_II_enable] (disabled/enabled)</p> <p>Awaiting description.</p> </li> <li> <p>P5 Turbo I [pce_p4_turbo_I_enable] (disabled/enabled)</p> <p>Awaiting description.</p> </li> <li> <p>P5 Turbo II [pce_p4_turbo_II_enable] (disabled/enabled)</p> <p>Awaiting description.</p> </li> </ul>"},{"location":"library/beetle_pce_fast/#user-1-2-device-types","title":"User 1 - 2 device types","text":"<p>The Beetle PCE FAST core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p> <ul> <li>None - Doesn't disable input.</li> <li>PCE Joypad - Joypad</li> <li>Mouse - Mouse</li> </ul>"},{"location":"library/beetle_pce_fast/#joypad","title":"Joypad","text":"<ul> <li> <p>Which PCE Joypad button mode is in use can be configured by the Mode Switch input.</p> </li> <li> <p>The regular Turbo inputs for 2-button mode are only active when the 'Turbo ON/OFF Toggle' core option is set to On.</p> </li> <li> <p>The Alternate Turbo inputs for 2-button mode are only active when the 'Turbo ON.mdOFF Toggle' core option is set to On and the 'Alternate Turbo Hotkey' core option is set to On.</p> </li> </ul> RetroPad Inputs User 1 - 5 input descriptors PCE Joypad 2-button PCE Joypad 6-button II II II III II Turbo On/Off III Select Select Select Run Run Run D-Pad Up D-Pad Up D-Pad Up D-Pad Down D-Pad Down D-Pad Down D-Pad Left D-Pad Left D-Pad Left D-Pad Right D-Pad Right D-Pad Right I I I IV I Turbo On/Off IV V V VI VI Mode Switch Mode Switch Mode Switch Alternate II Turbo On/Off Alternate I Turbo On/Off"},{"location":"library/beetle_pce_fast/#mouse","title":"Mouse","text":"RetroMouse Inputs Mouse  Mouse Cursor Mouse Cursor  Mouse 1 Mouse Left Button  Mouse 2 Mouse Right Button"},{"location":"library/beetle_pce_fast/#external-links","title":"External Links","text":"<ul> <li>Official Mednafen Website</li> <li>Official Mednafen Downloads</li> <li>Libretro Beetle PCE FAST Core info file</li> <li>Libretro Beetle PCE FAST Github Repository</li> <li>Report Libretro Beetle PCE FAST Core Issues Here</li> <li>Gameplay Videos</li> </ul>"},{"location":"library/beetle_pce_fast/#tg-16","title":"TG-16","text":"<ul> <li>NEC - PC Engine SuperGrafx (Beetle SGX)</li> </ul>"},{"location":"library/beetle_psx/","title":"PlayStation (Beetle PSX)","text":""},{"location":"library/beetle_psx/#background","title":"Background","text":"<p>Beetle PSX is a port/fork of Mednafen's PSX module to the libretro API. It can be compiled in C++98 mode. Beetle PSX currently runs on Linux, OSX and Windows.</p> <p>Notable additions in this fork are:</p> <ul> <li>PBP and CHD file format support, developed by Zapeth;</li> <li>Software renderer internal resolution upscaling, implemented by simias;</li> <li>PGXP subpixel precision, developed by iCatButler;</li> </ul> <p>Beetle PSX prioritizes accuracy and offers a software renderer that faithfully replicates the original PlayStation experience. However, it lacks hardware rendering capabilities.</p> <p>For those seeking improved visuals and performance, Beetle PSX HW provides a hardware-accelerated alternative. However, it's important to note that all games experience graphical glitches and rendering issues of varying severity with its OpenGL renderer (example). Fortunately, Beetle PSX HW offers a more stable alternative \u2013 the Vulkan renderer. This choice delivers hardware acceleration with accuracy closer to the software renderer, making it a compelling middle ground.</p> <p>The Beetle PSX core has been authored by</p> <ul> <li>Mednafen Team</li> </ul> <p>The Beetle PSX core is licensed under</p> <ul> <li>GPLv2</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/beetle_psx/#bios","title":"BIOS","text":"<p>Required or optional firmware files go in the frontend's <code>system</code> directory.</p> Filename Description md5sum scph5500.bin PS1 JP BIOS - Required for JP games 8dd7d5296a650fac7319bce665a6a53c scph5501.bin PS1 US BIOS - Required for US games 490f666e1afb15b7362b406ed1cea246 scph5502.bin PS1 EU BIOS - Required for EU games 32736f17079d0b2b7024407c39bd3050 <p>As a replacement for any of the BIOS files mentioned above, it is also possible to use either of these BIOSes:</p> <ul> <li><code>PSXONPSP660.bin</code> (MD5: c53ca5908936d412331790f4426c6c33)</li> <li><code>ps1_rom.bin</code> (MD5: 81bbe60ba7a3d1cea1d48c14cbcc647b)</li> </ul> <p>The <code>PSXONPSP660.bin</code> BIOS comes from the PSP, and the <code>ps1_rom.bin</code> BIOS comes from the PS3, both are region-free. For Beetle PSX to recognize either of these BIOSes, you need to enable the \"Override BIOS\" option.</p>"},{"location":"library/beetle_psx/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the Beetle PSX core have the following file extensions:</p> <ul> <li>.cue</li> <li>.toc</li> <li>.m3u</li> <li>.ccd</li> <li>.exe</li> <li>.pbp</li> <li>.chd</li> </ul> <p>RetroArch database(s) that are associated with the Beetle PSX core:</p> <ul> <li>Sony - PlayStation</li> </ul>"},{"location":"library/beetle_psx/#features","title":"Features","text":"<p>Frontend-level settings or features that the Beetle PSX core respects.</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2715 Core Options \u2714 Memory Monitoring (achievements) \u2714 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2714 Rumble \u2714 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2714 Username \u2715 Language \u2715 Crop Overscan * \u2715 LEDs \u2715 <p>* Overscan cropping available via Core Options instead of frontend settings</p>"},{"location":"library/beetle_psx/#directories","title":"Directories","text":"<p>The Beetle PSX core's library name is 'Beetle PSX'</p> <p>The Beetle PSX core saves/loads to/from these directories.</p> <p>Frontend's Save directory</p> <ul> <li>Memory cards</li> </ul> <p>Frontend's State directory</p> File Description *.state# State"},{"location":"library/beetle_psx/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The Beetle PSX core's core provided FPS is 59.826 for NTSC games and 49.761 for PAL games (non-interlaced rates) and is toggleable to 59.940 for NTSC games and 50.000 for PAL games (interlaced rates) through core options</li> <li>The Beetle PSX core's core provided sample rate is 44100 Hz</li> <li>The Beetle PSX core's base width is 320</li> <li>The Beetle PSX core's base height is 240</li> <li>The Beetle PSX core's max width is 700 when the 'Internal GPU resolution' is set to 1x. Raising the resolution past 1x will increase the max width</li> <li>The Beetle PSX core's max height is 576 when the 'Internal GPU resolution' is set to 1x. Raising the resolution past 1x will increase the max height</li> <li>The Beetle PSX core's core provided aspect ratio is automatically set based on core options</li> </ul>"},{"location":"library/beetle_psx/#loading-content","title":"Loading content","text":"<p>Beetle PSX needs a cue-sheet that points to an image file. A cue sheet, or cue file, is a metadata file which describes how the tracks of a CD or DVD are laid out.</p> <p>If you have e.g. <code>foo.bin</code>, you should create a text file and save it as <code>foo.cue</code>. Most PS1 games are single-track, so the cue file contents should look like this:</p> <p><code>foobin.cue</code> <pre><code> FILE \"foo.bin\" BINARY\n  TRACK 01 MODE1/2352\n   INDEX 01 00:00:00\n</code></pre></p> <p>After that, you can load the <code>foo.cue</code> file in RetroArch with the Beetle PSX core.</p> <p>Attention</p> <p>Certain PS1 games are multi-track, so their .cue files might be more complicated.</p>"},{"location":"library/beetle_psx/#playing-pal-copy-protected-games","title":"Playing PAL copy protected games","text":"<p>PAL copy protected games need a SBI Subchannel file next to the bin/cue files in order to get past the copy protection.</p> <ul> <li>Ape Escape (Europe).bin</li> <li>Ape Escape (Europe).cue</li> <li>Ape Escape (Europe).sbi</li> </ul> <p>Warning</p> <p>For proper PAL game compatibility, the 'Skip BIOS' core option needs to be set to off.</p>"},{"location":"library/beetle_psx/#multiple-disk-games","title":"Multiple-disk games","text":"<p>If foo is a multiple-disk game, you should have .cue files for each one, e.g. <code>foo (Disc 1).cue</code>, <code>foo (Disc 2).cue</code>, <code>foo (Disc 3).cue</code>.</p> <p>To take advantage of Disc Control feature for disk swapping, an index file (a m3u file) should be made.</p> <p>Create a text file and save it as <code>foo.m3u</code>. Then enter your game's .cue files on it. The m3u file contents should look something like this:</p> <p><code>foo.m3u</code> <pre><code>foo (Disc 1).cue\nfoo (Disc 2).cue\nfoo (Disc 3).cue\n</code></pre></p> <p>After that, you can load the <code>foo.m3u</code> file in RetroArch with the Beetle PSX core.</p> <p>Here's a m3u example done with Valkryie Profile</p> <p></p> <p>Attention</p> <p>Adding multi-track games to a RetroArch playlist is recommended. (Manually add an entry a playlist that points to <code>foo.m3u</code>)</p>"},{"location":"library/beetle_psx/#swapping-disks","title":"Swapping disks","text":"<p>Disks can be swapped through Quick Menu -&gt; Disc Control in RetroArch.</p> <p>If not using .m3u files, .cue files must be manually selected via the Load New Disk legacy feature.</p> <p>If using .m3u files, disks can be swapped by selecting Eject Disk, changing the Current Disk Index to your desired disk, and finally selecting Insert Disk.</p>"},{"location":"library/beetle_psx/#compressed-content","title":"Compressed content","text":"<p>Alternatively to using cue sheets with .bin/.iso files, you can convert your games to .pbp (Playstation Portable update file) or .chd (MAME Compressed Hunks of Data) to reduce file sizes and neaten up your game folder.</p>"},{"location":"library/beetle_psx/#pbp","title":"PBP","text":"<p>A recommended .pbp convert tool is PSX2PSP.</p> <p>If converting a multiple-disk game, all disks should be added to the same .pbp file, rather than making a .m3u file for them.</p> <p>Most conversion tools will want a single .bin file for each disk. If your game uses multiple .bin files (tracks) per disk, you will have to mount the cue sheet to a virtual drive and re-burn the images onto a single track before conversion.</p> <p>For multi-disk PAL copy-protected games, change the sbi file syntax from <code>[filename].sbi</code> to <code>[filename]_[disc_number].sbi</code></p> <ul> <li>Final Fantasy IX (Germany).pbp</li> <li>Final Fantasy IX (Germany)_1.sbi</li> <li>Final Fantasy IX (Germany)_2.sbi</li> <li>Final Fantasy IX (Germany)_3.sbi</li> <li>Final Fantasy IX (Germany)_4.sbi</li> </ul> <p>Attention</p> <p>RetroArch does not currently have .pbp database due to variability in users' conversion methods. All .pbp games will have to be added to playlists manually.</p>"},{"location":"library/beetle_psx/#chd","title":"CHD","text":"<p>To convert content to CHD format, use the chdman tool found inside the latest MAME distribution and point it to a .cue file, like so:</p> <pre><code>chdman createcd --input foo.cue --output foo.chd\n</code></pre> <p>Note that the tool currently does not integrate .sbi files into the .chd, so these must be placed alongside the resulting .chd file in order to properly play games with LibCrypt protection.</p> <p>Attention</p> <p>For multi-disc content, make an .m3u file that lists all the .chd files instead of .cue files. Like the PBP files, content must be added to playlists manually.</p>"},{"location":"library/beetle_psx/#saves","title":"Saves","text":"<p>For game savedata storage, the PSX console used memory cards. The PSX console had two slots for memory cards.</p> <p>In this doc, the first memory card slot will be referred to as 'Memcard slot 0' and the second slot will be referred to as 'Memcard slot 1'.</p> <p>For memory card functionality and usage, the Beetle PSX core will either use the Libretro savedata format or the Mednafen savedata format.</p> <p> Libretro savedata format Mednafen savedata format gamename.srm gamename.slot#.mcr <p></p> <p>By default, the Beetle PSX core will use Libretro's savedata format for Memcard slot 0 and Mednafen's savedata format for Memcard slot 1.</p> <p> Memcard slot 0 Memcard slot 1 gamename.srm gamename.1.mcr <p></p> <p>Attention</p> <p>Memory card behavior can be controlled with the following core options (Memcard 0 method, Enable memory card 1, Shared memcards).</p> <p>By default, the filenames of the Memcard savedata will match the loaded cue or m3u or pbp filename, like this:</p> <ul> <li> <p>Loaded content: Breath of Fire III (USA).cue</p> </li> <li> <p>Memcard slot 0: Breath of Fire III (USA).srm</p> </li> <li> <p>Memcard slot 1: Breath of Fire III (USA).1.mcr</p> </li> </ul> <p>or</p> <ul> <li> <p>Loaded content: Final Fantasy VII (USA).m3u</p> </li> <li> <p>Memcard slot 0: Final Fantasy VII (USA).srm</p> </li> <li> <p>Memcard slot 1: Final Fantasy VII (USA).1.mcr</p> </li> </ul> <p>or</p> <ul> <li> <p>Loaded content: Wild Arms 2 (USA).pbp</p> </li> <li> <p>Memcard slot 0: `Wild Arms 2 (USA).srm</p> </li> <li> <p>Memcard slot 1: `Wild Arms 2 (USA).1.mcr</p> </li> </ul> <p>Attention</p> <p>To import your old memory cards from other emulators, you need to rename them to either the Libretro savedata format or the Mednafen savedata format. The Libretro (.srm) savedata format, when used with Beetle PSX, is internally identical to the Mednafen PSX (.mcr) savedata format, and can be converted between one another via renaming.</p> <p>Warning</p> <p>Keep in mind that save states also include the state of the memory card; carelessly loading an old save state will OVEWRITE the memory card, potentially resulting in lost saved games. You can set the 'Don't overwrite SaveRAM on loading savestate' option in RetroArch's Saving settings to On to prevent this.</p>"},{"location":"library/beetle_psx/#core-options","title":"Core options","text":"<p>The Beetle PSX core has the following options that can be tweaked from your frontend's core options menu or manually changed via core configuration files. Options are listed below in the following format:</p> <p><code>Option Name [option_key] (setting1/setting2/...)</code></p> <p>To manually change an option, search for that option's key in the core configuration file you want to edit and set it to your desired setting value, enclosed in quotations. For example, if you had set the Internal Color Depth to 32bpp and wanted to revert it to 16bpp, you would change <code>beetle_psx_depth = \"32bpp\"</code> to <code>beetle_psx_depth = \"16bpp(native)\"</code>. Manually editing core configuration files is typically unnecessary unless your frontend does not have a method for toggling options.</p> <p>The default setting for each option will be highlighted in bold. Settings with (Restart) means that core has to be shut down for the new setting to be applied on next launch.</p> <ul> <li> <p>Internal GPU Resolution [beetle_psx_internal_resolution] (1x(native)/2x/4x/8x/16x)</p> <p>Selects internal resolution multiplier.</p> <p>Resolutions higher than 1x(native) improve the fidelity of 3D models at the expense of increased performance requirements. 2D elements are generally unaffected by this setting from the core's perspective.</p> Internal GPU Resolution - 1x <p></p> Internal GPU Resolution - 2x <p></p> </li> <li> <p>Dithering Pattern [beetle_psx_dither_mode] (1x(native)/internal resolution/disabled)</p> <p>Select dithering pattern.</p> <p>Dithering is used by the original PSX hardware to combat the color banding visible due to 16bpp color depth.</p> <p>'1x(native)' emulates original hardware but can look grainy at higher internal resolutions.</p> <p>'internal resolution' reduces graininess by allowing for finer dithering at higher Internal GPU Resolutions, but has limited effectiveness in combating color banding if the Internal GPU Resolution is set too high. (Note in the examples below that the 'internal resolution' option is less grainy but has more visible banding than '1x(native)' at 4x Internal GPU Resolution)</p> <p>'disabled' is for users who otherwise wish to turn off dithering regardless of color banding.</p> Dithering Pattern - 1x Native <p></p> Dithering Pattern - Internal Resolution <p></p> Dithering Pattern - Disabled <p></p> </li> <li> <p>PGXP Operation Mode [beetle_psx_pgxp_mode] (disabled/memory only/memory + CPU)</p> <p>Enabling the Parallel/Precision Geometry Transform Pipeline (PGXP) allows polygons to be rendered with subpixel precision, eliminating or otherwise diminishing the polygon jitter/wobble visible on original PSX hardware. This distortion results from original hardware using fixed point mathematics when rendering 3D models, thus rounding polygon vertices to the nearest integer pixel.</p> <p>'disabled' emulates original hardware behavior.</p> <p>'memory only' mode enables subpixel precision at the cost of increased performance requirements with only minor compatibility issues. 'memory + CPU' mode can further reduce jitter but is highly demanding and is known to cause geometry errors. 'memory only' is recommended for best compatibility.</p> <p>https://www.youtube.com/watch?v=EYCpd_1lPUc</p> </li> <li> <p>Display Internal FPS [beetle_psx_display_internal_fps] (disabled/enabled)</p> <p>Displays the frame rate that the emulated PSX is drawing at. Requires onscreen notifications to be enabled in the libretro frontend. Reported values may be inaccurate.</p> Display internal FPS - On <p></p> </li> <li> <p>Line-to-Quad Hack [beetle_psx_line_render] (default/aggressive/disabled)</p> <p>Certain games employ a special technique for drawing horizontal lines, which involves stretching single-pixel-high triangles across the screen in a manner that causes the PSX hardware to rasterise them as a row of pixels. Examples include Doom/Hexen, and the water effects in Soul Blade. When running such games with an Internal GPU Resolution higher than native, these triangles no longer resolve as a line, causing gaps to appear in the output image.</p> <p>Setting 'Line-to-Quad Hack' to 'Default' solves this issue by detecting small triangles and converting them as required.</p> <p>The 'Aggressive' option will likely introduce visual glitches due to false positives, but is needed for correct rendering of some 'difficult' titles (e.g. Dark Forces, Duke Nukem).</p> </li> <li> <p>Frame Duping (Speedup) [beetle_psx_frame_duping] (disabled/enabled)</p> <p>When enabled, provides a small performance increase by redrawing/reusing the last rendered frame (instead of presenting a new one) if the content of the current frame is unchanged based on the internal fps heuristic. May cause inaccurate behavior or lost animation frames, so it is not recommended to use this unless necessary.</p> </li> <li> <p>CPU Dynarec [beetle_psx_cpu_dynarec] (disabled/execute/execute_once/run_interpreter)</p> <p>Dynamically recompile CPU instructions to native instructions. Much faster than interpreter, but CPU timing is less accurate, and may have bugs.</p> </li> <li> <p>Dynarec Code Invalidation [beetle_psx_dynarec_invalidate] (full/dma)</p> <p>Some games require Full invalidation, some require DMA Only. This option has no effect when CPU Dynarec is not enabled.</p> </li> <li> <p>Dynarec DMA/GPU Event Cycles [beetle_psx_dynarec_eventcycles] (128/256/384/512/640/768/896/1024)</p> <p>Max cycles run by CPU before a GPU or DMA Update is checked, higher number will be faster, has much less impact on beetle interpreter than dynarec. Leave at 128 for default Beetle interpreter behavior when CPU Dynarec is not enabled.</p> </li> <li> <p>CPU Frequency Scaling (Overclock) [beetle_psx_cpu_freq_scale] (50% to 750% in increments of 10%. Default: 100%(native))</p> <p>Enable overclocking (or underclocking) of the emulated PSX's CPU. The default frequency of the MIPS R3000A-compatible 32-bit RISC CPU is 33.8688 MHz; running at higher frequencies can eliminate slowdown and improve frame rates in certain games at the expense of increased performance requirements.</p> <p>Note that some games have an internal frame rate limiter and may not benefit from overclocking. It is generally not recommended to adjust this setting as it causes many games or portions of them to run at unintended speeds. This can lead to audio and video desynchronization, among other issues.</p> <p>Leave at default for most games.</p> </li> <li> <p>GTE Overclock [beetle_psx_gte_overclock] (disabled/enabled)</p> <p>When enabled, reduces the latency of operations involving the emulated PSX's Geometry Transform Engine (CPU coprocessor used for calculations related to 3D projection - i.e. all 3D graphics) to 1 cycle per instruction and additionally eliminates all memory access or cache fetch latency. For games that make heavy use of the GTE, this can greatly improve frame rate (and frame time) stability at the expense of increased performance requirements.</p> <p>Currently unstable -- leave off if unsure.</p> </li> <li> <p>GPU Rasterizer Overclock [beetle_psx_gpu_overclock] (1x(native)/2x/4x/8x/16x/32x)</p> <p>Enables overclocking of the 2D rasterizer contained within the emulated PSX's GPU. Does not improve 3D rendering, and in general has little effect.</p> </li> <li> <p>Skip BIOS [beetle_psx_skip_bios] (disabled/enabled)</p> <p>When enabled, skips the PSX BIOS animation normally displayed with starting content.</p> <p>Enabling this option will cause compatibility issues with a small minority of games (Saga Frontier, PAL copy protected games, etc).</p> Skip BIOS - Off <p></p> </li> <li> <p>Core-Reported FPS Timing [beetle_psx_core_timing_fps] (force_progressive/force_interlaced/auto_toggle)</p> <p>Sets FPS timing that the core will report to the frontend. Automatic toggling will allow the core to switch between reporting progressive and interlaced rates, but may cause frontend video/audio driver reinits. Progressive timings are 59.826 for NTSC content and 49.761 for PAL content, and interlaced timings are 59.940 for NTSC content and 50.000 for PAL content.</p> </li> <li> <p>Core Aspect Ratio [beetle_psx_aspect_ratio] (corrected/uncorrected/4:3)</p> <p>Set core provided aspect ratio. This setting is ignored when the Widescreen Mode Hack or Display Full VRAM options are enabled. \"4:3\" forces the core aspect ratio to 4:3 without taking horizontal overscan cropping or visible scanlines into account. The \"4:3\" setting should not be used and is only provided as a legacy feature for users desiring old incorrect behavior from the core.</p> </li> <li> <p>Widescreen Mode Hack [beetle_psx_widescreen_hack] (disabled/enabled)</p> <p>Forces content to be rendered with an aspect ratio of 16:9. Produces best results with fully 3D games. Can cause graphical glitches or alignment/stretching issues in games that mix 3D and 2D elements. Leave off for most games.</p> Widescreen mode hack - Off <p></p> Widescreen mode hack - On <p></p> </li> <li> <p>Crop Horizontal Overscan [beetle_psx_crop_overscan] (enabled/disabled)</p> <p>By default, Beetle PSX includes horizontal padding (black bars or 'pillarboxes' on either side of the screen) to emulate the same black bars generated in analog video output by real PSX hardware. This horizontal padding can contain garbage pixels that are generated when the game's width mode is smaller than the display area width in the emulated GPU registers. Enabling 'Crop Horizontal Overscan' will remove this potentially glitchy horizontal overscan region.</p> <p>Not all games will benefit from enabling this setting as shown in the examples below.</p> Crop Overscan - Off (Game with Garbage Pixels) <p></p> Crop Overscan - On (Game with Garbage Pixels) <p></p> Crop Overscan - Off (Game with No Issues) <p></p> Crop Overscan - On (Game with No Issues) <p></p> <p>This option does not affect vertical overscan. Vertical overscan can be cropped using the Initial/Last Scanline core options.</p> </li> <li> <p>Additional Cropping [beetle_psx_image_crop] (disabled/1px/2px/3px/4px/5px/6px/7px/8px)</p> <p>When 'Crop Horizontal Overscan' is enabled, this option further reduces the width of the cropped image by the specified number of pixels.</p> <p>Note: This can have unintended consequences. While the absolute width is reduced, the resultant video is still scaled to the currently set aspect ratio. Enabling 'Additional Cropping' may therefore cause horizontal stretching.</p> </li> <li> <p>Offset Cropped Image [beetle_psx_image_offset] (disabled/-4px/-3px/-2px/-1px/+1px/+2px/+3px/+4px)</p> <p>When 'Crop Horizontal Overscan' is enabled, allows the resultant cropped image to be offset horizontally to the right (positive) or left (negative) by the specified number of pixels. May be used to correct alignment issues.</p> </li> <li> <p>Initial Scanline - NTSC [beetle_psx_initial_scanline] (0 to 40 in increments of 1. Default: 0)</p> <p>Selects the first displayed scanline when running NTSC content. Setting a value greater than 0 will reduce the height of output images by cropping pixels from the topmost edge. May be used to counteract letterboxing built in to some games.</p> </li> <li> <p>Last Scanline - NTSC [beetle_psx_last_scanline] (210 to 239 in increments of 1. Default: 239)</p> <p>Selects the last displayed scanline when running NTSC content. Setting a value less than 239 will reduce the height of output images by cropping pixels from the bottommost edge. May be used to counteract letterboxing built in to some games.</p> </li> <li> <p>Initial Scanline - PAL [beetle_psx_initial_scanline_pal] (0 to 40 in increments of 1. Default: 0)</p> <p>Selects the first displayed scanline when running PAL content. Setting a value greater than 0 will reduce the height of output images by cropping pixels from the topmost edge. May be used to counteract letterboxing built in to some games.</p> </li> <li> <p>Last Scanline - PAL [beetle_psx_last_scanline_pal] (230 to 287 in increments of 1. Default: 287)</p> <p>Selects the last displayed scanline when running PAL content. Setting a value less than 287 will reduce the height of output images by cropping pixels from the bottommost edge. May be used to counteract letterboxing built in to some games.</p> </li> <li> <p>CD Access Method (Restart) [beetle_psx_cd_access_method] (sync/async/precache)</p> <p>Selects method used to read data from content disc images.</p> <p>'sync' emulates original hardware.</p> <p>'async' can alleviate stuttering on devices with slow storage.</p> <p>'precache' loads the entire disc image into memory when starting content, incurring a small startup delay. This can improve in-game loading times and eliminate stutters due to emulated CD access, but may cause issues on systems with low memory.</p> </li> <li> <p>CD Loading Speed [beetle_psx_cd_fastload] (2x(native)/4x/6x/8x/10x/12x/14x)</p> <p>Selects disk access speed multiplier.</p> <p>This speedhack can greatly reduce loading times at speeds higher than native but is known to introduce texture corruption errors, timing glitches, or loading screen softlocks in many titles. Some games will not work at all if loading speed is not set to native (e.g. Castlevania: Symphony of the Night).</p> <p>Reduce multiplier value if experiencing loading issues, freezes, etc.</p> </li> <li> <p>Memory Card 0 Method (Restart) [beetle_psx_use_mednafen_memcard0_method] (libretro/mednafen)</p> <p>Choose the savedata format used for Memory Card 0. See the Saves section above for an explanation regarding the libretro and mednafen formats. libretro is recommended, but mednafen may be used for compatibility with the standalone version of Mednafen. The libretro (.srm) and Mednafen (.mcr) formats are internally identical when used with Beetle PSX.</p> <p>Note: This option must be set to 'mednafen' if the Shared Memcards option is enabled.</p> </li> <li> <p>Enable Memory Card 1 (Restart) [beetle_psx_enable_memcard1] (enabled/disabled)</p> <p>Selects whether to emulate a second memory card in Slot 1. When disabled, games can only access the memory card in Slot 0.</p> <p>Note: Some games require this option to be disabled for correct operation (e.g. Codename Tenka).</p> </li> <li> <p>Shared Memory Cards (Restart) [beetle_psx_shared_memory_cards] (disabled/enabled)</p> <p>When enabled, games will save and load using the same memory card files. Note: The \"Memcard 0 Method\" option must be set to 'mednafen' for this option to function properly.</p> <p>When disabled, separate memory card files will be generated for each title.</p> <p>This option is useful for games in series such as Suikoden or Arc the Lad that check for save data from previous titles.</p> </li> </ul> <p> Memcard slot 0 Memcard slot 1 mednafen_psx_libretro_shared.0.mcr mednafen_psx_libretro_shared.1.mcr <p></p> <ul> <li> <p>Analog Self-Calibration [beetle_psx_analog_calibration] (disabled/enabled)</p> <p>When enabled, monitors the max values reached by the input, using it as a calibration heuristic which then scales the analog coordinates sent to the emulator accordingly. For best results, rotate the sticks at max amplitude for the algorithm to get a good estimate of the scaling factor, otherwise it will adjust while playing.</p> <p>While modern analog sticks have circular logical ranges, older analog sticks such as those on the DualShock have logical ranges closer to squares and can report larger values at the intercardinal directions than modern analog sticks can. Games that expect these larger values will have issues controlling with modern analog sticks, which this option can solve by scaling modern analog stick values up.</p> </li> <li> <p>Enable DualShock Analog Mode Toggle [beetle_psx_analog_toggle] (disabled/enabled)</p> <p>When the input device type is set to DualShock, this option determines whether or not the Analog Button on that device can be toggled.</p> <p>When this option is disabled, the DualShock input device will be locked in Analog Mode where the analog sticks are on.</p> <p>When this option is enabled, the DualShock input device can be toggled between Digital Mode (analog sticks off) and Analog Mode (analog sticks on) much like real hardware by pressing and holding START+SELECT+L1+L2+R1+R2 for one second in lieu of a dedicated Analog Button.</p> <p>Note: Some games may not respond to input when the DualShock is in Analog Mode. Either enable Analog Button Toggle and toggle the DualShock to Digital Mode or change your input device type to PlayStation Controller.</p> </li> <li> <p>Port 1: Multitap Enable [beetle_psx_enable_multitap_port1] (disabled/enabled)</p> <p>Enables/Disables multitap functionality on port 1.</p> </li> <li> <p>Port 2: Multitap Enable [beetle_psx_enable_multitap_port2] (disabled/enabled)</p> <p>Enables/Disables multitap functionality on port 2.</p> </li> <li> <p>Gun Input Mode [beetle_psx_gun_input_mode] (lightgun/touchscreen)</p> <p>When device type is set to 'Guncon / G-Con 45' or 'Justifier', specify whether to use a mouse-controlled 'Light Gun' or 'Touchscreen' input.</p> </li> <li> <p>Gun Cursor [beetle_psx_gun_cursor] (cross/dot/off)</p> <p>Selects the gun cursor to be displayed on screen while using the the 'Guncon / G-Con 45' and 'Justifier' input device types. When disabled, cross hairs are always hidden.</p> Gun Cursor - Cross <p></p> Gun Cursor - Dot <p></p> Gun Cursor - Off <p></p> </li> <li> <p>Mouse Sensitivity [beetle_psx_mouse_sensitivity] (5% to 200% in increments of 5%. Default: 100%)</p> <p>Configure the response of the 'Mouse' input device type.</p> </li> <li> <p>NegCon Twist Response [beetle_psx_negcon_response] (linear/quadratic/cubic)</p> <p>Specifies the analog response when using a RetroPad left analog stick to simulate the 'twist' action of emulated neGcon Controllers.</p> <p>'linear': Analog stick displacement is mapped linearly to negCon rotation angle.</p> <p>'quadratic': Analog stick displacement is mapped quadratically to negCon rotation angle. This allows for greater precision when making small movements with the analog stick.</p> <p>'cubic': Analog stick displacement is mapped cubically to negCon rotation angle. This allows for even greater precision when making small movements with the analog stick, but 'exaggerates' larger movements.</p> <p>Attention</p> <p>A linear response is not recommended when using standard gamepad devices. The negCon 'twist' mechanism is substantially different from conventional analog sticks; linear mapping over-amplifies small displacements of the stick, impairing fine control. A linear response is only appropriate when using racing wheel peripherals.</p> <p>In most cases, the 'quadratic' option should be selected. This provides effective compensation for the physical differences between real/emulated hardware and is the closest approximation of real hardware, enabling smooth/precise analog input.</p> </li> <li> <p>NegCon Twist Deadzone [beetle_psx_negcon_deadzone] (0%/5%/10%/15%/20%/25%/30%)</p> <p>Sets the deadzone of the RetroPad left analog stick when simulating the 'twist' action of emulated neGcon Controllers. Used to eliminate drift/unwanted input.</p> <p>Attention</p> <p>Most (all?) negCon compatible titles provide in-game options for setting a 'twist' deadzone value. To avoid loss of precision, the in-game deadzone should always be set to zero. Any analog stick drift should instead be accounted for by configuring the 'NegCon Twist Deadzone' core option. This is particularly important when 'NegCon Twist Response' is set to 'quadratic' or 'cubic'.</p> <p>Xbox gamepads typically require a deadzone of 15-20%. Many Android-compatible bluetooth gamepads have an internal 'hardware' deadzone, allowing the deadzone value here to be set to 0%.</p> <p>For convenience, it is recommended to make use of the 'Options \u2192 Analog Setting 1P' menu of Gran Turismo when calibrating the 'NegCon Twist Deadzone'. This provides a clear and precise representation of 'real' controller input values.</p> </li> </ul>"},{"location":"library/beetle_psx/#user-1-8-device-types","title":"User 1 - 8 device types","text":"<p>The Beetle PSX core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p> <ul> <li>None - Input disabled.</li> <li>PlayStation Controller - Joypad - PlayStation Controller (SCPH-1080)</li> <li>DualShock - Joypad - DualShock (SCPH-1200)</li> <li>Analog Controller - Joypad - PlayStation Dual Analog Controller(SCPH-1180)</li> <li>Analog Joystick - Joypad - PlayStation Analog Joystick (SCPH-1110)</li> <li>Guncon / G-Con 45 - Lightgun - Namco Gun Controller (SLEH-00007)</li> <li>Justifier - Lightgun -  Konami Justifier lightgun peripheral (SLEH-00005, SLUH-00017)</li> <li>Mouse - Mouse - PlayStation Mouse (SCPH-1090, SCPH-1030)</li> <li>neGcon - Joypad - Namco third party controller</li> </ul>"},{"location":"library/beetle_psx/#rumble-support","title":"Rumble support","text":"<p>Rumble only works in the Beetle PSX core when</p> <ul> <li>The content being ran has rumble support.</li> <li>The frontend being used has rumble support.</li> <li>The joypad device being used has rumble support.</li> <li>The corresponding user's device type is set to DualShock</li> </ul>"},{"location":"library/beetle_psx/#multitap-support","title":"Multitap support","text":"<p>Activating multitap support in compatible games can be configured by the 'Port 1: Multitap enable' and 'Port 2: Multitap enable' core options.</p>"},{"location":"library/beetle_psx/#joypad","title":"Joypad","text":"User 1 - 8 input descriptors RetroPad Inputs PlayStation Controller Inputs DualShock Inputs Analog Controller Inputs Analog Joystick Inputs neGcon Inputs Cross Analog button I Square Analog button II Select Start Start D-Pad Up D-Pad Up D-Pad Down D-Pad Down D-Pad Left D-Pad Left D-Pad Right D-Pad Right Circle A Triangle B L1 Left shoulder button (analog) R1 Right shoulder button (digital) L2 Analog button II R2 Analog button I L3 R3 Left Analog X  X Left Joystick X Twist Left Analog Y  Y Left Joystick Y Right Analog X  X Right Joystick X Right Analog Y  Y Right Joystick Y"},{"location":"library/beetle_psx/#mouse","title":"Mouse","text":"RetroMouse Inputs Mouse Inputs  Mouse Cursor Mouse Cursor  Mouse 1 Mouse Left Button  Mouse 2 Mouse Right Button"},{"location":"library/beetle_psx/#lightgun","title":"Lightgun","text":"RetroLightgun Inputs Guncon / G-Con 45 Inputs Justifier Inputs  Gun Crosshair Guncon / G-Con 45 Crosshair Justifier Crosshair Gun Trigger Guncon / G-Con 45 Trigger Justifier Trigger Gun Reload Guncon / G-Con 45 Reload Justifier Reload Gun Aux A Guncon / G-Con 45 A Justifier Aux Gun Aux B Guncon / G-Con 45 B Gun Start Justifier Start"},{"location":"library/beetle_psx/#compatibility","title":"Compatibility","text":"<p>A list of known emulation bugs can be found here https://forum.fobby.net/index.php?t=msg&amp;th=1114&amp;start=0&amp;</p>"},{"location":"library/beetle_psx/#external-links","title":"External Links","text":"<ul> <li>Official Mednafen Website</li> <li>Official Mednafen Downloads</li> <li>Beetle PSX Libretro Core info file</li> <li>Beetle PSX Libretro Github Repository</li> <li>Report Beetle PSX Core Issues Here</li> <li>Gameplay Videos</li> </ul>"},{"location":"library/beetle_psx/#libretro-psx-cores","title":"Libretro PSX cores","text":"<ul> <li>PlayStation (Beetle PSX HW)</li> <li>PlayStation (PCSX ReARMed)</li> </ul>"},{"location":"library/beetle_psx_hw/","title":"PlayStation (Beetle PSX HW)","text":""},{"location":"library/beetle_psx_hw/#background","title":"Background","text":"<p>Beetle PSX HW is a port/fork of Mednafen's PSX module to the libretro API. It can be compiled in C++98 mode, excluding the Vulkan renderer, which is written in C++11 for the time being. Beetle PSX HW currently runs on Linux, OSX and Windows.</p> <p>Notable additions in this fork are:</p> <ul> <li>PBP and CHD file format support, developed by Zapeth;</li> <li>Software renderer internal resolution upscaling, implemented by simias;</li> <li>An OpenGL 3.3 renderer, developed by simias;</li> <li>A Vulkan renderer, developed by TinyTiger;</li> <li>PGXP perspective correct texturing and subpixel precision, developed by iCatButler;</li> </ul> <p>The Beetle PSX HW core has been authored by</p> <ul> <li>Mednafen Team</li> </ul> <p>The Beetle PSX HW core is licensed under</p> <ul> <li>GPLv2</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/beetle_psx_hw/#requirements","title":"Requirements","text":"<ul> <li>OpenGL 3.3 for the opengl renderer</li> <li>Vulkan for the vulkan renderer</li> </ul>"},{"location":"library/beetle_psx_hw/#bios","title":"BIOS","text":"<p>Required or optional firmware files go in the frontend's <code>system</code> directory.</p> Filename Description md5sum scph5500.bin PS1 JP BIOS - Required for JP games 8dd7d5296a650fac7319bce665a6a53c scph5501.bin PS1 US BIOS - Required for US games 490f666e1afb15b7362b406ed1cea246 scph5502.bin PS1 EU BIOS - Required for EU games 32736f17079d0b2b7024407c39bd3050 <p>As a replacement for any of the BIOS files mentioned above, it is also possible to use either of these BIOSes:</p> <ul> <li><code>PSXONPSP660.bin</code> (MD5: c53ca5908936d412331790f4426c6c33)</li> <li><code>ps1_rom.bin</code> (MD5: 81bbe60ba7a3d1cea1d48c14cbcc647b)</li> </ul> <p>The <code>PSXONPSP660.bin</code> BIOS comes from the PSP, and the <code>ps1_rom.bin</code> BIOS comes from the PS3, both are region-free. For Beetle PSX HW to recognize either of these BIOSes, you need to enable the \"Override BIOS\" option.</p>"},{"location":"library/beetle_psx_hw/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the Beetle PSX HW core have the following file extensions:</p> <ul> <li>.cue</li> <li>.toc</li> <li>.m3u</li> <li>.ccd</li> <li>.exe</li> <li>.pbp</li> <li>.chd</li> </ul> <p>RetroArch database(s) that are associated with the Beetle PSX HW core:</p> <ul> <li>Sony - PlayStation</li> </ul>"},{"location":"library/beetle_psx_hw/#features","title":"Features","text":"<p>Frontend-level settings or features that the Beetle PSX HW core respects.</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2715 Core Options \u2714 Memory Monitoring (achievements) \u2714 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2714 Rumble \u2714 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2714 Username \u2715 Language \u2715 Crop Overscan * \u2715 LEDs \u2715 <p>* Overscan cropping available via Core Options instead of frontend settings</p>"},{"location":"library/beetle_psx_hw/#directories","title":"Directories","text":"<p>The Beetle PSX HW core's library name is 'Beetle PSX HW'</p> <p>The Beetle PSX HW core saves/loads to/from these directories.</p> <p>Frontend's Save directory</p> <ul> <li>Memory cards</li> </ul> <p>Frontend's State directory</p> File Description *.state# State"},{"location":"library/beetle_psx_hw/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The Beetle PSX HW core's core provided FPS is 59.826 for NTSC games and 49.761 for PAL games (non-interlaced rates) and is toggleable to 59.940 for NTSC games and 50.000 for PAL games (interlaced rates) through core options</li> <li>The Beetle PSX HW core's core provided sample rate is 44100 Hz</li> <li>The Beetle PSX HW core's base width is 320</li> <li>The Beetle PSX HW core's base height is 240</li> <li>The Beetle PSX HW core's max width is 700 when the 'Internal GPU resolution' is set to 1x. Raising the resolution past 1x will increase the max width</li> <li>The Beetle PSX HW core's max height is 576 when the 'Internal GPU resolution' is set to 1x. Raising the resolution past 1x will increase the max height</li> <li>The Beetle PSX HW core's core provided aspect ratio is automatically set based on core options</li> </ul>"},{"location":"library/beetle_psx_hw/#loading-content","title":"Loading content","text":"<p>Beetle PSX HW needs a cue-sheet that points to an image file. A cue sheet, or cue file, is a metadata file which describes how the tracks of a CD or DVD are laid out.</p> <p>If you have e.g. <code>foo.bin</code>, you should create a text file and save it as <code>foo.cue</code>. Most PS1 games are single-track, so the cue file contents should look like this:</p> <p><code>foobin.cue</code> <pre><code> FILE \"foo.bin\" BINARY\n  TRACK 01 MODE1/2352\n   INDEX 01 00:00:00\n</code></pre></p> <p>After that, you can load the <code>foo.cue</code> file in RetroArch with the Beetle PSX HW core.</p> <p>Attention</p> <p>Certain PS1 games are multi-track, so their .cue files might be more complicated.</p>"},{"location":"library/beetle_psx_hw/#playing-pal-copy-protected-games","title":"Playing PAL copy protected games","text":"<p>PAL copy protected games need a SBI Subchannel file next to the bin/cue files in order to get past the copy protection.</p> <ul> <li>Ape Escape (Europe).bin</li> <li>Ape Escape (Europe).cue</li> <li>Ape Escape (Europe).sbi</li> </ul> <p>Warning</p> <p>For proper PAL game compatibility, the 'Skip BIOS' core option needs to be set to off.</p>"},{"location":"library/beetle_psx_hw/#multiple-disk-games","title":"Multiple-disk games","text":"<p>If foo is a multiple-disk game, you should have .cue files for each one, e.g. <code>foo (Disc 1).cue</code>, <code>foo (Disc 2).cue</code>, <code>foo (Disc 3).cue</code>.</p> <p>To take advantage of Disc Control feature for disk swapping, an index file (a m3u file) should be made.</p> <p>Create a text file and save it as <code>foo.m3u</code>. Then enter your game's .cue files on it. The m3u file contents should look something like this:</p> <p><code>foo.m3u</code> <pre><code>foo (Disc 1).cue\nfoo (Disc 2).cue\nfoo (Disc 3).cue\n</code></pre></p> <p>After that, you can load the <code>foo.m3u</code> file in RetroArch with the Beetle PSX HW core.</p> <p>Here's a m3u example done with Valkryie Profile</p> <p></p> <p>Attention</p> <p>Adding multi-track games to a RetroArch playlist is recommended. (Manually add an entry a playlist that points to <code>foo.m3u</code>)</p>"},{"location":"library/beetle_psx_hw/#swapping-disks","title":"Swapping disks","text":"<p>Disks can be swapped through Quick Menu -&gt; Disc Control in RetroArch.</p> <p>If not using .m3u files, .cue files must be manually selected via the Load New Disk legacy feature.</p> <p>If using .m3u files, disks can be swapped by selecting Eject Disk, changing the Current Disk Index to your desired disk, and finally selecting Insert Disk.</p>"},{"location":"library/beetle_psx_hw/#compressed-content","title":"Compressed content","text":"<p>Alternatively to using cue sheets with .bin/.iso files, you can convert your games to .pbp (Playstation Portable update file) or .chd (MAME Compressed Hunks of Data) to reduce file sizes and neaten up your game folder.</p>"},{"location":"library/beetle_psx_hw/#pbp","title":"PBP","text":"<p>A recommended .pbp convert tool is PSX2PSP.</p> <p>If converting a multiple-disk game, all disks should be added to the same .pbp file, rather than making a .m3u file for them.</p> <p>Most conversion tools will want a single .bin file for each disk. If your game uses multiple .bin files (tracks) per disk, you will have to mount the cue sheet to a virtual drive and re-burn the images onto a single track before conversion.</p> <p>For multi-disk PAL copy-protected games, change the sbi file syntax from <code>[filename].sbi</code> to <code>[filename]_[disc_number].sbi</code></p> <ul> <li>Final Fantasy IX (Germany).pbp</li> <li>Final Fantasy IX (Germany)_1.sbi</li> <li>Final Fantasy IX (Germany)_2.sbi</li> <li>Final Fantasy IX (Germany)_3.sbi</li> <li>Final Fantasy IX (Germany)_4.sbi</li> </ul> <p>Attention</p> <p>RetroArch does not currently have .pbp database due to variability in users' conversion methods. All .pbp games will have to be added to playlists manually.</p>"},{"location":"library/beetle_psx_hw/#chd","title":"CHD","text":"<p>To convert content to CHD format, use the chdman tool found inside the latest MAME distribution and point it to a .cue file, like so:</p> <pre><code>chdman createcd --input foo.cue --output foo.chd\n</code></pre> <p>Note that the tool currrently does not integrate .sbi files into the .chd, so these must be placed alongside the resulting .chd file in order to properly play games with LibCrypt protection.</p> <p>Attention</p> <p>For multi-disc content, make an .m3u file that lists all the .chd files instead of .cue files. Like the PBP files, content must be added to playlists manually.</p>"},{"location":"library/beetle_psx_hw/#texture-replacements-vulkan-only","title":"Texture replacements (Vulkan only)","text":"<p>To use a textures pack you'll have to extract the textures in a <code>[game_filename]-texture-replacements/</code> folder inside your game directory, where \"[game_filename]\" matches the actual filename of the file you're using to load the game.</p> <p>Here's an example with Suikoden II: <pre><code>Suikoden II (USA).bin\nSuikoden II (USA).cue\nSuikoden II (USA)-texture-replacements/\n</code></pre></p> <p>Another example with Chrono Cross, a multi-discs game: <pre><code>Chrono Cross (USA) (Disc 1).bin\nChrono Cross (USA) (Disc 1).cue\nChrono Cross (USA) (Disc 2).bin\nChrono Cross (USA) (Disc 2).cue\nChrono Cross (USA).m3u\nChrono Cross (USA)-texture-replacements/\n</code></pre></p> <p>For multi-discs games you will be loading the game with the .m3u (if you followed the 'Multiple-disk games' section properly) so the textures folder name has to match the .m3u filename.</p> <p>Tips</p> <p>If you still can't see any difference with your folder set up properly:</p> <ul> <li>The .png files need to be inside <code>[game_filename]-texture-replacements/</code> directly, not in another subfolder and not inside a .zip file!</li> <li>Both <code>Track Textures</code> and <code>Replace Textures</code> core options have to be enabled.</li> <li><code>Internal GPU Resolution</code> core option should be set to anything higher than '1x (Native)' and <code>Supersampling (Downsample to Native Resolution)</code> core option should be disabled, or you probably won't notice any difference at such low resolution.</li> <li>Custom textures may not be applied directly when loading a save state, in this case you may have to trigger a scene change ingame (leaving or entering a new room for example) to force the textures to \"refresh\".</li> </ul>"},{"location":"library/beetle_psx_hw/#saves","title":"Saves","text":"<p>For game savedata storage, the PSX console used memory cards. The PSX console had two slots for memory cards.</p> <p>In this doc, the first memory card slot will be referred to as 'Memcard slot 0' and the second slot will be referred to as 'Memcard slot 1'.</p> <p>For memory card functionality and usage, the Beetle PSX HW core will either use the Libretro savedata format or the Mednafen savedata format.</p> <p> Libretro savedata format Mednafen savedata format gamename.srm gamename.slot#.mcr <p></p> <p>By default, the Beetle PSX HW core will use Libretro's savedata format for Memcard slot 0 and Mednafen's savedata format for Memcard slot 1.</p> <p> Memcard slot 0 Memcard slot 1 gamename.srm gamename.1.mcr <p></p> <p>Attention</p> <p>Memory card behavior can be controlled with the following core options (Memcard 0 method, Enable memory card 1, Shared memcards).</p> <p>By default, the filenames of the Memcard savedata will match the loaded cue or m3u or pbp filename, like this:</p> <ul> <li> <p>Loaded content: Breath of Fire III (USA).cue</p> </li> <li> <p>Memcard slot 0: Breath of Fire III (USA).srm</p> </li> <li> <p>Memcard slot 1: Breath of Fire III (USA).1.mcr</p> </li> </ul> <p>or</p> <ul> <li> <p>Loaded content: Final Fantasy VII (USA).m3u</p> </li> <li> <p>Memcard slot 0: Final Fantasy VII (USA).srm</p> </li> <li> <p>Memcard slot 1: Final Fantasy VII (USA).1.mcr</p> </li> </ul> <p>or</p> <ul> <li> <p>Loaded content: Wild Arms 2 (USA).pbp</p> </li> <li> <p>Memcard slot 0: `Wild Arms 2 (USA).srm</p> </li> <li> <p>Memcard slot 1: `Wild Arms 2 (USA).1.mcr</p> </li> </ul> <p>Attention</p> <p>To import your old memory cards from other emulators, you need to rename them to either the Libretro (.srm) savedata format or the Mednafen (.mcr) savedata format. The Libretro (.srm) savedata format, when used with Beetle PSX, is internally identical to the Mednafen PSX (.mcr) savedata format, and can be converted between one another via renaming.</p> <p>Warning</p> <p>Keep in mind that save states also include the state of the memory card; carelessly loading an old save state will OVEWRITE the memory card, potentially resulting in lost saved games. You can set the 'Don't overwrite SaveRAM on loading savestate' option in RetroArch's Saving settings to On to prevent this.</p>"},{"location":"library/beetle_psx_hw/#core-options","title":"Core options","text":"<p>The Beetle PSX HW core has the following options that can be tweaked from your frontend's core options menu or manually changed via core configuration files. Options are listed below in the following format:</p> <p><code>Option Name [option_key] (setting1/setting2/...)</code></p> <p>To manually change an option, search for that option's key in the core configuration file you want to edit and set it to your desired setting value, enclosed in quotations. For example, if you had set the Internal Color Depth to 32bpp and wanted to revert it to 16bpp, you would change <code>beetle_psx_hw_depth = \"32bpp\"</code> to <code>beetle_psx_hw_depth = \"16bpp(native)\"</code>. Manually editing core configuration files is typically unnecessary unless your frontend does not have a method for toggling options.</p> <p>The default setting for each option will be highlighted in bold. Settings with (Restart) means that core has to be shut down for the new setting to be applied on next launch.</p> <ul> <li> <p>Renderer (Restart) [beetle_psx_hw_renderer] (hardware/hardware_gl/hardware_vk/software)</p> <p>Chooses which video renderer will be used.</p> <p>Software is the most accurate but generally has higher performance requirements when running at internal GPU resolutions higher than 1x. The software renderer also lacks certain enhancements exclusive to the hardware renderer.</p> <p>Hardware is less accurate but may have improved performance over the software renderer at internal GPU resolutions of 2x and above on capable hardware. The hardware renderers also allow various graphical enhancements such as higher color depth, texture filtering, and PGXP. Choosing hardware will automatically select either the Vulkan or OpenGL renderer depending on the current libretro frontend video driver. If the provided frontend video driver is not Vulkan or OpenGL (3.3 or higher) then the core will fall back to the software renderer at 1x internal resolution.</p> <p>hardware_gl and hardware_vk allow the core to ignore the frontend preferred hardware context and attempt to force a specific hardware renderer. If the core is unable to do so, it will fall back to the software renderer at 1x internal resolution. The ability to force specific renderers may not be available on all platforms.</p> <p>The hardware renderers have known issues -- check the compatibility section below or the core's issue tracker for more details.</p> </li> <li> <p>Software Framebuffer [beetle_psx_hw_renderer_software_fb] (enabled/disabled)</p> <p>OpenGL/Vulkan Only</p> <p>Allows accurate emulation of framebuffer readback effects (e.g. motion blur, FF7 battle swirl, etc.) when using the hardware renderer. If disabled, certain operations are omitted or rendered on the GPU, which can improve performance but may cause graphical errors or cause stuttering.</p> <p>Leave enabled if unsure.</p> </li> <li> <p>Internal GPU Resolution [beetle_psx_hw_internal_resolution] (1x(native)/2x/4x/8x/16x)</p> <p>Selects internal resolution multiplier.</p> <p>Resolutions higher than 1x(native) improve the fidelity of 3D models at the expense of increased performance requirements. 2D elements are generally unaffected by this setting from the core's perspective.</p> Internal GPU Resolution - 1x <p></p> Internal GPU Resolution - 2x <p></p> </li> <li> <p>Internal Color Depth [beetle_psx_hw_depth] (16bpp(native)/32bpp)</p> <p>OpenGL Only</p> <p>The PSX has a limited color depth of 16 bits per pixel (bpp). This leads to banding effects (uneven color gradients) which are smoothed out by original hardware through the use of a dithering pattern. The '16bpp(native)' setting emulates the original 16bpp color depth. Selecting '32 bpp' increases the color depth such that smoother gradients can be achieved without dithering, allowing for a cleaner undithered output.</p> <p>Note the visible horizontal bands on an undithered 16bpp image compared to the same undithered image at 32bpp:</p> Undithered 16bpp <p></p> Undithered 32bpp <p></p> <p>This option should be toggled in conjunction with the Dithering Pattern option.</p> <p>The software renderer is locked to 16bpp while the Vulkan renderer will automatically set render at 16bpp if dithering is enabled and 32bpp if dithering is disabled.</p> </li> <li> <p>Dithering Pattern [beetle_psx_hw_dither_mode] (1x(native)/internal resolution/disabled)</p> <p>Select dithering pattern.</p> <p>Dithering is used by the original PSX hardware to combat the color banding visible due to 16bpp color depth. This option is less necessary and can be disabled if the Internal Color Depth option is set to '32bpp'.</p> <p>'1x(native)' emulates original hardware but can look grainy at higher internal resolutions.</p> <p>'internal resolution' reduces graininess by allowing for finer dithering at higher Internal GPU Resolutions, but has limited effectiveness in combating color banding if the Internal GPU Resolution is set too high. (Note in the examples below that the 'internal resolution' option is less grainy but has more visible banding than '1x(native)' at 4x Internal GPU Resolution)</p> <p>'disabled' is useful to pair with '32bpp' Internal Color Depth where banding is far less visible or for users who otherwise wish to turn off dithering regardless of color banding at 16bpp.</p> Dithering Pattern - 1x Native (16bpp 4x IR) <p></p> Dithering Pattern - Internal Resolution (16bpp 4x IR) <p></p> Dithering Pattern - Disabled (16bpp 4x IR) <p></p> </li> <li> <p>Texture Filtering [beetle_psx_hw_filter] (nearest/SABR/xBR/bilinear/3-point/JINC2)</p> <p>OpenGL/Vulkan Only</p> <p>Choose per-texture filtering method.</p> <p>Texture filters can modify or enhance the appearance of 3D polygon textures and 2D elements. 'Nearest' emulates original hardware. 'Bilinear' and '3-Point' are smoothing filters, which reduce pixelation via blurring. 'SABR', 'xBR' and 'JINC2' are upscaling filters, which improve texture fidelity/sharpness at the expense of increased performance requirements.</p> nearest <p></p> SABR <p></p> xBR <p></p> bilinear <p></p> 3-point <p></p> JINC2 <p></p> </li> <li> <p>Adaptive Smoothing [beetle_psx_hw_adaptive_smoothing] (disabled/enabled)</p> <p>Vulkan Only</p> <p>Enable smoothing of 2D artwork and UI elements without blurring 3D rendered objects.</p> Adaptive smoothing - Off <p></p> Adaptive smoothing - On <p></p> </li> <li> <p>Supersampling (Downsample to Native Resolution) [beetle_psx_hw_super_sampling] (disabled/enabled)</p> <p>Vulkan Only</p> <p>When enabled, renders content at the specified Internal GPU Resolution then downsamples the resulting image to native 240p before shaders and resizing are applied by the frontend. Allows games to be displayed at native (low) resolution but with clean anti-aliased 3D objects. Produces best results when applied to titles that mix 2D and 3D elements such as 3D characters on pre-rendered backgrounds. This option is not to be confused with implicit supersampling provided by rendering at a higher Internal GPU Resolution multiplier then downsampling to the frontend's window scale.</p> Supersampling from 1x Internal Resolution with CRT Royale Shader <p></p> Supersampling from 8x Internal Resolution with CRT Royale Shader <p></p> </li> <li> <p>Multi-Sampled Anti Aliasing [beetle_psx_hw_msaa] (1x/2x/4x/8x/16x)</p> <p>Vulkan Only</p> <p>Apply multi-sample anti-aliasing (MSAA) to rendered content. This is a type of spatial anti-aliasing similar to supersampling, but of somewhat lower quality and with (correspondingly) lower performance requirements. Improves the appearance of 3D objects. MSAA may be clamped internally at a lower value than what it is set at when running at higher Internal GPU Resolutions.</p> </li> <li> <p>MDEC YUV Chroma Filter [beetle_psx_hw_mdec_yuv] (disabled/enabled)</p> <p>Vulkan Only</p> <p>Improves the quality of FMV playblack by smoothing the chroma channel when converting YcBcR to RGB. This reduces macroblocking artefacts (squares/jagged edges) as shown below:</p> MDEC YUV Chroma Filter On/Off Comparison <p></p> </li> <li> <p>Track Textures [beetle_psx_hw_track_textures] (disabled/enabled)</p> <p>Vulkan Only</p> <p>Tracks texture to enable texture dumping/replacing.</p> </li> <li> <p>Dump Textures [beetle_psx_hw_dump_textures] (disabled/enabled)</p> <p>Vulkan Only</p> <p>Dumps textures when they are accessed. To dump textures properly, it is necessary to create a folder named -texture-dump/ in the same folder as the game disk. <li> <p>Replace Textures [beetle_psx_hw_replace_textures] (disabled/enabled)</p> <p>Vulkan Only</p> <p>Replaces textures with files given in the folder -texture-replacements/ with the same name as dumped textures.  <p>The replacement texture has to be a PNG file with bit depth of a maximum of 8 and the resolution must be a multiple of 2 based on the original texture.</p> <li> <p>Wireframe Mode [beetle_psx_hw_wireframe] (disabled/enabled)</p> <p>OpenGL Only</p> <p>Renders 3D polygons models in outline form without textures or shading.</p> <p>For debug use only. Leave off for normal usage.</p> Wireframe mode - On <p></p> </li> <li> <p>Display Full VRAM [beetle_psx_hw_display_vram] (disabled/enabled)</p> <p>OpenGL/Vulkan Only</p> <p>Visualizes full contents of the emulated PSX VRAM.</p> <p>For debug use only. Leave off for normal usage.</p> Display full VRAM - On <p></p> </li> <li> <p>PGXP Operation Mode [beetle_psx_hw_pgxp_mode] (disabled/memory only/memory + CPU)</p> <p>Enabling the Parallel/Precision Geometry Transform Pipeline (PGXP) allows polygons to be rendered with subpixel precision, eliminating or otherwise diminishing the polygon jitter/wobble visible on original PSX hardware. This distortion results from original hardware using fixed point mathematics when rendering 3D models, thus rounding polygon vertices to the nearest integer pixel.</p> <p>'disabled' emulates original hardware behavior.</p> <p>'memory only' mode enables subpixel precision at the cost of increased performance requirements with only minor compatibility issues. 'memory + CPU' mode can further reduce jitter but is highly demanding and is known to cause geometry errors. 'memory only' is recommended for best compatibility.</p> <p>https://www.youtube.com/watch?v=EYCpd_1lPUc</p> </li> <li> <p>PGXP Vertex Cache [beetle_psx_hw_pgxp_vertex] (disabled/enabled)</p> <p>OpenGL/Vulkan Only</p> <p>Allows PGXP-enhanced polygon vertex coordinates to be cached when PGXP Operation Mode is also enabled. This option improves performance by allowing subpixel-accurate values to be used across successive polygon draws instead of rebasing from native PSX data each time. Allows for better object alignment and may reduce visible seams, but false positives when querying the cache produces graphical glitches in most games. Recommended to leave disabled.</p> </li> <li> <p>PGXP Perspective Correct Texturing [beetle_psx_hw_pgxp_texture] (disabled/enabled)</p> <p>OpenGL/Vulkan Only</p> <p>Allows for perspective correct texturing when PGXP Operation Mode is also enabled. Original PSX hardware renders 3D objects with affine texture mapping where texture coordinates are interpolated between polygon vertices in 2D screen space with no consideration of object depth. This causes significant position-dependent distortion and/or blending of textures such as warped lines across floors and walls. PGXP Perspective Correct Texturing accounts correctly for vertex positions in 3D space thereby eliminating this texture distortion at the expense of increased performance requirements.</p> PGXP Texturing - Off <p></p> PGXP Texturing - On <p></p> </li> <li> <p>Display Internal FPS [beetle_psx_hw_display_internal_fps] (disabled/enabled)</p> <p>Displays the frame rate that the emulated PSX is drawing at. Requires onscreen notifications to be enabled in the libretro frontend. Reported values may be inaccurate.</p> Display internal FPS - On <p></p> </li> <li> <p>Line-to-Quad Hack [beetle_psx_hw_line_render] (default/aggressive/disabled)</p> <p>Certain games employ a special technique for drawing horizontal lines, which involves stretching single-pixel-high triangles across the screen in a manner that causes the PSX hardware to rasterise them as a row of pixels. Examples include Doom/Hexen, and the water effects in Soul Blade. When running such games with an Internal GPU Resolution higher than native, these triangles no longer resolve as a line, causing gaps to appear in the output image.</p> <p>Setting 'Line-to-Quad Hack' to 'Default' solves this issue by detecting small triangles and converting them as required.</p> <p>The 'Aggressive' option will likely introduce visual glitches due to false positives, but is needed for correct rendering of some 'difficult' titles (e.g. Dark Forces, Duke Nukem).</p> </li> <li> <p>Frame Duping (Speedup) [beetle_psx_hw_frame_duping] (disabled/enabled)     Software Renderer and Vulkan only</p> <p>When enabled, provides a small performance increase by redrawing/reusing the last rendered frame (instead of presenting a new one) if the content of the current frame is unchanged based on the internal fps heuristic. May cause inaccurate behavior or lost animation frames, so it is not recommended to use this unless necessary.</p> </li> <li> <p>CPU Dynarec [beetle_psx_hw_cpu_dynarec] (disabled/execute/execute_once/run_interpreter)</p> <p>Dynamically recompile CPU instructions to native instructions. Much faster than interpreter, but CPU timing is less accurate, and may have bugs.</p> </li> <li> <p>Dynarec Code Invalidation [beetle_psx_hw_dynarec_invalidate] (full/dma)</p> <p>Some games require Full invalidation, some require DMA Only. This option has no effect when CPU Dynarec is not enabled.</p> </li> <li> <p>Dynarec DMA/GPU Event Cycles [beetle_psx_hw_dynarec_eventcycles] (128/256/384/512/640/768/896/1024)</p> <p>Max cycles run by CPU before a GPU or DMA Update is checked, higher number will be faster, has much less impact on beetle interpreter than dynarec. Leave at 128 for default Beetle interpreter behavior when CPU Dynarec is not enabled.</p> </li> <li> <p>CPU Frequency Scaling (Overclock) [beetle_psx_hw_cpu_freq_scale] (50% to 750% in increments of 10%. Default: 100%(native))</p> <p>Enable overclocking (or underclocking) of the emulated PSX's CPU. The default frequency of the MIPS R3000A-compatible 32-bit RISC CPU is 33.8688 MHz; running at higher frequencies can eliminate slowdown and improve frame rates in certain games at the expense of increased performance requirements.</p> <p>Note that some games have an internal frame rate limiter and may not benefit from overclocking. It is generally not recommended to adjust this setting as it causes many games or portions of them to run at unintended speeds. This can lead to audio and video desynchronization, among other issues.</p> <p>Leave at default for most games.</p> </li> <li> <p>GTE Overclock [beetle_psx_hw_gte_overclock] (disabled/enabled)</p> <p>When enabled, reduces the latency of operations involving the emulated PSX's Geometry Transform Engine (CPU coprocessor used for calculations related to 3D projection - i.e. all 3D graphics) to 1 cycle per instruction and additionally eliminates all memory access or cache fetch latency. For games that make heavy use of the GTE, this can greatly improve frame rate (and frame time) stability at the expense of increased performance requirements.</p> <p>Currently unstable -- leave off if unsure.</p> </li> <li> <p>GPU Rasterizer Overclock [beetle_psx_hw_gpu_overclock] (1x(native)/2x/4x/8x/16x/32x)</p> <p>Enables overclocking of the 2D rasterizer contained within the emulated PSX's GPU. Does not improve 3D rendering, and in general has little effect.</p> </li> <li> <p>Skip BIOS [beetle_psx_hw_skip_bios] (disabled/enabled)</p> <p>When enabled, skips the PSX BIOS animation normally displayed with starting content.</p> <p>Enabling this option will cause compatibility issues with a small minority of games (Saga Frontier, PAL copy protected games, etc).</p> Skip BIOS - Off <p></p> </li> <li> <p>Core-Reported FPS Timing [beetle_psx_hw_core_timing_fps] (force_progressive/force_interlaced/auto_toggle)</p> <p>Sets FPS timing that the core will report to the frontend. Automatic toggling will allow the core to switch between reporting progressive and interlaced rates, but may cause frontend video/audio driver reinits. Progressive timings are 59.826 for NTSC content and 49.761 for PAL content, and interlaced timings are 59.940 for NTSC content and 50.000 for PAL content.</p> </li> <li> <p>Core Aspect Ratio [beetle_psx_hw_aspect_ratio] (corrected/uncorrected/4:3)</p> <p>Set core provided aspect ratio. This setting is ignored when the Widescreen Mode Hack or Display Full VRAM options are enabled. \"4:3\" forces the core aspect ratio to 4:3 without taking horizontal overscan cropping or visible scanlines into account. The \"4:3\" setting should not be used and is only provided as a legacy feature for users desiring old incorrect behavior from the core.</p> </li> <li> <p>Widescreen Mode Hack [beetle_psx_hw_widescreen_hack] (disabled/enabled)</p> <p>Forces content to be rendered with an aspect ratio of 16:9. Produces best results with fully 3D games. Can cause graphical glitches or alignment/stretching issues in games that mix 3D and 2D elements. Leave off for most games.</p> Widescreen mode hack - Off <p></p> Widescreen mode hack - On <p></p> </li> <li> <p>Crop Horizontal Overscan [beetle_psx_hw_crop_overscan] (enabled/disabled)</p> <p>By default, Beetle PSX includes horizontal padding (black bars or 'pillarboxes' on either side of the screen) to emulate the same black bars generated in analog video output by real PSX hardware. This horizontal padding can contain garbage pixels that are generated when the game's width mode is smaller than the display area width in the emulated GPU registers. Enabling 'Crop Horizontal Overscan' will remove this potentially glitchy horizontal overscan region.</p> <p>Not all games will benefit from enabling this setting as shown in the examples below.</p> Crop Overscan - Off (Game with Garbage Pixels) <p></p> Crop Overscan - On (Game with Garbage Pixels) <p></p> Crop Overscan - Off (Game with No Issues) <p></p> Crop Overscan - On (Game with No Issues) <p></p> <p>This option does not affect vertical overscan. Vertical overscan can be cropped using the Initial/Last Scanline core options.</p> </li> <li> <p>Additional Cropping [beetle_psx_hw_image_crop] (disabled/1px/2px/3px/4px/5px/6px/7px/8px)</p> <p>Software Renderer Only</p> <p>When 'Crop Horizontal Overscan' is enabled, this option further reduces the width of the cropped image by the specified number of pixels.</p> <p>Note: This can have unintended consequences. While the absolute width is reduced, the resultant video is still scaled to the currently set aspect ratio. Enabling 'Additional Cropping' may therefore cause horizontal stretching.</p> </li> <li> <p>Offset Cropped Image [beetle_psx_hw_image_offset] (disabled/-4px/-3px/-2px/-1px/+1px/+2px/+3px/+4px)</p> <p>Software Renderer Only</p> <p>When 'Crop Horizontal Overscan' is enabled, allows the resultant cropped image to be offset horizontally to the right (positive) or left (negative) by the specified number of pixels. May be used to correct alignment issues.</p> </li> <li> <p>Horizontal Image Offset (GPU Cycles) [beetle_psx_hw_image_offset_cycles] (-24 to +24 in increments of 1. Default: 0)</p> <p>OpenGL/Vulkan Only</p> <p>Horizontally offsets the outputted image by the specified number of GPU timing cycles. Currently only for the hardware renderers and functions like 'Offset Cropped Image', but at a finer granularity and does not require 'Crop Horizontal Overscan' to be enabled for this option to have an effect.</p> </li> <li> <p>Initial Scanline - NTSC [beetle_psx_hw_initial_scanline] (0 to 40 in increments of 1. Default: 0)</p> <p>Selects the first displayed scanline when running NTSC content. Setting a value greater than 0 will reduce the height of output images by cropping pixels from the topmost edge. May be used to counteract letterboxing built in to some games.</p> </li> <li> <p>Last Scanline - NTSC [beetle_psx_hw_last_scanline] (210 to 239 in increments of 1. Default: 239)</p> <p>Selects the last displayed scanline when running NTSC content. Setting a value less than 239 will reduce the height of output images by cropping pixels from the bottommost edge. May be used to counteract letterboxing built in to some games.</p> </li> <li> <p>Initial Scanline - PAL [beetle_psx_hw_initial_scanline_pal] (0 to 40 in increments of 1. Default: 0)</p> <p>Selects the first displayed scanline when running PAL content. Setting a value greater than 0 will reduce the height of output images by cropping pixels from the topmost edge. May be used to counteract letterboxing built in to some games.</p> </li> <li> <p>Last Scanline - PAL [beetle_psx_hw_last_scanline_pal] (230 to 287 in increments of 1. Default: 287)</p> <p>Selects the last displayed scanline when running PAL content. Setting a value less than 287 will reduce the height of output images by cropping pixels from the bottommost edge. May be used to counteract letterboxing built in to some games.</p> </li> <li> <p>CD Access Method (Restart) [beetle_psx_hw_cd_access_method] (sync/async/precache)</p> <p>Selects method used to read data from content disc images.</p> <p>'sync' emulates original hardware.</p> <p>'async' can alleviate stuttering on devices with slow storage.</p> <p>'precache' loads the entire disc image into memory when starting content, incurring a small startup delay. This can improve in-game loading times and eliminate stutters due to emulated CD access, but may cause issues on systems with low memory.</p> </li> <li> <p>CD Loading Speed [beetle_psx_hw_cd_fastload] (2x(native)/4x/6x/8x/10x/12x/14x)</p> <p>Selects disk access speed multiplier.</p> <p>This speedhack can greatly reduce loading times at speeds higher than native but is known to introduce texture corruption errors, timing glitches, or loading screen softlocks in many titles. Some games will not work at all if loading speed is not set to native (e.g. Castlevania: Symphony of the Night).</p> <p>Reduce multiplier value if experiencing loading issues, freezes, etc.</p> </li> <li> <p>Memory Card 0 Method (Restart) [beetle_psx_hw_use_mednafen_memcard0_method] (libretro/mednafen)</p> <p>Choose the savedata format used for Memory Card 0. See the Saves section above for an explanation regarding the libretro and mednafen formats. libretro is recommended, but mednafen may be used for compatibility with the standalone version of Mednafen. The libretro (.srm) and Mednafen (.mcr) formats are internally identical when used with Beetle PSX.</p> <p>Note: This option must be set to 'mednafen' if the Shared Memcards option is enabled.</p> </li> <li> <p>Enable Memory Card 1 (Restart) [beetle_psx_hw_enable_memcard1] (enabled/disabled)</p> <p>Selects whether to emulate a second memory card in Slot 1. When disabled, games can only access the memory card in Slot 0.</p> <p>Note: Some games require this option to be disabled for correct operation (e.g. Codename Tenka).</p> </li> <li> <p>Shared Memory Cards (Restart) [beetle_psx_hw_shared_memory_cards] (disabled/enabled)</p> <p>When enabled, games will save and load using the same memory card files. Note: The \"Memcard 0 Method\" option must be set to 'mednafen' for this option to function properly.</p> <p>When disabled, separate memory card files will be generated for each title.</p> <p>This option is useful for games in series such as Suikoden or Arc the Lad that check for save data from previous titles.</p> </li> <p> Memcard slot 0 Memcard slot 1 mednafen_psx_libretro_shared.0.mcr mednafen_psx_libretro_shared.1.mcr <p></p> <ul> <li> <p>Analog Self-Calibration [beetle_psx_hw_analog_calibration] (disabled/enabled)</p> <p>When enabled, monitors the max values reached by the input, using it as a calibration heuristic which then scales the analog coordinates sent to the emulator accordingly. For best results, rotate the sticks at max amplitude for the algorithm to get a good estimate of the scaling factor, otherwise it will adjust while playing.</p> <p>While modern analog sticks have circular logical ranges, older analog sticks such as those on the DualShock have logical ranges closer to squares and can report larger values at the intercardinal directions than modern analog sticks can. Games that expect these larger values will have issues controlling with modern analog sticks, which this option can solve by scaling modern analog stick values up.</p> </li> <li> <p>Enable DualShock Analog Mode Toggle [beetle_psx_hw_analog_toggle] (disabled/enabled)</p> <p>When the input device type is set to DualShock, this option determines whether or not the Analog Button on that device can be toggled.</p> <p>When this option is disabled, the DualShock input device will be locked in Analog Mode where the analog sticks are on.</p> <p>When this option is enabled, the DualShock input device can be toggled between Digital Mode (analog sticks off) and Analog Mode (analog sticks on) much like real hardware by pressing and holding START+SELECT+L1+L2+R1+R2 for one second in lieu of a dedicated Analog Button.</p> <p>Note: Some games may not respond to input when the DualShock is in Analog Mode. Either enable Analog Button Toggle and toggle the DualShock to Digital Mode or change your input device type to PlayStation Controller.</p> </li> <li> <p>Port 1: Multitap Enable [beetle_psx_hw_enable_multitap_port1] (disabled/enabled)</p> <p>Enables/Disables multitap functionality on port 1.</p> </li> <li> <p>Port 2: Multitap Enable [beetle_psx_hw_enable_multitap_port2] (disabled/enabled)</p> <p>Enables/Disables multitap functionality on port 2.</p> </li> <li> <p>Gun Input Mode [beetle_psx_hw_gun_input_mode] (lightgun/touchscreen)</p> <p>When device type is set to 'Guncon / G-Con 45' or 'Justifier', specify whether to use a mouse-controlled 'Light Gun' or 'Touchscreen' input.</p> </li> <li> <p>Gun Cursor [beetle_psx_hw_gun_cursor] (cross/dot/off)</p> <p>Selects the gun cursor to be displayed on screen while using the the 'Guncon / G-Con 45' and 'Justifier' input device types. When disabled, cross hairs are always hidden.</p> Gun Cursor - Cross <p></p> Gun Cursor - Dot <p></p> Gun Cursor - Off <p></p> </li> <li> <p>Mouse Sensitivity [beetle_psx_hw_mouse_sensitivity] (5% to 200% in increments of 5%. Default: 100%)</p> <p>Configure the response of the 'Mouse' input device type.</p> </li> <li> <p>NegCon Twist Response [beetle_psx_hw_negcon_response] (linear/quadratic/cubic)</p> <p>Specifies the analog response when using a RetroPad left analog stick to simulate the 'twist' action of emulated neGcon Controllers.</p> <p>'linear': Analog stick displacement is mapped linearly to negCon rotation angle.</p> <p>'quadratic': Analog stick displacement is mapped quadratically to negCon rotation angle. This allows for greater precision when making small movements with the analog stick.</p> <p>'cubic': Analog stick displacement is mapped cubically to negCon rotation angle. This allows for even greater precision when making small movements with the analog stick, but 'exaggerates' larger movements.</p> <p>Attention</p> <p>A linear response is not recommended when using standard gamepad devices. The negCon 'twist' mechanism is substantially different from conventional analog sticks; linear mapping over-amplifies small displacements of the stick, impairing fine control. A linear response is only appropriate when using racing wheel peripherals.</p> <p>In most cases, the 'quadratic' option should be selected. This provides effective compensation for the physical differences between real/emulated hardware and is the closest approximation of real hardware, enabling smooth/precise analog input.</p> </li> <li> <p>NegCon Twist Deadzone [beetle_psx_hw_negcon_deadzone] (0%/5%/10%/15%/20%/25%/30%)</p> <p>Sets the deadzone of the RetroPad left analog stick when simulating the 'twist' action of emulated neGcon Controllers. Used to eliminate drift/unwanted input.</p> <p>Attention</p> <p>Most (all?) negCon compatible titles provide in-game options for setting a 'twist' deadzone value. To avoid loss of precision, the in-game deadzone should always be set to zero. Any analog stick drift should instead be accounted for by configuring the 'NegCon Twist Deadzone' core option. This is particularly important when 'NegCon Twist Response' is set to 'quadratic' or 'cubic'.</p> <p>Xbox gamepads typically require a deadzone of 15-20%. Many Android-compatible bluetooth gamepads have an internal 'hardware' deadzone, allowing the deadzone value here to be set to 0%.</p> <p>For convenience, it is recommended to make use of the 'Options \u2192 Analog Setting 1P' menu of Gran Turismo when calibrating the 'NegCon Twist Deadzone'. This provides a clear and precise representation of 'real' controller input values.</p> </li> </ul>"},{"location":"library/beetle_psx_hw/#user-1-8-device-types","title":"User 1 - 8 device types","text":"<p>The Beetle PSX HW core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p> <ul> <li>None - Input disabled.</li> <li>PlayStation Controller - Joypad - PlayStation Controller (SCPH-1080)</li> <li>DualShock - Joypad - DualShock (SCPH-1200)</li> <li>Analog Controller - Joypad - PlayStation Dual Analog Controller(SCPH-1180)</li> <li>Analog Joystick - Joypad - PlayStation Analog Joystick (SCPH-1110)</li> <li>Guncon / G-Con 45 - Lightgun - Namco Gun Controller (SLEH-00007)</li> <li>Justifier - Lightgun -  Konami Justifier lightgun peripheral (SLEH-00005, SLUH-00017)</li> <li>Mouse - Mouse - PlayStation Mouse (SCPH-1090, SCPH-1030)</li> <li>neGcon - Joypad - Namco third party controller</li> </ul>"},{"location":"library/beetle_psx_hw/#rumble-support","title":"Rumble support","text":"<p>Rumble only works in the Beetle PSX HW core when</p> <ul> <li>The content being ran has rumble support.</li> <li>The frontend being used has rumble support.</li> <li>The joypad device being used has rumble support.</li> <li>The corresponding user's device type is set to DualShock</li> </ul>"},{"location":"library/beetle_psx_hw/#multitap-support","title":"Multitap support","text":"<p>'Port 1: Multitap enable' and 'Port 2: Multitap enable' core options.</p>"},{"location":"library/beetle_psx_hw/#joypad","title":"Joypad","text":"User 1 - 8 input descriptors RetroPad Inputs PlayStation Controller Inputs DualShock Inputs Analog Controller Inputs Analog Joystick Inputs neGcon Inputs Cross Analog button I Square Analog button II Select Start Start D-Pad Up D-Pad Up D-Pad Down D-Pad Down D-Pad Left D-Pad Left D-Pad Right D-Pad Right Circle A Triangle B L1 Left shoulder button (analog) R1 Right shoulder button (digital) L2 Analog button II R2 Analog button I L3 R3 Left Analog X  X Left Joystick X Twist Left Analog Y  Y Left Joystick Y Right Analog X  X Right Joystick X Right Analog Y  Y Right Joystick Y"},{"location":"library/beetle_psx_hw/#mouse","title":"Mouse","text":"RetroMouse Inputs Mouse Inputs  Mouse Cursor Mouse Cursor  Mouse 1 Mouse Left Button  Mouse 2 Mouse Right Button"},{"location":"library/beetle_psx_hw/#lightgun","title":"Lightgun","text":"RetroLightgun Inputs Guncon / G-Con 45 Inputs Justifier Inputs  Gun Crosshair Guncon / G-Con 45 Crosshair Justifier Crosshair Gun Trigger Guncon / G-Con 45 Trigger Justifier Trigger Gun Reload Guncon / G-Con 45 Reload Justifier Reload Gun Aux A Guncon / G-Con 45 A Justifier Aux Gun Aux B Guncon / G-Con 45 B Gun Start Justifier Start"},{"location":"library/beetle_psx_hw/#compatibility","title":"Compatibility","text":"<p>Expect bugs with hardware renderer enhancements.</p> <p>When using the run-ahead latency reduction feature, the \"second instance\" setting will break the hardware renderer.</p> <p>Hardware renderer currently has a number of issues with interlacing shaders and outputting on CRTs. Use the software renderer for the time being.</p> <p>A list of known emulation bugs when using the software renderer can be found here https://forum.fobby.net/index.php?t=msg&amp;th=1114&amp;start=0&amp;</p> <p>Issue tracker for the hardware renderer can be found here https://github.com/libretro/beetle-psx-libretro/issues</p>"},{"location":"library/beetle_psx_hw/#external-links","title":"External Links","text":"<ul> <li>Official Mednafen Website</li> <li>Official Mednafen Downloads</li> <li>Beetle PSX HW Libretro Core info file</li> <li>Beetle PSX HW Libretro Github Repository</li> <li>Report Beetle PSX HW Core Issues Here</li> <li>Gameplay Videos</li> </ul>"},{"location":"library/beetle_psx_hw/#libretro-psx-cores","title":"Libretro PSX cores","text":"<ul> <li>PlayStation (Beetle PSX)</li> <li>PlayStation (PCSX ReARMed)</li> </ul>"},{"location":"library/beetle_saturn/","title":"Sega - Saturn (Beetle Saturn)","text":""},{"location":"library/beetle_saturn/#background","title":"Background","text":"<p>This is fork of Mednafen Saturn. It has been ported to the libretro API. It currently runs on Linux, OSX and Windows.</p> <p>The Beetle Saturn core has been authored by</p> <ul> <li>Mednafen Team</li> </ul> <p>The Beetle Saturn core is licensed under</p> <ul> <li>GPLv2</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/beetle_saturn/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the Beetle Saturn core have the following file extensions:</p> <ul> <li>.cue</li> <li>.toc</li> <li>.m3u</li> <li>.ccd</li> <li>.chd</li> </ul> <p>RetroArch database(s) that are associated with the Beetle Saturn core:</p> <ul> <li>Sega - Saturn</li> </ul>"},{"location":"library/beetle_saturn/#bios","title":"BIOS","text":"<p>Required or optional firmware files go in the frontend's system directory.</p> <p>Attention</p> <p>The King of Fighters '95 and Ultraman: Hikari no Kyojin Densetsu ROM Cartridges can be manually selected with the 'Cartridge' core option.</p> Filename Description md5sum sega_101.bin Saturn JP BIOS - Required for JP games 85ec9ca47d8f6807718151cbcca8b964 mpr-17933.bin Saturn US.mdEU BIOS - Required for US/EU games 3240872c70984b6cbfda1586cab68dbe mpr-18811-mx.ic1 The King of Fighters '95 ROM Cartridge - Required for this game 255113ba943c92a54facd25a10fd780c mpr-19367-mx.ic1 Ultraman: Hikari no Kyojin Densetsu ROM Cartridge - Required for this game 1cd19988d1d72a3e7caa0b73234c96b4"},{"location":"library/beetle_saturn/#features","title":"Features","text":"<p>Frontend-level settings or features that the Beetle Saturn core respects.</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 Memory Monitoring (achievements) \u2714 RetroArch Cheats - Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2714 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/beetle_saturn/#directories","title":"Directories","text":"<p>The Beetle Saturn core's library name is 'Beetle Saturn'</p> <p>The Beetle Saturn core saves/loads to/from these directories.</p> <p>Frontend's Save directory</p> File Description *.bcr External cartridge backup save *.bkr Internal save *.smpc SMPC's emulated Real-Time Clock save <p>Frontend's State directory</p> File Description *.state# State"},{"location":"library/beetle_saturn/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The Beetle Saturn core's core provided FPS is 59.83 for NTSC games and 49.92 for PAL games</li> <li>The Beetle Saturn core's core provided sample rate is 44100 Hz</li> <li>The Beetle Saturn core's base width is 320</li> <li>The Beetle Saturn core's base height is 240</li> <li>The Beetle Saturn core's max width is 704</li> <li>The Beetle Saturn core's max height is 576</li> <li>The Beetle Saturn core's core provided aspect ratio is 4/3</li> </ul>"},{"location":"library/beetle_saturn/#loading-saturn-sega-content","title":"Loading Saturn Sega content","text":"<p>Beetle Saturn needs a cue-sheet that points to an image file. A cue sheet, or cue file, is a metadata file which describes how the tracks of a CD or DVD are laid out.</p> <p>If you have e.g. <code>foo.bin</code>, you should create a text file and save it as <code>foo.cue</code>. If you're playing a single-track Saturn game, then the cue file contents should look like this:</p> <p><code>foobin.cue</code> <pre><code> FILE \"foo.bin\" BINARY\n  TRACK 01 MODE1/2352\n   INDEX 01 00:00:00\n</code></pre></p> <p>After that, you can load the <code>foo.cue</code> file in RetroArch with the Beetle Saturn core.</p> <p>Attention</p> <p>Certain Saturn games are multi-track, so their .cue files might be more complicated.</p>"},{"location":"library/beetle_saturn/#multiple-disk-games","title":"Multiple-disk games","text":"<p>If foo is a multiple-disk game, you should have .cue files for each one, e.g. <code>foo (Disc 1).cue</code>, <code>foo (Disc 2).cue</code>, <code>foo (Disc 3).cue</code>.</p> <p>To take advantage of Beetle Saturn's Disk Control feature for disk swapping, an index file (a m3u file) should be made.</p> <p>Create a text file and save it as <code>foo.m3u</code>. Then enter your game's .cue files on it. The m3u file contents should look something like this:</p> <p><code>foo.m3u</code> <pre><code>foo (Disc 1).cue\nfoo (Disc 2).cue\nfoo (Disc 3).cue\n</code></pre></p>"},{"location":"library/beetle_saturn/#swapping-disks","title":"Swapping disks","text":"<p>Swapping disks follows this procedure</p> <ol> <li> <p>Open tray (Disk Cycle Tray Status)</p> </li> <li> <p>Change the Disk Index to the disk you want to swap to.</p> </li> <li> <p>Close tray (Disk Cycle Tray Status)</p> </li> <li> <p>Return to the game and wait a few seconds to let it take effect</p> </li> </ol> <p>After that, you can load the <code>foo.m3u</code> file in RetroArch with the Beetle Saturn core.</p>"},{"location":"library/beetle_saturn/#core-options","title":"Core options","text":"<p>The Beetle Saturn core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded.</p> <p>Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch.</p> <ul> <li> <p>System Region [beetle_saturn_region] (Auto Detect|Japan|North America|Europe|South Korea|Asia (NTSC)|Asia (PAL)|Brazil|Latin America)</p> <p>Choose which region the system is from.</p> </li> <li> <p>Cartridge [beetle_saturn_cart] (Auto Detect|None|Backup Memory|Extended RAM (1MB)|Extended RAM (4MB)|The King of Fighters '95|Ultraman: Hikari no Kyojin Densetsu)</p> <p>A list of games that require a cartridge can be found here.</p> </li> <li> <p>6Player Adaptor on Port 1 [beetle_saturn_multitap_port1] (disabled|enabled)</p> <p>Enable multitap on Saturn port 1.</p> </li> <li> <p>6Player Adaptor on Port 2 [beetle_saturn_multitap_port2] (disabled|enabled)</p> <p>Enable multitap on Saturn port 2.</p> </li> <li> <p>Analog Stick Deadzone [beetle_saturn_analog_stick_deadzone] (15%|20%|25%|30%|0%|5%|10%)</p> <p>Configure the '3D Control Pad' Device Type's analog deadzone.</p> </li> <li> <p>Trigger Deadzone [beetle_saturn_trigger_deadzone] (15%|20%|25%|30%|0%|5%|10%)</p> <p>Configure the '3D Control Pad' Device Type's trigger deadzone.</p> </li> <li> <p>Mouse Sensitivity [beetle_saturn_mouse_sensitivity] (5% to 200% in increments of 5%. 100% is default)</p> <p>Configure the 'Mouse' device type's sensitivity.</p> </li> <li> <p>Gun Crosshair [beetle_saturn_virtuagun_crosshair] (Cross|Dot|Off)</p> <p>Choose the crosshair for the 'Stunner' and 'Virtua Gun' device types. Setting it to Off disables the crosshair.</p> </li> </ul> Gun - Crosshair - Cross <p></p> Gun - Crosshair - Dot <p></p> Gun - Crosshair - Off <p></p> <ul> <li> <p>CD Image Cache (restart) [beetle_saturn_cdimagecache] (disabled|enabled)</p> <p>Loads the complete image in memory at startup. Can potentially decrease loading times at the cost of increased startup time. Requires a restart in order for a change to take effect.</p> </li> <li> <p>Mid-frame Input Synchronization [beetle_saturn_midsync] (disabled|enabled)</p> <p>Mid-frame synchronization can reduce input latency, but it will increase CPU requirements.</p> </li> <li> <p>Automatically set RTC on game load [beetle_saturn_autortc] (enabled|disabled)</p> <p>Automatically set the SMPC's emulated Real-Time Clock to the host system's current time and date upon game load.</p> </li> <li> <p>BIOS language [beetle_saturn_autortc_lang] (english|german|french|spanish|italian|japanese)</p> <p>Self explanatory. Also affects language used in some games (e.g. the European release of \"Panzer Dragoon\").</p> </li> <li> <p>Horizontal Overscan Mask [beetle_saturn_horizontal_overscan] (0 to 60 in increments of 2. 0 is default)</p> <p>Self-explanatory.</p> </li> <li> <p>Initial scanline [beetle_saturn_initial_scanline] (0 to 40 in increments of 1. 0 is default)</p> <p>Adjust the first displayed scanline in NTSC mode.</p> </li> <li> <p>Last scanline [beetle_saturn_last_scanline] (210 to 239 in increments of 1. 239 is default)</p> <p>Adjust the last displayed scanline in NTSC mode.</p> </li> <li> <p>Initial scanline PAL [beetle_saturn_initial_scanline_pal] (0 to 60 in increments of 1. 16 is default)</p> <p>Adjust the first displayed scanline in NTSC mode.</p> </li> <li> <p>Last scanline PAL [beetle_saturn_last_scanline_pal] (230 to 287 in increments of 1. 271 is default)</p> <p>Adjust the last displayed scanline in PAL mode.</p> </li> <li> <p>Enable Horizontal Blend(blur) [beetle_saturn_horizontal_blend] (disabled|enabled)</p> <p>Enable horizontal blend(blur) filter. Has a more noticeable effect with the Saturn's higher horizontal resolution modes(640/704).</p> </li> </ul> Enable Horizontal Blend(blur) - Off <p></p> Enable Horizontal Blend(blur) - On <p></p>"},{"location":"library/beetle_saturn/#user-1-12-device-types","title":"User 1 - 12 device types","text":"<p>The Beetle Saturn core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p> <ul> <li>None - Input disabled.</li> <li>Control Pad - Joypad</li> <li>3D Control Pad - Analog</li> <li>Arcade Racer - Analog</li> <li>Mission Stick - Analog</li> <li>Mouse - Mouse</li> <li>Stunner - Lightgun</li> <li>Twin-Stick - Analog</li> <li>Virtua Gun - Lightgun</li> <li>Dual Mission Sticks - Analog - Panzer Dragoon Zwei only</li> </ul>"},{"location":"library/beetle_saturn/#multitap","title":"Multitap","text":"<p>Activating multitap support in compatible games can be configured by the '6Player Adaptor on Port 1' and '6Player Adaptor on Port 2' core options.</p>"},{"location":"library/beetle_saturn/#joypad","title":"Joypad","text":"RetroPad Inputs User 1 - 12 input descriptors Control Pad 3D Control Pad Arcade Racer Mission Stick Twin-Stick Dual Mission Sticks A Button A Button A Button A Button A Button A Button X Button X Button X Button X Button X Button X Button Mode Switch Mode Switch Start Button Start Button Start Button Start Button Start Button Start Button Start Button D-Pad Up D-Pad Up D-Pad Up D-Pad Down D-Pad Down D-Pad Down D-Pad Left D-Pad Left D-Pad Left D-Pad Right D-Pad Right D-Pad Right B Button B Button B Button B Button B Button B Button Y Button Y Button Y Button Y Button Y Button Y Button Z Button Z Button Z Button Z Button Z Button Left Stick Button Z Button C Button C Button C Button C Button C Button Right Stick Button C Button L Button L Button L Button Left shift paddle (Up) L Button Left Stick Trigger L Button R Button R Button R Button Right shift paddle (Down) R Button Right Stick Trigger R Button Throttle latch Throttle latch  X Analog X Analog X Analog wheel Analog Stick X Left Stick X Left Analog Stick X  Y Analog Y Analog Y Analog Stick Y Left Stick Y Left Analog Stick Y  X Analog X (Right) Right Stick X Right Analog Stick X  Y Analog Y (Right) Throttle Right Stick Y Right Analog Stick Y"},{"location":"library/beetle_saturn/#mouse","title":"Mouse","text":"RetroMouse Inputs Mouse  Mouse Cursor Mouse Cursor  Mouse 1 Mouse A  Mouse 2 Mouse B  Mouse 3 Mouse C Mouse 4 Mouse Start Mouse 5 Mouse Start"},{"location":"library/beetle_saturn/#lightgun","title":"Lightgun","text":"RetroLightgun Inputs Stunner Virtua Gun  Gun Crosshair Stunner Crosshair Virtua Gun Crosshair Gun Trigger Stunner Trigger Virtua Gun Trigger Gun Reload Stunner Reload Virtua Gun Reload Gun Start Stunner Start Virtua Gun Start"},{"location":"library/beetle_saturn/#external-links","title":"External Links","text":"<ul> <li>Official Mednafen Website</li> <li>Official Mednafen Downloads</li> <li>Libretro Beetle Saturn Core info file</li> <li>Libretro Beetle Saturn Github Repository</li> <li>Report Libretro Beetle Saturn Core Issues Here</li> </ul>"},{"location":"library/beetle_saturn/#saturn","title":"Saturn","text":"<ul> <li>Sega - Saturn (Beetle Saturn)</li> <li>Sega - Saturn/ST-V (Kronos)</li> <li>Sega - Saturn (Yabause)</li> <li>Sega - Saturn (YabaSanshiro)</li> </ul>"},{"location":"library/beetle_sgx/","title":"NEC - PC Engine SuperGrafx (Beetle SuperGrafx)","text":""},{"location":"library/beetle_sgx/#background","title":"Background","text":"<p>Standalone port of Mednafen PCE Fast to libretro.</p> <p>The Beetle SuperGrafx core has been authored by</p> <ul> <li>Mednafen Team</li> </ul> <p>The Beetle SuperGrafx core is licensed under</p> <ul> <li>GPLv2</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/beetle_sgx/#bios","title":"BIOS","text":"<p>Required or optional firmware files go in RetroArch's system directory.</p> <p>Attention</p> <p>Which PCE CD BIOS file the Beetle SuperGrafx core will use can be configured by the 'CD BIOS' core option.</p> <p>Attention</p> <p>Any CD-ROM System BIOS will work, but some of them are known to be incompatible with certain games.</p> Filename Description md5sum syscard3.pce Super CD-ROM2 System V3.xx - Required 38179df8f4ac870017db21ebcbf53114 syscard2.pce CD-ROM System V2.xx - Optional syscard1.pce CD-ROM System V1.xx - Optional gexpress.pce Game Express CD Card - Optional"},{"location":"library/beetle_sgx/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the Beetle SuperGrafx core have the following file extensions:</p> <ul> <li>.pce</li> <li>.sgx</li> <li>.cue</li> <li>.ccd</li> <li>.chd</li> </ul> <p>RetroArch database(s) that are associated with the Beetle SuperGrafx core:</p> <ul> <li>NEC - PC Engine - TurboGrafx 16</li> <li>NEC - PC Engine CD - TurboGrafx-CD</li> <li>NEC - PC Engine SuperGrafx</li> </ul>"},{"location":"library/beetle_sgx/#features","title":"Features","text":"<p>Frontend-level settings or features that the Beetle Saturn core respects.</p> Feature Supported Restart \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 Memory Monitoring (achievements) \u2714 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2714 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/beetle_sgx/#directories","title":"Directories","text":"<p>The Beetle SuperGrafx core's library name is 'Beetle SuperGrafx'</p> <p>The Beetle SuperGrafx core saves/loads to/from these directories.</p> <p>Frontend's Save directory</p> File Description *.srm Save <p>Frontend's State directory</p> File Description *.state# State"},{"location":"library/beetle_sgx/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The Beetle SuperGrafx core's core provided FPS is 59.82</li> <li>The Beetle SuperGrafx core's core provided sample rate is 44100 Hz</li> <li>The Beetle SuperGrafx core's base width is 512</li> <li>The Beetle SuperGrafx core's base height is dependent on the 'Initial scanline' and 'Last scanline' core options.</li> <li>The Beetle SuperGrafx core's max width is 512</li> <li>The Beetle SuperGrafx core's max height is 243</li> <li>The Beetle SuperGrafx core's core provided aspect ratio is dependent on the 'Aspect Ratio' core option.</li> </ul>"},{"location":"library/beetle_sgx/#loading-pc-engine-cd-content","title":"Loading PC Engine CD content","text":"<p>To load PC Engine CD content, Beetle SuperGrafx needs a cue-sheet that points to an image file. A cue sheet, or cue file, is a metadata file which describes how the tracks of a CD or DVD are laid out.</p> <p>If you have e.g. <code>foo.bin</code>, you should create a text file and save it as <code>foo.cue</code>. If you're playing a single-track Saturn game, then the cue file contents should look like this:</p> <p><code>foobin.cue</code> <pre><code> FILE \"foo.bin\" BINARY\n  TRACK 01 MODE1/2352\n   INDEX 01 00:00:00\n</code></pre></p> <p>After that, you can load the <code>foo.cue</code> file in RetroArch with the Beetle SuperGrafx core.</p> <p>Certain PC Engine content are multi-track, so their .cue files might be more complicated.</p> <p>ISO + OGG and ISO + WAV format games are supported, but they require a properly formatted cue sheet. For iso files, tracks should be denoted as BINARY, for ogg files, they should be denoted as OGG, and for wav files, they should be denoted as WAVE.</p>"},{"location":"library/beetle_sgx/#chd","title":"CHD","text":"<p>Alternatively to using cue sheets with .bin/.iso files, you can convert your games to .chd (MAME Compressed Hunks of Data) to reduce file sizes and neaten up your game folder.</p> <p>To convert content to CHD format, use the chdman tool found inside the latest MAME distribution and point it to a .cue file, like so:</p> <pre><code>chdman createcd --input foo.cue --output foo.chd\n</code></pre>"},{"location":"library/beetle_sgx/#core-options","title":"Core options","text":"<p>The Beetle SuperGrafx core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded.</p> <p>Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch.</p> <ul> <li> <p>CD Image Cache (Restart) [sgx_cdimagecache] (disabled|enabled)</p> <p>Loads the complete image in memory at startup. Can potentially decrease loading times at the cost of increased startup time.</p> </li> <li> <p>CD Bios (Restart) [sgx_cdbios] (System Card 3|Games Express|System Card 1|System Card 2)</p> <p>Select which PC Engine CD BIOS to use.</p> <p>Look at the BIOS section for more information.</p> </li> <li> <p>Force SuperGrafx Emulation (Restart) [sgx_forcesgx] (disabled|enabled)</p> <p>This is helpful to run homebrew games or isolate games that will not run in SuperGrafx mode. (like Space Harrier).</p> <p>Savestates are not compatible with each mode. It's better to leave this option at default (Off) unless needed. Known Supergrafx games (like Dai-Makaimura, Aldyns) will automatically switch to SuperGrafx regardless of this option.</p> </li> <li> <p>No Sprite Limit [sgx_nospritelimit] (disabled|enabled)</p> <p>Remove 16-sprites-per-scanline hardware limit.</p> </li> <li> <p>CPU Overclock Multiplier (Restart) [sgx_ocmultiplier] (1|2|3|4|5|6|7|8|9|10|20|30|40|50)</p> <p>Overclock the emulated CPU.</p> </li> <li> <p>Horizontal Overscan (352 Width Mode Only) [sgx_hoverscan] (300 to 352 in increments of 2. 352 in default.)</p> <p>Modify the horizontal overscan.</p> </li> <li> <p>Initial scanline [sgx_initial_scanline] (0 to 40 in increments of 1. 3 is default.)</p> <p>Adjust first display scanline.</p> </li> <li> <p>Last scanline [sgx_last_scanline] (208 to 242 in increments of 1. 242 is default.)</p> <p>Adjust last display scanline.</p> </li> <li> <p>(CD) CDDA Volume % [sgx_cddavolume] (0 to 200 in increments of 10. 100 is default.)</p> <p>Modify CDDA Volume %.</p> </li> <li> <p>(CD) ADPCM Volume % [sgx_adpcmvolume] (0 to 200 in increments of 10. 100 is default.)</p> <p>Modify ADPCM Volume %.</p> </li> <li> <p>(CD) CD PSG Volume %; [sgx_cdpsgvolume] (0 to 200 in increments of 10. 100 is default.)</p> <p>Modify CD PSG Volume %.</p> </li> <li> <p>(CD) CD Speed [sgx_cdspeed] (1|2|4|8)</p> <p>Set the speed of the emulated CD drive.</p> </li> <li> <p>Turbo Delay [sgx_turbo_delay] (3|4|5|6|7|8|9|10|11|12|13|14|15|30|60|2)</p> <p>Adjust turbo delay.</p> </li> <li> <p>Turbo ON/OFF Toggle [sgx_turbo_toggle] (disabled|enabled)</p> <p>Enables Turbo ON/OFF inputs.</p> <p>Look at the Joypad section for more information.</p> </li> <li> <p>Alternate Turbo Hotkey [sgx_turbo_toggle_hotkey] (disabled|enabled)</p> <p>Enables Alternate Turbo ON/OFF inputs.</p> <p>You can avoid remapping Button III and IV when switching to 6-button gamepad mode with this.</p> <p>Look at the Joypad section for more information.</p> </li> <li> <p>Disable Soft Reset (RUN+SELECT) [sgx_disable_softreset] (disabled|enabled)</p> <p>Pressing RUN and SELECT simultaneously on PCE gamepad will SOFT RESET the console. This is a default hardware behaviour.</p> <p>Set this to enabled if you want the soft reset functionality turned off.</p> </li> <li> <p>Allow Opposing Directions [sgx_up_down_allowed] (disabled|enabled)</p> <p>Enabling this will allow pressing / quickly alternating / holding both left and right (or up and down in some games) directions at the same time.</p> <p>This may cause movement based glitches to occur in certain games.</p> <p>It's best to keep this core option disabled.</p> </li> <li> <p>Mouse Sensitivity [sgx_mouse_sensitivity] (1.00 to 5.00 in increments of 0.25. 1.00 is default.)</p> <p>Configure the PCE Mouse device type's sensitivity.</p> </li> <li> <p>Aspect Ratio [sgx_aspect_ratio] (auto|6:5|4:3)</p> <p>Select an auto (PAR) aspect ratio, or a 6:5 (Used to be default) aspect ratio, or a 4:3 TV aspect ratio.</p> <p>When using games that constantly switches between 256 and 352 modes and using auto aspect, its best to set Horizontal width to 342 as to minimize resizing and extra black lines since this width is in ratio of 256-width mode(or something like that, just test with Asuka 100% which is one of the game that switches between these modes)</p> </li> </ul>"},{"location":"library/beetle_sgx/#user-1-5-device-types","title":"User 1 - 5 device types","text":"<p>The Beetle SuperGrafx core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p> <ul> <li>None - Input is disabled.</li> <li>PCE Joypad - Joypad</li> <li>PCE Mouse - Mouse</li> </ul>"},{"location":"library/beetle_sgx/#joypad","title":"Joypad","text":"<ul> <li> <p>Use the Mode Switch input to switch between button modes.</p> </li> <li> <p>The regular Turbo inputs for 2-button mode are only active when the 'Turbo ON/OFF Toggle' core option is set to On.</p> </li> <li> <p>The Alternate Turbo inputs for 2-button mode are only active when the 'Turbo ON.mdOFF Toggle' core option is set to On and the 'Alternate Turbo Hotkey' core option is set to On.</p> </li> </ul> RetroPad Inputs User 1 - 5 input descriptors PCE Joypad 2-button PCE Joypad 6-button II II II III II Turbo On/Off III Select Select Select Run Run Run D-Pad Up D-Pad Up D-Pad Up D-Pad Down D-Pad Down D-Pad Down D-Pad Left D-Pad Left D-Pad Left D-Pad Right D-Pad Right D-Pad Right I I I IV I Turbo On/Off IV V V VI VI Mode Switch Mode Switch Mode Switch Alternate II Turbo On/Off Alternate I Turbo On/Off"},{"location":"library/beetle_sgx/#mouse","title":"Mouse","text":"RetroMouse Inputs PCE Mouse  Mouse Cursor PCE Mouse Cursor  Mouse 1 PCE Mouse Left Button  Mouse 2 PCE Mouse Right Button  Mouse 3 PCE Mouse Start Button Select (Joypad) Start (Joypad)"},{"location":"library/beetle_sgx/#external-links","title":"External Links","text":"<ul> <li>Official Mednafen Website</li> <li>Official Mednafen Downloads</li> <li>Libretro Beetle SuperGrafx Core info file</li> <li>Libretro Beetle SuperGrafx Github Repository</li> <li>Report Libretro Beetle SuperGrafx Core Issues Here</li> </ul>"},{"location":"library/beetle_sgx/#tg-16","title":"TG-16","text":"<ul> <li>NEC - PC Engine / CD (Beetle PCE FAST)</li> </ul>"},{"location":"library/beetle_vb/","title":"Nintendo - Virtual Boy (Beetle VB)","text":""},{"location":"library/beetle_vb/#background","title":"Background","text":"<p>Port of Mednafen VB to libretro.</p>"},{"location":"library/beetle_vb/#authorlicense","title":"Author/License","text":"<p>The Beetle VB core has been authored by</p> <ul> <li>Mednafen Team</li> </ul> <p>The Beetle VB core is licensed under</p> <ul> <li>GPLv2</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/beetle_vb/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the Beetle VB core have the following file extensions:</p> <ul> <li>.vb</li> <li>.vboy</li> <li>.bin</li> </ul>"},{"location":"library/beetle_vb/#databases","title":"Databases","text":"<p>RetroArch database(s) that are associated with the Beetle VB core:</p> <ul> <li>Nintendo - Virtual Boy</li> </ul>"},{"location":"library/beetle_vb/#features","title":"Features","text":"<p>Frontend-level settings or features that the Beetle VB core respects.</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay (State based) \u2714 (not link-cable emulation) Core Options \u2714 Memory Monitoring (achievements) \u2714 Cheats (Cheats menu) \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2714 LEDs \u2715"},{"location":"library/beetle_vb/#directories","title":"Directories","text":"<p>The Beetle VB core's directory name is 'Beetle VB'</p> <p>The Beetle VB core saves/loads to/from these directories.</p> <p>Frontend's Save directory</p> <ul> <li>'content-name'.srm (Cartridge battery save)</li> </ul> <p>Frontend's State directory</p> <ul> <li>'content-name'.state# (State)</li> </ul>"},{"location":"library/beetle_vb/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The Beetle VB core's core provided FPS is 50.27</li> <li>The Beetle VB core's core provided sample rate is 44100 Hz</li> <li>The Beetle VB core's core provided aspect ratio is 12/7</li> </ul>"},{"location":"library/beetle_vb/#core-options","title":"Core options","text":"<p>The Beetle VB core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded.</p> <p>Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch.</p> <ul> <li> <p>Anaglyph preset (restart) [vb_anaglyph_preset] (Off/red &amp; blue/red &amp; cyan/red &amp; electric cyan/red &amp; green/green &amp; magenta/yellow &amp; blue)</p> <p>Select anaglyph 3D mode.</p> </li> </ul> <p>Attention</p> <p>These Analglyph preset screenshots have been taken with the Palette core option set to black &amp; red.</p> Anaglyph preset - Off <p></p> Anaglyph preset - red &amp; blue <p></p> Anaglyph preset - red &amp; cyan <p></p> Anaglyph preset - red &amp; electric cyan <p></p> Anaglyph preset - red &amp; green <p></p> Anaglyph preset - green &amp; magenta <p></p> Anaglyph preset - yellow &amp; blue <p></p> <ul> <li> <p>Palette (restart) [vb_color_mode] (black &amp; red/black &amp; white)</p> <p>Choose which color palette to use.</p> </li> </ul> Palette - black &amp; red <p></p> Palette - black &amp; white <p></p> <ul> <li> <p>Right Analog to Digital [vb_right_analog_to_digital] (Off/On/invert x/invert y/invert both)</p> <p>Self-explanatory.</p> </li> </ul>"},{"location":"library/beetle_vb/#controllers","title":"Controllers","text":"<p>The Beetle VB core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/beetle_vb/#user-1-device-types","title":"User 1 device types","text":"<ul> <li>None - Doesn't disable input.</li> <li>RetroPad - Joypad</li> <li>Retropad w/Analog - Joypad - There's no reason to switch to this.</li> </ul>"},{"location":"library/beetle_vb/#controller-tables","title":"Controller tables","text":""},{"location":"library/beetle_vb/#joypad","title":"Joypad","text":"<p>Attention</p> <p>The Right D-Pad X and Right D-Pad Y inputs are only active when the 'Right Analog to Digital' core option is set to anything other than Off.</p> User 1 Remap descriptors RetroPad Inputs B Select Start Left D-Pad Up Left D-Pad Down Left D-Pad Left Left D-Pad Right A L R Right D-Pad Up Right D-Pad Left Right D-Pad Down Right D-Pad Right Right D-Pad X  X Right D-Pad Y  Y"},{"location":"library/beetle_vb/#compatibility","title":"Compatibility","text":"<p>Awaiting description.</p>"},{"location":"library/beetle_vb/#external-links","title":"External Links","text":"<ul> <li>Official Mednafen Website</li> <li>Official Mednafen Downloads</li> <li>Official Mednafen Virtual Boy Documentation</li> <li>Libretro Beetle VB Core info file</li> <li>Libretro Beetle VB Github Repository</li> <li>Report Libretro Beetle VB Core Issues Here</li> <li>Gameplay Videos</li> </ul>"},{"location":"library/bios/","title":"BIOS Information Hub","text":""},{"location":"library/bios/#verifying-that-you-have-the-right-bios","title":"Verifying that you have the right BIOS","text":"<p>It is very important that the following requirements are met:</p> <ol> <li>Location</li> <li>Name</li> <li>File Hash (md5sum)</li> </ol>"},{"location":"library/bios/#location","title":"Location","text":"<p>Ensure that you have placed the BIOS file(s) in the correct location.</p> <p>Usually is the system folder, which can be located in RetroArch by going to:</p> <p>Settings-&gt;Directory-&gt;System/BIOS (look at the right column).</p> <p>The specific core information page will tell you where exactly. (you may need to create a subfolder)</p>"},{"location":"library/bios/#name","title":"Name","text":"<p>Verify that the file(s) have the same name and extension that appears in the core info/docs page.</p> <p>Remember that some operating systems are case sensitive.</p>"},{"location":"library/bios/#file-hash-md5sum","title":"File Hash (md5sum)","text":"<p>Last, but probably the most important part of all, the hash of your BIOS should match the one in the docs.</p>"},{"location":"library/bios/#what-is-a-hash","title":"What is a hash?","text":"<p>A File Hash is a string of characters that uniquely identifies a file.</p>"},{"location":"library/bios/#why-should-i-care","title":"Why should i care?","text":"<p>If i rename dog.jpg to bios.bin, how would you know?</p> <p>If the dump is not the version that the core needs, or if the file integrity is compromised (corrupted), unexpected things (bad) can happen.</p> <p>A file can become corrupted by errors in transmission, write errors during copying or moving, faulty storage media, software bugs, etc.</p>"},{"location":"library/bios/#how-do-i-check-it","title":"How do i check it?","text":"<p>You need two things, a piece of software that can generate a hash from your file and a known valid file hash for the comparison, you will find the correct hash in the corresponding core information page (links below)</p> <p>As for the software, some operating systems have tools integrated in the commandline that can do the job, but if you prefer a graphical interface look for something like Open-Hashtool, HashMyFiles, etc</p>"},{"location":"library/bios/#links-to-the-core-specific-bios-information","title":"Links to the core specific BIOS information","text":"System Core Link 3DO Opera BIOS information 5200/Atari 8-bit computers Atari800 BIOS information 7800 ProSystem BIOS information Apple minivmac BIOS information Arcade MAME2003 BIOS information Arcade MAME2003+ BIOS information Arcade MAME2010 BIOS information Arcade SAME_CDI BIOS information BBK electronic dictionary GAM4980 BIOS information ColecoVision Gearcoleco BIOS information Dreamcast Flycast BIOS information DS DeSmuME BIOS information DS melonDS DS BIOS information Elektronika - BK-0010/BK-0011 bk BIOS information Enterprise 128 ep128emu BIOS information GameBoy/GameBoy Color Emux GB BIOS information GameBoy/GameBoy Color Gambatte BIOS information GameBoy/GameBoy Color Gearboy BIOS information GameBoy/GameBoy Color SameBoy BIOS information GameBoy Advance Beetle GBA BIOS information GameBoy Advance gpSP BIOS information GameBoy Advance mGBA BIOS information GameBoy Advance VBA Next BIOS information Gamecube/Wii Dolphin BIOS information Intellivision FreeIntv BIOS information Lynx Beetle Lynx BIOS information Lynx Handy BIOS information Lynx Holani BIOS information Master System Emux SMS BIOS information MS/GG SMS Plus GX BIOS information MS/GG/MD/CD Genesis Plus GX BIOS information MS/GG/SG-1000 Gearsystem BIOS information MS/MD/CD/32X PicoDrive BIOS information MSX/SVI/ColecoVision/SG-1000 blueMSX BIOS information MSX fMSX BIOS information NES/Famicom FCEUmm BIOS information NES/Famicom Nestopia BIOS information NES/Famicom Mesen BIOS information Odyssey2/Videopac+ O2EM BIOS information PC-98 Neko Project II Kai BIOS information PC Engine/CD Beetle PCE FAST BIOS information PCE SuperGrafx Beetle SGX BIOS information PC-FX Beetle PC-FX BIOS information PlayStation Beetle PSX BIOS information PlayStation Beetle PSX HW BIOS information PlayStation PCSX ReARMed BIOS information Pok\u00e9mon Mini PokeMini BIOS information PSP PPSSPP BIOS information RPG Maker 2000/2003 EasyRPG BIOS information RPG Maker XP/VX/VX Ace mkxp-z BIOS information Saturn Beetle Saturn BIOS information Saturn Kronos BIOS information Saturn Yabause BIOS information Saturn YabaSanshiro BIOS information Sharp - X68000 PX68k BIOS information SNES/Super Famicom bsnes Accuracy BIOS information SNES/Super Famicom bsnes Balanced BIOS information SNES/Super Famicom bsnes Performance BIOS information SNES/Super Famicom bsnes-mercury Acc BIOS information SNES/Super Famicom bsnes-mercury Bal BIOS information SNES/Super Famicom bsnes-mercury Perf BIOS information SNES/Super Famicom nSide Balanced BIOS information SNES/Super Famicom higan Accuracy BIOS information SNES/Super Famicom Mesen-S BIOS information Super Cassette Vision EmuSCV BIOS information ST/STE/TT/Falcon Hatari BIOS information Texas Instruments TI-83 Numero BIOS information Thomson - MO/TO Theodore BIOS information Vectrex vecx BIOS information Vircon32 Vircon32 BIOS information ZX Spectrum Fuse BIOS information"},{"location":"library/bk/","title":"Elektronika - BK-0010/BK-0011(M) (bk)","text":""},{"location":"library/bk/#background","title":"Background","text":"<p>A port of the PDP11 emulator to libretro. This core emulates the Soviet Electronica BK computers series, including the BK-0010, BK-0010.01 and BK-0011(M), as well as the Terak 8510/a, which is a 1976 American PDP-11/03 platform that the Electronica BK series were designed after. The BK series computers were the first mass-produced, affordable personal computers in Russia in the 1980s and they had a tremendous effect on the development of the Russian-speaking software community, similar to the C64, ZX Spectrum and Atari 2600 communities elsewhere in the world. These computers will accept console commands in English but respond mostly in Russian, so this core is mostly of use to Russian-speaking users.</p> <p>This is a core for Soviet (russian) Electronica BK series:</p> <ul> <li>\u0411\u041a-0010</li> <li>\u0411\u041a-0010.01</li> <li>\u0411\u041a-0011(\u041c)</li> </ul> <p>You may read more about the series at http://en.wikipedia.org/wiki/Electronika_BK</p> <p>The author's (Leonid A. Broukhis) page can be found at here.</p> <p>Additionally, it supports emulation of Terak 8510/a, which is a 1976 american PDP-11/03 platform and of which the Electronica BK series are indeed clones.</p> <p>The Electronica BK computers were the first mass produced, affordable personal computers in Russia in the eighties of 20<sup>th</sup> century, and have had tremendous effect on the development of Russian-speaking software community. Every russian computer, hardware or ham radio geek born in seventies or eighties probably had one of those machines during their formational years. They are the C64s, ZX Spectrums and Atari 2600s of the now defunct USSR.</p> <p>All of the BK machines accept console commands in English, but respond mostly in Russian.</p> <p>Virtually all of BK schematics, documentation, hardware hacks and software has been preserved and is available on the internet. Unfortunately, most if not all of these things are only available in Russian.</p>"},{"location":"library/bk/#authorlicense","title":"Author/License","text":"<p>The bk core has been authored by</p> <ul> <li>Eric A. Edwards</li> <li>Leonid A. Broukhis</li> <li>emestee</li> <li>arcade-mini</li> <li>phcoder</li> </ul> <p>The bk core is licensed under</p> <ul> <li>BSD</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/bk/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the bk core have the following file extensions:</p> <ul> <li>.bin</li> </ul>"},{"location":"library/bk/#databases-wip","title":"Databases WIP","text":"<p>RetroArch database(s) that are associated with the bk core:</p>"},{"location":"library/bk/#bios","title":"BIOS","text":"<p>Required or optional firmware files go in the frontend's system directory.</p> Filename Description md5sum bk/B11M_BOS.ROM fe4627d1e3a1535874085050733263e7 bk/B11M_EXT.ROM dc52f365d56fa1951f5d35b1101b9e3f bk/BAS11M_0.ROM 946f6f23ded03c0e26187f0b3ca75993 bk/BAS11M_1.ROM 1e6637f32aa7d1de03510030cac40bcf bk/DISK_327.ROM 5015228eeeb238e65da8edcd1b6dfac7 bk/BASIC10.ROM 3fa774326d75410a065659aea80252f0 bk/FOCAL10.ROM 5737f972e8638831ab71e9139abae052 bk/MONIT10.ROM 95f8c41c6abf7640e35a6a03cecebd01"},{"location":"library/bk/#features","title":"Features","text":"<p>Frontend-level settings or features that the bk core respects.</p> Feature Supported Restart \u2715 Screenshots \u2714 Saves \u2715 States \u2715 Rewind \u2714 Netplay \u2715 Core Options \u2714 Memory Monitoring (achievements) \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/bk/#directories","title":"Directories","text":"<p>The bk core's library name is 'bk'</p> <p>The bk core saves/loads to/from these directories.</p>"},{"location":"library/bk/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The bk core's core provided FPS is 25.</li> <li>The bk core's core provided sample rate is 44100 Hz.</li> <li>The bk core's base width is 1080.</li> <li>The bk core's base height is 1080.</li> <li>The bk core's core provided aspect ratio is 1/1.</li> </ul>"},{"location":"library/bk/#core-options","title":"Core options","text":"<p>The bk core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded.</p> <p>Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch.</p> <ul> <li> <p>Model (restart) [bk_model] (BK-0010|BK-0010.01|BK-0010.01 + FDD|BK-0011M + FDD|Terak 8510/a|Slow BK-0011M)</p> </li> <li> <p>Peripheral (UP port, restart) [bk_peripheral] (none|covox|ay_3_8910|mouse_high|mouse_low|joystick)</p> </li> <li> <p>Keyboard layout [bk_layout] (qwerty|jcuken)</p> </li> <li> <p>Double CPU speed [bk_doublespeed] (disabled|enabled)</p> </li> <li> <p>Use color display [bk_color] (enabled|disabled)</p> </li> <li> <p>Keyboard type (restart) [bk_keyboard_type] (poll|callback)</p> </li> <li> <p>Aspect ratio [bk_aspect_ratio] (1:1|4:3)</p> </li> </ul>"},{"location":"library/bk/#controllers","title":"Controllers","text":"<p>The bk core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/bk/#user-1-device-types","title":"User 1 device types","text":"<ul> <li>None - Doesn't disable input. There's no reason to switch to this.</li> <li>Joystick - Joypad</li> <li>RetroKeyboard - Keyboard - Keyboard inputs are always active. Has keymapper support.</li> <li>RetroPad Keyboard Map - Joypad - Awaiting description.</li> </ul>"},{"location":"library/bk/#controller-tables","title":"Controller tables","text":""},{"location":"library/bk/#keyboard","title":"Keyboard","text":"RetroKeyboard Inputs RetroKeyboard Keyboard Backspace BACKSPACE Keyboard Tab TAB Keyboard Return RETURN Keyboard Pause PAUSE Keyboard Escape ESCAPE Keyboard Space SPACE Keyboard Quote ' COLON Keyboard Comma , COMMA Keyboard Minus - NEGATIVE Keyboard Period . PERIOD Keyboard Slash / DIVIDE Keyboard 0 0 Keyboard 1 1, Player 1 Coleco #0 Keyboard 2 2, Player 1 Coleco #9 Keyboard 3 3, Player 2 Coleco #0 Keyboard 4 4, Player 2 Coleco #9 Keyboard 5 5 Keyboard 6 6 Keyboard 7 7 Keyboard 8 8 Keyboard 9 9 Keyboard Semicolon ; SEMICOLON Keyboard Equals = CIRCUMFLEX Keyboard Left Bracket [ LEFT BRACKET Keyboard Backslash \\ BACKSLASH (YEN) Keyboard Right Bracket ] RIGHT BRACKET Keyboard Backquote ` AT Keyboard a A Keyboard b B Keyboard c C Keyboard d D Keyboard e E Keyboard f F Keyboard g G Keyboard h H Keyboard i I Keyboard j J Keyboard k K Keyboard l L Keyboard m M Keyboard n N Keyboard o O Keyboard p P Keyboard q Q Keyboard r R Keyboard s S Keyboard t T Keyboard u U Keyboard v V Keyboard w W Keyboard x X Keyboard y Y Keyboard z Z Keyboard Delete DELETE Keyboard Keypad 0 NUMPAD 0 Keyboard Keypad 1 NUMPAD 1 Keyboard Keypad 2 NUMPAD 2 Keyboard Keypad 3 NUMPAD 3 Keyboard Keypad 4 NUMPAD 4 Keyboard Keypad 5 NUMPAD 5 Keyboard Keypad 6 NUMPAD 6 Keyboard Keypad 7 NUMPAD 7 Keyboard Keypad 8 NUMPAD 8 Keyboard Keypad 9 NUMPAD 9 Keyboard Keypad Period . NUMPAD COMMA Keyboard Keypad Divide / NUMPAD DIVIDE Keyboard Keypad Multiply * NUMPAD MULTIPLY Keyboard Keypad Minus - NUMPAD SUBTRACTION Keyboard Keypad Plus + NUMPAD ADD Keyboard Keypad Enter NUMPAD PERIOD Keyboard Up UP Keyboard Down DOWN Keyboard Right RIGHT Keyboard Left LEFT Keyboard Insert INSERT Keyboard Home CLS Keyboard End STOP Keyboard Page Up SELECT Keyboard F1 F1 Keyboard F2 F2 Keyboard F3 F3 Keyboard F4 F4 Keyboard F5 F5 Keyboard Caps Lock CAPS Keyboard Right Shift RIGHT SHIFT Keyboard Left Shift LEFT SHIFT Keyboard Left Control CONTROL Keyboard Left Alt GRAPH Keyboard Print PRINT <p>Supported combinations</p>"},{"location":"library/bk/#external-links","title":"External Links","text":"<ul> <li>Official bk Website</li> <li>bk Repository</li> <li>Libretro bk Core info file</li> <li>Libretro bk Github Repository</li> <li>Report Libretro bk Core Issues Here</li> </ul>"},{"location":"library/blastem/","title":"Sega - MD/CD (BlastEm)","text":""},{"location":"library/blastem/#background","title":"Background","text":"<p>BlastEm is an open-source Sega 16 bit emulator focused on accuracy and portability.</p> <p>BlastEm has 100% compatibility with Genesis / Mega Drive.</p> <p>The BlastEm core is licensed under</p> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/blastem/#bios","title":"BIOS","text":"<p>Required or optional firmware files go in the frontend's system directory.</p> Filename Description md5sum rom.db ROM feature database - Optional"},{"location":"library/blastem/#external-links","title":"External Links","text":""},{"location":"library/bluemsx/","title":"MSX/SVI/ColecoVision/SG-1000 (blueMSX)","text":""},{"location":"library/bluemsx/#background","title":"Background","text":"<p>blueMSX is a cycle accurate emulator that emulates all generations of MSX computers as well as SVI, ColecoVision and Sega SG-1000.</p>"},{"location":"library/bluemsx/#authorlicense","title":"Author/License","text":"<p>The blueMSX core has been authored by</p> <ul> <li>Daniel Vik</li> </ul> <p>The blueMSX core is licensed under</p> <ul> <li>GPLv2</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/bluemsx/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the blueMSX core have the following file extensions:</p> <ul> <li>.rom</li> <li>.ri</li> <li>.mx1</li> <li>.mx2</li> <li>.col</li> <li>.dsk</li> <li>.cas</li> <li>.sg</li> <li>.sc</li> <li>.m3u</li> </ul>"},{"location":"library/bluemsx/#databases","title":"Databases","text":"<p>RetroArch database(s) that are associated with the blueMSX core:</p> <ul> <li>Microsoft - MSX</li> <li>Microsoft - MSX2</li> <li>Coleco - ColecoVision</li> <li>Sega - SG-1000</li> </ul>"},{"location":"library/bluemsx/#bios","title":"BIOS","text":"<p>The blueMSX core requires the 'Databases' and 'Machines' folders from a full installation of blueMSX.</p> <p>Go to <code>Main Menu &gt; Online Updater &gt; Core System Files Downloader</code> and download 'blueMSX.zip'. That's all you need to do! The 'Databases' and 'Machines' folders will be extracted and moved to your RetroArch 'system' folder automatically.</p> <p>Alternatively, if your frontend doesn't have the 'Core System Files Downloader':</p> <p>You can download the 'Databases' and 'Machines' folders from an official full standalone blueMSX emulator installation. Get blueMSXv282full.zip near the bottom of the page.</p> <p>Move/Copy the 'Databases' and 'Machines' Folders to RetroArch's System directory.</p> <p></p>"},{"location":"library/bluemsx/#features","title":"Features","text":"<p>Frontend-level settings or features that the blueMSX core respects.</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2715 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2714 Memory Monitoring (achievements) \u2714 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2714 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/bluemsx/#directories","title":"Directories","text":"<p>The blueMSX core's library name is 'blueMSX'</p> <p>The blueMSX core saves/loads to/from these directories.</p> <p>Frontend's System directory</p> File Description bluemsx.ini blueMSX Config bluemsx_history.ini blueMSX History"},{"location":"library/bluemsx/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The blueMSX core's core provided FPS is 60</li> <li>The blueMSX core's core provided sample rate is 44100 Hz</li> <li>The blueMSX core's base width is (Base width)</li> <li>The blueMSX core's base height is (Base height)</li> <li>The blueMSX core's max width is (Max width)</li> <li>The blueMSX core's max height is (Max height)</li> <li>The blueMSX core's core provided aspect ratio is (Ratio)</li> </ul>"},{"location":"library/bluemsx/#usage","title":"Usage","text":"<p>ColecoVision Gamepad Mapping is as follow:</p> <ul> <li>Button 1 as Retropad A</li> <li>Button 2 as Retropad B</li> <li>Dial keys 1 to 8 as X, Y, R, L, R2, L2, R3, L3</li> <li>Star (*) as Select, Hash (#) as Start</li> <li>0 &amp; 9 are on keyboard 1 &amp; 2 for Player 1</li> <li>0 &amp; 9 are on keyboard 3 &amp; 4 for Player 2.</li> </ul>"},{"location":"library/bluemsx/#spectravideo-cassettes","title":"SpectraVideo Cassettes","text":"<p>To play SpectraVideo cassettes type 'cload' then 'run'</p> <p>or BLOAD ''CAS:'',R depending on the game.</p>"},{"location":"library/bluemsx/#multiple-disk-games","title":"Multiple-disk games","text":"<p>If foo is a multiple-disk game, you should have .dsk files for each one, e.g. <code>foo (Disk 1).dsk</code>, <code>foo (Disk 2).dsk</code>, <code>foo (Disk 3).dsk</code>.</p> <p>To take advantage of BlueMSX Disk Control feature for disk swapping, an index file (a m3u file) should be made.</p> <p>Create a text file and save it as <code>foo.m3u</code>. Then enter your game's .dsk files on it. The m3u file contents should look something like this:</p> <p><code>foo.m3u</code> <pre><code>foo (Disk 1).dsk\nfoo (Disk 2).dsk\nfoo (Disk 3).dsk\n</code></pre></p> <p>After that, you can load the <code>foo.m3u</code> file in RetroArch with the BlueMSX core.</p> <p>An alternative is to append disks to the current playlist via the \"Disk Image Append\" option RetroArch menu.</p>"},{"location":"library/bluemsx/#core-options","title":"Core options","text":"<p>The blueMSX core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded.</p> <p>Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch.</p> <ul> <li> <p>Machine Type (Restart) [bluemsx_msxtype] (Auto|MSX|MSXturboR|MSX2|MSX2+|SEGA - SG-1000|SEGA - SC-3000|SEGA - SF-7000|SVI - Spectravideo SVI-318|SVI - Spectravideo SVI-328|SVI - Spectravideo SVI-328 MK2|ColecoVision|Coleco (Spectravideo SVI-603))</p> <p>Manually select the machine type you would like the core to start in.</p> </li> <li> <p>Crop Overscan [bluemsx_overscan] (disabled|enabled|MSX2)</p> <p>Forces cropping of overscanned frames</p> </li> </ul> Crop Overscan Off <p></p> Crop Overscan On <p></p> Crop Overscan MSX2 <p></p> <ul> <li> <p>VDP Sync Type (Restart) [bluemsx_vdp_synctype] (Auto|50Hz|60Hz)</p> <p>Match the game/machine region frequency to avoid emulated speed issues.</p> </li> <li> <p>No Sprite Limit [bluemsx_nospritelimits] (OFF|ON)</p> <p>Remove the 4 sprite per line limit which can reduce or remove sprite flicker in some games.</p> </li> <li> <p>Sound YM2413 Enable (Restart) [bluemsx_ym2413_enable] (enabled|disabled)</p> <p>Awaiting description.</p> </li> <li> <p>Cart Mapper Type (Restart) [bluemsx_cartmapper] (Auto|Normal|mirrored|basic|0x4000|0xC000|ascii8|ascii8sram|ascii16|ascii16sram| ascii16nf|konami4|konami4nf|konami5|konamisynth|korean80|korean90|korean126| MegaFlashRomScc|MegaFlashRomSccPlus|msxdos2|scc|sccexpanded|sccmirrored|sccplus| snatcher|sdsnatcher|SegaBasic|SG1000|SG1000Castle|SG1000RamA|SG1000RamB|SC3000)</p> <p>When a ROM game or application is in the database, the emulator uses the databases to apply the correct mapper. If the sha1 value of a dump is not yet in the databases, it uses an automatic mapper detection system, but it can fail in some cases. In this situation, you can manually select the correct mapper.</p> </li> </ul>"},{"location":"library/bluemsx/#controllers","title":"Controllers","text":"<p>The blueMSX core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/bluemsx/#user-1-device-types","title":"User 1 device types","text":"<ul> <li>None - Doesn't disable input. There's no reason to switch to this.</li> <li>RetroPad - Joypad</li> <li>RetroKeyboard - Keyboard - Keyboard inputs are always active. Has keymapper support.</li> <li>RetroPad Keyboard Map - Joypad - Awaiting description.</li> </ul>"},{"location":"library/bluemsx/#user-2-device-types","title":"User 2 device types","text":"<ul> <li>None - Doesn't disable input. There's no reason to switch to this.</li> <li>RetroPad - Joypad</li> <li>RetroKeyboard - Keyboard - Keyboard inputs are always active.</li> </ul>"},{"location":"library/bluemsx/#controller-tables","title":"Controller tables","text":""},{"location":"library/bluemsx/#joypad","title":"Joypad","text":"User 1 and 2 Remap descriptors for 'RetroPad' device type RetroPad Inputs blueMSX core inputs Button 2 Button 2, Coleco Button 2 Button 3 Button 3, Coleco #2 Select Select, Coleco Star (*) Start Start, Coleco Hash (#) Joy Up Joy Up Joy Down Joy Down Joy Left Joy Left Joy Right Joy Right Button 1 Button 1,  Coleco Button 1 Button 4 Button 4, Coleco #1 Button 5 Button 5, Coleco #4 Button 6 Button 6, Coleco #3 Button 7 Button 7, Coleco #6 Button 8 Button 8, Coleco #5 Button 9 Button 9. Coleco #8 Button 10 Button 10, Coleco #7"},{"location":"library/bluemsx/#keyboard","title":"Keyboard","text":"RetroKeyboard Inputs RetroKeyboard Keyboard Backspace BACKSPACE Keyboard Tab TAB Keyboard Return RETURN Keyboard Pause PAUSE Keyboard Escape ESCAPE Keyboard Space SPACE Keyboard Quote ' COLON Keyboard Comma , COMMA Keyboard Minus - NEGATIVE Keyboard Period . PERIOD Keyboard Slash / DIVIDE Keyboard 0 0 Keyboard 1 1, Player 1 Coleco #0 Keyboard 2 2, Player 1 Coleco #9 Keyboard 3 3, Player 2 Coleco #0 Keyboard 4 4, Player 2 Coleco #9 Keyboard 5 5 Keyboard 6 6 Keyboard 7 7 Keyboard 8 8 Keyboard 9 9 Keyboard Semicolon ; SEMICOLON Keyboard Equals = CIRCUMFLEX Keyboard Left Bracket [ LEFT BRACKET Keyboard Backslash \\ BACKSLASH (YEN) Keyboard Right Bracket ] RIGHT BRACKET Keyboard Backquote ` AT Keyboard a A Keyboard b B Keyboard c C Keyboard d D Keyboard e E Keyboard f F Keyboard g G Keyboard h H Keyboard i I Keyboard j J Keyboard k K Keyboard l L Keyboard m M Keyboard n N Keyboard o O Keyboard p P Keyboard q Q Keyboard r R Keyboard s S Keyboard t T Keyboard u U Keyboard v V Keyboard w W Keyboard x X Keyboard y Y Keyboard z Z Keyboard Delete DELETE Keyboard Keypad 0 NUMPAD 0 Keyboard Keypad 1 NUMPAD 1 Keyboard Keypad 2 NUMPAD 2 Keyboard Keypad 3 NUMPAD 3 Keyboard Keypad 4 NUMPAD 4 Keyboard Keypad 5 NUMPAD 5 Keyboard Keypad 6 NUMPAD 6 Keyboard Keypad 7 NUMPAD 7 Keyboard Keypad 8 NUMPAD 8 Keyboard Keypad 9 NUMPAD 9 Keyboard Keypad Period . NUMPAD COMMA Keyboard Keypad Divide / NUMPAD DIVIDE Keyboard Keypad Multiply * NUMPAD MULTIPLY Keyboard Keypad Minus - NUMPAD SUBTRACTION Keyboard Keypad Plus + NUMPAD ADD Keyboard Keypad Enter NUMPAD PERIOD Keyboard Up UP Keyboard Down DOWN Keyboard Right RIGHT Keyboard Left LEFT Keyboard Insert INSERT Keyboard Home CLS Keyboard End STOP Keyboard Page Up SELECT Keyboard F1 F1 Keyboard F2 F2 Keyboard F3 F3 Keyboard F4 F4 Keyboard F5 F5 Keyboard Caps Lock CAPS Keyboard Right Shift RIGHT SHIFT Keyboard Left Shift LEFT SHIFT Keyboard Left Control CONTROL Keyboard Left Alt GRAPH Keyboard Print PRINT <p>Supported combinations</p> <ul> <li>Keyboard Left or Right Shift + Keyboard 0 = UNDERSCORE</li> </ul>"},{"location":"library/bluemsx/#compatibility","title":"Compatibility","text":"<ul> <li>blueMSX Manual</li> </ul>"},{"location":"library/bluemsx/#external-links","title":"External Links","text":"<ul> <li>Official blueMSX Website</li> <li>Official blueMSX SourceForge Repository</li> <li>Libretro blueMSX Core info file</li> <li>Libretro blueMSX Github Repository</li> <li>Report Libretro blueMSX Core Issues Here</li> </ul>"},{"location":"library/bluemsx/#see-also","title":"See also","text":""},{"location":"library/bluemsx/#sega-sg-1000","title":"Sega - SG-1000","text":"<ul> <li>Sega - MS/GG/MD/CD (Genesis Plus GX)</li> <li>Sega - MS/GG/SG-1000 (Gearsystem)</li> </ul>"},{"location":"library/bluemsx/#microsoft-msx","title":"Microsoft - MSX","text":"<ul> <li>Microsoft - MSX (fMSX)</li> </ul>"},{"location":"library/bluemsx/#microsoft-msx2","title":"Microsoft - MSX2","text":"<ul> <li>Microsoft - MSX (fMSX)</li> </ul>"},{"location":"library/bluemsx/#colecovision","title":"ColecoVision","text":"<ul> <li>Coleco - ColecoVision (Gearcoleco)</li> <li>ColecoVision/CreatiVision/My Vision (JollyCV)</li> </ul>"},{"location":"library/bnes/","title":"Nintendo - NES / Famicom (bnes)","text":""},{"location":"library/bnes/#background","title":"Background","text":"<p>A port of bNES v083 to libretro.</p>"},{"location":"library/bnes/#authorlicense","title":"Author/License","text":"<p>The bnes core has been authored by</p> <ul> <li>byuu</li> <li>Ryphecha</li> </ul> <p>The bnes core is licensed under</p> <ul> <li>GPLv3</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/bnes/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the bnes core have the following file extensions:</p> <ul> <li>.nes</li> </ul>"},{"location":"library/bnes/#databases","title":"Databases","text":"<p>RetroArch database(s) that are associated with the bnes core:</p> <ul> <li>Nintendo - Nintendo Entertainment System</li> </ul>"},{"location":"library/bnes/#features","title":"Features","text":"<p>Frontend-level settings or features that the bnes core respects.</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2715 Memory Monitoring (achievements) \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/bnes/#directories","title":"Directories","text":"<p>The bnes core's directory name is 'bnes'</p> <p>The bnes core saves/loads to/from these directories.</p> <p>Frontend's Save directory</p> <ul> <li>'content-name'.srm (Cartridge battery save)</li> </ul> <p>Frontend's State directory</p> <ul> <li>'content-name'.state# (State)</li> </ul>"},{"location":"library/bnes/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The bnes core's core provided FPS is 60</li> <li>The bnes core's core provided sample rate is 32000 Hz</li> <li>The bnes core's core provided aspect ratio is 16/15</li> </ul>"},{"location":"library/bnes/#controllers","title":"Controllers","text":"<p>The bnes core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/bnes/#user-1-2-device-types","title":"User 1 - 2 device types","text":"<ul> <li>None - Doesn't disable input.</li> <li>RetroPad - Joypad</li> <li>RetroPad w/Analog - Joypad - There is no reason to switch to this.</li> </ul>"},{"location":"library/bnes/#controller-tables","title":"Controller tables","text":""},{"location":"library/bnes/#joypad","title":"Joypad","text":"User 1 - 2 Remap descriptors RetroPad Inputs B Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A"},{"location":"library/bnes/#compatibility","title":"Compatibility","text":"Game Issue Crisis Force Graphical glitches. (1) Huge Insect No enemies spawn. Lagrange Point No music. Ms. Pac-Man (Tengen version) Graphical glitches on the sides of the screen. Skull &amp; Crossbones Crashes on start. (1)"},{"location":"library/bnes/#external-links","title":"External Links","text":"<ul> <li>Official higan Website</li> <li>Official higan Downloads</li> <li>Libretro bnes Core info file</li> <li>Libretro bnes Github Repository</li> <li>Report Libretro bnes Core Issues Here</li> </ul>"},{"location":"library/bnes/#see-also","title":"See also","text":""},{"location":"library/bnes/#nintendo-nintendo-entertainment-system","title":"Nintendo - Nintendo Entertainment System","text":"<ul> <li>Nintendo - NES / Famicom (Emux NES)</li> <li>Nintendo - NES / Famicom (FCEUmm)</li> <li>Nintendo - NES / Famicom (Mesen)</li> <li>Nintendo - NES / Famicom (Nestopia)</li> <li>Nintendo - NES / Famicom (QuickNES)</li> </ul>"},{"location":"library/boom3/","title":"Doom 3 (Boom3)","text":""},{"location":"library/boom3/#background","title":"Background","text":"<p>Boom 3<sup>1</sup> is a Doom 3 and Doom 3: Resurrection Of Evil GPL source port, known to work on Windows and Linux. Doom 3 is a sci-fi horror fantasy first-person shooter computer game developed by id Software and published by ActiVision.</p> <p>The PrBoom core has been authored by</p> <p>The Boom 3 core is licensed under</p> <ul> <li>GPLv3</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/boom3/#bios","title":"BIOS","text":"<p>There are no required BIOS.</p>"},{"location":"library/boom3/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the Boom 3 core have the following file extensions:</p> <ul> <li>.pk4</li> </ul> <p>RetroArch database(s) that are associated with the PrBoom core:</p> <ul> <li>DOOM</li> </ul>"},{"location":"library/boom3/#features","title":"Features","text":"<p>Frontend-level settings or features that the PrBoom core respects.</p> Feature Supported Restart \u2715 Screenshots \u2714 Saves \u2714 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2714 Memory Monitoring (achievements) \u2715 RetroArch Cheats \u2714 Native Cheats \u2714 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/boom3/#directories","title":"Directories","text":"<p>The Boom 3 core's library name is 'boom3'</p> <p>The Boom 3 core saves/loads to/from these directories.</p> <p>Frontend's Save directory</p> File Description (conten folder)/savegames/*.save Save (content folder)/libretro.cfg DOOM 3 Config"},{"location":"library/boom3/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The Boom 3 core's core provided FPS (by default) is 60</li> <li>The Boom 3 core's core provided sample rate is 44100 Hz</li> <li>The Boom 3 core's base width is dependent on the Internal resolution core option.</li> <li>The Boom 3 core's base height is dependent on the Internal resolution core option.</li> <li>The Boom 3 core's max width is dependent on the Internal resolution core option.</li> <li>The Boom 3 core's max height is dependent on the Internal resolution core option.</li> <li>The Boom 3 core's core provided aspect ratio is 4/3</li> </ul>"},{"location":"library/boom3/#loading-doom-3-files","title":"Loading DOOM 3 files","text":"<p>Boom 3 can load pk4 files. The Boom 3 core requires game data files which can be found here and here. If you bought the game on CDs/DVD, base/pak000.pk4 - pak004.pk4 and d3xp/pak000.pk4 can be copied from the disks, the other files are from the patch.</p> <p>On Linux (and probably other Unix-like systems and maybe even Windows with a mingw shell) you can extract the needed files from the official 1.3.1 patch for Linux with:</p> <pre><code>sh /path/to/doom3-linux-1.3.1.1304.x86.run --tar xvf --wildcards base/pak* d3xp/pak*\n</code></pre> <p>On Windows you can just install the game and the official 1.3.1 patch for Windows and then get the files from the installation directory (or copy dhewm3 in there).</p> <p>Warning</p> <p>Doom3 BFG is not supported. </p> <p>You'll need the game data from a Doom3 installation patched to 1.3.1. Specifically, you'll need the following .pk4 files for the main game:</p> <pre><code>Filename    Size    MD5-sum\nbase/pak000.pk4 337MB   71b8d37b2444d3d86a36fd61783844fe\nbase/pak001.pk4 220MB   4bc4f3ba04ec2b4f4837be40e840a3c1\nbase/pak002.pk4 398MB   fa84069e9642ad9aa4b49624150cc345\nbase/pak003.pk4 303MB   f22d8464997924e4913e467e7d62d5fe\nbase/pak004.pk4 227MB   38561a3c73f93f2e6fd31abf1d4e9102\nbase/pak005.pk4 540KB   2afd4ece27d36393b7538d55a345b90d\nbase/pak006.pk4 214KB   a6e7003fa9dcc75073dc02b56399b370\nbase/pak007.pk4 118KB   6319f086f930ec1618ab09b4c20c268c\nbase/pak008.pk4 12KB    28750b7841de9453eb335bad6841a2a5\n</code></pre> <p>... and (optionally) these .pk4 files for the Resurrection of Evil addon:</p> <pre><code>Filename    Size    MD5-sum\nd3xp/pak000.pk4 514MB   a883fef0fd10aadeb73d34c462ff865d\nd3xp/pak001.pk4 98KB    06fc9be965e345587064056bf22236d2\n</code></pre> <p>An example folder structure would be like so:</p> <pre><code>\u2514\u2500\u2500 contents/\n    \u2514\u2500\u2500 doom3/\n        \u251c\u2500\u2500 base/\n        \u2502   \u251c\u2500\u2500 pak000.pk4\n        \u2502   \u251c\u2500\u2500 pak001.pk4\n        \u2502   \u251c\u2500\u2500 pak002.pk4\n        \u2502   \u251c\u2500\u2500 pak003.pk4\n        \u2502   \u251c\u2500\u2500 pak004.pk4\n        \u2502   \u251c\u2500\u2500 pak005.pk4\n        \u2502   \u251c\u2500\u2500 pak006.pk4\n        \u2502   \u251c\u2500\u2500 pak007.pk4\n        \u2502   \u2514\u2500\u2500 pak008.pk4\n        \u2514\u2500\u2500 d3xp/\n            \u251c\u2500\u2500 pak000.pk4 \n            \u2514\u2500\u2500 pak001.pk4\n</code></pre> <p>Game saves and internal configuration files will be created in the content directory, organised in folders matching the filenames of loaded content - for example:</p> <pre><code>\u2514\u2500\u2500 contents/\n    \u2514\u2500\u2500 doom3/\n        \u2514\u2500\u2500 base/\n            \u251c\u2500\u2500 savegames/\n            \u2502   \u251c\u2500\u2500 *.save  \n            \u2514\u2500\u2500 \u2514\u2500\u2500 *.txt\n</code></pre> <p>Game saves are named from mission names.</p>"},{"location":"library/boom3/#loading-doom-3-resurrection-of-evil","title":"Loading Doom 3: Resurrection Of Evil","text":"<p>Doom 3: Resurrection of Evil is a horror first-person shooter video game developed by Nerve Software and published by Activision. It was released for Microsoft Windows on April 3, 2005, as an expansion pack and sequel to Doom 3 and on October 5, 2005, for the Xbox video game console. The Xbox version does not require the original Doom 3 in order to play, and includes The Ultimate Doom, Doom II: Hell on Earth and Master Levels for Doom II.</p> <p>You will need to get Doom 3 and expansion pack RoE here.</p> <p>You need to load Boom 3 xp core instead of Boom3 core. After Core is loaded you can load RoE's pk4 file</p> <pre><code>\u2514\u2500\u2500 contents/\n    \u2514\u2500\u2500 doom3/\n        \u2514\u2500\u2500 d3xp/\n            \u251c\u2500\u2500 pak000.pk4\n            \u2514\u2500\u2500 pak001.pk4\n</code></pre> <p>You can get Boom 3 xp core here for now.</p>"},{"location":"library/boom3/#config","title":"Config","text":"<p>Boom 3's internal game settings can be found in the 'libretro.cfg' file inside each game's directory.</p> <p>Many of these settings may be changed from the in-game menu. </p>"},{"location":"library/boom3/#core-options","title":"Core options","text":"<p>The Boom 3 core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded.</p> <p>Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch.</p> <ul> <li> <p>Framerate (restart) [boom3-framerate] (Auto|50fps|60fps|72fps|75fps|90fps|100fps|119fps|120fps|144fps|155fps|160fps|165fps|180fps|200fps|240fps|244fps|300fps|360fps)</p> <p>Modify framerate. Requires a restart.</p> </li> </ul> Internal resolution - 640x368 <p></p> Internal resolution - 1920x1080 <p></p> <ul> <li> <p>Internal Resolution (restart) [boom3-resolution] (480x272|640x368|720x408|960x544|1280x720|1920x1080|2560x1440|3840x2160)</p> <p>Configure the resolution. Requires a restart.</p> </li> <li> <p>Invert Y Axis [boom3-invert_y_axis] (OFF|ON)</p> <p>Invert the gamepad right analog stick's Y axis.</p> </li> <li> <p>Show FPS [boom3-show_fps] (OFF|ON)</p> <p>Shows framerate on screen.</p> </li> </ul>"},{"location":"library/boom3/#user-1-device-types","title":"User 1 device types","text":"<p>The Boom3 core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p> <ul> <li>None - Input disabled.</li> <li>Gamepad Classic - Joypad</li> <li>Gamepad Classic Alt - Joypad</li> <li>Gamepad Modern - Joypad</li> </ul>"},{"location":"library/boom3/#joypad","title":"Joypad","text":"User 1 input descriptors for 'Gamepad Classic' device type RetroPad Inputs PrBoom inputs Use Use Run Run Show/Hide Map Show/Hide Map Show/Hide Menu Show/Hide Menu D-Pad Up D-Pad Up D-Pad Down D-Pad Down D-Pad Left D-Pad Left D-Pad Right D-Pad Right Fire Fire Strafe Strafe Strafe Left Strafe Left Strafe Right Strafe Right Previous Weapon Previous Weapon Next Weapon Next Weapon User 1 input descriptors for 'Gamepad Modern' device type RetroPad Inputs PrBoom inputs Menu Cancel Menu Cancel Quick Save Quick Save Show/Hide Map Show/Hide Map Show/Hide Menu Show/Hide Menu D-Pad Up D-Pad Up D-Pad Down D-Pad Down D-Pad Left D-Pad Left D-Pad Right D-Pad Right Menu Select Menu Select Quick Load Quick Load Previous Weapon Previous Weapon Next Weapon Next Weapon Use Use Fire Fire Toggle Run Toggle Run 180 Turn 180 Turn  X Strafe Left/Right  Y Move Forwards/Backwards  X Look Left/Right"},{"location":"library/boom3/#external-links","title":"External Links","text":"<ul> <li>Official dhewm3 Website</li> <li>Official dhewm3 Repository</li> <li>Libretro Boom 3 Core info file</li> <li>Libretro Boom 3 xp Core info file</li> <li>Libretro Boom 3 Github Repository</li> <li>Report Libretro Boom 3 Core Issues Here</li> </ul>"},{"location":"library/boom3/#id-software","title":"id Software","text":"<ul> <li>Doom 1&amp;2 (PrBoom)</li> </ul> <ol> <li> <p>Core renamed to Boom 3 from Dhewm3 based on original author request. \u21a9</p> </li> </ol>"},{"location":"library/bsnes-jg/","title":"Nintendo - SNES / Famicom (bsnes-jg)","text":""},{"location":"library/bsnes-jg/#background","title":"Background","text":"<p>bsnes-jg is a cycle accurate emulator for the Super Famicom/Super Nintendo Entertainment System, including support for the Super Game Boy, BS-X Satellaview, and Sufami Turbo.</p> <p>This is a fork of bsnes v115. Many changes have been made post-fork:</p> <ul> <li>Higher quality resampler with settings</li> <li>Improved performance without loss of accuracy</li> <li>Portability improvements</li> <li>Removal of accuracy-reducing hacks and unnecessary code</li> <li>Significant increase in standards compliance</li> <li>Translation to the C++ Standard Library (ISO C++11)</li> </ul>"},{"location":"library/bsnes-jg/#authorlicense","title":"Author/License","text":"<p>The bsnes-jg core has been authored by</p> <ul> <li>byuu</li> <li>Rupert Carmichael (carmiker)</li> </ul> <p>The bsnes-jg core is licensed under</p> <ul> <li>GPLv3</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/bsnes-jg/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the bsnes-jg core have the following file extensions:</p> <ul> <li>.sfc</li> <li>.smc</li> <li>.gb</li> <li>.gbc</li> <li>.st</li> <li>.bs</li> </ul>"},{"location":"library/bsnes-jg/#bios","title":"BIOS","text":"<p>Required or optional firmware files go in the frontend's system directory.</p> Filename Description md5sum dsp1.data.rom DSP1 co-processor firmware 3d81b45fa0c2aa8b852dfb1ece7c0971 dsp1.program.rom DSP1 co-processor firmware ae209fbe789fbf11a48aea5ab1197321 dsp1b.data.rom DSP1B co-processor firmware 1e3f568634a7d8284020dddc0ae905bc dsp1b.program.rom DSP1B co-processor firmware d10f446888e097cbf500f3f663cf4f6d dsp2.data.rom DSP2 co-processor firmware e9417e29223b139c3c4b635a2a3b8744 dsp2.program.rom DSP2 co-processor firmware aa6e5922a3ed5ded54f24247c11143c5 dsp3.data.rom DSP3 co-processor firmware 0a81210c0a940b997dd9843281008ee6 dsp3.program.rom DSP3 co-processor firmware d99ca4562818d49cee1f242705bba6f8 dsp4.data.rom DSP4 co-processor firmware ee4990879eb68e3cbca239c5bc20303d dsp4.program.rom DSP4 co-processor firmware a151023b948b90ffc23a5b594bb6fef2 cx4.data.rom CX4 co-processor firmware 037ac4296b6b6a5c47c440188d3c72e3 st010.data.rom ST010 co-processor firmware 254d70762b6f59f99c27c395aba7d07d st010.program.rom ST010 co-processor firmware 1d70019179a59a566a0bb5d3f2845544 st011.data.rom ST011 co-processor firmware 10bd3f4aa949737ab9836512c35bcc29 st011.program.rom ST011 co-processor firmware 95222ebf1c0c2990bcf25db43743f032 st018.data.rom ST018 co-processor firmware 49c898b60d0f15e90d0ba780dd12f366 st018.program.rom ST018 co-processor firmware dda40ccd57390c96e49d30a041f9a9e7"},{"location":"library/bsnes-jg/#features","title":"Features","text":"<p>Frontend-level settings or features that the bsnes-jg core respects.</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2715 Core Options \u2714 Memory Monitoring (achievements) \u2714 RetroArch Cheats \u2714 Native Cheats \u2714 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2714 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2714 LEDs \u2715"},{"location":"library/bsnes-jg/#directories","title":"Directories","text":"<p>The bsnes-jg core's library name is 'bsnes-jg'</p> <p>The bsnes-jg core saves/loads to/from these directories.</p> <p>Frontend's Save directory</p> File Description *.srm Cartridge-based battery saves *.rtc Real Time Clock data <p>Frontend's State directory</p> File Description *.state# State"},{"location":"library/bsnes-jg/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The bsnes-jg core's core provided FPS is 60.098812 for NTSC games and 50.006979 for PAL games.</li> <li>The bsnes-jg core's core provided sample rate is 48000Hz</li> <li>The bsnes-jg core provides adjustable overscan and aspect ratio options.</li> </ul>"},{"location":"library/bsnes-jg/#subsystems","title":"Subsystems","text":"<p>bsnes-jg supports Super Game Boy, BS-X Satellaview, and Sufami Turbo via the Subsystem API.</p> <p>For Super Game Boy, you will need a Game Boy ROM (.gb/gbc) and Super Game Boy ROM.</p> <p>For BS-X Satellaview, you will need a BS Memory dump (.bs) and BS-X BIOS ROM.</p> <p>For Sufami Turbo (1 or 2 Carts), you will need Sufami Turbo ROMs (.st) and the Sufami Turbo ROM.</p> Subsystem Description sgb Super Game Boy bsx BS-X Satellaview sufami Sufami Turbo (One Cart) sufami2 Sufami Turbo (Two Carts) <p>Command Line</p> <pre><code>retroarch -L {path to bsnes core} {path to Super GameBoy ROM} --subsystem sgb {path to GameBoy rom}\n</code></pre> <p>RetroArch GUI</p> <p>Load the Game Boy ROM through 'Load SuperGame Boy' in RetroArch's Main Menu.</p> <p></p> <p></p> <p>Next, load the Super Game Boy BIOS ROM through 'Load Super GameBoy' in RetroArch's Menu Menu.</p> <p></p> <p></p> <p>Then, start the content by selecting 'Start GameBoy' In RetroArch's Menu Menu.</p> <p></p>"},{"location":"library/bsnes-jg/#msu-1","title":"MSU-1","text":"<p>MSU-1 is supported. To load an MSU-1 enhanced ROM, simply load the .sfc which resides in the same directory as the .msu and audio tracks.</p>"},{"location":"library/bsnes-jg/#core-options","title":"Core options","text":"<ul> <li> <p>Delay LLE Coprocessor Sync (Restart) [bsnes_jg_coproc_delaysync] (Off|On)</p> <p>Delay sync when using Low Level Coprocessor Emulation for more speed at the cost of accuracy</p> </li> <li> <p>Prefer HLE Coprocessor Emulation (Restart) [bsnes_jg_coproc_preferhle] (Off|On)</p> <p>Delay sync when using Low Level Coprocessor Emulation for more speed at the cost of accuracy</p> </li> <li> <p>Hotfixes (Restart) [bsnes_jg_hotfixes] (Off|On)</p> <p>Apply hotfixes when playing a handful of games released with major bugs (which are exhibited on real hardware). Games in question: Dirt Racer, Magical Drop, Rendering Ranger R2</p> </li> <li> <p>Internal Run-Ahead [bsnes_jg_runahead] (0|1|2|3|4)</p> <p>Simulate the system ahead of time and roll back to reduce input latency. Has very high system requirements.</p> </li> <li> <p>Resampler Quality (Restart) [bsnes_jg_rsqual] (Fast|Medium|Best)</p> <p>Set the internal resampler's quality level (you may hear a difference if you use pro audio equipment and your imagination)</p> </li> <li> <p>SPC Interpolation Algorithm [bsnes_jg_spc_interp] (Gaussian|Sinc)</p> <p>Set the emulated sound chip sample interpolation algorithm: Gaussian is considered more accurate, while Sinc is cleaner, but still produces very accurate output.</p> </li> <li> <p>Aspect Ratio [bsnes_jg_aspect] (Auto|1:1|8:7|11:8|4:3)</p> <p>Set the Aspect Ratio</p> </li> <li> <p>Mask Overscan (Top) [bsnes_jg_overscan_t] (0|4|8|12|16|20)</p> <p>Mask off pixels hidden by a bezel or border on original CRTs (top)</p> </li> <li> <p>Mask Overscan (Bottom) [bsnes_jg_overscan_b] (0|4|8|12|16|20|21)</p> <p>Mask off pixels hidden by a bezel or border on original CRTs (bottom)</p> </li> <li> <p>Mask Overscan (Left) [bsnes_jg_overscan_l] (0|4|8|12|16|20)</p> <p>Mask off pixels hidden by a bezel or border on original CRTs (left)</p> </li> <li> <p>Mask Overscan (Right) [bsnes_jg_overscan_r] (0|4|8|12|16|20)</p> <p>Mask off pixels hidden by a bezel or border on original CRTs (right)</p> </li> <li> <p>Colour Adjustment - Luminance [bsnes_jg_luminance] (0%|10%|20%|30%|40%|50%|60%|70%|80%|90%|100%)</p> <p>Adjust Luminance</p> </li> <li> <p>Colour Adjustment - Saturation [bsnes_jg_saturation] (0%|10%|20%|30%|40%|50%|60%|70%|80%|90%|100%|110%|120%|130%|140%|150%|160%|170%|180%|190%|200%)</p> <p>Adjust Saturation</p> </li> <li> <p>Colour Adjustment - Gamma [bsnes_jg_gamma] (100%|110%|120%|130%|140%|150%|160%|170%|180%|190%|200%)</p> <p>Adjust Gamma</p> </li> <li> <p>Competition Timer [bsnes_jg_competition_timer] (3 Minutes|4 Minutes|5 Minutes|6 Minutes|7 Minutes|8 Minutes|9 Minutes|10 Minutes|11 Minutes|12 Minutes|13 Minutes|14 Minutes|15 Minutes|16 Minutes|17 Minutes|18 Minutes)</p> <p>Set the gameplay time for competition boards such as Campus Challenge '92 and PowerFest '94</p> </li> </ul>"},{"location":"library/bsnes-jg/#controllers","title":"Controllers","text":"<p>The bsnes-jg core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/bsnes-jg/#user-1-device-types","title":"User 1 device types","text":"<ul> <li>Gamepad - Gamepad</li> <li>SNES Mouse - Mouse</li> </ul>"},{"location":"library/bsnes-jg/#user-2-device-types","title":"User 2 device types","text":"<ul> <li>Gamepad - Gamepad</li> <li>SNES Mouse - Mouse</li> <li>Multitap - Gamepad - Allows for up to five players to play together in multitap games.</li> <li>SuperScope - Lightgun</li> <li>Justifier - Lightgun</li> </ul>"},{"location":"library/bsnes-jg/#multitap-support","title":"Multitap support","text":"<p>Activating multitap support in compatible games can be configured by switching to the Multitap device type for User 2.</p>"},{"location":"library/bsnes-jg/#controller-tables","title":"Controller tables","text":""},{"location":"library/bsnes-jg/#gamepad","title":"Gamepad","text":"User 1 - 5 Remap descriptors RetroPad Inputs B Y Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A X L R"},{"location":"library/bsnes-jg/#mouse","title":"Mouse","text":"RetroMouse Inputs SNES Mouse  Mouse Cursor SNES Mouse Cursor  Mouse 1 SNES Mouse Left Button  Mouse 2 SNES Mouse Right Button"},{"location":"library/bsnes-jg/#lightgun","title":"Lightgun","text":"RetroLightgun Inputs SuperScope Justifier(s)  Gun Crosshair SuperScope Crosshair Justifier Crosshair Gun Trigger SuperScope Trigger Justifier Trigger Gun Aux A SuperScope Cursor Gun Aux B SuperScope Turbo Gun Start SuperScope Pause Justifier Start"},{"location":"library/bsnes-jg/#compatibility","title":"Compatibility","text":"<p>The bsnes-jg core is compatible with all officially released SNES/SFC titles.</p>"},{"location":"library/bsnes-jg/#external-links","title":"External Links","text":"<ul> <li>Upstream bsnes-jg Repository</li> <li>Libretro bsnes-jg Core info file</li> <li>Libretro bsnes-jg Repository</li> <li>Report bsnes-jg Core Issues Here</li> </ul>"},{"location":"library/bsnes-jg/#see-also","title":"See also","text":""},{"location":"library/bsnes-jg/#nintendo-sufami-turbo","title":"Nintendo - Sufami Turbo","text":"<ul> <li>Nintendo - SNES / Famicom (Beetle bsnes)</li> <li>Nintendo - SNES / Famicom (bsnes-mercury Accuracy)</li> <li>Nintendo - SNES / Famicom (bsnes-mercury Balanced)</li> <li>Nintendo - SNES / Famicom (bsnes-mercury Performance)</li> <li>Nintendo - SNES / Famicom (bsnes Accuracy)</li> <li>Nintendo - SNES / Famicom (bsnes Balanced)</li> <li>Nintendo - SNES / Famicom (bsnes C++98 (v085))</li> <li>Nintendo - SNES / Famicom (bsnes Performance)</li> <li>Nintendo - SNES / Famicom (Snes9x)</li> <li>Nintendo - SNES / Famicom (Snes9x 2002)</li> <li>Nintendo - SNES / Famicom (Snes9x 2005 Plus)</li> <li>Nintendo - SNES / Famicom (Snes9x 2005)</li> <li>Nintendo - SNES / Famicom (Snes9x 2010)</li> </ul>"},{"location":"library/bsnes-jg/#nintendo-super-nintendo-entertainment-system-hacks","title":"Nintendo - Super Nintendo Entertainment System (+ Hacks)","text":"<ul> <li>Nintendo - SNES / Famicom (Beetle bsnes)</li> <li>Nintendo - SNES / Famicom (bsnes-mercury Accuracy)</li> <li>Nintendo - SNES / Famicom (bsnes-mercury Balanced)</li> <li>Nintendo - SNES / Famicom (bsnes-mercury Performance)</li> <li>Nintendo - SNES / Famicom (bsnes Accuracy)</li> <li>Nintendo - SNES / Famicom (bsnes Balanced)</li> <li>Nintendo - SNES / Famicom (bsnes C++98 (v085))</li> <li>Nintendo - SNES / Famicom (bsnes Performance)</li> <li>Nintendo - SNES / Famicom (higan Accuracy)</li> <li>Nintendo - SNES / Famicom (nSide Balanced)</li> <li>Nintendo - SNES / Famicom (Mesen-S)</li> <li>Nintendo - SNES / Famicom (Snes9x)</li> <li>Nintendo - SNES / Famicom (Snes9x 2002)</li> <li>Nintendo - SNES / Famicom (Snes9x 2005 Plus)</li> <li>Nintendo - SNES / Famicom (Snes9x 2005)</li> <li>Nintendo - SNES / Famicom (Snes9x 2010)</li> </ul>"},{"location":"library/bsnes_accuracy/","title":"Nintendo - SNES / Famicom (bsnes Accuracy)","text":""},{"location":"library/bsnes_accuracy/#background","title":"Background","text":"<p>bsnes is a Super Nintendo emulator that began development on 2004-10-14. It focuses on accuracy and clean code above all else. It never uses speed or compatibility hacks. As a result, the minimum system requirements are greater than with other emulators. bsnes comes in three different profiles (accuracy, balanced and performance) which contain minor differences in the PPU (graphics) emulation.</p> <p>This core has been compiled with the Accuracy profile.</p> <p>Highly accurate SNES emulation. Whether to use the Accuracy, or Balanced or Performance core depends on how much accuracy you want to give up for game performance.</p> <p>Please check the compatibility section for more information.</p>"},{"location":"library/bsnes_accuracy/#authorlicense","title":"Author/License","text":"<p>The bsnes Accuracy core has been authored by</p> <ul> <li>byuu</li> </ul> <p>The bsnes Accuracy core is licensed under</p> <ul> <li>GPLv3</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/bsnes_accuracy/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the bsnes Accuracy core have the following file extensions:</p> <ul> <li>.sfc</li> <li>.smc</li> <li>.bml</li> </ul>"},{"location":"library/bsnes_accuracy/#databases","title":"Databases","text":"<p>RetroArch database(s) that are associated with the bsnes Accuracy core:</p> <ul> <li>Nintendo - Super Nintendo Entertainment System</li> <li>Nintendo - Super Nintendo Entertainment System Hacks</li> <li>Nintendo - Sufami Turbo</li> </ul>"},{"location":"library/bsnes_accuracy/#bios","title":"BIOS","text":"<p>Required or optional firmware files go in the frontend's system directory.</p> <p>Attention</p> <p>The bsnes Accuracy core uses split ROMS for special chip games.</p> <p>Notable DSP1/DSP1B Games:</p> <ul> <li>Super Mario Kart</li> <li>Pilotwings</li> </ul> <p>Notable DSP2 Games:</p> <ul> <li>Dungeon Master</li> </ul> <p>Notable DSP3 Games:</p> <ul> <li>SD Gundam GX</li> </ul> <p>Notable DSP4 Games:</p> <ul> <li>Top Gear 3000</li> </ul> <p>Notable Cx4 Games:</p> <ul> <li>Mega Man X2</li> <li>Mega Man X3</li> </ul> Filename Description md5sum dsp1.data.rom DSP1 co-processor firmware 3d81b45fa0c2aa8b852dfb1ece7c0971 dsp1.program.rom DSP1 co-processor firmware ae209fbe789fbf11a48aea5ab1197321 dsp1b.data.rom DSP1B co-processor firmware 1e3f568634a7d8284020dddc0ae905bc dsp1b.program.rom DSP1B co-processor firmware d10f446888e097cbf500f3f663cf4f6d dsp2.data.rom DSP2 co-processor firmware e9417e29223b139c3c4b635a2a3b8744 dsp2.program.rom DSP2 co-processor firmware aa6e5922a3ed5ded54f24247c11143c5 dsp3.data.rom DSP3 co-processor firmware 0a81210c0a940b997dd9843281008ee6 dsp3.program.rom DSP3 co-processor firmware d99ca4562818d49cee1f242705bba6f8 dsp4.data.rom DSP4 co-processor firmware ee4990879eb68e3cbca239c5bc20303d dsp4.program.rom DSP4 co-processor firmware a151023b948b90ffc23a5b594bb6fef2 cx4.data.rom CX4 co-processor firmware 037ac4296b6b6a5c47c440188d3c72e3 st010.data.rom ST010 co-processor firmware 254d70762b6f59f99c27c395aba7d07d st010.program.rom ST010 co-processor firmware 1d70019179a59a566a0bb5d3f2845544 st011.data.rom ST011 co-processor firmware 10bd3f4aa949737ab9836512c35bcc29 st011.program.rom ST011 co-processor firmware 95222ebf1c0c2990bcf25db43743f032 st018.data.rom ST018 co-processor firmware 49c898b60d0f15e90d0ba780dd12f366 st018.program.rom ST018 co-processor firmware dda40ccd57390c96e49d30a041f9a9e7 sgb.boot.rom Super Game Boy BIOS"},{"location":"library/bsnes_accuracy/#features","title":"Features","text":"<p>Frontend-level settings or features that the bsnes Accuracy core respects.</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2715 Memory Monitoring (achievements) \u2714 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse - Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2714 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2714 LEDs \u2715"},{"location":"library/bsnes_accuracy/#directories","title":"Directories","text":"<p>The bsnes Accuracy core's internal core name is 'bsnes'</p> <p>The bsnes Accuracy core saves/loads to/from these directories.</p> <p>Frontend's Save directory</p> <ul> <li>'content-name'.srm (Cartridge battery save)</li> </ul> <p>Frontend's State directory</p> <ul> <li>'content-name'.state# (State)</li> </ul>"},{"location":"library/bsnes_accuracy/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The bsnes Accuracy core's core provided FPS is 60.0988118623 for NTSC games and 50.0069789082 for PAL games.</li> <li>The bsnes Accuracy core's core provided sample rate is 32040.5 Hz</li> <li>The bsnes Accuracy core's core provided aspect ratio is 4/3</li> </ul>"},{"location":"library/bsnes_accuracy/#super-gameboy","title":"Super GameBoy","text":"<p>Warning</p> <p>Super GameBoy support in this core is Windows only, and has buggy save state support and visual glitches. Use the higan Accuracy core or the nSide Balanced core for simplified, functional, and easily accessible Super Gameboy support.</p> <p>For Super GameBoy support, you need sgb.boot.rom (in RetroArch's System directory), a GameBoy ROM and a Super GameBoy ROM.</p> <p>Please note that the Game Boy and Super GameBoy ROMs have to be unzipped.</p> <p>Super GameBoy is supported via the Subsystem API.</p> <p>There are two ways to access the Subsystem API.</p> <p>One way is to access the Subsystem API through RetroArch's GUI like this.</p> <p>First, we load our GameBoy ROM through 'Load Super GameBoy' in RetroArch's Main Menu.</p> <p></p> <p></p> <p>Next, we load our Super GameBoy ROM through 'Load Super GameBoy' in RetroArch's Menu Menu.</p> <p></p> <p></p> <p>Then, we start the content by selecting 'Start GameBoy' In RetroArch's Menu Menu.</p> <p></p> <p>The other way is to launch RetroArch with commandline like this.</p> <pre><code>retroarch -L {path to bsnes core} {path to Super GameBoy ROM} --subsystem sgb {path to GameBoy rom}\n</code></pre>"},{"location":"library/bsnes_accuracy/#msu-1","title":"MSU-1","text":"<p>Attention</p> <p>MSU-1 support in this core is complex. Use the Snes9x core for simplified and easily accessible MSU-1 support.</p> <p>MSU-1 support can be used by loading a correct .bml file.</p> <p>There's documentation for loading MSU-1 games in standalone higan here.</p>"},{"location":"library/bsnes_accuracy/#controllers","title":"Controllers","text":"<p>The bsnes Accuracy core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/bsnes_accuracy/#user-1-device-types","title":"User 1 device types","text":"<ul> <li>None - Disables input.</li> <li>SNES Joypad - Joypad</li> <li>SNES Mouse - Mouse</li> </ul>"},{"location":"library/bsnes_accuracy/#user-2-device-types","title":"User 2 device types","text":"<ul> <li>None - Disables input.</li> <li>SNES Joypad - Joypad</li> <li>SNES Mouse - Mouse</li> <li>Multitap - Joypad - Allows for up to five players to play together in multitap games.</li> <li>SuperScope - Lightgun</li> <li>Justifier - Lightgun</li> <li>Justifiers - Lightgun - Two Justifiers are plugged in, for two-player Justifier games.</li> </ul>"},{"location":"library/bsnes_accuracy/#multitap-support","title":"Multitap support","text":"<p>Activating multitap support in compatible games can be configured by switching to the Multitap device type for User 2.</p>"},{"location":"library/bsnes_accuracy/#controller-tables","title":"Controller tables","text":""},{"location":"library/bsnes_accuracy/#joypad","title":"Joypad","text":"User 1 - 5 Remap descriptors RetroPad Inputs B Y Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A X L R"},{"location":"library/bsnes_accuracy/#mouse","title":"Mouse","text":"RetroMouse Inputs SNES Mouse  Mouse Cursor SNES Mouse Cursor  Mouse 1 SNES Mouse Left Button  Mouse 2 SNES Mouse Right Button"},{"location":"library/bsnes_accuracy/#lightgun","title":"Lightgun","text":"RetroLightgun Inputs SuperScope Justifier(s)  Gun Crosshair SuperScope Crosshair Justifier Crosshair Gun Trigger SuperScope Trigger Justifier Trigger Gun Aux A SuperScope Cursor Gun Aux B SuperScope Turbo Gun Start SuperScope Pause Justifier Start"},{"location":"library/bsnes_accuracy/#compatibility","title":"Compatibility","text":"<p>The bsnes Accuracy core fully emulates all SNES games that have ever been officially released.</p>"},{"location":"library/bsnes_accuracy/#external-links","title":"External Links","text":"<ul> <li>Official higan Website</li> <li>Official higan Upstream Downloads</li> <li>Libretro bsnes Accuracy Core info file</li> <li>Libretro bsnes Accuracy Github Repository</li> <li>Report Libretro bsnes Accuracy Core Issues Here</li> </ul>"},{"location":"library/bsnes_accuracy/#see-also","title":"See also","text":""},{"location":"library/bsnes_accuracy/#nintendo-sufami-turbo","title":"Nintendo - Sufami Turbo","text":"<ul> <li>Nintendo - SNES / Famicom (Beetle bsnes)</li> <li>Nintendo - SNES / Famicom (bsnes-jg)</li> <li>Nintendo - SNES / Famicom (bsnes-mercury Accuracy)</li> <li>Nintendo - SNES / Famicom (bsnes-mercury Balanced)</li> <li>Nintendo - SNES / Famicom (bsnes-mercury Performance)</li> <li>Nintendo - SNES / Famicom (bsnes Balanced)</li> <li>Nintendo - SNES / Famicom (bsnes C++98 (v085))</li> <li>Nintendo - SNES / Famicom (bsnes Performance)</li> <li>Nintendo - SNES / Famicom (Snes9x)</li> <li>Nintendo - SNES / Famicom (Snes9x 2002)</li> <li>Nintendo - SNES / Famicom (Snes9x 2005 Plus)</li> <li>Nintendo - SNES / Famicom (Snes9x 2005)</li> <li>Nintendo - SNES / Famicom (Snes9x 2010)</li> </ul>"},{"location":"library/bsnes_accuracy/#nintendo-super-nintendo-entertainment-system-hacks","title":"Nintendo - Super Nintendo Entertainment System (+ Hacks)","text":"<ul> <li>Nintendo - SNES / Famicom (Beetle bsnes)</li> <li>Nintendo - SNES / Famicom (bsnes-jg)</li> <li>Nintendo - SNES / Famicom (bsnes-mercury Accuracy)</li> <li>Nintendo - SNES / Famicom (bsnes-mercury Balanced)</li> <li>Nintendo - SNES / Famicom (bsnes-mercury Performance)</li> <li>Nintendo - SNES / Famicom (bsnes Balanced)</li> <li>Nintendo - SNES / Famicom (bsnes C++98 (v085))</li> <li>Nintendo - SNES / Famicom (bsnes Performance)</li> <li>Nintendo - SNES / Famicom (higan Accuracy)</li> <li>Nintendo - SNES / Famicom (nSide Balanced)</li> <li>Nintendo - SNES / Famicom (Mesen-S)</li> <li>Nintendo - SNES / Famicom (Snes9x)</li> <li>Nintendo - SNES / Famicom (Snes9x 2002)</li> <li>Nintendo - SNES / Famicom (Snes9x 2005 Plus)</li> <li>Nintendo - SNES / Famicom (Snes9x 2005)</li> <li>Nintendo - SNES / Famicom (Snes9x 2010)</li> </ul>"},{"location":"library/bsnes_balanced/","title":"Nintendo - SNES / Famicom (bsnes Balanced)","text":""},{"location":"library/bsnes_balanced/#background","title":"Background","text":"<p>bsnes is a Super Nintendo emulator that began development on 2004-10-14. It focuses on accuracy and clean code above all else. It never uses speed or compatibility hacks. As a result, the minimum system requirements are greater than with other emulators. bsnes comes in three different profiles (accuracy, balanced and performance) which contain minor differences in the PPU (graphics) emulation.</p> <p>This core has been compiled with the Balanced profile.</p> <p>Highly accurate SNES emulation. Whether to use the Accuracy, or Balanced or Performance core depends on how much accuracy you want to give up for game performance.</p> <p>Please check the compatibility section for more information.</p>"},{"location":"library/bsnes_balanced/#authorlicense","title":"Author/License","text":"<p>The bsnes Balanced core has been authored by</p> <ul> <li>byuu</li> </ul> <p>The bsnes Balanced core is licensed under</p> <ul> <li>GPLv3</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/bsnes_balanced/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the bsnes Balanced core have the following file extensions:</p> <ul> <li>.sfc</li> <li>.smc</li> <li>.bml</li> </ul>"},{"location":"library/bsnes_balanced/#databases","title":"Databases","text":"<p>RetroArch database(s) that are associated with the bsnes Balanced core:</p> <ul> <li>Nintendo - Super Nintendo Entertainment System</li> <li>Nintendo - Super Nintendo Entertainment System Hacks</li> <li>Nintendo - Sufami Turbo</li> </ul>"},{"location":"library/bsnes_balanced/#bios","title":"BIOS","text":"<p>Required or optional firmware files go in the frontend's system directory.</p> <p>Attention</p> <p>The bsnes Balanced core uses split ROMS for special chip games.</p> <p>Notable DSP1/DSP1B Games:</p> <ul> <li>Super Mario Kart</li> <li>Pilotwings</li> </ul> <p>Notable DSP2 Games:</p> <ul> <li>Dungeon Master</li> </ul> <p>Notable DSP3 Games:</p> <ul> <li>SD Gundam GX</li> </ul> <p>Notable DSP4 Games:</p> <ul> <li>Top Gear 3000</li> </ul> <p>Notable Cx4 Games:</p> <ul> <li>Mega Man X2</li> <li>Mega Man X3</li> </ul> Filename Description md5sum dsp1.data.rom DSP1 co-processor firmware 3d81b45fa0c2aa8b852dfb1ece7c0971 dsp1.program.rom DSP1 co-processor firmware ae209fbe789fbf11a48aea5ab1197321 dsp1b.data.rom DSP1B co-processor firmware 1e3f568634a7d8284020dddc0ae905bc dsp1b.program.rom DSP1B co-processor firmware d10f446888e097cbf500f3f663cf4f6d dsp2.data.rom DSP2 co-processor firmware e9417e29223b139c3c4b635a2a3b8744 dsp2.program.rom DSP2 co-processor firmware aa6e5922a3ed5ded54f24247c11143c5 dsp3.data.rom DSP3 co-processor firmware 0a81210c0a940b997dd9843281008ee6 dsp3.program.rom DSP3 co-processor firmware d99ca4562818d49cee1f242705bba6f8 dsp4.data.rom DSP4 co-processor firmware ee4990879eb68e3cbca239c5bc20303d dsp4.program.rom DSP4 co-processor firmware a151023b948b90ffc23a5b594bb6fef2 cx4.data.rom CX4 co-processor firmware 037ac4296b6b6a5c47c440188d3c72e3 st010.data.rom ST010 co-processor firmware 254d70762b6f59f99c27c395aba7d07d st010.program.rom ST010 co-processor firmware 1d70019179a59a566a0bb5d3f2845544 st011.data.rom ST011 co-processor firmware 10bd3f4aa949737ab9836512c35bcc29 st011.program.rom ST011 co-processor firmware 95222ebf1c0c2990bcf25db43743f032 st018.data.rom ST018 co-processor firmware 49c898b60d0f15e90d0ba780dd12f366 st018.program.rom ST018 co-processor firmware dda40ccd57390c96e49d30a041f9a9e7 sgb.boot.rom Super Game Boy BIOS"},{"location":"library/bsnes_balanced/#features","title":"Features","text":"<p>Frontend-level settings or features that the bsnes Balanced core respects.</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2715 Memory Monitoring (achievements) \u2714 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse - Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2714 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2714 LEDs \u2715"},{"location":"library/bsnes_balanced/#directories","title":"Directories","text":"<p>The bsnes Balanced core's internal core name is 'bsnes'</p> <p>The bsnes Balanced core saves/loads to/from these directories.</p> <p>Frontend's Save directory</p> <ul> <li>'content-name'.srm (Cartridge battery save)</li> </ul> <p>Frontend's State directory</p> <ul> <li>'content-name'.state# (State)</li> </ul>"},{"location":"library/bsnes_balanced/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The bsnes Balanced core's core provided FPS is 60.0988118623 for NTSC games and 50.0069789082 for PAL games.</li> <li>The bsnes Balanced core's core provided sample rate is 32040.5 Hz</li> <li>The bsnes Balanced core's core provided aspect ratio is 4/3</li> </ul>"},{"location":"library/bsnes_balanced/#super-gameboy","title":"Super GameBoy","text":"<p>Warning</p> <p>Super GameBoy support in this core is Windows only, and has buggy save state support and visual glitches. Use the higan Accuracy core or the nSide Balanced core for simplified, functional, and easily accessible Super Gameboy support.</p> <p>For Super GameBoy support, you need sgb.boot.rom (in RetroArch's System directory), a GameBoy ROM and a Super GameBoy ROM.</p> <p>Please note that the Game Boy and Super GameBoy ROMs have to be unzipped.</p> <p>Super GameBoy is supported via the Subsystem API.</p> <p>There are two ways to access the Subsystem API.</p> <p>One way is to access the Subsystem API through RetroArch's GUI like this.</p> <p>First, we load our GameBoy ROM through 'Load Super GameBoy' in RetroArch's Main Menu.</p> <p></p> <p></p> <p>Next, we load our Super GameBoy ROM through 'Load Super GameBoy' in RetroArch's Menu Menu.</p> <p></p> <p></p> <p>Then, we start the content by selecting 'Start GameBoy' In RetroArch's Menu Menu.</p> <p></p> <p>The other way is to launch RetroArch with commandline like this.</p> <pre><code>retroarch -L {path to bsnes core} {path to Super GameBoy ROM} --subsystem sgb {path to GameBoy rom}\n</code></pre>"},{"location":"library/bsnes_balanced/#msu-1","title":"MSU-1","text":"<p>Attention</p> <p>MSU-1 support in this core is complex. Use the Snes9x core for simplified and easily accessible MSU-1 support.</p> <p>MSU-1 support can be used by loading a correct .bml file.</p> <p>There's documentation for loading MSU-1 games in standalone higan here.</p>"},{"location":"library/bsnes_balanced/#controllers","title":"Controllers","text":"<p>The bsnes Balanced core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/bsnes_balanced/#user-1-device-types","title":"User 1 device types","text":"<ul> <li>None - Disables input.</li> <li>SNES Joypad - Joypad</li> <li>SNES Mouse - Mouse</li> </ul>"},{"location":"library/bsnes_balanced/#user-2-device-types","title":"User 2 device types","text":"<ul> <li>None - Disables input.</li> <li>SNES Joypad - Joypad</li> <li>SNES Mouse - Mouse</li> <li>Multitap - Joypad - Allows for up to five players to play together in multitap games.</li> <li>SuperScope - Lightgun</li> <li>Justifier - Lightgun</li> <li>Justifiers - Lightgun - Two Justifiers are plugged in, for two-player Justifier games.</li> </ul>"},{"location":"library/bsnes_balanced/#multitap-support","title":"Multitap support","text":"<p>Activating multitap support in compatible games can be configured by switching to the Multitap device type for User 2.</p>"},{"location":"library/bsnes_balanced/#controller-tables","title":"Controller tables","text":""},{"location":"library/bsnes_balanced/#joypad","title":"Joypad","text":"User 1 - 5 Remap descriptors RetroPad Inputs B Y Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A X L R"},{"location":"library/bsnes_balanced/#mouse","title":"Mouse","text":"RetroMouse Inputs SNES Mouse  Mouse Cursor SNES Mouse Cursor  Mouse 1 SNES Mouse Left Button  Mouse 2 SNES Mouse Right Button"},{"location":"library/bsnes_balanced/#lightgun","title":"Lightgun","text":"RetroLightgun Inputs SuperScope Justifier(s)  Gun Crosshair SuperScope Crosshair Justifier Crosshair Gun Trigger SuperScope Trigger Justifier Trigger Gun Aux A SuperScope Cursor Gun Aux B SuperScope Turbo Gun Start SuperScope Pause Justifier Start"},{"location":"library/bsnes_balanced/#compatibility","title":"Compatibility","text":"Game Issue A.S.P. Air Strike Patrol Black lines show up during gameplay. The shadow below the aircraft is missing."},{"location":"library/bsnes_balanced/#external-links","title":"External Links","text":"<ul> <li>Official higan Website</li> <li>Official higan Upstream Downloads</li> <li>Libretro bsnes Balanced Core info file</li> <li>Libretro bsnes Balanced Github Repository</li> <li>Report Libretro bsnes Balanced Core Issues Here</li> </ul>"},{"location":"library/bsnes_balanced/#see-also","title":"See also","text":""},{"location":"library/bsnes_balanced/#nintendo-sufami-turbo","title":"Nintendo - Sufami Turbo","text":"<ul> <li>Nintendo - SNES / Famicom (Beetle bsnes)</li> <li>Nintendo - SNES / Famicom (bsnes-jg)</li> <li>Nintendo - SNES / Famicom (bsnes-mercury Accuracy)</li> <li>Nintendo - SNES / Famicom (bsnes-mercury Balanced)</li> <li>Nintendo - SNES / Famicom (bsnes-mercury Performance)</li> <li>Nintendo - SNES / Famicom (bsnes Accuracy)</li> <li>Nintendo - SNES / Famicom (bsnes C++98 (v085))</li> <li>Nintendo - SNES / Famicom (bsnes Performance)</li> <li>Nintendo - SNES / Famicom (Snes9x)</li> <li>Nintendo - SNES / Famicom (Snes9x 2002)</li> <li>Nintendo - SNES / Famicom (Snes9x 2005 Plus)</li> <li>Nintendo - SNES / Famicom (Snes9x 2005)</li> <li>Nintendo - SNES / Famicom (Snes9x 2010)</li> </ul>"},{"location":"library/bsnes_balanced/#nintendo-super-nintendo-entertainment-system-hacks","title":"Nintendo - Super Nintendo Entertainment System (+ Hacks)","text":"<ul> <li>Nintendo - SNES / Famicom (Beetle bsnes)</li> <li>Nintendo - SNES / Famicom (bsnes-jg)</li> <li>Nintendo - SNES / Famicom (bsnes-mercury Accuracy)</li> <li>Nintendo - SNES / Famicom (bsnes-mercury Balanced)</li> <li>Nintendo - SNES / Famicom (bsnes-mercury Performance)</li> <li>Nintendo - SNES / Famicom (bsnes Accuracy)</li> <li>Nintendo - SNES / Famicom (bsnes C++98 (v085))</li> <li>Nintendo - SNES / Famicom (bsnes Performance)</li> <li>Nintendo - SNES / Famicom (higan Accuracy)</li> <li>Nintendo - SNES / Famicom (nSide Balanced)</li> <li>Nintendo - SNES / Famicom (Mesen-S)</li> <li>Nintendo - SNES / Famicom (Snes9x)</li> <li>Nintendo - SNES / Famicom (Snes9x 2002)</li> <li>Nintendo - SNES / Famicom (Snes9x 2005 Plus)</li> <li>Nintendo - SNES / Famicom (Snes9x 2005)</li> <li>Nintendo - SNES / Famicom (Snes9x 2010)</li> </ul>"},{"location":"library/bsnes_cplusplus98/","title":"Nintendo - SNES / Famicom (bsnes C++98 (v085))","text":""},{"location":"library/bsnes_cplusplus98/#background","title":"Background","text":"<p>bsnes c++98 is a special fork from around v085 that's been backported to work with older compilers. Many platforms Libretro supports such as various consoles (PlayStation 3) are stuck with super-old compilers that don't support the latest c++ features that are in the newer bsnes v094 ports.</p> <p>There's no reason to use this core now expect for edge cases on less compatible platforms.</p>"},{"location":"library/bsnes_cplusplus98/#authorlicense","title":"Author/License","text":"<p>The bsnes C++98 (v085) core has been authored by</p> <ul> <li>byuu</li> <li>Themaister</li> <li>Ver GreenEyes</li> </ul> <p>The bsnes C++98 (v085) core is licensed under</p> <ul> <li>GPLv3</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/bsnes_cplusplus98/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the bsnes C++98 (v085) core have the following file extensions:</p> <ul> <li>.sfc</li> <li>.smc</li> </ul>"},{"location":"library/bsnes_cplusplus98/#databases","title":"Databases","text":"<p>RetroArch database(s) that are associated with the bsnes C++98 (v085) core:</p> <ul> <li>Nintendo - Super Nintendo Entertainment System</li> <li>Nintendo - Super Nintendo Entertainment System Hacks</li> <li>Nintendo - Sufami Turbo</li> </ul>"},{"location":"library/bsnes_cplusplus98/#features","title":"Features","text":"<p>Frontend-level settings or features that the bsnes C++98 (v085) core respects.</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2715 Memory Monitoring (achievements) \u2714 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2714 LEDs \u2715"},{"location":"library/bsnes_cplusplus98/#directories","title":"Directories","text":"<p>The bsnes C++98 (v085) core's internal core name is '\"bSNES'</p> <p>The bsnes C++98 (v085) core saves/loads to/from these directories.</p> <p>Frontend's Save directory</p> <ul> <li>'content-name'.srm (Cartridge battery save)</li> </ul> <p>Frontend's State directory</p> <ul> <li>'content-name'.state# (State)</li> </ul>"},{"location":"library/bsnes_cplusplus98/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The bsnes C++98 (v085) core's core provided FPS is 60.0988118623 for NTSC games and 50.0069789082 for PAL games.</li> <li>The bsnes C++98 (v085) core's core provided sample rate is 32040.5 Hz.</li> <li>The bsnes C++98 (v085) core's core provided aspect ratio is (Ratio)</li> </ul>"},{"location":"library/bsnes_cplusplus98/#controllers","title":"Controllers","text":"<p>The bsnes C++98 (v085) core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/bsnes_cplusplus98/#user-1-device-types","title":"User 1 device types","text":"<ul> <li>None - Doesn't disable input.</li> <li>SNES Joypad - Joypad</li> <li>SNES Mouse - Mouse</li> </ul>"},{"location":"library/bsnes_cplusplus98/#user-2-device-types","title":"User 2 device types","text":"<ul> <li>None - Doesn't disable input.</li> <li>SNES Joypad - Joypad</li> <li>SNES Mouse - Mouse</li> <li>Multitap - Joypad - Allows for up to five players to play together in mulitap games.</li> <li>SuperScope - Lightgun</li> <li>Justifier - Lightgun</li> <li>Justifiers - Lightgun - Two Justifiers are plugged in, for two-player Justifier games.</li> </ul>"},{"location":"library/bsnes_cplusplus98/#multitap-support","title":"Multitap support","text":"<p>Activating multitap support in compatible games can be configured by switching to the Multitap device type for User 2.</p>"},{"location":"library/bsnes_cplusplus98/#controller-tables","title":"Controller tables","text":""},{"location":"library/bsnes_cplusplus98/#joypad","title":"Joypad","text":"User 1 - 5 Remap descriptors RetroPad Inputs B Y Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A X L R"},{"location":"library/bsnes_cplusplus98/#mouse","title":"Mouse","text":"RetroMouse Inputs SNES Mouse  Mouse Cursor SNES Mouse Cursor  Mouse 1 SNES Mouse Left Button  Mouse 2 SNES Mouse Right Button"},{"location":"library/bsnes_cplusplus98/#lightgun","title":"Lightgun","text":"RetroLightgun Inputs SuperScope Justifier(s)  Gun Crosshair SuperScope Crosshair Justifier Crosshair Gun Trigger SuperScope Trigger Justifier Trigger Gun Aux A SuperScope Cursor Gun Aux B SuperScope Turbo Gun Start SuperScope Pause Justifier Start"},{"location":"library/bsnes_cplusplus98/#compatibility","title":"Compatibility","text":"<p>Awaiting description.</p>"},{"location":"library/bsnes_cplusplus98/#external-links","title":"External Links","text":"<ul> <li>Official higan Website</li> <li>Official higan Upstream Downloads</li> <li>Libretro bsnes C++98 (v085) Core info file</li> <li>Libretro bsnes C++98 (v085) Github Repository</li> <li>Report Libretro bsnes C++98 (v085) Core Issues Here</li> </ul>"},{"location":"library/bsnes_cplusplus98/#see-also","title":"See also","text":""},{"location":"library/bsnes_cplusplus98/#nintendo-sufami-turbo","title":"Nintendo - Sufami Turbo","text":"<ul> <li>Nintendo - SNES / Famicom (Beetle bsnes)</li> <li>Nintendo - SNES / Famicom (bsnes-jg)</li> <li>Nintendo - SNES / Famicom (bsnes-mercury Accuracy)</li> <li>Nintendo - SNES / Famicom (bsnes-mercury Balanced)</li> <li>Nintendo - SNES / Famicom (bsnes-mercury Performance)</li> <li>Nintendo - SNES / Famicom (bsnes Accuracy)</li> <li>Nintendo - SNES / Famicom (bsnes Balanced)</li> <li>Nintendo - SNES / Famicom (bsnes Performance)</li> <li>Nintendo - SNES / Famicom (Snes9x)</li> <li>Nintendo - SNES / Famicom (Snes9x 2002)</li> <li>Nintendo - SNES / Famicom (Snes9x 2005 Plus)</li> <li>Nintendo - SNES / Famicom (Snes9x 2005)</li> <li>Nintendo - SNES / Famicom (Snes9x 2010)</li> </ul>"},{"location":"library/bsnes_cplusplus98/#nintendo-super-nintendo-entertainment-system-hacks","title":"Nintendo - Super Nintendo Entertainment System (+ Hacks)","text":"<ul> <li>Nintendo - SNES / Famicom (Beetle bsnes)</li> <li>Nintendo - SNES / Famicom (bsnes-jg)</li> <li>Nintendo - SNES / Famicom (bsnes-mercury Accuracy)</li> <li>Nintendo - SNES / Famicom (bsnes-mercury Balanced)</li> <li>Nintendo - SNES / Famicom (bsnes-mercury Performance)</li> <li>Nintendo - SNES / Famicom (bsnes Accuracy)</li> <li>Nintendo - SNES / Famicom (bsnes Balanced)</li> <li>Nintendo - SNES / Famicom (bsnes Performance)</li> <li>Nintendo - SNES / Famicom (higan Accuracy)</li> <li>Nintendo - SNES / Famicom (nSide Balanced)</li> <li>Nintendo - SNES / Famicom (Mesen-S)</li> <li>Nintendo - SNES / Famicom (Snes9x)</li> <li>Nintendo - SNES / Famicom (Snes9x 2002)</li> <li>Nintendo - SNES / Famicom (Snes9x 2005 Plus)</li> <li>Nintendo - SNES / Famicom (Snes9x 2005)</li> <li>Nintendo - SNES / Famicom (Snes9x 2010)</li> </ul>"},{"location":"library/bsnes_mercury_accuracy/","title":"Nintendo - SNES / Famicom (bsnes-mercury Accuracy)","text":""},{"location":"library/bsnes_mercury_accuracy/#background","title":"Background","text":"<p>bsnes-mercury is a fork of higan, aiming to restore some useful features that have been removed, as well as improving performance a bit. Maximum accuracy is still uncompromising; anything that affects accuracy is optional and off by default.</p> <p>This core has been compiled with the Accuracy profile.</p> <p>Improvements include:</p> <ul> <li>Improved framerate</li> <li>Faster ROM loading</li> <li>HLE emulation of some special chips is optionally restored (defaults to LLE), to improve performance and reduce reliance on those chip ROMs (they're not really easy to find). Chips for which no HLE emulation was developed (ST-0011 and ST-0018) are still LLE.</li> <li>SuperFX overclock is now available (off by default, of course); if enabled, it makes SuperFX look quite a lot smoother.</li> </ul> <p>The bsnes-mercury cores are not less accurate at default settings than the mainline bsnes cores (you have to explicitly enable 2 core options to switch to the less accurate special chip HLE).</p>"},{"location":"library/bsnes_mercury_accuracy/#authorlicense","title":"Author/License","text":"<p>The bsnes-mercury Accuracy core has been authored by</p> <ul> <li>byuu</li> <li>Alcaro</li> </ul> <p>The bsnes-mercury Accuracy core is licensed under</p> <ul> <li>GPLv3</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/bsnes_mercury_accuracy/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the bsnes-mercury Accuracy core have the following file extensions:</p> <ul> <li>.sfc</li> <li>.smc</li> <li>.bml</li> </ul>"},{"location":"library/bsnes_mercury_accuracy/#databases","title":"Databases","text":"<p>RetroArch database(s) that are associated with the bsnes-mercury Accuracy core:</p> <ul> <li>Nintendo - Super Nintendo Entertainment System</li> <li>Nintendo - Super Nintendo Entertainment System Hacks</li> <li>Nintendo - Sufami Turbo</li> </ul>"},{"location":"library/bsnes_mercury_accuracy/#bios","title":"BIOS","text":"<p>Required or optional firmware files go in the frontend's system directory.</p> Filename Description md5sum dsp1.data.rom DSP1 co-processor firmware 3d81b45fa0c2aa8b852dfb1ece7c0971 dsp1.program.rom DSP1 co-processor firmware ae209fbe789fbf11a48aea5ab1197321 dsp1b.data.rom DSP1B co-processor firmware 1e3f568634a7d8284020dddc0ae905bc dsp1b.program.rom DSP1B co-processor firmware d10f446888e097cbf500f3f663cf4f6d dsp2.data.rom DSP2 co-processor firmware e9417e29223b139c3c4b635a2a3b8744 dsp2.program.rom DSP2 co-processor firmware aa6e5922a3ed5ded54f24247c11143c5 dsp3.data.rom DSP3 co-processor firmware 0a81210c0a940b997dd9843281008ee6 dsp3.program.rom DSP3 co-processor firmware d99ca4562818d49cee1f242705bba6f8 dsp4.data.rom DSP4 co-processor firmware ee4990879eb68e3cbca239c5bc20303d dsp4.program.rom DSP4 co-processor firmware a151023b948b90ffc23a5b594bb6fef2 cx4.data.rom CX4 co-processor firmware 037ac4296b6b6a5c47c440188d3c72e3 st010.data.rom ST010 co-processor firmware 254d70762b6f59f99c27c395aba7d07d st010.program.rom ST010 co-processor firmware 1d70019179a59a566a0bb5d3f2845544 st011.data.rom ST011 co-processor firmware 10bd3f4aa949737ab9836512c35bcc29 st011.program.rom ST011 co-processor firmware 95222ebf1c0c2990bcf25db43743f032 st018.data.rom ST018 co-processor firmware 49c898b60d0f15e90d0ba780dd12f366 st018.program.rom ST018 co-processor firmware dda40ccd57390c96e49d30a041f9a9e7 sgb.boot.rom Super Game Boy BIOS"},{"location":"library/bsnes_mercury_accuracy/#features","title":"Features","text":"<p>Frontend-level settings or features that the bsnes-mercury Accuracy core respects.</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 Memory Monitoring (achievements) \u2714 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse - Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2714 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/bsnes_mercury_accuracy/#directories","title":"Directories","text":"<p>The bsnes-mercury Accuracy core's internal core name is 'bsnes-mercury'</p> <p>The bsnes-mercury Accuracy core saves/loads to/from these directories.</p> <p>Frontend's Save directory</p> <ul> <li>'content-name'.srm (Cartridge battery save)</li> </ul> <p>Frontend's State directory</p> <ul> <li>'content-name'.state# (State)</li> </ul>"},{"location":"library/bsnes_mercury_accuracy/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The bsnes-mercury Accuracy core's core provided FPS is 60.0988118623 for NTSC games and 50.0069789082 for PAL games.</li> <li>The bsnes-mercury Accuracy core's core provided sample rate is 32040.5 Hz</li> <li>The bsnes-mercury Accuracy core's core provided aspect ratio is dependent on the 'Preferred aspect ratio' core option.</li> </ul>"},{"location":"library/bsnes_mercury_accuracy/#super-gameboy","title":"Super GameBoy","text":"<p>Warning</p> <p>Super GameBoy support in this core is Windows only, and has buggy save state support and visual glitches. Use the higan Accuracy core or the nSide Balanced core for simplified, functional, and easily accessible Super Gameboy support.</p> <p>For Super GameBoy support, you need sgb.boot.rom (in RetroArch's System directory), a GameBoy ROM and a Super GameBoy ROM.</p> <p>Please note that the Game Boy and Super GameBoy ROMs have to be unzipped.</p> <p>Super GameBoy is supported via the Subsystem API.</p> <p>There are two ways to access the Subsystem API.</p> <p>One way is to access the Subsystem API through RetroArch's GUI like this.</p> <p>First, we load our GameBoy ROM through 'Load Super GameBoy' in RetroArch's Main Menu.</p> <p></p> <p></p> <p>Next, we load our Super GameBoy ROM through 'Load Super GameBoy' in RetroArch's Menu Menu.</p> <p></p> <p></p> <p>Then, we start the content by selecting 'Start GameBoy' In RetroArch's Menu Menu.</p> <p></p> <p>The other way is to launch RetroArch with commandline like this.</p> <pre><code>retroarch -L {path to bsnes core} {path to Super GameBoy ROM} --subsystem sgb {path to GameBoy rom}\n</code></pre>"},{"location":"library/bsnes_mercury_accuracy/#msu-1","title":"MSU-1","text":"<p>Attention</p> <p>MSU-1 support in this core is complex. Use the Snes9x core for simplified and easily accessible MSU-1 support.</p> <p>MSU-1 support can be used by loading a correct .bml file.</p> <p>There's documentation for loading MSU-1 games in standalone higan here.</p>"},{"location":"library/bsnes_mercury_accuracy/#core-options","title":"Core options","text":"<p>The bsnes-mercury Accuracy core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded.</p> <p>Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch.</p> <ul> <li> <p>Allow settings to reduce accuracy [bsnes_violate_accuracy] (disabled|enabled)</p> <p>Respect accuracy-impacting settings.</p> </li> <li> <p>Special chip accuracy [bsnes_chip_hle] (LLE|HLE)</p> <p>**The Allow settings to reduce accuracy core option must be enabled in order for this to function properly. **</p> <p>Choose whether to use LLE (real BIOS) or HLE (emulated BIOS) for enhancement chips.</p> <p>HLE is less accurate but also less demanding for the special chips.</p> <p>The ST-0011 and ST-0018 co-processors cannot be HLE'd.</p> </li> <li> <p>SuperFX speed [bsnes_superfx_overclock] (100%|150%|200%|300%|400%|500%|1000%)</p> <p>The Allow settings to reduce accuracy core option must be enabled in order for this to function properly.</p> <p>Overclock the SuperFX chip. 100% is stock clockspeed.</p> </li> <li> <p>System region [bsnes_region] (auto|ntsc|pal)</p> <p>Choose which region the system is from.</p> </li> <li> <p>Preferred aspect ratio [bsnes_aspect_ratio] (auto|ntsc|pal)</p> <p>Choose the preferred aspect ratio. RetroArch's aspect ratio must be set to Core provided in the Video settings.</p> </li> <li> <p>Crop overscan [bsnes_crop_overscan] (disabled|enabled)</p> <p>Crop out the potentially random glitchy video output that would have been hidden by the bezel around the edge of a standard-definition television screen.</p> </li> <li> <p>Gamma ramp (requires restart) [bsnes_gamma_ramp] (disabled|enabled)</p> <p>Simulates the way a console\u2019s display device differs from modern computer monitor\u2019s colour reproduction. In particular, it simulates the slightly-different gamma correction used by the Super Famicom.</p> </li> </ul> Gamma ramp - Disabled <p></p> Gamma ramp - Enabled <p></p>"},{"location":"library/bsnes_mercury_accuracy/#controllers","title":"Controllers","text":"<p>The bsnes-mercury Accuracy core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/bsnes_mercury_accuracy/#user-1-device-types","title":"User 1 device types","text":"<ul> <li>None - Doesn't disable input.</li> <li>SNES Joypad - Joypad</li> <li>SNES Mouse - Mouse</li> </ul>"},{"location":"library/bsnes_mercury_accuracy/#user-2-device-types","title":"User 2 device types","text":"<ul> <li>None - Doesn't disable input.</li> <li>SNES Joypad - Joypad</li> <li>SNES Mouse - Mouse</li> <li>Multitap - Joypad - Allows for up to five players to play together in multitap games.</li> <li>SuperScope - Lightgun</li> <li>Justifier - Lightgun</li> <li>Justifiers - Lightgun - Two Justifiers are plugged in, for two-player Justifier games.</li> </ul>"},{"location":"library/bsnes_mercury_accuracy/#multitap-support","title":"Multitap support","text":"<p>Activating multitap support in compatible games can be configured by switching to the Multitap device type for User 2.</p>"},{"location":"library/bsnes_mercury_accuracy/#controller-tables","title":"Controller tables","text":""},{"location":"library/bsnes_mercury_accuracy/#joypad","title":"Joypad","text":"User 1 - 5 Remap descriptors RetroPad Inputs B Y Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A X L R"},{"location":"library/bsnes_mercury_accuracy/#mouse","title":"Mouse","text":"RetroMouse Inputs SNES Mouse  Mouse Cursor SNES Mouse Cursor  Mouse 1 SNES Mouse Left Button  Mouse 2 SNES Mouse Right Button"},{"location":"library/bsnes_mercury_accuracy/#lightgun","title":"Lightgun","text":"RetroLightgun Inputs SuperScope Justifier(s)  Gun Crosshair SuperScope Crosshair Justifier Crosshair Gun Trigger SuperScope Trigger Justifier Trigger Gun Aux A SuperScope Cursor Gun Aux B SuperScope Turbo Gun Start SuperScope Pause Justifier Start"},{"location":"library/bsnes_mercury_accuracy/#compatibility","title":"Compatibility","text":"<p>The bsnes-mercury Accuracy core fully emulates all SNES games that have ever been officially released.</p>"},{"location":"library/bsnes_mercury_accuracy/#external-links","title":"External Links","text":"<ul> <li>Official higan Website</li> <li>Official higan Upstream Downloads</li> <li>Libretro bsnes-mercury Accuracy Core info file</li> <li>Libretro bsnes-mercury Accuracy Github Repository</li> <li>Report Libretro bsnes-mercury Accuracy Core Issues Here</li> </ul>"},{"location":"library/bsnes_mercury_accuracy/#see-also","title":"See also","text":""},{"location":"library/bsnes_mercury_accuracy/#nintendo-sufami-turbo","title":"Nintendo - Sufami Turbo","text":"<ul> <li>Nintendo - SNES / Famicom (Beetle bsnes)</li> <li>Nintendo - SNES / Famicom (bsnes-jg)</li> <li>Nintendo - SNES / Famicom (bsnes-mercury Balanced)</li> <li>Nintendo - SNES / Famicom (bsnes-mercury Performance)</li> <li>Nintendo - SNES / Famicom (bsnes Accuracy)</li> <li>Nintendo - SNES / Famicom (bsnes Balanced)</li> <li>Nintendo - SNES / Famicom (bsnes C++98 (v085))</li> <li>Nintendo - SNES / Famicom (bsnes Performance)</li> <li>Nintendo - SNES / Famicom (Snes9x)</li> <li>Nintendo - SNES / Famicom (Snes9x 2002)</li> <li>Nintendo - SNES / Famicom (Snes9x 2005 Plus)</li> <li>Nintendo - SNES / Famicom (Snes9x 2005)</li> <li>Nintendo - SNES / Famicom (Snes9x 2010)</li> </ul>"},{"location":"library/bsnes_mercury_accuracy/#nintendo-super-nintendo-entertainment-system-hacks","title":"Nintendo - Super Nintendo Entertainment System (+ Hacks)","text":"<ul> <li>Nintendo - SNES / Famicom (Beetle bsnes)</li> <li>Nintendo - SNES / Famicom (bsnes-jg)</li> <li>Nintendo - SNES / Famicom (bsnes-mercury Balanced)</li> <li>Nintendo - SNES / Famicom (bsnes-mercury Performance)</li> <li>Nintendo - SNES / Famicom (bsnes Accuracy)</li> <li>Nintendo - SNES / Famicom (bsnes Balanced)</li> <li>Nintendo - SNES / Famicom (bsnes C++98 (v085))</li> <li>Nintendo - SNES / Famicom (bsnes Performance)</li> <li>Nintendo - SNES / Famicom (higan Accuracy)</li> <li>Nintendo - SNES / Famicom (nSide Balanced)</li> <li>Nintendo - SNES / Famicom (Mesen-S)</li> <li>Nintendo - SNES / Famicom (Snes9x)</li> <li>Nintendo - SNES / Famicom (Snes9x 2002)</li> <li>Nintendo - SNES / Famicom (Snes9x 2005 Plus)</li> <li>Nintendo - SNES / Famicom (Snes9x 2005)</li> <li>Nintendo - SNES / Famicom (Snes9x 2010)</li> </ul>"},{"location":"library/bsnes_mercury_balanced/","title":"Nintendo - SNES / Famicom (bsnes-mercury Balanced)","text":""},{"location":"library/bsnes_mercury_balanced/#background","title":"Background","text":"<p>bsnes-mercury is a fork of higan, aiming to restore some useful features that have been removed, as well as improving performance a bit. Maximum accuracy is still uncompromisable; anything that affects accuracy is optional and off by default.</p> <p>This core has been compiled with the Balanced profile.</p> <p>Improvements include:</p> <ul> <li>Improved framerate</li> <li>Faster ROM loading</li> <li>HLE emulation of some special chips is optionally restored (defaults to LLE), to improve performance and reduce reliance on those chip ROMs (they're not really easy to find). Chips for which no HLE emulation was developed (ST-0011 and ST-0018) are still LLE.</li> <li>SuperFX overclock is now available (off by default, of course); if enabled, it makes SuperFX look quite a lot smoother.</li> </ul> <p>The bsnes-mercury cores are not less accurate at default settings than the mainline bsnes cores (you have to explicitly enable 2 core options to switch to the less accurate special chip HLE).</p>"},{"location":"library/bsnes_mercury_balanced/#authorlicense","title":"Author/License","text":"<p>The bsnes-mercury Balanced core has been authored by</p> <ul> <li>byuu</li> <li>Alcaro</li> </ul> <p>The bsnes-mercury Balanced core is licensed under</p> <ul> <li>GPLv3</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/bsnes_mercury_balanced/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the bsnes-mercury Balanced core have the following file extensions:</p> <ul> <li>.sfc</li> <li>.smc</li> <li>.bml</li> </ul>"},{"location":"library/bsnes_mercury_balanced/#databases","title":"Databases","text":"<p>RetroArch database(s) that are associated with the bsnes-mercury Balanced core:</p> <ul> <li>Nintendo - Super Nintendo Entertainment System</li> <li>Nintendo - Super Nintendo Entertainment System Hacks</li> <li>Nintendo - Sufami Turbo</li> </ul>"},{"location":"library/bsnes_mercury_balanced/#bios","title":"BIOS","text":"<p>Required or optional firmware files go in the frontend's system directory.</p> Filename Description md5sum dsp1.data.rom DSP1 co-processor firmware 3d81b45fa0c2aa8b852dfb1ece7c0971 dsp1.program.rom DSP1 co-processor firmware ae209fbe789fbf11a48aea5ab1197321 dsp1b.data.rom DSP1B co-processor firmware 1e3f568634a7d8284020dddc0ae905bc dsp1b.program.rom DSP1B co-processor firmware d10f446888e097cbf500f3f663cf4f6d dsp2.data.rom DSP2 co-processor firmware e9417e29223b139c3c4b635a2a3b8744 dsp2.program.rom DSP2 co-processor firmware aa6e5922a3ed5ded54f24247c11143c5 dsp3.data.rom DSP3 co-processor firmware 0a81210c0a940b997dd9843281008ee6 dsp3.program.rom DSP3 co-processor firmware d99ca4562818d49cee1f242705bba6f8 dsp4.data.rom DSP4 co-processor firmware ee4990879eb68e3cbca239c5bc20303d dsp4.program.rom DSP4 co-processor firmware a151023b948b90ffc23a5b594bb6fef2 cx4.data.rom CX4 co-processor firmware 037ac4296b6b6a5c47c440188d3c72e3 st010.data.rom ST010 co-processor firmware 254d70762b6f59f99c27c395aba7d07d st010.program.rom ST010 co-processor firmware 1d70019179a59a566a0bb5d3f2845544 st011.data.rom ST011 co-processor firmware 10bd3f4aa949737ab9836512c35bcc29 st011.program.rom ST011 co-processor firmware 95222ebf1c0c2990bcf25db43743f032 st018.data.rom ST018 co-processor firmware 49c898b60d0f15e90d0ba780dd12f366 st018.program.rom ST018 co-processor firmware dda40ccd57390c96e49d30a041f9a9e7 sgb.boot.rom Super Game Boy BIOS"},{"location":"library/bsnes_mercury_balanced/#features","title":"Features","text":"<p>Frontend-level settings or features that the bsnes-mercury Balanced core respects.</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 Memory Monitoring (achievements) \u2714 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse - Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2714 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/bsnes_mercury_balanced/#directories","title":"Directories","text":"<p>The bsnes-mercury Balanced core's internal core name is 'bsnes-mercury'</p> <p>The bsnes-mercury Balanced core saves/loads to/from these directories.</p> <p>Frontend's Save directory</p> <ul> <li>'content-name'.srm (Cartridge battery save)</li> </ul> <p>Frontend's State directory</p> <ul> <li>'content-name'.state# (State)</li> </ul>"},{"location":"library/bsnes_mercury_balanced/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The bsnes-mercury Balanced core's core provided FPS is 60.0988118623 for NTSC games and 50.0069789082 for PAL games.</li> <li>The bsnes-mercury Balanced core's core provided sample rate is 32040.5 Hz</li> <li>The bsnes-mercury Balanced core's core provided aspect ratio is dependent on the 'Preferred aspect ratio' core option.</li> </ul>"},{"location":"library/bsnes_mercury_balanced/#super-gameboy","title":"Super GameBoy","text":"<p>Warning</p> <p>Super GameBoy support in this core is Windows only, and has buggy save state support and visual glitches. Use the higan Accuracy core or the nSide Balanced core for simplified, functional, and easily accessible Super Gameboy support.</p> <p>For Super GameBoy support, you need sgb.boot.rom (in RetroArch's System directory), a GameBoy ROM and a Super GameBoy ROM.</p> <p>Please note that the Game Boy and Super GameBoy ROMs have to be unzipped.</p> <p>Super GameBoy is supported via the Subsystem API.</p> <p>There are two ways to access the Subsystem API.</p> <p>One way is to access the Subsystem API through RetroArch's GUI like this.</p> <p>First, we load our GameBoy ROM through 'Load Super GameBoy' in RetroArch's Main Menu.</p> <p></p> <p></p> <p>Next, we load our Super GameBoy ROM through 'Load Super GameBoy' in RetroArch's Menu Menu.</p> <p></p> <p></p> <p>Then, we start the content by selecting 'Start GameBoy' In RetroArch's Menu Menu.</p> <p></p> <p>The other way is to launch RetroArch with commandline like this.</p> <pre><code>retroarch -L {path to bsnes core} {path to Super GameBoy ROM} --subsystem sgb {path to GameBoy rom}\n</code></pre>"},{"location":"library/bsnes_mercury_balanced/#msu-1","title":"MSU-1","text":"<p>Attention</p> <p>MSU-1 support in this core is complex. Use the Snes9x core for simplified and easily accessible MSU-1 support.</p> <p>MSU-1 support can be used by loading a correct .bml file.</p> <p>There's documentation for loading MSU-1 games in standalone higan here.</p>"},{"location":"library/bsnes_mercury_balanced/#core-options","title":"Core options","text":"<p>The bsnes-mercury Balanced core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded.</p> <p>Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch.</p> <ul> <li> <p>Allow settings to reduce accuracy [bsnes_violate_accuracy] (disabled|enabled)</p> <p>Respect accuracy-impacting settings.</p> </li> <li> <p>Special chip accuracy [bsnes_chip_hle] (LLE|HLE)</p> <p>**The Allow settings to reduce accuracy core option must be enabled in order for this to function properly. **</p> <p>Choose whether to use LLE (real BIOS) or HLE (emulated BIOS) for enhancement chips.</p> <p>HLE is less accurate but also less demanding for the special chips.</p> <p>The ST-0011 and ST-0018 co-processors cannot be HLE'd.</p> </li> <li> <p>SuperFX speed [bsnes_superfx_overclock] (100%|150%|200%|300%|400%|500%|1000%)</p> <p>The Allow settings to reduce accuracy core option must be enabled in order for this to function properly.</p> <p>Overclock the SuperFX chip. 100% is stock clockspeed.</p> </li> <li> <p>System region [bsnes_region] (auto|ntsc|pal)</p> <p>Choose which region the system is from.</p> </li> <li> <p>Preferred aspect ratio [bsnes_aspect_ratio] (auto|ntsc|pal)</p> <p>Choose the preferred aspect ratio. RetroArch's aspect ratio must be set to Core provided in the Video settings.</p> </li> <li> <p>Crop overscan [bsnes_crop_overscan] (disabled|enabled)</p> <p>Crop out the potentially random glitchy video output that would have been hidden by the bezel around the edge of a standard-definition television screen.</p> </li> <li> <p>Gamma ramp (requires restart) [bsnes_gamma_ramp] (disabled|enabled)</p> <p>Simulates the way a console\u2019s display device differs from modern computer monitor\u2019s colour reproduction. In particular, it simulates the slightly-different gamma correction used by the Super Famicom.</p> </li> </ul> Gamma ramp - Disabled <p></p> Gamma ramp - Enabled <p></p>"},{"location":"library/bsnes_mercury_balanced/#controllers","title":"Controllers","text":"<p>The bsnes-mercury Balanced core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/bsnes_mercury_balanced/#user-1-device-types","title":"User 1 device types","text":"<ul> <li>None - Doesn't disable input.</li> <li>SNES Joypad - Joypad</li> <li>SNES Mouse - Mouse</li> </ul>"},{"location":"library/bsnes_mercury_balanced/#user-2-device-types","title":"User 2 device types","text":"<ul> <li>None - Doesn't disable input.</li> <li>SNES Joypad - Joypad</li> <li>SNES Mouse - Mouse</li> <li>Multitap - Joypad - Allows for up to five players to play together in multitap games.</li> <li>SuperScope - Lightgun</li> <li>Justifier - Lightgun</li> <li>Justifiers - Lightgun - Two Justifiers are plugged in, for two-player Justifier games.</li> </ul>"},{"location":"library/bsnes_mercury_balanced/#multitap-support","title":"Multitap support","text":"<p>Activating multitap support in compatible games can be configured by switching to the Multitap device type for User 2.</p>"},{"location":"library/bsnes_mercury_balanced/#controller-tables","title":"Controller tables","text":""},{"location":"library/bsnes_mercury_balanced/#joypad","title":"Joypad","text":"User 1 - 5 Remap descriptors RetroPad Inputs B Y Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A X L R"},{"location":"library/bsnes_mercury_balanced/#mouse","title":"Mouse","text":"RetroMouse Inputs SNES Mouse  Mouse Cursor SNES Mouse Cursor  Mouse 1 SNES Mouse Left Button  Mouse 2 SNES Mouse Right Button"},{"location":"library/bsnes_mercury_balanced/#lightgun","title":"Lightgun","text":"RetroLightgun Inputs SuperScope Justifier(s)  Gun Crosshair SuperScope Crosshair Justifier Crosshair Gun Trigger SuperScope Trigger Justifier Trigger Gun Aux A SuperScope Cursor Gun Aux B SuperScope Turbo Gun Start SuperScope Pause Justifier Start"},{"location":"library/bsnes_mercury_balanced/#compatibility","title":"Compatibility","text":"Game Issue A.S.P. Air Strike Patrol Black lines show up during gameplay. The shadow below the aircraft is missing."},{"location":"library/bsnes_mercury_balanced/#external-links","title":"External Links","text":"<ul> <li>Official higan Website</li> <li>Official higan Upstream Downloads</li> <li>Libretro bsnes-mercury Balanced Core info file</li> <li>Libretro bsnes-mercury Balanced Github Repository</li> <li>Report Libretro bsnes-mercury Balanced Core Issues Here</li> </ul>"},{"location":"library/bsnes_mercury_balanced/#see-also","title":"See also","text":""},{"location":"library/bsnes_mercury_balanced/#nintendo-sufami-turbo","title":"Nintendo - Sufami Turbo","text":"<ul> <li>Nintendo - SNES / Famicom (Beetle bsnes)</li> <li>Nintendo - SNES / Famicom (bsnes-jg)</li> <li>Nintendo - SNES / Famicom (bsnes-mercury Accuracy)</li> <li>Nintendo - SNES / Famicom (bsnes-mercury Performance)</li> <li>Nintendo - SNES / Famicom (bsnes Accuracy)</li> <li>Nintendo - SNES / Famicom (bsnes Balanced)</li> <li>Nintendo - SNES / Famicom (bsnes C++98 (v085))</li> <li>Nintendo - SNES / Famicom (bsnes Performance)</li> <li>Nintendo - SNES / Famicom (Snes9x)</li> <li>Nintendo - SNES / Famicom (Snes9x 2002)</li> <li>Nintendo - SNES / Famicom (Snes9x 2005 Plus)</li> <li>Nintendo - SNES / Famicom (Snes9x 2005)</li> <li>Nintendo - SNES / Famicom (Snes9x 2010)</li> </ul>"},{"location":"library/bsnes_mercury_balanced/#nintendo-super-nintendo-entertainment-system-hacks","title":"Nintendo - Super Nintendo Entertainment System (+ Hacks)","text":"<ul> <li>Nintendo - SNES / Famicom (Beetle bsnes)</li> <li>Nintendo - SNES / Famicom (bsnes-jg)</li> <li>Nintendo - SNES / Famicom (bsnes-mercury Accuracy)</li> <li>Nintendo - SNES / Famicom (bsnes-mercury Performance)</li> <li>Nintendo - SNES / Famicom (bsnes Accuracy)</li> <li>Nintendo - SNES / Famicom (bsnes Balanced)</li> <li>Nintendo - SNES / Famicom (bsnes C++98 (v085))</li> <li>Nintendo - SNES / Famicom (bsnes Performance)</li> <li>Nintendo - SNES / Famicom (higan Accuracy)</li> <li>Nintendo - SNES / Famicom (nSide Balanced)</li> <li>Nintendo - SNES / Famicom (Mesen-S)</li> <li>Nintendo - SNES / Famicom (Snes9x)</li> <li>Nintendo - SNES / Famicom (Snes9x 2002)</li> <li>Nintendo - SNES / Famicom (Snes9x 2005 Plus)</li> <li>Nintendo - SNES / Famicom (Snes9x 2005)</li> <li>Nintendo - SNES / Famicom (Snes9x 2010)</li> </ul>"},{"location":"library/bsnes_mercury_performance/","title":"Nintendo - SNES / Famicom (bsnes-mercury Performance)","text":""},{"location":"library/bsnes_mercury_performance/#background","title":"Background","text":"<p>bsnes-mercury is a fork of higan, aiming to restore some useful features that have been removed, as well as improving performance a bit. Maximum accuracy is still uncompromising; anything that affects accuracy is optional and off by default.</p> <p>This core has been compiled with the Performance profile.</p> <p>Improvements include:</p> <ul> <li>Improved framerate</li> <li>Faster ROM loading</li> <li>HLE emulation of some special chips is optionally restored (defaults to LLE), to improve performance and reduce reliance on those chip ROMs (they're not really easy to find). Chips for which no HLE emulation was developed (ST-0011 and ST-0018) are still LLE.</li> <li>SuperFX overclock is now available (off by default, of course); if enabled, it makes SuperFX look quite a lot smoother.</li> </ul> <p>The bsnes-mercury cores are not less accurate at default settings than the mainline bsnes cores (you have to explicitly enable 2 core options to switch to the less accurate special chip HLE).</p>"},{"location":"library/bsnes_mercury_performance/#authorlicense","title":"Author/License","text":"<p>The bsnes-mercury Performance core has been authored by</p> <ul> <li>byuu</li> <li>Alcaro</li> </ul> <p>The bsnes-mercury Performance core is licensed under</p> <ul> <li>GPLv3</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/bsnes_mercury_performance/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the bsnes-mercury Performance core have the following file extensions:</p> <ul> <li>.sfc</li> <li>.smc</li> <li>.bml</li> </ul>"},{"location":"library/bsnes_mercury_performance/#databases","title":"Databases","text":"<p>RetroArch database(s) that are associated with the bsnes-mercury Performance core:</p> <ul> <li>Nintendo - Super Nintendo Entertainment System</li> <li>Nintendo - Super Nintendo Entertainment System Hacks</li> <li>Nintendo - Sufami Turbo</li> </ul>"},{"location":"library/bsnes_mercury_performance/#bios","title":"BIOS","text":"<p>Required or optional firmware files go in the frontend's system directory.</p> Filename Description md5sum dsp1.data.rom DSP1 co-processor firmware 3d81b45fa0c2aa8b852dfb1ece7c0971 dsp1.program.rom DSP1 co-processor firmware ae209fbe789fbf11a48aea5ab1197321 dsp1b.data.rom DSP1B co-processor firmware 1e3f568634a7d8284020dddc0ae905bc dsp1b.program.rom DSP1B co-processor firmware d10f446888e097cbf500f3f663cf4f6d dsp2.data.rom DSP2 co-processor firmware e9417e29223b139c3c4b635a2a3b8744 dsp2.program.rom DSP2 co-processor firmware aa6e5922a3ed5ded54f24247c11143c5 dsp3.data.rom DSP3 co-processor firmware 0a81210c0a940b997dd9843281008ee6 dsp3.program.rom DSP3 co-processor firmware d99ca4562818d49cee1f242705bba6f8 dsp4.data.rom DSP4 co-processor firmware ee4990879eb68e3cbca239c5bc20303d dsp4.program.rom DSP4 co-processor firmware a151023b948b90ffc23a5b594bb6fef2 cx4.data.rom CX4 co-processor firmware 037ac4296b6b6a5c47c440188d3c72e3 st010.data.rom ST010 co-processor firmware 254d70762b6f59f99c27c395aba7d07d st010.program.rom ST010 co-processor firmware 1d70019179a59a566a0bb5d3f2845544 st011.data.rom ST011 co-processor firmware 10bd3f4aa949737ab9836512c35bcc29 st011.program.rom ST011 co-processor firmware 95222ebf1c0c2990bcf25db43743f032 st018.data.rom ST018 co-processor firmware 49c898b60d0f15e90d0ba780dd12f366 st018.program.rom ST018 co-processor firmware dda40ccd57390c96e49d30a041f9a9e7 sgb.boot.rom Super Game Boy BIOS"},{"location":"library/bsnes_mercury_performance/#features","title":"Features","text":"<p>Frontend-level settings or features that the bsnes-mercury Performance core respects.</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 Memory Monitoring (achievements) \u2714 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse - Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2714 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/bsnes_mercury_performance/#directories","title":"Directories","text":"<p>The bsnes-mercury Performance core's internal core name is 'bsnes-mercury'</p> <p>The bsnes-mercury Performance core saves/loads to/from these directories.</p> <p>Frontend's Save directory</p> <ul> <li>'content-name'.srm (Cartridge battery save)</li> </ul> <p>Frontend's State directory</p> <ul> <li>'content-name'.state# (State)</li> </ul>"},{"location":"library/bsnes_mercury_performance/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The bsnes-mercury Performance core's core provided FPS is 60.0988118623 for NTSC games and 50.0069789082 for PAL games.</li> <li>The bsnes-mercury Performance core's core provided sample rate is 32040.5 Hz</li> <li>The bsnes-mercury Performance core's core provided aspect ratio is dependent on the 'Preferred aspect ratio' core option.</li> </ul>"},{"location":"library/bsnes_mercury_performance/#super-gameboy","title":"Super GameBoy","text":"<p>Warning</p> <p>Super GameBoy support in this core is Windows only, and has buggy save state support and visual glitches. Use the higan Accuracy core or the nSide Balanced core for simplified, functional, and easily accessible Super Gameboy support.</p> <p>For Super GameBoy support, you need sgb.boot.rom (in RetroArch's System directory), a GameBoy ROM and a Super GameBoy ROM.</p> <p>Please note that the Game Boy and Super GameBoy ROMs have to be unzipped.</p> <p>Super GameBoy is supported via the Subsystem API.</p> <p>There are two ways to access the Subsystem API.</p> <p>One way is to access the Subsystem API through RetroArch's GUI like this.</p> <p>First, we load our GameBoy ROM through 'Load Super GameBoy' in RetroArch's Main Menu.</p> <p></p> <p></p> <p>Next, we load our Super GameBoy ROM through 'Load Super GameBoy' in RetroArch's Menu Menu.</p> <p></p> <p></p> <p>Then, we start the content by selecting 'Start GameBoy' In RetroArch's Menu Menu.</p> <p></p> <p>The other way is to launch RetroArch with commandline like this.</p> <pre><code>retroarch -L {path to bsnes core} {path to Super GameBoy ROM} --subsystem sgb {path to GameBoy rom}\n</code></pre>"},{"location":"library/bsnes_mercury_performance/#msu-1","title":"MSU-1","text":"<p>Attention</p> <p>MSU-1 support in this core is complex. Use the Snes9x core for simplified and easily accessible MSU-1 support.</p> <p>MSU-1 support can be used by loading a correct .bml file.</p> <p>There's documentation for loading MSU-1 games in standalone higan here.</p>"},{"location":"library/bsnes_mercury_performance/#core-options","title":"Core options","text":"<p>The bsnes-mercury Performance core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded.</p> <p>Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch.</p> <ul> <li> <p>Allow settings to reduce accuracy [bsnes_violate_accuracy] (disabled|enabled)</p> <p>Respect accuracy-impacting settings.</p> </li> <li> <p>Special chip accuracy [bsnes_chip_hle] (LLE|HLE)</p> <p>**The Allow settings to reduce accuracy core option must be enabled in order for this to function properly. **</p> <p>Choose whether to use LLE (real BIOS) or HLE (emulated BIOS) for enhancement chips.</p> <p>HLE is less accurate but also less demanding for the special chips.</p> <p>The ST-0011 and ST-0018 co-processors cannot be HLE'd.</p> </li> <li> <p>SuperFX speed [bsnes_superfx_overclock] (100%|150%|200%|300%|400%|500%|1000%)</p> <p>The Allow settings to reduce accuracy core option must be enabled in order for this to function properly.</p> <p>Overclock the SuperFX chip. 100% is stock clockspeed.</p> </li> <li> <p>System region [bsnes_region] (auto|ntsc|pal)</p> <p>Choose which region the system is from.</p> </li> <li> <p>Preferred aspect ratio [bsnes_aspect_ratio] (auto|ntsc|pal)</p> <p>Choose the preferred aspect ratio. RetroArch's aspect ratio must be set to Core provided in the Video settings.</p> </li> <li> <p>Crop overscan [bsnes_crop_overscan] (disabled|enabled)</p> <p>Crop out the potentially random glitchy video output that would have been hidden by the bezel around the edge of a standard-definition television screen.</p> </li> <li> <p>Gamma ramp (requires restart) [bsnes_gamma_ramp] (disabled|enabled)</p> <p>Simulates the way a console\u2019s display device differs from modern computer monitor\u2019s colour reproduction. In particular, it simulates the slightly-different gamma correction used by the Super Famicom.</p> </li> </ul> Gamma ramp - Disabled <p></p> Gamma ramp - Enabled <p></p>"},{"location":"library/bsnes_mercury_performance/#controllers","title":"Controllers","text":"<p>The bsnes-mercury Performance core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/bsnes_mercury_performance/#user-1-device-types","title":"User 1 device types","text":"<ul> <li>None - Doesn't disable input.</li> <li>SNES Joypad - Joypad</li> <li>SNES Mouse - Mouse</li> </ul>"},{"location":"library/bsnes_mercury_performance/#user-2-device-types","title":"User 2 device types","text":"<ul> <li>None - Doesn't disable input.</li> <li>SNES Joypad - Joypad</li> <li>SNES Mouse - Mouse</li> <li>Multitap - Joypad - Allows for up to five players to play together in multitap games.</li> <li>SuperScope - Lightgun</li> <li>Justifier - Lightgun</li> <li>Justifiers - Lightgun - Two Justifiers are plugged in, for two-player Justifier games.</li> </ul>"},{"location":"library/bsnes_mercury_performance/#multitap-support","title":"Multitap support","text":"<p>Activating multitap support in compatible games can be configured by switching to the Multitap device type for User 2.</p>"},{"location":"library/bsnes_mercury_performance/#controller-tables","title":"Controller tables","text":""},{"location":"library/bsnes_mercury_performance/#joypad","title":"Joypad","text":"User 1 - 5 Remap descriptors RetroPad Inputs B Y Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A X L R"},{"location":"library/bsnes_mercury_performance/#mouse","title":"Mouse","text":"RetroMouse Inputs SNES Mouse  Mouse Cursor SNES Mouse Cursor  Mouse 1 SNES Mouse Left Button  Mouse 2 SNES Mouse Right Button"},{"location":"library/bsnes_mercury_performance/#lightgun","title":"Lightgun","text":"RetroLightgun Inputs SuperScope Justifier(s)  Gun Crosshair SuperScope Crosshair Justifier Crosshair Gun Trigger SuperScope Trigger Justifier Trigger Gun Aux A SuperScope Cursor Gun Aux B SuperScope Turbo Gun Start SuperScope Pause Justifier Start"},{"location":"library/bsnes_mercury_performance/#compatibility","title":"Compatibility","text":"Game Issue A.S.P. Air Strike Patrol Black lines show up during gameplay. The shadow below the aircraft is missing. Funaki Masakatsu Hybrid Wrestler \u2013 Tougi Denshou Corrupted graphics on the Pancrase logo screen. Mecarobot Golf The ground \"wobbles\" during gameplay. Mega Man X2 Only displays a black screen. Mega Man X3 Only displays a black screen. Mortal Kombat II Various glitched graphics. NHL \u201994 Corrupted line on the NHL logo screen. Tetris Attack Lots of flickering on the VS. CPU mode map screen."},{"location":"library/bsnes_mercury_performance/#external-links","title":"External Links","text":"<ul> <li>Official higan Website</li> <li>Official higan Upstream Downloads</li> <li>Libretro bsnes-mercury Performance Core info file</li> <li>Libretro bsnes-mercury Performance Github Repository</li> <li>Report Libretro bsnes-mercury Performance Core Issues Here</li> </ul>"},{"location":"library/bsnes_mercury_performance/#see-also","title":"See also","text":""},{"location":"library/bsnes_mercury_performance/#nintendo-sufami-turbo","title":"Nintendo - Sufami Turbo","text":"<ul> <li>Nintendo - SNES / Famicom (Beetle bsnes)</li> <li>Nintendo - SNES / Famicom (bsnes-jg)</li> <li>Nintendo - SNES / Famicom (bsnes-mercury Accuracy)</li> <li>Nintendo - SNES / Famicom (bsnes-mercury Balanced)</li> <li>Nintendo - SNES / Famicom (bsnes Accuracy)</li> <li>Nintendo - SNES / Famicom (bsnes Balanced)</li> <li>Nintendo - SNES / Famicom (bsnes C++98 (v085))</li> <li>Nintendo - SNES / Famicom (bsnes Performance)</li> <li>Nintendo - SNES / Famicom (Snes9x)</li> <li>Nintendo - SNES / Famicom (Snes9x 2002)</li> <li>Nintendo - SNES / Famicom (Snes9x 2005 Plus)</li> <li>Nintendo - SNES / Famicom (Snes9x 2005)</li> <li>Nintendo - SNES / Famicom (Snes9x 2010)</li> </ul>"},{"location":"library/bsnes_mercury_performance/#nintendo-super-nintendo-entertainment-system-hacks","title":"Nintendo - Super Nintendo Entertainment System (+ Hacks)","text":"<ul> <li>Nintendo - SNES / Famicom (Beetle bsnes)</li> <li>Nintendo - SNES / Famicom (bsnes-jg)</li> <li>Nintendo - SNES / Famicom (bsnes-mercury Accuracy)</li> <li>Nintendo - SNES / Famicom (bsnes-mercury Balanced)</li> <li>Nintendo - SNES / Famicom (bsnes Accuracy)</li> <li>Nintendo - SNES / Famicom (bsnes Balanced)</li> <li>Nintendo - SNES / Famicom (bsnes C++98 (v085))</li> <li>Nintendo - SNES / Famicom (bsnes Performance)</li> <li>Nintendo - SNES / Famicom (higan Accuracy)</li> <li>Nintendo - SNES / Famicom (nSide Balanced)</li> <li>Nintendo - SNES / Famicom (Mesen-S)</li> <li>Nintendo - SNES / Famicom (Snes9x)</li> <li>Nintendo - SNES / Famicom (Snes9x 2002)</li> <li>Nintendo - SNES / Famicom (Snes9x 2005 Plus)</li> <li>Nintendo - SNES / Famicom (Snes9x 2005)</li> <li>Nintendo - SNES / Famicom (Snes9x 2010)</li> </ul>"},{"location":"library/bsnes_performance/","title":"Nintendo - SNES / Famicom (bsnes Performance)","text":""},{"location":"library/bsnes_performance/#background","title":"Background","text":"<p>bsnes is a Super Nintendo emulator that began development on 2004-10-14. It focuses on accuracy and clean code above all else. It never uses speed or compatibility hacks. As a result, the minimum system requirements are greater than with other emulators. bsnes comes in three different profiles (accuracy, balanced and performance) which contain minor differences in the PPU (graphics) emulation.</p> <p>This core has been compiled with the Performance profile.</p> <p>Highly accurate SNES emulation. Whether to use the Accuracy, or Balanced or Performance core depends on how much accuracy you want to give up for game performance.</p> <p>Please check the compatibility section for more information.</p>"},{"location":"library/bsnes_performance/#authorlicense","title":"Author/License","text":"<p>The bsnes Performance core has been authored by</p> <ul> <li>byuu</li> </ul> <p>The bsnes Performance core is licensed under</p> <ul> <li>GPLv3</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/bsnes_performance/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the bsnes Performance core have the following file extensions:</p> <ul> <li>.sfc</li> <li>.smc</li> <li>.bml</li> </ul>"},{"location":"library/bsnes_performance/#databases","title":"Databases","text":"<p>RetroArch database(s) that are associated with the bsnes Performance core:</p> <ul> <li>Nintendo - Super Nintendo Entertainment System</li> <li>Nintendo - Super Nintendo Entertainment System Hacks</li> <li>Nintendo - Sufami Turbo</li> </ul>"},{"location":"library/bsnes_performance/#bios","title":"BIOS","text":"<p>Required or optional firmware files go in the frontend's system directory.</p> <p>Attention</p> <p>The bsnes Performance core uses split ROMS for special chip games.</p> <p>Notable DSP1/DSP1B Games:</p> <ul> <li>Super Mario Kart</li> <li>Pilotwings</li> </ul> <p>Notable DSP2 Games:</p> <ul> <li>Dungeon Master</li> </ul> <p>Notable DSP3 Games:</p> <ul> <li>SD Gundam GX</li> </ul> <p>Notable DSP4 Games:</p> <ul> <li>Top Gear 3000</li> </ul> <p>Notable Cx4 Games:</p> <ul> <li>Mega Man X2</li> <li>Mega Man X3</li> </ul> Filename Description md5sum dsp1.data.rom DSP1 co-processor firmware 3d81b45fa0c2aa8b852dfb1ece7c0971 dsp1.program.rom DSP1 co-processor firmware ae209fbe789fbf11a48aea5ab1197321 dsp1b.data.rom DSP1B co-processor firmware 1e3f568634a7d8284020dddc0ae905bc dsp1b.program.rom DSP1B co-processor firmware d10f446888e097cbf500f3f663cf4f6d dsp2.data.rom DSP2 co-processor firmware e9417e29223b139c3c4b635a2a3b8744 dsp2.program.rom DSP2 co-processor firmware aa6e5922a3ed5ded54f24247c11143c5 dsp3.data.rom DSP3 co-processor firmware 0a81210c0a940b997dd9843281008ee6 dsp3.program.rom DSP3 co-processor firmware d99ca4562818d49cee1f242705bba6f8 dsp4.data.rom DSP4 co-processor firmware ee4990879eb68e3cbca239c5bc20303d dsp4.program.rom DSP4 co-processor firmware a151023b948b90ffc23a5b594bb6fef2 cx4.data.rom CX4 co-processor firmware 037ac4296b6b6a5c47c440188d3c72e3 st010.data.rom ST010 co-processor firmware 254d70762b6f59f99c27c395aba7d07d st010.program.rom ST010 co-processor firmware 1d70019179a59a566a0bb5d3f2845544 st011.data.rom ST011 co-processor firmware 10bd3f4aa949737ab9836512c35bcc29 st011.program.rom ST011 co-processor firmware 95222ebf1c0c2990bcf25db43743f032 st018.data.rom ST018 co-processor firmware 49c898b60d0f15e90d0ba780dd12f366 st018.program.rom ST018 co-processor firmware dda40ccd57390c96e49d30a041f9a9e7 sgb.boot.rom Super Game Boy BIOS"},{"location":"library/bsnes_performance/#features","title":"Features","text":"<p>Frontend-level settings or features that the bsnes Performance core respects.</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2715 Memory Monitoring (achievements) \u2714 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse - Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2714 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2714 LEDs \u2715"},{"location":"library/bsnes_performance/#directories","title":"Directories","text":"<p>The bsnes Performance core's internal core name is 'bsnes'</p> <p>The bsnes Performance core saves/loads to/from these directories.</p> <p>Frontend's Save directory</p> <ul> <li>'content-name'.srm (Cartridge battery save)</li> </ul> <p>Frontend's State directory</p> <ul> <li>'content-name'.state# (State)</li> </ul>"},{"location":"library/bsnes_performance/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The bsnes Performance core's core provided FPS is 60.0988118623 for NTSC games and 50.0069789082 for PAL games.</li> <li>The bsnes Performance core's core provided sample rate is 32040.5 Hz</li> <li>The bsnes Performance core's core provided aspect ratio is 4/3</li> </ul>"},{"location":"library/bsnes_performance/#super-gameboy","title":"Super GameBoy","text":"<p>Warning</p> <p>Super GameBoy support in this core is Windows only, and has buggy save state support and visual glitches. Use the higan Accuracy core or the nSide Balanced core for simplified, functional, and easily accessible Super Gameboy support.</p> <p>For Super GameBoy support, you need sgb.boot.rom (in RetroArch's System directory), a GameBoy ROM and a Super GameBoy ROM.</p> <p>Please note that the Game Boy and Super GameBoy ROMs have to be unzipped.</p> <p>Super GameBoy is supported via the Subsystem API.</p> <p>There are two ways to access the Subsystem API.</p> <p>One way is to access the Subsystem API through RetroArch's GUI like this.</p> <p>First, we load our GameBoy ROM through 'Load Super GameBoy' in RetroArch's Main Menu.</p> <p></p> <p></p> <p>Next, we load our Super GameBoy ROM through 'Load Super GameBoy' in RetroArch's Menu Menu.</p> <p></p> <p></p> <p>Then, we start the content by selecting 'Start GameBoy' In RetroArch's Menu Menu.</p> <p></p> <p>The other way is to launch RetroArch with commandline like this.</p> <pre><code>retroarch -L {path to bsnes core} {path to Super GameBoy ROM} --subsystem sgb {path to GameBoy rom}\n</code></pre>"},{"location":"library/bsnes_performance/#msu-1","title":"MSU-1","text":"<p>Attention</p> <p>MSU-1 support in this core is complex. Use the Snes9x core for simplified and easily accessible MSU-1 support.</p> <p>MSU-1 support can be used by loading a correct .bml file.</p> <p>There's documentation for loading MSU-1 games in standalone higan here.</p>"},{"location":"library/bsnes_performance/#controllers","title":"Controllers","text":"<p>The bsnes Performance core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/bsnes_performance/#user-1-device-types","title":"User 1 device types","text":"<ul> <li>None - Disables input.</li> <li>SNES Joypad - Joypad</li> <li>SNES Mouse - Mouse</li> </ul>"},{"location":"library/bsnes_performance/#user-2-device-types","title":"User 2 device types","text":"<ul> <li>None - Disables input.</li> <li>SNES Joypad - Joypad</li> <li>SNES Mouse - Mouse</li> <li>Multitap - Joypad - Allows for up to five players to play together in multitap games.</li> <li>SuperScope - Lightgun</li> <li>Justifier - Lightgun</li> <li>Justifiers - Lightgun - Two Justifiers are plugged in, for two-player Justifier games.</li> </ul>"},{"location":"library/bsnes_performance/#multitap-support","title":"Multitap support","text":"<p>Activating multitap support in compatible games can be configured by switching to the Multitap device type for User 2.</p>"},{"location":"library/bsnes_performance/#controller-tables","title":"Controller tables","text":""},{"location":"library/bsnes_performance/#joypad","title":"Joypad","text":"User 1 - 5 Remap descriptors RetroPad Inputs B Y Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A X L R"},{"location":"library/bsnes_performance/#mouse","title":"Mouse","text":"RetroMouse Inputs SNES Mouse  Mouse Cursor SNES Mouse Cursor  Mouse 1 SNES Mouse Left Button  Mouse 2 SNES Mouse Right Button"},{"location":"library/bsnes_performance/#lightgun","title":"Lightgun","text":"RetroLightgun Inputs SuperScope Justifier(s)  Gun Crosshair SuperScope Crosshair Justifier Crosshair Gun Trigger SuperScope Trigger Justifier Trigger Gun Aux A SuperScope Cursor Gun Aux B SuperScope Turbo Gun Start SuperScope Pause Justifier Start"},{"location":"library/bsnes_performance/#compatibility","title":"Compatibility","text":"Game Issue A.S.P. Air Strike Patrol Black lines show up during gameplay. The shadow below the aircraft is missing. Funaki Masakatsu Hybrid Wrestler \u2013 Tougi Denshou Corrupted graphics on the Pancrase logo screen. Mecarobot Golf The ground \"wobbles\" during gameplay. Mega Man X2 Only displays a black screen. Mega Man X3 Only displays a black screen. Mortal Kombat II Various glitched graphics. NHL \u201994 Corrupted line on the NHL logo screen. Tetris Attack Lots of flickering on the VS. CPU mode map screen."},{"location":"library/bsnes_performance/#external-links","title":"External Links","text":"<ul> <li>Official higan Website</li> <li>Official higan Upstream Downloads</li> <li>Libretro bsnes Performance Core info file</li> <li>Libretro bsnes Performance Github Repository</li> <li>Report Libretro bsnes Performance Core Issues Here</li> </ul>"},{"location":"library/bsnes_performance/#see-also","title":"See also","text":""},{"location":"library/bsnes_performance/#nintendo-sufami-turbo","title":"Nintendo - Sufami Turbo","text":"<ul> <li>Nintendo - SNES / Famicom (Beetle bsnes)</li> <li>Nintendo - SNES / Famicom (bsnes-jg)</li> <li>Nintendo - SNES / Famicom (bsnes-mercury Accuracy)</li> <li>Nintendo - SNES / Famicom (bsnes-mercury Balanced)</li> <li>Nintendo - SNES / Famicom (bsnes-mercury Performance)</li> <li>Nintendo - SNES / Famicom (bsnes Accuracy)</li> <li>Nintendo - SNES / Famicom (bsnes Balanced)</li> <li>Nintendo - SNES / Famicom (bsnes C++98 (v085))</li> <li>Nintendo - SNES / Famicom (Snes9x)</li> <li>Nintendo - SNES / Famicom (Snes9x 2002)</li> <li>Nintendo - SNES / Famicom (Snes9x 2005 Plus)</li> <li>Nintendo - SNES / Famicom (Snes9x 2005)</li> <li>Nintendo - SNES / Famicom (Snes9x 2010)</li> </ul>"},{"location":"library/bsnes_performance/#nintendo-super-nintendo-entertainment-system-hacks","title":"Nintendo - Super Nintendo Entertainment System (+ Hacks)","text":"<ul> <li>Nintendo - SNES / Famicom (Beetle bsnes)</li> <li>Nintendo - SNES / Famicom (bsnes-jg)</li> <li>Nintendo - SNES / Famicom (bsnes-mercury Accuracy)</li> <li>Nintendo - SNES / Famicom (bsnes-mercury Balanced)</li> <li>Nintendo - SNES / Famicom (bsnes-mercury Performance)</li> <li>Nintendo - SNES / Famicom (bsnes Accuracy)</li> <li>Nintendo - SNES / Famicom (bsnes Balanced)</li> <li>Nintendo - SNES / Famicom (bsnes C++98 (v085))</li> <li>Nintendo - SNES / Famicom (higan Accuracy)</li> <li>Nintendo - SNES / Famicom (nSide Balanced)</li> <li>Nintendo - SNES / Famicom (Mesen-S)</li> <li>Nintendo - SNES / Famicom (Snes9x)</li> <li>Nintendo - SNES / Famicom (Snes9x 2002)</li> <li>Nintendo - SNES / Famicom (Snes9x 2005 Plus)</li> <li>Nintendo - SNES / Famicom (Snes9x 2005)</li> <li>Nintendo - SNES / Famicom (Snes9x 2010)</li> </ul>"},{"location":"library/cannonball/","title":"Cannonball","text":""},{"location":"library/cannonball/#background","title":"Background","text":"<p>This is an OutRun game engine recreation written by Chris White in 2014. It has been ported to the libretro API. The Cannonball core has been authored by</p> <ul> <li>Chris White</li> </ul> <p>The Cannonball core is licensed under</p> <ul> <li>Non-commercial</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/cannonball/#how-to-start-the-cannonball-core","title":"How to start the Cannonball core:","text":"<ul> <li> <p>To start the Cannonball core, you need to obtain Cannonball's data files. You can do this by going to RetroArch's main menu screen and selecting 'Online Updater'. From there, select 'Content Downloader'.</p> </li> <li> <p>Select 'Cannonball', then select 'CannonBall.zip'. This should download and extract this file to RetroArch's Downloads directory.</p> </li> <li> <p>Next, follow this guide and place OutRun Revision B ROMs in the CannonBall directory.</p> </li> <li> <p>Below is a pictured example of a working Cannonball setup.</p> </li> </ul> <p></p> <ul> <li> <p>Go back to RetroArch's main menu screen. Select 'Load Content', then 'Downloads'.</p> </li> <li> <p>Select the 'CannonBall' directory, then select 'CannonBall.game'.</p> </li> <li> <p>If you are asked which core to select, choose 'Cannonball'.</p> </li> </ul> <p>The content should now start running!</p>"},{"location":"library/cannonball/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the Cannonball core have the following file extensions:</p> <ul> <li>.game</li> <li>.88</li> </ul> <p>RetroArch database(s) that are associated with the Cannonball core:</p> <ul> <li>Cannonball</li> </ul>"},{"location":"library/cannonball/#features","title":"Features","text":"<ul> <li>Smoother 60fps gameplay</li> <li>True Widescreen Play Mode</li> <li>Force Feedback support</li> <li>Custom Track support from LayOut</li> <li>New Game Modes (Continuous Mode &amp; Time Trial Mode)</li> <li>Many, many more enhancements</li> </ul> <p>Frontend-level settings or features that the Cannonball core respects.</p> Feature Supported Restart \u2715 Saves \u2714 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2714 Memory Monitoring (achievements) \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/cannonball/#directories","title":"Directories","text":"<p>The Cannonball core's library name is 'Cannonball'</p> <p>The Cannonball core saves/loads to/from these directories.</p> <p>Frontend's Home directory</p> File Description config.xml Config File hiscores.xml Hiscores File"},{"location":"library/cannonball/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The Cannonball core's core provided FPS is 60 when the Video Framerate core option is set to Smooth (60) or Original (60/30)</li> <li>The Cannonball core's core provided FPS is 120 when the Video Framerate core option is set to Ultra Smooth (120)</li> <li>The Cannonball core's core provided FPS is 30 when the Video Framerate core option is set to Low (30)</li> <li>The Cannonball core's core provided sample rate is 44040 Hz when the Video Framerate core option is set to Ultra Smooth (120)</li> <li>The Cannonball core's core provided sample rate is 44100 Hz when the Video Framerate core option is not set to Ultra Smooth (120)</li> <li>The Cannonball core's base width is 320</li> <li>The Cannonball core's base height is 224</li> <li>The Cannonball core's max width is 640</li> <li>The Cannonball core's max height is 448</li> <li>The Cannonball core's core provided aspect ratio is 4/3 when the Video Widescreen Mode core option is set to Off</li> <li>The Cannonball core's core provided aspect ratio is 16/9 when the Video Widescreen Mode core option is set to On</li> </ul>"},{"location":"library/cannonball/#core-options","title":"Core options","text":"<p>The Cannonball core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded.</p> <p>Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch.</p> <ul> <li> <p>Menu At Start [cannonball_menu_enabled] (ON|OFF)</p> <p>When enabled; the Cannonball core shows the main menu upon startup.</p> <p>When disabled; the Cannonball core goes into attract mode upon startup.</p> </li> <li> <p>Menu Road Scroll Speed [cannonball_menu_road_scroll_speed] (50|60|70|80|90|100|150|200|300|400|500|5|10|15|20|25|30|40)</p> <p>Use this to configure the speed at which the road on the Main Menu scrolls at.</p> </li> <li> <p>Video Widescreen Mode [cannonball_video_widescreen] (ON|OFF)</p> <p>Explained here.</p> </li> <li> <p>Video High-Resolution Mode [cannonball_video_hires] (OFF|ON)</p> <p>The original game ran at 320x224. This mode doubles that resolution to 640x448. However, rather than simply doubling up the display, the sprites and road are rendered at a higher resolution where possible.</p> </li> <li> <p>Video Framerate [cannonball_video_fps] (Smooth (60)|Ultra Smooth (120)|Original (60/30))</p> <p>Explained here.</p> </li> <li> <p>Advertise Sound [cannonball_sound_advertise] (ON|OFF)</p> <p>Play sounds in attract mode.</p> </li> <li> <p>Preview Music [cannonball_sound_preview] (ON|OFF)</p> <p>Preview the music tracks at the point of selection in-game. The original game did not have this option and you would not hear the audio track until the game started.</p> </li> <li> <p>Fix Samples (use opr-10188.71f) [cannonball_sound_fix_samples] (ON|OFF)</p> <p>Explained here.</p> </li> <li> <p>Gear Mode [cannonball_gear] (Manual|Manual Cabinet|Manual 2 Buttons|Automatic)</p> <p>Change the gear shift behaviour. Useful to configure based on your target hardware.</p> <p>0 = Manual (Click to shift, for normal play) 1 = Manual (Hold to shift, for cabinet play) 2 = Manual (Separate Buttons for High/Low) 3 = Automatic (No need to change gear)</p> </li> <li> <p>Analog Controls (off to allow digital speed setup) [cannonball_analog] (ON|OFF)</p> <p>Self-explanatory.</p> </li> <li> <p>Digital Steer Speed [cannonball_steer_speed] (3|4|5|6|7|8|9|1|2)</p> <p>Awaiting description.</p> </li> <li> <p>Digital Pedal Speed [cannonball_pedal_speed] (4|5|6|7|8|9|1|2|3)</p> <p>Awaiting description.</p> </li> <li> <p>Time [cannonball_dip_time] (Easy (80s)|Normal (75s)|Hard (72s)|Very Hard (70s)|Infinite Time)</p> <p>Explained here.</p> </li> <li> <p>Traffic [cannonball_dip_traffic] (Normal|Hard|Very Hard|No Traffic|Easy)</p> <p>Explained here.</p> </li> <li> <p>Freeplay Mode [cannonball_freeplay] (OFF|ON)</p> <p>Awaiting description.</p> </li> <li> <p>Use Japanese Tracks Version [cannonball_jap] (OFF|ON)</p> <p>Explained here</p> </li> <li> <p>Use Prototype Stage 1 [cannonball_prototype] (OFF|ON)</p> <p>Explained here.</p> </li> <li> <p>Objects Limit Enhanced [cannonball_level_objects] (ON|OFF)</p> <p>Explained here</p> </li> <li> <p>Original Traffic Patterns Randomization [cannonball_randomgen] (ON|OFF)</p> <p>Awaiting description.</p> </li> <li> <p>Force AI To Play [cannonball_force_ai] (OFF|ON)</p> <p>Awaiting description.</p> </li> <li> <p>Fix Original Game Bugs [cannonball_fix_bugs] (ON|OFF)</p> <p>Explained here</p> </li> <li> <p>Fix Timing Bugs [cannonball_fix_timer] (OFF|ON)</p> <p>Awaiting description.</p> </li> <li> <p>Display Debug Info For LayOut [cannonball_layout_debug] (OFF|ON)</p> <p>Awaiting description.</p> </li> <li> <p>New Attract [cannonball_new_attract] (ON|OFF)</p> <p>Explained here.</p> </li> <li> <p>Time Trial Laps [cannonball_ttrial_laps] (3|4|5|1|2)</p> <p>Awaiting description.</p> </li> <li> <p>Time Trial Traffic Amount [cannonball_ttrial_traffic] (3|4|5|6|7|8|0|1|2)</p> <p>Awaiting description.</p> </li> <li> <p>Continuous Mode Traffic Amount [cannonball_cont_traffic] (3|4|5|6|7|8|0|1|2)</p> <p>Awaiting description.</p> </li> </ul>"},{"location":"library/cannonball/#joypad","title":"Joypad","text":"RetroPad Inputs User 1 input descriptors Accelerate Brake Coin Start Up Down Left Right Gear Gear Adjust View Go Back To Menu  X Analog X  Y Analog Y"},{"location":"library/cannonball/#external-links","title":"External Links","text":"<ul> <li>Official Cannoball Github Wiki</li> <li>Official Cannonball Github Repository</li> <li>Libretro Cannonball Core info file</li> <li>Libretro Cannonball Github Repository</li> <li>Report Libretro Cannonball Core Issues Here</li> <li>How to setup video</li> </ul>"},{"location":"library/caprice32/","title":"Amstrad - CPC (Caprice32)","text":""},{"location":"library/caprice32/#background","title":"Background","text":"<p>Caprice32 is a software emulator of the Amstrad CPC 8bit home computer series running on Linux and Windows. The emulator faithfully imitates the CPC464, CPC664, CPC6128, CPC6128+ and GX4000 models. By recreating the operations of all hardware components at a low level, the emulator achieves a high degree of compatibility with original CPC software. These programs or games can be run unmodified at real-time or higher speeds, depending on the emulator host environment.</p>"},{"location":"library/caprice32/#authorlicense","title":"Author/License","text":"<p>The Caprice32 core has been authored by</p> <ul> <li>Ulrich Doewich</li> <li>David Colmenero (D_Skywalk)</li> <li>Colin Pitrat</li> </ul> <p>The Caprice32 core is licensed under</p> <ul> <li>GPLv2</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/caprice32/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the Caprice32 core have the following file extensions:</p> <ul> <li>.dsk</li> <li>.sna</li> <li>.tap</li> <li>.cdt</li> <li>.voc</li> <li>.m3u</li> <li>.cpr</li> <li>.zip</li> </ul>"},{"location":"library/caprice32/#databases","title":"Databases","text":"<p>RetroArch database(s) that are associated with the Caprice32 core:</p> <ul> <li>Amstrad - CPC (TOSEC)</li> </ul>"},{"location":"library/caprice32/#features","title":"Features","text":"<p>Frontend-level settings or features that the Caprice32 core respects.</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 Memory Monitoring (achievements) \u2714 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2714 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/caprice32/#directories","title":"Directories","text":"<p>The Caprice32 core's internal core name is 'cap32'.</p> <p>The Caprice32 core saves/loads to/from these directories.</p> <p>Loaded content's directory</p> <ul> <li>'content-name'#.SNA (SNA)</li> </ul>"},{"location":"library/caprice32/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The Caprice32 core's core provided FPS is 50</li> <li>The Caprice32 core's core provided sample rate is 44100 Hz</li> <li>The Caprice32 core's core provided aspect ratio is 4/3</li> </ul>"},{"location":"library/caprice32/#usage","title":"Usage","text":"<p>The Caprice32 core has a virtual keyboard GUI that can be accessed through SELECT (configured by cap32_combokey) or F9.</p> <p>The mouse cursor can be controlled by RetroPad D-Pad and use button A to press a Key.</p> <p></p>"},{"location":"library/caprice32/#core-options","title":"Core options","text":"<p>The Caprice32 core has the following option(s) that can be tweaked from the core options menu.</p> <p>Tip</p> <p>Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch.</p> Core option Description Default Autorun If enabled, the core will run the first bas/bin found in the DSK. <code>cap32_autorun = \"enabled|disabled\"</code> <code>enabled</code> Combo Key See Combo list below. <code>cap32_combokey = \"select|y|b|disabled\"</code> <code>select</code> Internal resolution Self-explanatory. <code>cap32_resolution = \"384x272|400x300\"</code> <code>384x272</code> Model (Restart) Choose which Amstrad CPC model to emulate. <code>cap32_model = \"6128|464|6128+\"</code> <code>6128</code> Ram size (Restart) CPC physical RAM size in kB. <code>cap32_ram = \"128|64|192|576\"</code> <code>128</code> Status Bar Status bar configuration <code>cap32_statusbar = \"onloading|enabled|disabled\"</code> <code>onloading</code> Floppy Sound Disk emulated sound configuration <code>cap32_floppy_sound = \"enabled|disabled\"</code> <code>enabled</code> Monitor Type Choose between a color display or a monochrome display. <code>cap32_scr_tube = \"color|green|white\"</code> <code>color</code> Monitor Intensity Screen cathodic tube intensity. <code>cap32_scr_intensity = \"5|6|7|8|9|10|11|12|13|14|15\"</code> <code>5</code> CPC Language (Restart) Choose between english, french or spanish keyboard layout. <code>cap32_lang_layout = \"english|french|spanish\"</code> <code>english</code> User 1 Joystick Configuration Select Joy/Overlay configuration for player 1. <code>cap32_retrojoy0 = \"joystick|qaop|incentive\"</code> <code>joystick</code> User 2 Joystick Configuration Select Joy/Overlay configuration for player 2. <code>cap32_retrojoy1 = \"joystick|qaop|incentive|joystick_port2\"</code> <code>joystick</code> <p>cap32_scr_tube = color</p> <p></p> <p>cap32_scr_tube = green</p> <p></p> <p>Attention</p> <p>These 'scr_intensity' core option screenshots have been taken with the 'cap32_scr_tube' core option set to 'color'.</p> <p>scr_intensity = 5</p> <p></p> <p>scr_intensity = 15</p> <p></p>"},{"location":"library/caprice32/#controllers","title":"Controllers","text":"<p>The Caprice32 core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/caprice32/#user-1-2-device-types","title":"User 1 - 2 device types","text":"<ul> <li>None - Doesn't disable input. There's no reason to switch to this.</li> <li>RetroPad - Joypad - Don't use this. Switch to Amstrad Joystick for joypad input.</li> <li>Amstrad Joystick - Joypad - Use this for joypad input.</li> <li>Amstrad Keyboard - Keyboard - Keyboard input are always active. Has keymapper support.</li> </ul>"},{"location":"library/caprice32/#other-controllers","title":"Other controllers","text":"<ul> <li>Mouse - The mouse cursor in the Virtual Keyboard GUI can be controlled with mouse inputs.</li> </ul>"},{"location":"library/caprice32/#controller-tables-using-retropad-device-type","title":"Controller tables using RetroPad device Type","text":""},{"location":"library/caprice32/#joy-config-default-joystick","title":"JOY CONFIG DEFAULT (JOYSTICK)","text":"User 1 Remap descriptors RetroPad Inputs Amstrad Joystick B FIRE1 Y Start Up JOY UP Down JOY DOWN Left JOY LEFT Right JOY RIGHT A FIRE2 X L CTRL R INTRO L2 F1 R2 F2 Select COMBO (see bellow) L3 R3"},{"location":"library/caprice32/#joy-config-qaop-general-keyb","title":"JOY CONFIG QAOP (GENERAL KEYB)","text":"User 1 Remap descriptors RetroPad Inputs Amstrad Joystick B B Y Y Start K (to select Keyb in games) Up Q Down A Left O Right P A SPACE X N L CTRL R INTRO L2 F1 R2 F2 Select COMBO (see bellow) L3 R3"},{"location":"library/caprice32/#joy-incentive-incentive-games","title":"JOY INCENTIVE (INCENTIVE GAMES)","text":"User 1 Remap descriptors RetroPad Inputs Amstrad Joystick B SPACE Y W Start F Up CURSOR UP Down CURSOR DOWN Left CURSOR LEFT Right CURSOR RIGHT A A X C L P R L L2 R R2 U Select COMBO (see bellow) L3 R3"},{"location":"library/caprice32/#combo-list","title":"COMBO LIST","text":"<p>If you press SELECT you could make a combo with other buttons:</p> Combo RetroPad Inputs Amstrad Writes Select + B  +  CAT Select + Y  +  |CPM Select + Start  +  SHOW V-KEYBOARD Select + Up  +  [1], [Y] Select + Down  +  [2], [N] Select + Left  +  [4], [S] Select + Right  +  [3], [J] Select + A  +  RUN\"DISK RUN\"DISC Select + X  +  |TAPE RUN\" <p>This combos are useful to load games and select options in game-menus.</p>"},{"location":"library/caprice32/#keyboard","title":"Keyboard","text":"<p>This core allows direct keyboard access, you could use your keyboard as an original CPC. To achieve that you must activate the Game Focus, by default the hotkey is configured to the SCROLL_LOCK key.</p>"},{"location":"library/caprice32/#english-layout","title":"English layout","text":""},{"location":"library/caprice32/#spanish-layout","title":"Spanish layout","text":""},{"location":"library/caprice32/#french-layout","title":"French layout","text":""},{"location":"library/caprice32/#keyboard-binds","title":"Keyboard Binds","text":"RetroKeyboard Special Inputs Amstrad Keyboard Keypad 0 CPC_KEY_F0 Keyboard Keypad 1 CPC_KEY_F1 Keyboard Keypad 2 CPC_KEY_F2 Keyboard Keypad 3 CPC_KEY_F3 Keyboard Keypad 4 CPC_KEY_F4 Keyboard Keypad 5 CPC_KEY_F5 Keyboard Keypad 6 CPC_KEY_F6 Keyboard Keypad 7 CPC_KEY_F7 Keyboard Keypad 8 CPC_KEY_F8 Keyboard Keypad 9 CPC_KEY_F9 Keyboard Keypad Period . CPC_KEY_FDOT Keyboard Keypad Enter CPC_KEY_SMALL_ENTER Keyboard Delete CPC_KEY_CLR Keyboard Insert CHANGE CURSOR/JOY EMULATION Keyboard Home PLAY TAPE Keyboard End STOP TAPE Keyboard Page Up TAPE REWIND Keyboard Page Down - Keyboard F9 SHOW V-KEYBOARD Keyboard F10 MAIN GUI Keyboard Right Alt CPC_KEY_COPY Keyboard Left Alt CPC_KEY_COPY Keyboard Right Shift CPC_KEY_FIRE2 (JOY EMULATION) Keyboard Right Control CPC_KEY_FIRE1 (JOY EMULATION) <p>Choose AMSTRAD KEYBOARD in Quick Menu &gt; Controls to customize your retropad keys per game.</p>"},{"location":"library/caprice32/#mouse","title":"Mouse","text":"RetroMouse Inputs Virtual Keyboard GUI Inputs  Mouse Cursor Mouse Cursor  Mouse 1 Mouse Left Button"},{"location":"library/caprice32/#m3u-and-disk-control","title":"M3U and Disk control","text":"<p>When you have a multi disk game, you can use a m3u file to specify each disk of the game and change them from the RetroArch Disk control interface.</p> <p>A M3U file is a simple text file with one disk per line (see https://en.wikipedia.org/wiki/M3U).</p> <p>Example: Alive (F).m3u</p> <pre><code>Alive (F) - Disk 1A.dsk\nAlive (F) - Disk 1B.dsk\n</code></pre> <p>Path can be absolute or relative to the location of the M3U file.</p> <p>When a game ask for it, you can change the current disk in the RetroArch 'Disk Control' menu:</p> <ul> <li>Eject the current disk with 'Disk Cycle Tray Status'</li> <li>Select the right disk index</li> <li>Insert the new disk with 'Disk Cycle Tray Status'</li> </ul>"},{"location":"library/caprice32/#specify-a-specific-command-to-launch-a-game","title":"Specify a specific command to launch a game","text":"<p>If the autorun option of the core does a pretty good job to guess what command must be executed to launch a game on the CPC, there is some problems (cpm disk and strange catalogs for the most).</p> <p>You can specify a command to be executed on the CPC when the emu launch.</p> <p>All you have to do is to add a comment like this in the m3u file :</p> <pre><code>#COMMAND:&lt;YOUR_COMMAND_HERE&gt;\n</code></pre> <p>Even for one disk game, you can create a m3u file like this one :</p> <p>Jack the Nipper II... In Coconut Capers.m3u <pre><code>#COMMAND:|CPM\nJack the Nipper II... In Coconut Capers (E).dsk\n</code></pre></p>"},{"location":"library/caprice32/#external-links","title":"External Links","text":"<ul> <li>Official Caprice32 Github Repository</li> <li>Libretro Caprice32 Core info file</li> <li>Libretro Caprice32 Github Repository</li> <li>Report Libretro Caprice32 Core Issues Here</li> </ul>"},{"location":"library/caprice32/#see-also","title":"See also","text":""},{"location":"library/caprice32/#amstrad-cpc","title":"Amstrad - CPC","text":"<ul> <li>Amstrad - CPC (CrocoDS)</li> </ul>"},{"location":"library/chailove/","title":"ChaiLove","text":""},{"location":"library/chailove/#background","title":"Background","text":"<p>ChaiLove is a framework for making 2D games with ChaiScript. ChaiLove games can be played with LibRetro/RetroArch through the ChaiLove core.</p>"},{"location":"library/chailove/#how-to-start-the-chailove-core","title":"How to start the ChaiLove core:","text":"<ul> <li>As an example showcasing loading content with Chailove core, we will load the Floppy Bird game hosted on RetroArch's Content Downloader.</li> </ul> <p>You can do this by going to RetroArch's main menu screen and selecting 'Online Updater'. From there, select 'Content Downloader'.</p> <p> </p> <ul> <li>Select 'ChaiLove', then select 'Floppy Bird.chailove'. This should download and extract this file to RetroArch's Downloads directory.</li> </ul> <p> </p> <ul> <li>Go back to RetroArch's main menu screen. Select 'Load Content', then 'Downloads'.</li> </ul> <p> </p> <p> </p> <ul> <li> <p>Select 'Floppy Bird.chailove'.</p> </li> <li> <p>If you are asked which core to select, choose 'ChaiLove'.</p> </li> </ul> <p>The content should now start running!</p>"},{"location":"library/chailove/#authorlicense","title":"Author/License","text":"<p>The ChaiLove core has been authored by</p> <ul> <li>Rob Loach</li> </ul> <p>The ChaiLove core is licensed under</p> <ul> <li>MIT</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/chailove/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the ChaiLove core have the following file extensions:</p> <ul> <li><code>.chai</code></li> <li><code>.chailove</code></li> </ul>"},{"location":"library/chailove/#databases","title":"Databases","text":"<p>RetroArch database(s) that are associated with the ChaiLove core:</p> <ul> <li>ChaiLove</li> </ul>"},{"location":"library/chailove/#features","title":"Features","text":"<p>Frontend-level settings or features that the ChaiLove core respects.</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2715 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 Memory Monitoring (achievements) \u2715 RetroArch Cheats \u2715 Native Cheats \u2714 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2714 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/chailove/#directories","title":"Directories","text":"<p>The ChaiLove core's internal core name is 'ChaiLove'</p> <p>The ChaiLove core saves/loads to/from these directories.</p> <p>Frontend's State directory</p> <ul> <li>'content-name'.state# (State)</li> </ul>"},{"location":"library/chailove/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The ChaiLove core's core provided FPS is 60</li> <li>The ChaiLove core's core provided sample rate is 44100 Hz</li> <li>The ChaiLove core's core provided aspect ratio is game provided</li> </ul>"},{"location":"library/chailove/#core-options","title":"Core options","text":"<p>The ChaiLove core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded.</p> <p>Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch.</p> <ul> <li> <p>Alpha Blending [chailove_alphablending] (enabled|disabled)</p> <p>Enable or disable alpha blending (transparency).</p> </li> </ul> Alpha Blending - On <p></p> Alpha Blending - Off <p></p> <ul> <li> <p>High Quality [chailove_highquality] (enabled|disabled)</p> <p>Enable or disable extra visual features.</p> </li> </ul> High Quality - On <p></p> High Quality - Off <p></p>"},{"location":"library/chailove/#controllers","title":"Controllers","text":"<p>The ChaiLove core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/chailove/#user-1-5-device-types","title":"User 1 - 5 device types","text":"<ul> <li>None - Doesn't disable input.</li> <li>RetroPad - Joypad - Stay on this.</li> <li>RetroPad w/Analog - Joypad - There's no reason to switch to this.</li> </ul>"},{"location":"library/chailove/#controller-tables","title":"Controller tables","text":""},{"location":"library/chailove/#joypad","title":"Joypad","text":"<p>Attention</p> <p>What the buttons do are game specific.</p> User 1 - 5 Remap descriptors RetroPad Inputs B Y Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A X L R"},{"location":"library/chailove/#external-links","title":"External Links","text":"<ul> <li>ChaiScript Website</li> <li>ChaiLove API Documentation Website</li> <li>ChaiLove Github Wiki</li> <li>Libretro ChaiLove Core info file</li> <li>Libretro ChaiLove Github Repository</li> <li>Report Libretro ChaiLove Core Issues Here</li> <li>Floppy Bird</li> <li>Gameplay Videos</li> </ul>"},{"location":"library/chailove/#see-also","title":"See also","text":""},{"location":"library/chailove/#custom-engine","title":"Custom Engine","text":"<ul> <li>Lua Engine (Lutro)</li> </ul>"},{"location":"library/citra/","title":"Nintendo - 3DS (Citra)","text":""},{"location":"library/citra/#background","title":"Background","text":"<p>Citra is an experimental open-source Nintendo 3DS emulator/debugger written in C++. It is written with portability in mind.</p> <p>The Citra core has been authored by</p> <ul> <li>Citra Emulation Project</li> </ul> <p>The Citra core is licensed under</p> <ul> <li>GPLv2</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/citra/#requirements","title":"Requirements","text":"<p>OpenGL 3.3 or higher</p> <p></p> <p>Warning</p> <p>There is currently no \u2018working\u2019 macOS version available. This is because this core requires OpenGL core 3.3 context, and RetroArch on macOS currently does not support this. We will have to add support for this to a future version of RetroArch on macOS before this core will start to work on it.</p>"},{"location":"library/citra/#decryption-keys","title":"Decryption keys","text":"<p>Citra requires AES keys in order to load encrypted games. <code>aes_keys.txt</code> needs to be placed in ../saves/Citra/sysdata.</p>"},{"location":"library/citra/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the Citra core have the following file extensions:</p> <ul> <li>.3ds</li> <li>.3dsx</li> <li>.elf</li> <li>.axf</li> <li>.cci</li> <li>.cxi</li> <li>.app</li> </ul> <p>RetroArch database(s) that are associated with the Citra core:</p> <ul> <li>Nintendo - Nintendo 3DS</li> </ul>"},{"location":"library/citra/#features","title":"Features","text":"<p>Frontend-level settings or features that the Citra core respects.</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2715 Netplay \u2715 Core Options \u2714 Memory Monitoring (achievements) \u2715 RetroArch Cheats \u2715 Native Cheats \u2714 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/citra/#directories","title":"Directories","text":"<p>The Citra core's library name is 'Citra'</p> <p>The Citra core saves/loads to/from these directories.</p> <p>The Citra Shaders should be in ../saves/Citra/shaders/opengl/transferable</p> <p>Frontend's Save directory</p> <ul> <li>Citra System and Save files</li> </ul>"},{"location":"library/citra/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The Citra core's core provided FPS is 60.0</li> <li>The Citra core's core provided sample rate is 32728 Hz</li> <li>The Citra core's base width is (Base width)</li> <li>The Citra core's base height is (Base height)</li> <li>The Citra core's max width is (Max width)</li> <li>The Citra core's max height is (Max height)</li> <li>The Citra core's core provided aspect ratio is (Ratio)</li> </ul>"},{"location":"library/citra/#cheats","title":"Cheats","text":"<p>The Citra core supports internal cheats, but you have to enable them manually:</p> <ol> <li>Grab a Citra cheats file for your game, you can find a lot of them here for example: https://github.com/iSharingan/CTRPF-AR-CHEAT-CODES/tree/master/Cheats</li> <li>Put the file (<code>[game_id].txt</code>) in your frontend's <code>saves/Citra/cheats/</code> folder.</li> <li>Open the .txt file with a text editor, add <code>*citra_enabled</code> below the cheat title and save changes.</li> </ol> <p>As an example, if you want to enable the \"All Characters\" cheat for Mario Kart 7 you have to edit <code>[frontend_dir]/saves/Citra/cheats/0004000000030800.txt</code> and change that part: <pre><code>[All Characters, Game v1.0]\nD3000000 14000000\n0013C99C 01FF003F\n</code></pre> to: <pre><code>[All Characters, Game v1.0]\n*citra_enabled\nD3000000 14000000\n0013C99C 01FF003F\n</code></pre></p>"},{"location":"library/citra/#core-options","title":"Core options","text":"<p>The Citra core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded.</p> <p>Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch.</p> <ul> <li> <p>Enable CPU JIT [citra_use_cpu_jit] (enabled|disabled)</p> <p>Enable Citra's 'dynarmic' dynamic recomplier. Can improve performance. Instructions that are not implemented by the recompiler fall back into the interpreter CPU core.</p> <p>If disabled, Citra will solely use the Interpreter CPU core.</p> </li> <li> <p>Enable hardware renderer [citra_use_hw_renderer] (enabled|disabled)</p> <p>Awaiting description.</p> </li> <li> <p>Enable shader JIT [citra_use_shader_jit] (enabled|disabled)</p> <p>Awaiting description.</p> </li> <li> <p>Enable hardware shaders [citra_use_hw_shaders] (enabled|disabled)</p> <p>Awaiting description.</p> </li> <li> <p>Save hardware shader cache to disk [citra_use_hw_shader_cache] (enabled|disabled)</p> <p>Awaiting description.</p> </li> <li> <p>Enable accurate geometry shaders (only for H/W shaders) [citra_use_acc_geo_shaders] (enabled|disabled)</p> <p>Awaiting description.</p> </li> <li> <p>Enable accurate shaders multiplication (only for H/W shaders) [citra_use_acc_mul] (enabled|disabled)</p> <p>Awaiting description.</p> </li> <li> <p>Texture filter type [citra_texture_filter] (none|Anime4K Ultrafast|Bicubic|ScaleForce|xBRZ freescale)</p> <p>Awaiting description.</p> </li> <li> <p>Enable custom textures [citra_custom_textures] (disabled|enabled)</p> <p>Awaiting description.</p> </li> <li> <p>Dump textures [citra_dump_textures] (disabled|enabled)</p> <p>Awaiting description.</p> </li> <li> <p>Resolution scale factor [citra_resolution_factor] (1x (Native)|2x|3x|4x|5x|6x|7x|8x|9x|10x)</p> <p>Self-explanatory.</p> </li> </ul> Screen layout positioning - Default Top-Bottom Screen <p></p> Screen layout positioning - Single Screen Only <p></p> Screen layout positioning - Large Screen, Small Screen) <p></p> <ul> <li> <p>Screen layout positioning [citra_layout_option] (Default Top-Bottom Screen|Single Screen Only|Large Screen, Small Screen|Side by Side)</p> <p>Awaiting description.</p> </li> <li> <p>Prominent 3DS screen [citra_swap_screen] (Top|Bottom)</p> <p>Awaiting description.</p> </li> <li> <p>Right analog function [citra_analog_function] (C-Stick and Touchscreen Pointer|Touchscreen Pointer|C-Stick)</p> <p>Awaiting description.</p> </li> <li> <p>Emulated pointer deadzone (%) [citra_deadzone] (15|20|25|30|35|0|5|10)</p> <p>Awaiting description.</p> </li> <li> <p>Simulate touchscreen interactions with mouse [citra_mouse_touchscreen] (enabled|disabled)</p> <p>Awaiting description.</p> </li> <li> <p>Simulate touchscreen interactions with touchscreen [citra_touch_touchscreen] (disabled|enabled)</p> <p>Awaiting description.</p> </li> <li> <p>Render simulated touchscreen interactions [citra_render_touchscreen] (disabled|enabled)</p> <p>Awaiting description.</p> </li> <li> <p>Enable virtual SD card [citra_use_virtual_sd] (enabled|disabled)</p> <p>Awaiting description.</p> </li> <li> <p>Savegame location [citra_use_libretro_save_path] (LibRetro Default|Citra Default)</p> <p>Awaiting description.</p> </li> <li> <p>3DS system model [citra_is_new_3ds] (Old 3DS|New 3DS)</p> <p>Awaiting description.</p> </li> <li> <p>3DS system region [citra_region_value] (Auto|Japan|USA|Europe|Australia|China|Korea|Taiwan)</p> <p>Awaiting description.</p> </li> <li> <p>3DS system language [citra_language] (English|Japanese|French|Spanish|German|Italian|Dutch|Portuguese|Russian|Korean|Traditional Chinese|Simplified Chinese)</p> <p>Awaiting description.</p> </li> <li> <p>\"Enable GDB stub [citra_use_gdbstub] (disabled|enabled)</p> <p>Awaiting description.</p> </li> </ul>"},{"location":"library/citra/#joypad","title":"Joypad","text":"User 1 input descriptors RetroPad Inputs Citra inputs B B Y Y Select Select Start Start Up Up Down Down Left Left Right Right A A X X L L R R ZL ZL ZR ZR Home Home Touch Screen Touch Touch Screen Touch  X Circle Pad X  Y Circle Pad Y  X Right analog function  Y Right analog function"},{"location":"library/citra/#mouse","title":"Mouse","text":"RetroMouse Inputs Citra inputs  Mouse Cursor Touchscreen Pointer  Mouse 1 Touch Screen Touch"},{"location":"library/citra/#pointer","title":"Pointer","text":"RetroPointer Inputs Citra inputs  or  Pointer Position Touchscreen Pointer  or  Pointer Pressed Touch Screen Touch"},{"location":"library/citra/#compatibility","title":"Compatibility","text":"<ul> <li>Citra Game Compatibility List</li> </ul>"},{"location":"library/citra/#external-links","title":"External Links","text":"<ul> <li>Official Citra Website</li> <li>Official Citra Github Repository</li> <li>Libretro Citra Core info file</li> <li>Libretro Citra Github Repository</li> <li>Report Libretro Citra Core Issues Here</li> <li>Gameplay Videos</li> </ul>"},{"location":"library/citra/#nintendo-nintendo-3ds","title":"Nintendo - Nintendo 3DS","text":"<ul> <li>Nintendo - 3DS (Citra Canary/Experimental)</li> </ul>"},{"location":"library/citra_canary/","title":"Nintendo - 3DS (Citra Canary/Experimental)","text":""},{"location":"library/citra_canary/#background","title":"Background","text":"<p>Citra is an experimental open-source Nintendo 3DS emulator/debugger written in C++. It is written with portability in mind.</p> <p>Citra Canary is the new performance-optimized version of Citra.</p> <p>The Citra Canary/Experimental core has been authored by</p> <ul> <li>Citra Emulation Project</li> </ul> <p>The Citra Canary/Experimental core is licensed under</p> <ul> <li>GPLv2</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/citra_canary/#requirements","title":"Requirements","text":"<p>OpenGL 3.3 or higher</p> <p></p> <p>Warning</p> <p>There is currently no \u2018working\u2019 macOS version available. This is because this core requires OpenGL core 3.3 context, and RetroArch on macOS currently does not support this. We will have to add support for this to a future version of RetroArch on macOS before this core will start to work on it.</p>"},{"location":"library/citra_canary/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the Citra Canary/Experimental core have the following file extensions:</p> <ul> <li>.3ds</li> <li>.3dsx</li> <li>.elf</li> <li>.axf</li> <li>.cci</li> <li>.cxi</li> <li>.app</li> </ul> <p>RetroArch database(s) that are associated with the Citra Canary/Experimental core:</p> <ul> <li>Nintendo - Nintendo 3DS</li> </ul>"},{"location":"library/citra_canary/#features","title":"Features","text":"<p>Frontend-level settings or features that the Citra Canary/Experimental core respects.</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2714 Memory Monitoring (achievements) \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/citra_canary/#directories","title":"Directories","text":"<p>The Citra Canary/Experimental core's library name is 'Citra'</p> <p>The Citra Canary/Experimental core saves/loads to/from these directories.</p> <p>Frontend's Save directory</p> <ul> <li>Citra System and Save files</li> </ul>"},{"location":"library/citra_canary/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The Citra Canary/Experimental core's core provided FPS is 60.0</li> <li>The Citra Canary/Experimental core's core provided sample rate is 32728 Hz</li> <li>The Citra Canary/Experimental core's base width is (Base width)</li> <li>The Citra Canary/Experimental core's base height is (Base height)</li> <li>The Citra Canary/Experimental core's max width is (Max width)</li> <li>The Citra Canary/Experimental core's max height is (Max height)</li> <li>The Citra Canary/Experimental core's core provided aspect ratio is (Ratio)</li> </ul>"},{"location":"library/citra_canary/#core-options","title":"Core options","text":"<p>The Citra Canary/Experimental core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded.</p> <p>Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch.</p> <ul> <li> <p>Enable CPU JIT [citra_use_cpu_jit] (enabled|disabled)</p> <p>Enable Citra's 'dynarmic' dynamic recomplier. Can improve performance. Instructions that are not implemented by the recompiler fall back into the interpreter CPU core.</p> <p>If disabled, Citra will solely use the Interpreter CPU core.</p> </li> <li> <p>Select Renderer [citra_renderer] (enabled|disabled)</p> <p>Awaiting description.</p> </li> <li> <p>Enable shader JIT [citra_use_shader_jit] (enabled|disabled)</p> <p>Awaiting description.</p> </li> <li> <p>Resolution scale factor [citra_resolution_factor] (1x (Native)|2x|3x|4x|5x|6x|7x|8x|9x|10x)</p> <p>Self-explanatory.</p> </li> </ul> Screen layout positioning - Default Top-Bottom Screen <p></p> Screen layout positioning - Single Screen Only <p></p> Screen layout positioning - Large Screen, Small Screen) <p></p> <ul> <li> <p>Screen layout positioning [citra_layout_option] (Default Top-Bottom Screen|Single Screen Only|Large Screen, Small Screen|Side by Side)</p> <p>Awaiting description.</p> </li> <li> <p>Prominent 3DS screen [citra_swap_screen] (Top|Bottom)</p> <p>Awaiting description.</p> </li> <li> <p>Right analog function [citra_analog_function] (C-Stick and Touchscreen Pointer|Touchscreen Pointer|C-Stick)</p> <p>Awaiting description.</p> </li> <li> <p>Emulated pointer deadzone (%) [citra_deadzone] (15|20|25|30|35|0|5|10)</p> <p>Awaiting description.</p> </li> <li> <p>What hardware shaders to enable [citra_hw_shaders] (None|Partial|Full)</p> <p>Awaiting description.</p> </li> <li> <p>Enables accurate hardware shaders (infinity * 0 = 0), required for some games, though slow on some hardware [citra_use_accurate_mul] (enabled|disabled)</p> <p>Awaiting description.</p> </li> <li> <p>Enable virtual SD card [citra_use_virtual_sd] (enabled|disabled)</p> <p>Awaiting description.</p> </li> <li> <p>Savegame location [citra_use_libretro_save_path] (LibRetro Default|Citra Default)</p> <p>Awaiting description.</p> </li> <li> <p>3DS system model [citra_is_new_3ds] (Old 3DS|New 3DS)</p> <p>Awaiting description.</p> </li> <li> <p>3DS system region [citra_region_value] (Auto|Japan|USA|Europe|Australia|China|Korea|Taiwan)</p> <p>Awaiting description.</p> </li> <li> <p>\"Enable GDB stub [citra_use_gdbstub] (disabled|enabled)</p> <p>Awaiting description.</p> </li> </ul>"},{"location":"library/citra_canary/#joypad","title":"Joypad","text":"User 1 input descriptors RetroPad Inputs Citra inputs B B Y Y Select Select Start Start Up Up Down Down Left Left Right Right A A X X L L R R ZL ZL ZR ZR Home Home Touch Screen Touch Touch Screen Touch  X Circle Pad X  Y Circle Pad Y  X Right analog function  Y Right analog function"},{"location":"library/citra_canary/#mouse","title":"Mouse","text":"RetroMouse Inputs Citra inputs  Mouse Cursor Touchscreen Pointer  Mouse 1 Touch Screen Touch"},{"location":"library/citra_canary/#pointer","title":"Pointer","text":"RetroPointer Inputs Citra inputs  or  Pointer Position Touchscreen Pointer  or  Pointer Pressed Touch Screen Touch"},{"location":"library/citra_canary/#compatibility","title":"Compatibility","text":"<ul> <li>Citra Game Compatibility List</li> </ul>"},{"location":"library/citra_canary/#external-links","title":"External Links","text":"<ul> <li>Official Citra Canary/Experimental Website</li> <li>Official Citra Canary/Experimental Github Repository</li> <li>Libretro Citra Canary/Experimental Core info file</li> <li>Libretro Citra Canary/Experimental Github Repository</li> <li>Report Libretro Citra Canary/Experimental Core Issues Here</li> </ul>"},{"location":"library/citra_canary/#nintendo-nintendo-3ds","title":"Nintendo - Nintendo 3DS","text":"<ul> <li>Nintendo - 3DS (Citra)</li> </ul>"},{"location":"library/clownmdemu/","title":"ClownMDEmu","text":""},{"location":"library/clownmdemu/#background","title":"Background","text":"<p>A highly-portable Sega Mega Drive emulator that aims to be as fast as possible without sacrificing accuracy.</p> <p>The ClownMDEmu core has been authored by:</p> <ul> <li>Clownacy</li> </ul> <p>The ClownMDEmu core is licensed under:</p> <ul> <li>AGPLv3</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/clownmdemu/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the ClownMDEmu core have the following file extensions:</p> <ul> <li>.bin</li> <li>.md</li> <li>.gen</li> <li>.cue</li> <li>.iso</li> </ul> <p>RetroArch database(s) that are associated with the ClownMDEmu core:</p> <ul> <li>Sega - Mega Drive - Genesis</li> <li>Sega - Mega-CD - Sega CD</li> </ul>"},{"location":"library/clownmdemu/#features","title":"Features","text":"<p>Frontend-level settings or features that the ClownMDEmu core respects:</p> Feature Supported Restart \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 Memory Monitoring (achievements) \u2714 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2714 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/clownmdemu/#directories","title":"Directories","text":"<p>The ClownMDEmu core's library name is 'ClownMDEmu'.</p> <p>The ClownMDEmu core saves/loads to/from these directories.</p> <p>Frontend's Save directory</p> File Description *.srm Mega Drive/Genesis save data *.brm Mega CD/Sega CD save data <p>Frontend's State directory</p> File Description *.state# State"},{"location":"library/clownmdemu/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The ClownMDEmu core's core-provided FPS is 59.94 for NTSC games and 50 for PAL games</li> <li>The ClownMDEmu core's core-provided sample rate is 223721.5625 Hz</li> <li>The ClownMDEmu core's base width is 320 (though this varies depending on the loaded content)</li> <li>The ClownMDEmu core's base height is 224 (though this varies depending on the loaded content)</li> <li>The ClownMDEmu core's max width is 400</li> <li>The ClownMDEmu core's max height is 480</li> <li>The ClownMDEmu core's core-provided aspect ratio is typically 10:7 (though this varies depending on the loaded content)</li> </ul>"},{"location":"library/clownmdemu/#core-options","title":"Core options","text":"<p>The ClownMDEmu core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded.</p> <ul> <li> <p>Debug &gt; Disable Sprite Plane [clownmdemu_disable_sprite_plane] (disabled|enabled)</p> <p>Disable the VDP's Sprite Plane.</p> </li> <li> <p>Debug &gt; Disable Window Plane [clownmdemu_disable_window_plane] (disabled|enabled)</p> <p>Disable the VDP's Window Plane.</p> </li> <li> <p>Debug &gt; Disable Plane A [clownmdemu_disable_plane_a] (disabled|enabled)</p> <p>Disable the VDP's Plane A.</p> </li> <li> <p>Debug &gt; Disable Plane B [clownmdemu_disable_plane_b] (disabled|enabled)</p> <p>Disable the VDP's Plane B.</p> </li> <li> <p>Debug &gt; Disable FM1 [clownmdemu_disable_fm1] (disabled|enabled)</p> <p>Disable the YM2612's FM1 channel.</p> </li> <li> <p>Debug &gt; Disable FM2 [clownmdemu_disable_fm2] (disabled|enabled)</p> <p>Disable the YM2612's FM2 channel.</p> </li> <li> <p>Debug &gt; Disable FM3 [clownmdemu_disable_fm3] (disabled|enabled)</p> <p>Disable the YM2612's FM3 channel.</p> </li> <li> <p>Debug &gt; Disable FM4 [clownmdemu_disable_fm4] (disabled|enabled)</p> <p>Disable the YM2612's FM4 channel.</p> </li> <li> <p>Debug &gt; Disable FM5 [clownmdemu_disable_fm5] (disabled|enabled)</p> <p>Disable the YM2612's FM5 channel.</p> </li> <li> <p>Debug &gt; Disable FM6 [clownmdemu_disable_fm6] (disabled|enabled)</p> <p>Disable the YM2612's FM6 channel.</p> </li> <li> <p>Debug &gt; Disable DAC [clownmdemu_disable_dac] (disabled|enabled)</p> <p>Disable the YM2612's DAC channel.</p> </li> <li> <p>Debug &gt; Disable PSG1 [clownmdemu_disable_psg1] (disabled|enabled)</p> <p>Disable the SN76496's PSG1 channel.</p> </li> <li> <p>Debug &gt; Disable PSG2 [clownmdemu_disable_psg2] (disabled|enabled)</p> <p>Disable the SN76496's PSG2 channel.</p> </li> <li> <p>Debug &gt; Disable PSG3 [clownmdemu_disable_psg3] (disabled|enabled)</p> <p>Disable the SN76496's PSG3 channel.</p> </li> <li> <p>Debug &gt; Disable PSG Noise [clownmdemu_disable_psg_noise] (disabled|enabled)</p> <p>Disable the SN76496's PSG Noise channel.</p> </li> <li> <p>Debug &gt; Disable PCM1 [clownmdemu_disable_pcm1] (disabled|enabled)</p> <p>Disable the RF5C164's PCM1 channel.</p> </li> <li> <p>Debug &gt; Disable PCM2 [clownmdemu_disable_pcm2] (disabled|enabled)</p> <p>Disable the RF5C164's PCM2 channel.</p> </li> <li> <p>Debug &gt; Disable PCM3 [clownmdemu_disable_pcm3] (disabled|enabled)</p> <p>Disable the RF5C164's PCM3 channel.</p> </li> <li> <p>Debug &gt; Disable PCM4 [clownmdemu_disable_pcm4] (disabled|enabled)</p> <p>Disable the RF5C164's PCM4 channel.</p> </li> <li> <p>Debug &gt; Disable PCM5 [clownmdemu_disable_pcm5] (disabled|enabled)</p> <p>Disable the RF5C164's PCM5 channel.</p> </li> <li> <p>Debug &gt; Disable PCM6 [clownmdemu_disable_pcm6] (disabled|enabled)</p> <p>Disable the RF5C164's PCM6 channel.</p> </li> <li> <p>Debug &gt; Disable PCM7 [clownmdemu_disable_pcm7] (disabled|enabled)</p> <p>Disable the RF5C164's PCM7 channel.</p> </li> <li> <p>Debug &gt; Disable PCM8 [clownmdemu_disable_pcm8] (disabled|enabled)</p> <p>Disable the RF5C164's PCM8 channel.</p> </li> <li> <p>TV Standard [clownmdemu_tv_standard] (NTSC (59.94Hz)|PAL (50Hz))</p> <p>Which television standard to output in.</p> </li> <li> <p>Console Region [clownmdemu_overseas_region] (Overseas (Elsewhere)|Domestic (Japan))</p> <p>Which region the console is.</p> </li> <li> <p>Tall Interlace Mode 2 [clownmdemu_tall_interlace_mode_2] (disabled|enabled)</p> <p>Makes games that use Interlace Mode 2 for split-screen not appear squashed.</p> </li> <li> <p>Widescreen Hack [clownmdemu_widescreen] (disabled|enabled)</p> <p>Widens the display. Works well with some games, badly with others.</p> </li> <li> <p>Low-Pass Filter [clownmdemu_lowpass_filter] (enabled|disabled)</p> <p>Makes the audio sound 'softer', just like on a real Mega Drive.</p> </li> <li> <p>Low-Volume Distortion [clownmdemu_ladder_effect] (enabled|disabled)</p> <p>Approximates the so-called 'ladder effect' that is present in early Mega Drives. Without this, certain sounds in some games will be too quiet.</p> </li> </ul>"},{"location":"library/clownmdemu/#joypad","title":"Joypad","text":"RetroPad Inputs User 1 - 2 input descriptors B A Mode Start Up Down Left Right C Y X Z"},{"location":"library/clownmdemu/#external-links","title":"External links","text":"<ul> <li>Official ClownMDEmu Website</li> <li>Official ClownMDEmu GitHub Repository</li> <li>Libretro ClownMDEmu Core info file</li> <li>Report Libretro ClownMDEmu Core Issues Here</li> </ul>"},{"location":"library/clownmdemu/#sega-mega-drivegenesis-cores","title":"Sega Mega Drive/Genesis cores","text":"<ul> <li>Sega - Mega Drive - Genesis (BlastEm)</li> <li>Sega - MS/GG/MD/CD (Genesis Plus GX)</li> <li>Sega - MS/MD/CD/32X (PicoDrive)</li> </ul>"},{"location":"library/craft/","title":"Minecraft (Craft)","text":""},{"location":"library/craft/#background","title":"Background","text":"<p>A simple Minecraft clone written in C using modern OpenGL (shaders).</p>"},{"location":"library/craft/#features","title":"Features","text":"<ul> <li>Simple but nice looking terrain generation using simplex noise.</li> <li>Biomes</li> <li>Water</li> <li>More than 20 types of blocks and more can be added easily.</li> <li>Supports plants (grass, flowers, trees, etc.) and transparency (glass).</li> <li>Simple clouds in the sky (they don't move).</li> <li>Day / night cycles and a textured sky dome.</li> <li>More sophisticated sunrise/sunset color blending</li> <li>Ambient occlusion for basic shading of blocks.</li> <li>World changes persisted in a sqlite3 database.</li> <li>Configurable draw distance. The draw distance has a big effect on the framerate, a draw distance of 1 or 2 can make this core playable even on very lightweight computers.</li> <li>Configurable field of view.</li> <li>Gamepad support (including analog stick support) configurable analog sensitivity and deadzones, preliminary mouse and keyboard support.</li> <li>Configurable resolutions, up to 4K.</li> <li>A \u2018Jumping Flash\u2019 mode that allows you to jump infinitely into the air all while the camera faces downwards.</li> </ul> <p>The Craft core has been authored by</p> <ul> <li>Michael Fogleman</li> </ul> <p>The Craft core is licensed under</p> <ul> <li>MIT</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/craft/#requirements","title":"Requirements","text":"<ul> <li>OpenGL or OpenGL ES</li> </ul>"},{"location":"library/craft/#how-to-start-the-craft-core","title":"How to start the Craft core:","text":"<ul> <li> <p>To start the Craft core, go to RetroArch's main menu screen. Select 'Load Core', then 'Craft'.</p> </li> <li> <p>Now, select 'Start Core'.</p> </li> </ul> <p>The content should now start running!</p>"},{"location":"library/craft/#features_1","title":"Features","text":"<p>Frontend-level settings or features that the Craft core respects.</p> Feature Supported Restart \u2715 Saves \u2714 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2714 Memory Monitoring (achievements) \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2715 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/craft/#directories","title":"Directories","text":"<p>The Craft core's library name is 'Craft'</p> <p>The Craft core saves/loads to/from these directories.</p> <p>Frontend's System directory</p> File Description craft.db World data"},{"location":"library/craft/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The Craft core's core provided FPS is 60.0</li> <li>The Craft core's core provided sample rate is 48000 Hz</li> <li>The Craft core's base width is 640</li> <li>The Craft core's base height is 480</li> <li>The Craft core's max width is 640</li> <li>The Craft core's max height is 480</li> <li>The Craft core's core provided aspect ratio is 16/9</li> </ul>"},{"location":"library/craft/#core-options","title":"Core options","text":"<p>The Craft core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded.</p> <p>Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch.</p> <ul> <li> <p>Resolution (restart) [craft_resolution] (640x480|320x200|640x400|960x600|1280x800|1600x1000|1920x1200|2240x1400|2560x1600|2880x1800|3200x2000|3520x2200|3840x2400|7680x4320|15360x8640|16000x9000|320x240|320x480|360x200|360x240|360x400|360x480|400x224|480x272|512x224|512x240|512x384|512x512|640x224|640x240|640x448|720x576|800x480|800x600|960x720|1024x768|1280x720|1366x768|1600x900|1920x1080|2048x2048|4096x4096)</p> <p>Configure the resolution.</p> </li> </ul> Resolution - 320x240 <p></p> Resolution - 1920x1080 <p></p> <ul> <li> <p>Show info text [craft_show_info_text] (disabled|enabled)</p> <p>Show game information in the upper left corner of Craft.</p> </li> </ul> Show info text - Off <p></p> Show info text - On <p></p> <ul> <li> <p>Jumping Flash mode (Off/On):</p> <p>Enabling this allows you to jump infinitely into the air all while the camera faces downwards.</p> </li> <li> <p>Field of view [craft_field_of_view] (65 to 150 in increments of 5)</p> <p>Configure the field of view.</p> </li> </ul> Field of view - 65 <p></p> Field of view - 125 <p></p> <ul> <li> <p>Draw distance [craft_draw_distance] (1 to 32 in increments of 1. 10 is default)</p> <p>Configure the draw distance.</p> </li> </ul> Draw distance - 10 <p></p> Draw distance - 32 <p></p> <ul> <li> <p>Inverted aim [craft_inverted_aim] (disabled|enabled)</p> <p>Invert up and down crosshair aiming controls for the RetroPad and the RetroMouse.</p> </li> <li> <p>Right analog sensitivity [craft_analog_sensitivity] (0.0150 to 0.0500 in increments of 0.0025)</p> <p>Modify the RetroPad right analog stick's sensitivity.</p> </li> <li> <p>Analog deadzone size [craft_deadzone_radius] (0.010 to 0.200 in increments of 0.005)</p> <p>Modify RetroPad analog sticks' deadzone.</p> </li> </ul>"},{"location":"library/craft/#joypad","title":"Joypad","text":"RetroPad Inputs Craft Inputs Jump Destroy block Zoom out Move forwards Move backwards Move crosshair left Move crosshair right Next block Place block Move left Move right Move crosshair up Move crosshair down  X Move left/right  Y Move up/down  X Move crosshair left/right  Y Move crosshair up.down"},{"location":"library/craft/#keyboard","title":"Keyboard","text":"RetroKeyboard Inputs Craft Inputs Keyboard Up Move forwards Keyboard Down Move backwards Keyboard Right Move crosshair left Keyboard Left Move crosshair right Keyboard Right Shift Zoom out"},{"location":"library/craft/#mouse","title":"Mouse","text":"RetroMouse Inputs Craft Inputs  Mouse Cursor Move crosshair  Mouse 1 Destroy block  Mouse 2 Place block  Mouse 3 Copy block Wheel Up Previous block Wheel Down Next block"},{"location":"library/craft/#external-links","title":"External Links","text":"<ul> <li>Official Craft Website</li> <li>Official Craft Github Repository</li> <li>Libretro Craft Core info file</li> <li>Libretro Craft Github Repository</li> <li>Report Libretro Craft Core Issues Here</li> </ul>"},{"location":"library/crocods/","title":"Amstrad - CPC (CrocoDS)","text":""},{"location":"library/crocods/#background","title":"Background","text":"<p>Based on Win-CPC. CrocoDS was originally an Amstrad CPC emulator created for the Nintendo DS and was ported to libretro some time after.</p>"},{"location":"library/crocods/#authorlicense","title":"Author/License","text":"<p>The CrocoDS core has been authored by</p> <ul> <li>RedBug</li> </ul> <p>The CrocoDS core is licensed under</p> <ul> <li>MIT</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/crocods/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the CrocoDS core have the following file extensions:</p> <ul> <li>.dsk</li> <li>.sna</li> <li>.kcr</li> </ul>"},{"location":"library/crocods/#databases","title":"Databases","text":"<p>RetroArch database(s) that are associated with the CrocoDS core:</p> <ul> <li>Amstrad - CPC</li> </ul>"},{"location":"library/crocods/#features","title":"Features","text":"<p>Frontend-level settings or features that the CrocoDS core respects.</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2715 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 Memory Monitoring (achievements) \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/crocods/#directories","title":"Directories","text":"<p>The CrocoDS core's internal core name is 'crocods'</p> <p>The CrocoDS core saves/loads to/from these directories.</p> <p>Frontend's State directory</p> <ul> <li>'content-name'.state# (State)</li> </ul>"},{"location":"library/crocods/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The CrocoDS core's core provided FPS is 50</li> <li>The CrocoDS core's core provided sample rate is 44100 Hz</li> <li>The CrocoDS core's core provided aspect ratio is 1</li> </ul>"},{"location":"library/crocods/#core-options","title":"Core options","text":"<p>The CrocoDS core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded.</p> <p>Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch.</p> <ul> <li> <p>Color Monitor [crocods_greenmonitor] (color|green)</p> <p>Self-explanatory.</p> </li> </ul> Color Monitor - color <p></p> Color Monitor - green <p></p> <ul> <li> <p>Resize [crocods_resize] (Auto|320x200|Overscan)</p> <p>Self-explanatory.</p> </li> </ul> Resize - 320x200 <p></p> Resize - Overscan <p></p> <ul> <li> <p>Speed hack [crocods_hack] (no|yes)</p> <p>Awaiting description.</p> </li> </ul>"},{"location":"library/crocods/#controllers","title":"Controllers","text":"<p>The CrocoDS core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/crocods/#user-1-2-device-types","title":"User 1 - 2 device types","text":"<ul> <li>None - Doesn't disable input. There's no reason to switch to this.</li> <li>RetroPad - Joypad</li> <li>RetroKeyboard - Joypad - Keyboard inputs are always active. Has keymapper support.</li> </ul>"},{"location":"library/crocods/#controller-tables","title":"Controller tables","text":""},{"location":"library/crocods/#joypad","title":"Joypad","text":"User 1 Remap descriptors RetroPad Inputs CrocoDS core inputs JOY_FIRE2 NIL Pause SPARE Start RETURN Up JOY_UP Down JOY_DOWN Left JOY_LEFT Right JOY_RIGHT JOY_FIRE1 NIL NIL NIL User 2 Remap descriptors RetroPad Inputs CrocoDS core inputs SPARE NIL SPARE RETURN CURSOR_UP CURSOR_DOWN CURSOR_LEFT CURSOR_RIGHT SPARE NIL NIL NIL"},{"location":"library/crocods/#keyboard","title":"Keyboard","text":"RetroKeyboard Inputs CrocoDS core Inputs Keyboard Backspace DEL Keyboard Tab TAB Keyboard Return RETURN Keyboard Escape ESC Keyboard Space SPARE Keyboard Comma , COMMA Keyboard Minus - MINUS Keyboard Period . DOT Keyboard 0 0 Keyboard 1 1 Keyboard 2 2 Keyboard 3 3 Keyboard 4 4 Keyboard 5 5 Keyboard 6 6 Keyboard 7 7 Keyboard 8 8 Keyboard 9 9 Keyboard Semicolon ; COLON Keyboard Equals = HAT Keyboard Left Bracket [ AT Keyboard Right Bracket ] OPEN_SQUARE_BRACKET Keyboard a A Keyboard b B Keyboard c C Keyboard d D Keyboard e E Keyboard f F Keyboard g G Keyboard h H Keyboard i I Keyboard j J Keyboard k K Keyboard l L Keyboard m M Keyboard n N Keyboard o O Keyboard p P Keyboard q Q Keyboard r R Keyboard s S Keyboard t T Keyboard u U Keyboard v V Keyboard w W Keyboard x X Keyboard y Y Keyboard z Z Keyboard Delete JOY_LEFT Keyboard Keypad 0 F0 Keyboard Keypad 1 F1 Keyboard Keypad 2 F2 Keyboard Keypad 3 F3 Keyboard Keypad 4 F4 Keyboard Keypad 5 F5 Keyboard Keypad 6 F6 Keyboard Keypad 7 F7 Keyboard Keypad 8 F8 Keyboard Keypad 9 F9 Keyboard Keypad Period . FDOT Keyboard Keypad Enter SMALL_ENTER Keyboard Up CURSOR_UP Keyboard Down CURSOR_DOWN Keyboard Right CURSOR_RIGHT Keyboard Left CURSOR_LEFT Keyboard Insert JOY_FIRE1 Keyboard Home JOY_UP Keyboard End JOY_DOWN Keyboard Page Up JOY_FIRE2 Keyboard Page Down JOY_RIGHT Keyboard Caps Lock CAPS_LOCK Keyboard Right Shift SHIFT Keyboard Left Shift SHIFT Keyboard Right Control CONTROL Keyboard Left Control CONTROL"},{"location":"library/crocods/#external-links","title":"External Links","text":"<ul> <li>Official CrocoDS Github Repository</li> <li>Libretro CrocoDS Core info file</li> <li>Libretro CrocoDS Github Repository</li> <li>Report Libretro CrocoDS Core Issues Here</li> </ul>"},{"location":"library/crocods/#see-also","title":"See also","text":""},{"location":"library/crocods/#amstrad-cpc","title":"Amstrad - CPC","text":"<ul> <li>Amstrad - CPC (Caprice32)</li> </ul>"},{"location":"library/desmume/","title":"Nintendo - DS (DeSmuME)","text":""},{"location":"library/desmume/#background","title":"Background","text":"<p>DeSmuME is a Nintendo DS emulator http://desmume.org</p>"},{"location":"library/desmume/#authorlicense","title":"Author/License","text":"<p>The DeSmuME core has been authored by</p> <ul> <li>YopYop156</li> <li>Zeromus</li> </ul> <p>The DeSmuME core is licensed under</p> <ul> <li>GPLv2</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/desmume/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the DeSmuME core have the following file extensions:</p> <ul> <li>.nds</li> <li>.bin</li> </ul>"},{"location":"library/desmume/#databases","title":"Databases","text":"<p>RetroArch database(s) that are associated with the DeSmuME core:</p> <ul> <li>Nintendo - Nintendo DS</li> <li>Nintendo - Nintendo DS Decrypted</li> <li>Nintendo - Nintendo DS (Download Play)</li> </ul>"},{"location":"library/desmume/#bios","title":"BIOS","text":"<p>Required or optional firmware files go in the frontend's <code>system</code> directory.</p> <p>Warning</p> <p>In order for the firmware files to be loaded by the DeSmuME core, the 'Use External BIOS/Firmware (restart)' core option must be set to enabled.</p> <p>The md5sum of firmware.bin will vary from dump to dump. bios7 and bios9 should be the exact same as here. firmware.bin may not be the same.</p> Filename Description md5sum bios7.bin ARM7 BIOS - Optional df692a80a5b1bc90728bc3dfc76cd948 bios9.bin ARM9 BIOS - Optional a392174eb3e572fed6447e956bde4b25 firmware.bin NDS Firmware - Optional"},{"location":"library/desmume/#features","title":"Features","text":"<p>Frontend-level settings or features that the DeSmuME core respects.</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 (Not Download Play, Link-Cable or Wi-Fi emulation) Core Options \u2714 Memory Monitoring (achievements) \u2714 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2714 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/desmume/#directories","title":"Directories","text":"<p>The DeSmuME core's library name is 'DeSmuME'</p> <p>The DeSmuME core saves/loads to/from these directories.</p> <p>Frontend's Save directory</p> File Description *.dsv Cartridge battery save firmware.dfc Firmware settings save <p>Frontend's State directory</p> File Description *.state State"},{"location":"library/desmume/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The DeSmuME core's core provided FPS is 60</li> <li>The DeSmuME core's core provided sample rate is 44100 Hz</li> <li>The DeSmuME core's base width is dependent on the 'Screen layout' core option.</li> <li>The DeSmuME core's base height is dependent on the 'Screen layout' core option.</li> <li>The DeSmuME core's max width is dependent on the 'Screen layout' core option.</li> <li>The DeSmuME core's max height is dependent on the 'Screen layout' core option.</li> <li>The DeSmuME core's core provided aspect ratio is dependent on the 'Screen layout' core option.</li> </ul>"},{"location":"library/desmume/#nickname","title":"Nickname","text":"<p>The Nintendo DS' system nickname can be configured via RetroArch's Username setting in the User Menu.</p>"},{"location":"library/desmume/#core-options","title":"Core options","text":"<p>The DeSmuME core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded.</p> <p>Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch.</p> <ul> <li> <p>Firmware Language [desmume_firmware_language] (Auto|English|Japanese|French|German|Italian|Spanish)</p> <p>Choose the language of the firmware.</p> </li> <li> <p>Use External BIOS/Firmware (restart) [desmume_use_external_bios] (disabled|enabled)</p> <p>When set to enabled, the DeSmuME core will use the external firmware files found in RetroArch's System Directory. Look at the BIOS section for more information.</p> </li> <li> <p>Boot Into BIOS (interpreter and external bios only) [desmume_boot_into_bios] (disabled|enabled)</p> <p>For proper functionality of this core option. The 'CPU Mode' core option must be set to interpreter and the 'Use External BIOS/Firmware' core option must be set to enabled.</p> <p>Also, you must have external firmware files in RetroArch's System Directory.</p> <p>When set to enabled, the DeSmuME core will boot into the Nintendo DS firmware screen upon content load.</p> <p>Any settings changed in the firmware screen will be saved to firmware.dfc in RetroArch's Save directory.</p> </li> <li> <p>Load Game Into Memory (restart) [desmume_load_to_memory] (disabled|enabled)</p> <p>Loads the entire game into memory before startup. Will decrease in-game loading times at the cost of increased game startup times.</p> </li> <li> <p>CPU Cores [desmume_num_cores] (1|2|3|4)</p> <p>Configure how many CPU cores the DeSmuME core will use. Please note that, in general, DeSmuME benefits more from few fast CPUs than from many slow CPUs. For example, a dual-core 3.9GHz CPU will run DeSmuME much faster than a 12-core 1.6GHz CPU.</p> </li> <li> <p>CPU Mode [desmume_cpu_mode] (jit|interpreter)</p> <p>Choose to run CPU emulation through the Interpreter engine or the JIT Dynamic Recomplier engine.</p> <p>Interpreter has better compatibility than JIT Dynamic Recompiler. Some games that fail when using JIT Dynamic Recompiler will work fine with Interpreter. The tradeoff here is that Interpreter has much lower performance than JIT Dynamic Recompiler.</p> <p>Please note that the default setting for this core option is dependent on your hardware. The JIT Dynamic Recompiler is not available on all hardware (e.g. Android devices).</p> </li> <li> <p>JIT Block Size [desmume_jit_block_size] (12|13|14|15|16|17|18|19|20|21|22|23|24|25|26|27|28|29|30|31|32|33|34|35|36|37|38|39|40|41|42|43|44|45|46|47|48|49|50|51|52|53|54|55|56|57|58|59|60|61|62|63|64|65|66|67|68|69|70|71|72|73|74|75|76|77|78|79|80|81|82|83|84|85|86|87|88|89|90|91|92|93|94|95|96|97|98|99|100|0|1|2|3|4|5|6|7|8|9|10|11)</p> <p>This core option is only available when the 'CPU mode' core option to set to jit. You may need to tune the block size to prevent some games from breaking. 1 = most accurate, 100 = fastest.</p> </li> <li> <p>Enable Advanced Bus-Level Timing [desmume_advanced_timing] (enabled|disabled)</p> <p>This will improve or fix some games but it is very performance demanding. Disable this if you want more speed.</p> </li> <li> <p>Frameskip [desmume_frameskip] (0|1|2|3|4|5|6|7|8|9)</p> <p>Choose how much frames should be skipped to improve performance at the expense of visual smoothness.</p> <p>It is generally safe to choose 1 or 2 if you don't mind a slightly choppier game, in order to get a speedup.</p> <p>If screens seem stuck or screen flickering becomes unacceptable, pick a different frame skip value.</p> </li> <li> <p>Internal Resolution (restart) [desmume_internal_resolution] (256x192|512x384|768x576|1024x768|1280x960|1536x1152|1792x1344|2048x1536|2304x1728|2560x1920)</p> <p>Configure the resolution. Requires a restart.</p> </li> </ul> Internal resolution - 256x192 <p></p> Internal resolution - 2560x1920 <p></p> <ul> <li> <p>OpenGL Rasterizer (restart) [desmume_opengl_mode] (disabled|enabled)</p> <p>Enable OpenGL renderer.</p> <p>The Frontend's video driver must be set to gl.</p> </li> <li> <p>OpenGL: Color Depth (restart) [desmume_color_depth] (16-bit|32-bit)</p> <p>32-bit allows full color support from the DS (natively 6-bit).</p> <p>OpenGL Rasterizer core option must be set to enabled.</p> </li> <li> <p>OpenGL: Multisampling (restart) [desmume_gfx_multisampling] (disabled|2|4|8|16|32)</p> <p>Awaiting description.</p> </li> <li> <p>OpenGL: Texture Smoothing [desmume_gfx_texture_smoothing] (disabled|enabled)</p> <p>Awaiting description.</p> </li> <li> <p>Soft3D: High-res Color Interpolation [desmume_gfx_highres_interpolate_color] (disabled|enabled)</p> <p>Awaiting description.</p> </li> <li> <p>Soft3D: Line Hack [desmume_gfx_linehack] (enabled|disabled)</p> <p>Fixes some graphical bugs involving lines, but causes some other bugs. Not many games use lines.</p> </li> <li> <p>Soft3D: Texture Hack [desmume_gfx_txthack] (disabled|enabled)</p> <p>Awaiting description.</p> </li> <li> <p>Edge Marking [desmume_gfx_edgemark] (enabled|disabled)</p> <p>Awaiting description.</p> </li> <li> <p>\"Texture Scaling (xBrz) [desmume_gfx_texture_scaling] (1|2|4)</p> <p>Awaiting description.</p> </li> <li> <p>Texture Deposterization [desmume_gfx_texture_deposterize] (disabled|enabled)</p> <p>Awaiting description.</p> </li> <li> <p>Screen Layout [desmume_screens_layout] (top/bottom|bottom/top|left/right|right/left|top only|bottom only|quick switch|hybrid/top|hybrid/bottom)</p> <p>Self-explanatory.</p> </li> </ul> Screen layout - top/bottom <p></p> Screen layout - bottom/top <p></p> Screen layout - left/right <p></p> Screen layout - right/left <p></p> Screen layout - top only <p></p> Screen layout - bottom only <p></p> Screen layout - hybrid/top <p></p> <ul> <li> <p>Screen Gap [desmume_screens_gap] (0 to 100 in increments of 1. 0 is default.)</p> <p>Self explanatory.</p> </li> </ul> Screen Gap - 0 <p></p> Screen Gap - 100 <p></p> <ul> <li> <p>Hybrid Layout: Scale (restart) [desmume_hybrid_layout_scale] (1|3)</p> <p>Self explanatory. The 'Screen layout' core option must be set to a hybrid setting for this to function properly.</p> </li> </ul> Hybrid layout scale - 1 <p></p> Hybrid layout scale - 3 <p></p> <ul> <li> <p>Hybrid Layout: Show Both Screens [desmume_hybrid_showboth_screens] (enabled|disabled)</p> <p>Removes the small top screen when the 'Screen layout' core option is set to hybrid/top</p> <p>Removes the small bottom screen when the 'Screen layout' core option is set to hybrid/bottom</p> </li> <li> <p>Hybrid Layout: Cursor Always on Small Screen [desmume_hybrid_cursor_always_smallscreen] (enabled|disabled)</p> <p>Self explanatory.</p> <p>Disablng this allows you to use the stylus on the big bottom screen when the 'Screen layout' core option is set to hybrid/bottom.</p> </li> <li> <p>Mouse/Pointer [desmume_pointer_mouse] (enabled|disabled)</p> <p>Enabling this allows inputs for the stylus.</p> </li> <li> <p>Pointer Type [desmume_pointer_type] (mouse|touch)</p> <p>Setting this to mouse allows you to use mouse inputs for the stylus</p> <p>Setting this to touch allows you to use mouse/touch inputs for the stylus (e.g. Touch controls on Android devices).</p> </li> <li> <p>Mouse Speed [desmume_mouse_speed] (1.0|1.5|2.0|0.01|0.02|0.03|0.04|0.05|0.125|0.25|0.5)</p> <p>The Pointer type core option must be set to mouse</p> <p>Adjust mouse speed for the stylus.</p> </li> <li> <p>Pointer Rotation [desmume_input_rotation] (0|90|180|270)</p> <p>Rotate pointer controls</p> <p>This is can be used in conjuction with RetroArch's Rotation setting.</p> </li> <li> <p>Pointer Mode for Left Analog [desmume_pointer_device_l] (none|emulated|absolute|pressed)</p> <p>Awaiting description.</p> </li> <li> <p>Pointer Mode for Right Analog [desmume_pointer_device_r] (none|emulated|absolute|pressed)</p> <p>Awaiting description.</p> </li> <li> <p>Emulated Pointer Deadzone Percent [desmume_pointer_device_deadzone] (15|20|25|30|35|0|5|10\")</p> <p>Awaiting description.</p> </li> <li> <p>Emulated Pointer Acceleration Modifier Percent [desmume_pointer_device_acceleration_mod] (0|1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|25|26|27|28|29|30|31|32|33|34|35|36|37|38|39|40|41|42|43|44|45|46|47|48|49|50|51|52|53|54|55|56|57|58|59|60|61|62|63|64|65|66|67|68|69|70|71|72|73|74|75|76|77|78|79|80|81|82|83|84|85|86|87|88|89|90|91|92|93|94|95|96|97|98|99|100)</p> <p>Awaiting description.</p> </li> <li> <p>Emulated Stylus Pressure Modifier Percent [desmume_pointer_stylus_pressure] (50|51|52|53|54|55|56|57|58|59|60|61|62|63|64|65|66|67|68|69|70|71|72|73|74|75|76|77|78|79|80|81|82|83|84|85|86|87|88|89|90|91|92|93|94|95|96|97|98|99|100|0|1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|25|26|27|28|29|30|31|32|33|34|35|36|37|38|39|40|41|42|43|44|45|46|47|48|49)</p> <p>Awaiting description.</p> </li> <li> <p>Pointer Colour [desmume_pointer_colour] (white|black|red|blue|yellow)</p> <p>Awaiting description.</p> </li> <li> <p>Microphone Button Noise Type [desmume_mic_mode] (pattern|random)</p> <p>Configure microphone input settings.</p> <p>With the pattern setting, DeSmuME will use its internal noise sample for microphone input which works for many games that want you to blow on the mic.</p> <p>With the random setting, DeSmuME will use random whitenoise for microphone input which will work for games that require blowing but which don't work with the internal noise sample.</p> </li> </ul>"},{"location":"library/desmume/#controllers","title":"Controllers","text":"<p>The DeSmuME core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/desmume/#user-1-device-types","title":"User 1 device types","text":"<ul> <li>None - Doesn't disable input. There's no reason to switch to this.</li> <li>RetroPad - Joypad - Stay on this.</li> <li>RetroPad w/Analog - Joypad - Same as RetroPad. There's no reason to switch to this.</li> </ul>"},{"location":"library/desmume/#other-controllers","title":"Other controllers","text":"<ul> <li>Stylus - Pointer or Mouse - The DesmuME 2015 core will emulate stylus inputs using the mouse API or the pointer API depending on what the 'Pointer type' core option is set to.</li> </ul>"},{"location":"library/desmume/#device-tables","title":"Device tables","text":""},{"location":"library/desmume/#joypad","title":"Joypad","text":"User 1 input descriptors RetroPad Inputs DeSmuME inputs B B Y Y Select Select Start Start Up Up Down Down Left Left Right Right A A X X L L R R Lid Close/Open Lid Close/Open Tap Stylus Tap Stylus Make Microphone Noise Toggle Microphone Quick Screen Switch Quick Screen Switch  X Pointer mode l-analog X  Y Pointer mode l-analog Y  X Pointer mode r-analog X  Y Pointer mode r-analog Y"},{"location":"library/desmume/#mouse","title":"Mouse","text":"RetroMouse Inputs DeSmuME inputs  Mouse Cursor Stylus  Mouse 1 Stylus Press"},{"location":"library/desmume/#pointer","title":"Pointer","text":"RetroPointer Inputs DeSmuME inputs  or  Pointer Position Stylus  or  Pointer Pressed Stylus Press"},{"location":"library/desmume/#compatibility","title":"Compatibility","text":"<p>Same as upstream standalone.</p>"},{"location":"library/desmume/#external-links","title":"External Links","text":"<ul> <li>Official DeSmuME Website</li> <li>Official DeSmuME Github Repository</li> <li>Libretro DeSmuME Core info file</li> <li>Libretro DeSmuME Github Repository</li> <li>Report Libretro DeSmuME Core Issues Here</li> <li>Gameplay Videos</li> </ul>"},{"location":"library/desmume/#see-also","title":"See also","text":""},{"location":"library/desmume/#nintendo-nintendo-ds-decrypted-download-play","title":"Nintendo - Nintendo DS + Decrypted + (Download Play)","text":"<ul> <li>Nintendo - DS (DeSmuME 2015)</li> <li>Nintendo - DS (melonDS 2021)</li> <li>Nintendo - DS (melonDS DS)</li> </ul>"},{"location":"library/desmume_2015/","title":"Nintendo - DS (DeSmuME 2015)","text":""},{"location":"library/desmume_2015/#background","title":"Background","text":"<p>Port of Desmume to libretro based on Desmume SVN circa 2015.</p>"},{"location":"library/desmume_2015/#authorlicense","title":"Author/License","text":"<p>The DeSmuME 2015 core has been authored by</p> <ul> <li>YopYop156</li> <li>Zeromus</li> </ul> <p>The DeSmuME 2015 core is licensed under</p> <ul> <li>GPLv2</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/desmume_2015/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the DeSmuME 2015 core have the following file extensions:</p> <ul> <li>.nds</li> <li>.bin</li> </ul>"},{"location":"library/desmume_2015/#databases","title":"Databases","text":"<p>RetroArch database(s) that are associated with the DeSmuME 2015 core:</p> <ul> <li>Nintendo - Nintendo DS</li> <li>Nintendo - Nintendo DS Decrypted</li> <li>Nintendo - Nintendo DS (Download Play)</li> </ul>"},{"location":"library/desmume_2015/#features","title":"Features","text":"<p>Frontend-level settings or features that the DeSmuME 2015 core respects.</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 (Not Download Play, Link-Cable or Wi-Fi emulation) Core Options \u2714 Memory Monitoring (achievements) \u2714 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/desmume_2015/#directories","title":"Directories","text":"<p>The DeSmuME 2015 core's library name is 'DeSmuME 2015'</p> <p>The DeSmuME 2015 core saves/loads to/from these directories.</p> <p>Frontend's Save directory</p> File Description *.dsv Cartridge battery save <p>Frontend's State directory</p> File Description *.state# State"},{"location":"library/desmume_2015/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The DeSmuME 2015 core's core provided FPS is 60</li> <li>The DeSmuME 2015 core's core provided sample rate is 44100 Hz</li> <li>The DeSmuME 2015 core's base width is dependent on the 'Screen layout' core option.</li> <li>The DeSmuME 2015 core's base height is dependent on the 'Screen layout' core option.</li> <li>The DeSmuME 2015 core's max width is dependent on the 'Screen layout' core option.</li> <li>The DeSmuME 2015 core's max height is dependent on the 'Screen layout' core option.</li> <li>The DeSmuME 2015 core's core provided aspect ratio is dependent on the 'Screen layout' core option.</li> </ul>"},{"location":"library/desmume_2015/#nickname","title":"Nickname","text":"<p>Changing the system nickname isn't currently supported by the DeSmuME 2015 core.</p>"},{"location":"library/desmume_2015/#core-options","title":"Core options","text":"<p>The DeSmuME 2015 core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded.</p> <p>Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch.</p> <ul> <li> <p>Internal resolution (restart) [desmume_internal_resolution] (256x192|512x384|768x576|1024x768|1280x960|1536x1152|1792x1344|2048x1536|2304x1728|2560x1920)</p> <p>Self explanatory. Please note that the DeSmuME core is only software rendered.</p> </li> </ul> Internal resolution - 256x192 <p></p> Internal resolution - 2560x1920 <p></p> <ul> <li> <p>CPU cores [desmume_num_cores] (1|2|3|4)</p> <p>Configure how much CPU cores the DeSmuME core will use. Please note that, in general, DeSmuME benefits more from few fast CPUs than from many slow CPUs. For example, a dual-core 3.9GHz CPU will run DeSmuME much faster than a 12-core 1.6GHz CPU.</p> </li> <li> <p>CPU mode [desmume_cpu_mode] (jit|interpreter)</p> <p>Choose to run CPU emulation through the Interpreter engine or the JIT Dynamic Recomplier engine.</p> <p>Interpreter has better compatibility than JIT Dynamic Recompiler. Some games that fail when using JIT Dynamic Recompiler will work fine with Interpreter. The tradeoff here is that Interpreter has much lower performance than JIT Dynamic Recompiler.</p> <p>Please note that the default setting for this core option is dependent on your hardware. The JIT Dynamic Recompiler is not available on all hardware (e.g. Android devices).</p> </li> <li> <p>JIT block size [desmume_jit_block_size] (0 to 100 in increments of 1. 12 is default.)</p> <p>This core option is only available when the 'CPU mode' core option to set to jit. You may need to tune the block size to prevent some games from breaking. 1 = most accurate, 100 = fastest.</p> </li> <li> <p>Screen layout [desmume_screens_layout] (top/bottom|bottom/top|left/right|right/left|top only|bottom only|quick switch|hybrid/top|hybrid/bottom)</p> <p>Self-explanatory.</p> </li> </ul> Screen layout - top/bottom <p></p> Screen layout - bottom/top <p></p> Screen layout - left/right <p></p> Screen layout - right/left <p></p> Screen layout - top only <p></p> Screen layout - bottom only <p></p> Screen layout - hybrid/top <p></p> <ul> <li> <p>Hybrid layout scale (restart) [desmume_hybrid_layout_scale] (1|3)</p> <p>Self explanatory. The 'Screen layout' core option must be set to a hybrid setting for this to function properly.</p> </li> </ul> Hybrid layout scale - 1 <p></p> Hybrid layout scale - 3 <p></p> <ul> <li> <p>Hybrid layout show both screen [desmume_hybrid_showboth_screens] (enabled|disabled)</p> <p>Removes the small top screen when the 'Screen layout' core option is set to hybrid/top</p> <p>Removes the small bottom screen when the 'Screen layout' core option is set to hybrid/bottom</p> </li> <li> <p>Hybrid layout cursor always on small screen [desmume_hybrid_cursor_always_smallscreen] (enabled|disabled)</p> <p>Self explanatory.</p> <p>Disablng this allows you to use the stylus on the big bottom screen when the 'Screen layout' core option is set to hybrid/bottom.</p> </li> <li> <p>Enable mouse/pointer [desmume_pointer_mouse] (enabled|disabled)</p> <p>Enabling this allows inputs for the stylus.</p> </li> <li> <p>Pointer type [desmume_pointer_type] (mouse/touch)</p> <p>Setting this to mouse allows you to use mouse inputs for the stylus</p> <p>Setting this to touch allows you to use mouse/touch inputs for the stylus (e.g. Touch controls on Android devices).</p> </li> <li> <p>Mouse Speed [desmume_mouse_speed] (1.0|1.5|2.0|0.125|0.25|0.5)</p> <p>The Pointer type core option must be set to mouse</p> <p>Adjust mouse speed for the stylus.</p> </li> <li> <p>Pointer Colour [desmume_pointer_colour] (white|black|red|blue|yellow\")</p> <p>Configure the color of the stylus pointer.</p> </li> </ul> Pointer Colour - white <p></p> Pointer Colour - black <p></p> Pointer Colour - red <p></p> Pointer Colour - blue <p></p> Pointer Colour - yellow <p></p> <ul> <li> <p>Pointer mode l-analog [desmume_pointer_device_l] (none|emulated|absolute|pressed)</p> <p>Awaiting description.</p> </li> <li> <p>Pointer mode r-analog [desmume_pointer_device_r] (none|emulated|absolute|pressed)</p> <p>Awaiting description.</p> </li> <li> <p>Emulated pointer deadzone percent [desmume_pointer_device_deadzone] (15|20|25|30|35|0|5|10)</p> <p>Awaiting description.</p> </li> <li> <p>Emulated pointer acceleration modifier percent [desmume_pointer_device_acceleration_mod] (0 to 100 in increments of 1. 0 is default.)</p> <p>Awaiting description.</p> </li> <li> <p>Emulated stylus pressure modifier percent [desmume_pointer_stylus_pressure] (0 to 100 in increments of 1. 50 is default.)</p> <p>Configure the emulated pressure on the touchscreen from a stylus pressing on it.</p> </li> <li> <p>Enable emulated stylus jitter [desmume_pointer_stylus_jitter] (disabled|enabled)</p> <p>Emulate the tiny jitter from a human hand when holding a stylus; some games were accidentally dependent on this.</p> </li> <li> <p>Load Game into Memory (restart) [desmume_load_to_memory] (disabled|enabled)</p> <p>Loads the entire game into memory before startup. Will decrease in-game loading times at the cost of increased game startup times.</p> </li> <li> <p>Enable Advanced Bus-Level Timing [desmume_advanced_timing] (enabled|disabled)</p> <p>This will improve or fix some games but it is very performance demanding. Disable this if you want more speed.</p> </li> <li> <p>Firmware language [desmume_firmware_language] (Auto|English|Japanese|French|German|Italian|Spanish)</p> <p>Choose the language of the BIOS.</p> </li> <li> <p>Frameskip [desmume_frameskip] (0|1|2|3|4|5|6|7|8|9)</p> <p>Choose how much frames should be skipped to improve performance at the expense of visual smoothness.</p> <p>It is generally safe to choose 1 or 2 if you don't mind a slightly choppier game, in order to get a speedup.</p> <p>If screens seem stuck or screen flickering becomes unacceptable, pick a different frame skip value.</p> </li> <li> <p>Screen Gap [desmume_screens_gap] (0 to 100 in increments of 1. 0 is default.)</p> <p>Self explanatory.</p> </li> </ul> Screen Gap - 0 <p></p> Screen Gap - 100 <p></p> <ul> <li> <p>Enable Edgemark [desmume_gfx_edgemark] (enabled|disabled)</p> <p>Awaiting description.</p> </li> <li> <p>Enable Line Hack [desmume_gfx_linehack] (enabled|disabled)</p> <p>Fixes some graphical bugs involving lines, but causes some other bugs. Not many games use lines.</p> </li> <li> <p>Enable TXT Hack [desmume_gfx_txthack] (disabled|enabled)</p> <p>Fixes text bugs in some games (e.g. Etrian Odyssey). You may need to toggle it off &amp; on by scene.</p> </li> <li> <p>Force Microphone Enable [desmume_mic_force_enable] (disabled|enabled)</p> <p>Self-explanatory.</p> </li> <li> <p>Microphone Simulation Settings [desmume_mic_mode] (internal|sample|random|physical)</p> <p>Configure microphone input settings.</p> <p>With the internal setting, DeSmuME will use its internal noise sample for microphone input which works for many games that want you to blow on the mic.</p> <p>With the sample setting, you can supply your own microphone sample for microphone input. This may not work currently in the DeSmuME core.</p> <p>With the random setting, DeSmuME will use random whitenoise for microphone input which will work for games that require blowing but which don't work with the internal noise sample.</p> <p>With the physical setting, you can use your default recording device for microphone input. This may not work currently in the DeSmuME core.</p> </li> </ul>"},{"location":"library/desmume_2015/#controllers","title":"Controllers","text":"<p>The DeSmuME 2015 core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/desmume_2015/#user-1-device-types","title":"User 1 device types","text":"<ul> <li>None - Doesn't disable input. There's no reason to switch to this.</li> <li>RetroPad - Joypad - Stay on this.</li> <li>RetroPad w/Analog - Joypad - Same as RetroPad. There's no reason to switch to this.</li> </ul>"},{"location":"library/desmume_2015/#other-devices","title":"Other devices","text":"<ul> <li>Stylus - Pointer or Mouse - The DesmuME 2015 core will emulate stylus inputs using the mouse API or the pointer API depending on what the 'Pointer type' core option is set to.</li> </ul>"},{"location":"library/desmume_2015/#device-tables","title":"Device tables","text":""},{"location":"library/desmume_2015/#joypad","title":"Joypad","text":"User 1 input descriptors RetroPad Inputs DeSmuME 2015 inputs B B Y Y Select Select Start Start Up Up Down Down Left Left Right Right A A X X L L R R Lid Close/Open Lid Close/Open Tap Stylus Tap Stylus Toggle Microphone Toggle Microphone Quick Screen Switch Quick Screen Switch  X Pointer mode l-analog X  Y Pointer mode l-analog Y  X Pointer mode r-analog X  Y Pointer mode r-analog Y"},{"location":"library/desmume_2015/#mouse","title":"Mouse","text":"RetroMouse Inputs DeSmuME 2015 inputs  Mouse Cursor Stylus  Mouse 1 Stylus Press"},{"location":"library/desmume_2015/#pointer","title":"Pointer","text":"RetroPointer Inputs DeSmuME 2015 inputs  or  Pointer Position Stylus  or  Pointer Pressed Stylus Press"},{"location":"library/desmume_2015/#compatibility","title":"Compatibility","text":"Game Issue Alice in Wonderland Needs JIT Block Size 8 or smaller to get past title screen. Golden Sun: Dark Dawn (Europe) Runs very slowly. Buggy sound. Hotel Dusk: Room 215 Graphics glitches. Unintended \"scanlines\" appear on some screens. Pok\u00e9mon HeartGold (Europe) (Rev 10) Graphics glitches . Black pixels pop-ups in the top screen. Top screen goes black. Pok\u00e9mon SoulSilver (Europe) (Rev 10) Graphics glitches. Black pixels pop-ups in the top screen. Top screen goes black. Puppy Palace (U) / My Puppy Shop (E) Crashes in menus. Rune Factory (U) Random crashes. Rune Factory 2 (U) Random crashes. Ultimate Mortal Kombat 3 Runs very slowly. Yoshi Touch &amp; Go Runs very slowly. Yu-Gi-Oh! 5D's WORLD CHAMPIONSHIP 2010 (J) Random crashes."},{"location":"library/desmume_2015/#external-links","title":"External Links","text":"<ul> <li>Official DeSmuME Website</li> <li>Official DeSmuME Github Repository</li> <li>Libretro DeSmuME 2015 Core info file</li> <li>Libretro DeSmuME 2015 Github Repository</li> <li>Report Libretro DeSmuME 2015 Core Issues Here</li> </ul>"},{"location":"library/desmume_2015/#see-also","title":"See also","text":""},{"location":"library/desmume_2015/#nintendo-nintendo-ds-download-play","title":"Nintendo - Nintendo DS (Download Play)","text":"<ul> <li>Nintendo - DS (DeSmuME)</li> <li>Nintendo - DS (melonDS 2021)</li> <li>Nintendo - DS (melonDS DS)</li> </ul>"},{"location":"library/desmume_2015/#nintendo-nintendo-ds-decrypted","title":"Nintendo - Nintendo DS Decrypted","text":"<ul> <li>Nintendo - DS (DeSmuME)</li> <li>Nintendo - DS (melonDS 2021)</li> <li>Nintendo - DS (melonDS DS)</li> </ul>"},{"location":"library/desmume_2015/#nintendo-nintendo-ds","title":"Nintendo - Nintendo DS","text":"<ul> <li>Nintendo - DS (DeSmuME)</li> <li>Nintendo - DS (melonDS 2021)</li> <li>Nintendo - DS (melonDS DS)</li> </ul>"},{"location":"library/dice/","title":"DICE","text":""},{"location":"library/dice/#background","title":"Background","text":"<p>DICE is a Discrete Integrated Circuit Emulator. It emulates computer systems that lack any type of CPU, consisting only of discrete logic components.</p> <p>dice-libretro is a Libretro port of DICE, to run in RetroArch.</p> <p>The DICE core has been authored by:</p> <ul> <li>Adam B &amp; DICE Team (Standalone DICE)</li> <li>Ken Mitton</li> </ul> <p>The DICE core is licensed under:</p> <ul> <li>GPLv3</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/dice/#requirements","title":"Requirements","text":"<p>Minimal.</p>"},{"location":"library/dice/#how-to-start-the-dice-core","title":"How to start the DICE core:","text":"<p>Some games use zipped ROMs and launch similarly to MAME or FBNeo --- filename is important, see table at https://github.com/mittonk/dice-libretro/?tab=readme-ov-file#usage</p> <p>Please do not attempt to contact the DICE team to request ROM files.</p> <p>Some games (pong, breakout, pinpong, etc) do not have any ROM on the board at all. For these, copy the dummy launcher file from dummy_files to your ROM folder; these have a correct name (for example, pong.dmy) that will get RetroArch to set up lr-dice for the correct game.</p>"},{"location":"library/dice/#bios","title":"BIOS","text":"<p>None.</p>"},{"location":"library/dice/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the DICE core have the following file extensions:</p> <ul> <li>.zip</li> <li>.dmy</li> </ul> <p>.dmy files are used for games without any ROM component, see \"How to start the DICE core\" above.</p> <p>RetroArch database(s) that are associated with the DICE core:</p> <ul> <li>DICE</li> </ul>"},{"location":"library/dice/#features","title":"Features","text":"<p>Frontend-level settings or features that the DICE core respects:</p> Feature Supported Restart \u2714 Saves \u2715 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2714 Memory Monitoring (achievements) \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2714 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2714 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/dice/#directories","title":"Directories","text":"<p>None.</p>"},{"location":"library/dice/#geometry-and-timing","title":"Geometry and timing","text":"<p>Varies based on individual game, mostly around 640x246, 60 FPS.</p>"},{"location":"library/dice/#usage","title":"Usage","text":"<p>Again, see .dmy files for games that do not use read-only memory.</p>"},{"location":"library/dice/#core-options","title":"Core options","text":"<p>There are numerous options around using mice to simulate spinners / paddle controllers, see mouse-support.</p> <ul> <li> <p>Easy: One mouse can be used for Paddle 1. Use \"Core Options -&gt; Use mouse pointer for paddle 1\". You'll still want a keyboard or gamepad handy to have enough buttons.</p> </li> <li> <p>Somewhat advanced: Multiple mice are supported using certain libretro drivers on Linux and Windows, see retromouse.md.</p> </li> </ul>"},{"location":"library/dice/#user-1-device-types","title":"User 1 device types","text":"<p>The DICE core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p> <ul> <li>RetroPad</li> <li>RetroPad w/Analog</li> <li>Mouse</li> </ul>"},{"location":"library/dice/#joypad","title":"Joypad","text":"<p>Most games are playable with just a joypad.  Controls vary by game.</p> RetroPad Inputs User # input descriptors (Device name) Inputs Button 1 - Button 3 - Coin - Start - Up - Down - Left - Right - Button 2 - - Dollar - - - - - -  X Paddle -  Y Paddle -  X -  Y -"},{"location":"library/dice/#mouse","title":"Mouse","text":"RetroMouse Inputs (Device name) Inputs  Mouse Cursor Paddle, see mouse-support  Mouse 1 -  Mouse 2 -  Mouse 3 - Mouse 4 - Mouse 5 - Wheel Up - Wheel Down - Wheel Left - Wheel Right -"},{"location":"library/dice/#compatibility","title":"Compatibility","text":"Name Base filename Publisher Year Needs ROM? Anti-Aircraft antiaircraft Atari 1975 x Attack attack Exidy 1977 x Breakout breakout Atari 1976 Clean Sweep cleansweep Ramtek 1974 x Crash 'N Score crashnscore Atari 1975 x Crossfire crossfire Atari 1975 Gotcha gotcha Atari 1973 Hi-Way hiway Atari 1975 Indy 4 indy4 Atari 1976 x Jet Fighter jetfighter Atari 1975 x Pin Pong pinpong Atari 1974 Pong pong Atari 1972 Pong Doubles pongdoubles Atari 1973 Quadrapong quadrapong Atari 1974 Rebound rebound Atari 1974 Shark Jaws sharkjaws Atari 1975 x Space Race spacerace Atari 1973 Steeplechase steeplechase Atari 1975 x Stunt Cycle stuntcycle Atari 1976 x TV Basketball tvbasketball Midway 1974 Wipe Out wipeout Ramtek 1974 x"},{"location":"library/dice/#external-links","title":"External Links","text":"<ul> <li>Original DICE Website (inactive)</li> <li>Original DICE Repository (inactive)</li> <li>DirtBagXon's DICE Repository</li> <li>Libretro DICE Core info file</li> <li>Libretro DICE (Website name)   Repository</li> <li>Report Libretro DICE Core Issues   Here</li> </ul>"},{"location":"library/dice/#related-cores","title":"(Related cores)","text":"<p>MAME has some overlap (Pong, for example).</p>"},{"location":"library/dinothawr/","title":"Dinothawr","text":""},{"location":"library/dinothawr/#background","title":"Background","text":"<p>Dinothawr is a block pushing puzzle game on slippery surfaces. Our hero is a dinosaur whose friends are trapped in ice. Through puzzles it is your task to free the dinos from their ice prison.</p> <p>The Dinothawr core has been authored by</p> <ul> <li>Themaister (programming, music, some level design)</li> <li>Runar Heyer (art, level design, some code)</li> </ul> <p>The Dinothawr core is licensed under</p> <ul> <li>Non-commercial</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/dinothawr/#setup","title":"Setup","text":"<ul> <li>To start the Dinothawr core, you need to obtain Dinothawr's data files. You can do this by going to RetroArch's main menu screen and selecting 'Online Updater'. From there, select 'Content Downloader'.</li> </ul> <ul> <li>Select 'Dinothawr', then select 'Dinothawr.zip'. This should download and extract this file to RetroArch's Downloads directory.</li> </ul> <ul> <li>Go back to RetroArch's main menu screen. Select 'Load Content', then 'Downloads'.</li> </ul> <ul> <li> <p>Select the 'dinothawr' directory, then select 'dinothawr.game'.</p> </li> <li> <p>If you are asked which core to select, choose 'Dinothawr'.</p> </li> </ul> <p>The content should now start running!</p>"},{"location":"library/dinothawr/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the Dinothawr core have the following file extensions:</p> <ul> <li>.game</li> </ul>"},{"location":"library/dinothawr/#databases","title":"Databases","text":"<p>RetroArch database(s) that are associated with the Dinothawr core:</p> <ul> <li>Dinothawr</li> </ul>"},{"location":"library/dinothawr/#features","title":"Features","text":"<p>Frontend-level settings or features that the Dinothawr core respects.</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2714 Memory Monitoring (achievements) \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/dinothawr/#directories","title":"Directories","text":"<p>The Dinothawr core's internal core name is 'Dinothawr'</p> <p>The Dinothawr core saves/loads to/from these directories.</p> <p>Frontend's Save directory</p> <ul> <li>dinothawr.srm (Save data)</li> </ul>"},{"location":"library/dinothawr/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The Dinothawr core's core provided FPS is (FPS)</li> <li>The Dinothawr core's core provided sample rate is (Rate)</li> <li>The Dinothawr core's core provided aspect ratio is (Ratio)</li> </ul>"},{"location":"library/dinothawr/#customizing-hacking","title":"Customizing / Hacking","text":"<p>Dinothawr is fairly hackable. dinothawr.game is the game file itself. It is a simple XML file which points to all assets used by the game. Levels are organized in chapters. Levels themselves are created using the Tiled editor. If you want to try making your own levels, make sure you use the \"plain XML\" format for .tmx files and not the default zlib base64.</p> <p>Dinothawr - Level Design guide (pdf)</p>"},{"location":"library/dinothawr/#core-options","title":"Core options","text":"<p>The Dinothawr core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded.</p> <p>Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch.</p> <ul> <li> <p>Timer as FPS reference [dino_timer] (enabled|disabled)</p> <p>Use timer as FPS reference.</p> </li> </ul>"},{"location":"library/dinothawr/#controllers","title":"Controllers","text":"<p>The Dinothawr core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/dinothawr/#user-1-device-types","title":"User 1 device types","text":"<ul> <li>None - Doesn't disable input.</li> <li>RetroPad - Joypad - Stay on this.</li> <li>RetroPad w/Analog - Joypad - There's no reason to switch to this.</li> </ul>"},{"location":"library/dinothawr/#joypad","title":"Joypad","text":"User 1 Remap descriptors RetroPad Inputs Push D-Pad Up D-Pad Down D-Pad Left D-Pad Right Menu Reset"},{"location":"library/dinothawr/#external-links","title":"External Links","text":"<ul> <li>Official/Libretro Dinothawr Github Repository</li> <li>Report Libretro Dinothawr Core Issues Here</li> <li>Steam</li> </ul>"},{"location":"library/dolphin/","title":"Nintendo Gamecube/Wii (Dolphin)","text":""},{"location":"library/dolphin/#background","title":"Background","text":"<p>A Nintendo Gamecube/Wii emulator for Android, Windows, Mac and Linux, written in C++.</p> <p>The dolphin-libretro core supports OpenGL, Vulkan, and Direct3D 11 rendering.</p> <p>The dolphin-libretro core is licensed under</p> <ul> <li>GPLv2</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/dolphin/#requirements","title":"Requirements","text":"<ul> <li>OpenGL/Open GL ES 3.0 or higher for the OpenGL renderer.</li> <li>Vulkan for the Vulkan renderer.</li> <li>Direct3D 11 for the Direct3D 11 renderer.</li> </ul>"},{"location":"library/dolphin/#setup","title":"Setup","text":"<p>To function properly, the dolphin-libretro core requires the Dolphin <code>Sys</code> folder to be in the proper location. This directory contains Dolphin's database of per-game compatibility settings/hacks, without which many games experience bugs of varying severity.</p> <p>After downloading the core within RetroArch, do one of the following options:</p>"},{"location":"library/dolphin/#a-installing-from-the-core-system-files-downloader-easyautomatic","title":"A. Installing from the 'Core System Files Downloader' (Easy/Automatic)","text":"<p>If your frontend version has <code>Main Menu &gt; Online Updater &gt; Core System Files Downloader</code> then that's the easiest solution. Just download 'Dolphin.zip' from that menu and it will place the files where it needs them. You're all done!</p>"},{"location":"library/dolphin/#b-installing-from-the-github-repo-hardmanual","title":"B. Installing from the GitHub repo (Hard/Manual)","text":"<ol> <li> <p>Get a copy of the Dolphin <code>Sys</code> folder. This can be done by downloading the current source code. We provide two methods: one using Git and one without.</p> <ul> <li>If you have Git (if not, see the next option) Just clone the most recent version of the code by running: <pre><code>git clone --depth=1 https://github.com/libretro/dolphin.git\n</code></pre></li> <li>**If you don't have Git ** You can download a zip file of the source code with the following URL: https://github.com/libretro/dolphin/archive/master.zip You can then extract it.</li> </ul> </li> <li> <p>After downloading/extracting the code, navigate into the resulting source tree folder. The <code>Sys</code> folder you need is located in Data/Sys. This is the folder we will need to move/copy.</p> </li> <li>Find RetroArch's system folder path If you didn't change its default location, the <code>system</code> folder is located at the top level of your RetroArch installation folder. Whether you moved it or not, you can find the location of your <code>system</code> folder (along with any other folders RetroArch uses) by going to Settings &gt; Directory or by locating the system_directory line in the RetroArch configuration file (usually <code>retroarch.cfg</code>).</li> <li>In the <code>RETROARCH_SYSTEM_FOLDER</code>, create a new folder named dolphin-emu and move/copy the <code>Sys</code> folder into it.</li> </ol> <p>When everything is set up properly, the <code>Sys</code> folder path should look something like this: <pre><code>RETROARCH_SYSTEM_FOLDER/dolphin-emu/Sys\n</code></pre></p> <p>The dolphin-libretro core will now work much more reliably.</p>"},{"location":"library/dolphin/#bios","title":"BIOS","text":"<p>The (optional) BIOS file goes in the directory <code>RETROARCH_SAVES_FOLDER/dolphin-emu/User/GC/&lt;USA or EUR or JAP&gt;</code>, with the file name <code>IPL.bin</code> for all regions. It is not necessary to provide a BIOS for most games, but certain titles (particularly those which make heavy use of the system fonts, like Star Fox Assault) can be unplayable without it.</p> <p>To play the Gamecube BIOS animation at game launch, once you have the aforementioned BIOS file placed and named correctly, open the <code>Dolphin.ini</code> file located in <code>RETROARCH_SAVES_FOLDER/dolphin-emu/User/GameSettings/Config/</code> with a text editor and change the line <code>SkipIPL = True</code> to <code>SkipIPL = False</code>.</p>"},{"location":"library/dolphin/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the dolphin-libretro core have the following file extensions:</p> <ul> <li>.elf</li> <li>.iso</li> <li>.gcm</li> <li>.dol</li> <li>.tgc</li> <li>.wbfs</li> <li>.ciso</li> <li>.gcz</li> <li>.wad</li> <li>.rvz</li> </ul> <p>RetroArch database(s) that are associated with the dolphin-libretro core:</p> <ul> <li>Nintendo - GameCube</li> <li>Nintendo - Wii</li> </ul>"},{"location":"library/dolphin/#features","title":"Features","text":"<p>Frontend-level settings or features that the dolphin-libretro core respects.</p> Feature Supported Restart \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2715 Core Options \u2714 Memory Monitoring (achievements) \u2714 RetroArch Cheats \u2715 Native Cheats \u2714 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2714 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/dolphin/#directories","title":"Directories","text":"<p>In addition to the aforementioned <code>RETROARCH_SYSTEM_FOLDER/dolphin-emu</code> directory, the dolphin-libretro core also creates a folder structure similar to that used by the standalone Dolphin emulator in <code>RETROARCH_SAVES_FOLDER/dolphin-emu/User</code>. In this structure, you can access/edit most of the same functionality you would find in the standalone Dolphin emulator and can even copy some files--such as <code>GAME.ini</code> and save files--back and forth between the dolphin-libretro core and the standalone Dolphin emulator.</p>"},{"location":"library/dolphin/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The dolphin-libretro core's core provided FPS is 60 (for NTSC) / 50 (for PAL)</li> <li>The dolphin-libretro core's core provided sample rate can be either 32000 Hz or 48000 Hz depending on user configuration</li> <li>The dolphin-libretro core's base width is dependent on the 'Internal Resolution' core option</li> <li>The dolphin-libretro core's base height is dependent on the 'Internal Resolution' core option</li> <li>The dolphin-libretro core's max width is dependent on the 'Internal Resolution' core option</li> <li>The dolphin-libretro core's max height is dependent on the 'Internal Resolution' core option</li> <li>The dolphin-libretro core's core provided aspect ratio is 4/3.</li> </ul>"},{"location":"library/dolphin/#language","title":"Language","text":"<p>When the <code>Language</code> core option is set to automatic, the default dolphin-libretro language setting will be pulled from RetroArch's Language setting.</p>"},{"location":"library/dolphin/#internal-cheats","title":"Internal Cheats","text":"<p>Disabled by default. Internal cheats can be handled via the GAME.ini files, but they will not take effect unless internal cheats are enabled in the core options. While there is no automatic way to add cheats to the dolphin-libretro core, it can use a cheat file generated by the standalone Dolphin emulator using the following process:</p> <ol> <li>Open standalone Dolphin emulator and right-click your game &gt; Properties.</li> <li>Look at the title bar and remember the ID of the game (for example <code>GFZE01</code> for <code>F-Zero GX USA</code>).</li> <li>Go to <code>Gecko Codes</code> tab and click <code>Download Codes</code>.</li> <li>Check the boxes for the cheats you want to use then you can close Dolphin.</li> <li>Navigate to <code>My Documents\\Dolphin Emulator\\GameSettings</code> by default for Windows (or <code>~/.local/share/dolphin-emu/GameSettings</code> for Linux).</li> <li>Copy the .ini file with the ID of the game and paste it in your <code>RETROARCH_SAVES_FOLDER/dolphin-emu/User/GameSettings</code> folder.</li> <li>Start the game, go to Quick Menu &gt; Core Options and turn ON \"Internal Cheats\".</li> <li>And finally Quick Menu &gt; Close Content, restart the game and the cheats should now be active.</li> </ol> <p>If you need to enable another cheat later for that game, you don't need to do the whole process all over again. You can simply edit the .ini file(s) in your <code>RETROARCH_SAVES_FOLDER/dolphin-emu/User/GameSettings</code> folder structure with a text editor to add the cheat title under the line [Gecko_Enabled].</p>"},{"location":"library/dolphin/#opengl","title":"OpenGL","text":"<p>Dolphin's OpenGL renderer can be used by setting RetroArch's video driver to gl.</p> <p>The common option for all operating systems is OpenGL, requiring hardware that supports OpenGL/Open GL ES 3.0 or higher. It is an older, pre-Vulkan API, slower than Vulkan but with better compatibility. If you encounter problems with other APIs, try this one.</p>"},{"location":"library/dolphin/#vulkan","title":"Vulkan","text":"<p>Dolphin's Vulkan renderer can be used by setting RetroArch's video driver to vulkan.</p> <p>This is the latest and fastest API currently. It is most recommended for demanding less of your CPU, thus being the fastest.</p>"},{"location":"library/dolphin/#d3d11","title":"D3D11","text":"<p>Dolphin's Direct3D 11 renderer can be used by setting RetroArch's video driver to d3d11.</p> <p>In some cases Direct3D 11 may offer better performance than OpenGL, especially on integrated Intel graphics.</p>"},{"location":"library/dolphin/#core-options","title":"Core options","text":"<p>The Dolphin core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded.</p> <ul> <li>Renderer [dolphin_renderer] (Hardware|Software)</li> <li>Internal Resolution [dolphin_efb_scale] (x1 (640 x 528)|x2 (1280 x 1056)|x3 (1920 x 1584)|x4 (2560 x 2112)|x5 (3200 x 2640)|x6 (3840 x 3168))</li> <li>Widescreen (Wii) [dolphin_widescreen] (ON|OFF)</li> <li>WideScreen Hack [dolphin_widescreen_hack] (OFF|ON)</li> <li>Shader Compilation Mode [dolphin_shader_compilation_mode] (sync|a-sync Skip Rendering|sync UberShaders|a-sync UberShaders)</li> <li>Wait for Shaders before Starting [dolphin_wait_for_shaders] (OFF|ON)</li> <li>Progressive Scan [dolphin_progressive_scan] (ON|OFF)</li> <li>PAL60 [dolphin_pal60] (ON|OFF)</li> <li>Max Anisotropy [dolphin_max_anisotropy] (1x|2x|4x|8x|16x)</li> <li>Skip Presenting Duplicate Frames [dolphin_skip_dupe_frames] (ON|OFF)</li> <li>Scaled EFB Copy [dolphin_efb_scaled_copy] (ON|OFF)</li> <li>Force Texture Filtering [dolphin_force_texture_filtering] (OFF|ON)</li> <li>Store EFB Copies on GPU [dolphin_efb_to_texture] (ON|OFF)</li> <li>Texture Cache Accuracy [dolphin_texture_cache_accuracy] (Fast|Middle|Safe)</li> <li>GPU Texture Decoding [dolphin_gpu_texture_decoding] (OFF|ON)</li> <li>Fast Depth Calculation [dolphin_fast_depth_calculation] (ON|OFF)</li> <li>Bounding Box Emulation [dolphin_bbox_enabled] (OFF|ON)</li> <li>Disable EFB to VRAM [dolphin_efb_to_vram] (OFF|ON)</li> <li>Load Custom Textures [dolphin_load_custom_textures] (OFF|ON)</li> <li>CPU Core [dolphin_cpu_core] (JIT64/JITARM64|Interpreter|Cached Interpreter)</li> <li>CPU Clock Rate [dolphin_cpu_clock_rate] (100%|from 5% to 300%)</li> <li>Fastmem [dolphin_fastmem] (ON|OFF)</li> <li>Wiimote IR Mode [dolphin_ir_mode] (Right Stick controls pointer (relative)|Right Stick controls pointer (absolute)|Mouse controls pointer)</li> <li>Wiimote IR Vertical Offset [dolphin_ir_offset] (10|from -50 to 50)</li> <li>Wiimote IR Total Yaw [dolphin_ir_yaw] (15|from 0 to 100)</li> <li>Wiimote IR Total Pitch [dolphin_ir_pitch] (15|from 0 to 100)</li> <li>Rumble [dolphin_enable_rumble] (ON|OFF)</li> <li>Sensor Bar Position [dolphin_sensor_bar_position] (Bottom|Top)</li> <li>Wiimote Continuous Scanning [dolphin_wiimote_continuous_scanning] (OFF|ON)</li> <li>Use ports 5-8 for GameCube controllers in Wii mode [dolphin_alt_gc_ports_on_wii] (OFF|ON)</li> <li>Audio Mixer Rate [dolphin_mixer_rate] (32000|48000)</li> <li>DSP HLE [dolphin_dsp_hle] (ON|OFF)</li> <li>DSP Enable JIT [dolphin_dsp_jit] (ON|OFF)</li> <li>Language [dolphin_language] (English|Japanese|German|French|Spanish|Italian|Dutch|Simplified Chinese|Traditional Chinese|Korean)</li> <li>Internal Cheats Enabled [dolphin_cheats_enabled] (OFF|ON)</li> <li>OSD Enabled [dolphin_osd_enabled] (ON|OFF)</li> <li>Log Level [dolphin_log_level] (Info|Notice|Error|Warning)</li> </ul>"},{"location":"library/dolphin/#joypad","title":"Joypad","text":"RetroPad Inputs GameCube Controller Wiimote Wiimote (sideways) Wiimote + Nunchuk Classic Controller Classic Controller Pro B B 1 B B B Y 2 B Z Y Y - - 2 - - Start + + 1 + + D-Pad Up D-Pad Up D-Pad Up D-Pad Up D-Pad Up D-Pad Up D-Pad Down D-Pad Down D-Pad Down D-Pad Down D-Pad Down D-Pad Down D-Pad Left D-Pad Left D-Pad Left D-Pad Left D-Pad Left D-Pad Left D-Pad Right D-Pad Right D-Pad Right D-Pad Right D-Pad Right D-Pad Right A A 2 A A A X 1 A C X X - ZL L Z + ZR R L Shake Nunchuk L ZL R Shake Shake Shake Wiimote R ZR L-Analog R-Analog Home Home Home Home Home  X Analog X Tilt X Tilt X Nunchuk Stick X Left Stick X Left Stick X  Y Analog Y Tilt Y Tilt Y Nunchuk Stick Y Left Stick Y Left Stick Y  X C-Stick X Tilt X Right Stick X Right Stick X  Y C-Stick Y Tilt Y Right Stick Y Right Stick Y NOTE: The 'L-Analog' and 'R-Analog' inputs are half-presses of the analog L and R buttons, respectively. These inputs are required to progress in some games, such as Super Mario Sunshine."},{"location":"library/dolphin/#compatibility","title":"Compatibility","text":"<p>Compatibility Pages</p>"},{"location":"library/dolphin/#external-links","title":"External Links","text":"<ul> <li>Official Dolphin Website</li> <li>Official Dolphin Github Repository</li> <li>Libretro Dolphin Core info file</li> <li>Report Libretro Dolphin Core Issues Here</li> <li>Gameplay Videos</li> </ul>"},{"location":"library/dosbox/","title":"DOS (DOSBox)","text":""},{"location":"library/dosbox/#background","title":"Background","text":"<p>DOSBox is a multiplatform DOS-emulator</p> <p>The DOSBox core has been authored by</p> <ul> <li>DOSBox Team</li> </ul> <p>The DOSBox core is licensed under</p> <ul> <li>GPLv2</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/dosbox/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the DOSBox core have the following file extensions:</p> <ul> <li>.exe</li> <li>.com</li> <li>.bat</li> <li>.conf</li> </ul> <p>RetroArch database(s) that are associated with the DOSBox core:</p> <ul> <li>DOS</li> </ul>"},{"location":"library/dosbox/#features","title":"Features","text":"<p>Frontend-level settings or features that the DOSBox core respects.</p> Feature Supported Restart \u2715 Screenshots \u2714 Saves - States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2714 Memory Monitoring (achievements) \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/dosbox/#directories","title":"Directories","text":"<p>The DOSBox core's library name is 'DOSBox'</p>"},{"location":"library/dosbox/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The DOSBox core's core provided FPS is 60.0</li> <li>The DOSBox core's core provided sample rate is (Rate)</li> <li>The DOSBox core's base width is 320</li> <li>The DOSBox core's base height is 200</li> <li>The DOSBox core's max width is 1024</li> <li>The DOSBox core's max height is 768</li> <li>The DOSBox core's core provided aspect ratio is 4/3</li> </ul>"},{"location":"library/dosbox/#loading-content","title":"Loading content","text":"<ul> <li>To use you can either load an exe/com/bat file or a *.conf file.</li> <li>If loading exe/com/bat the system directory will be searched for a 'dosbox.conf' file to load. If one isn't available default values will be used. This mode is equivalent to running a DOSBox binary with the specified file as the command line argument.</li> <li>If loading a conf file DOSBox will be loaded with the options in the config file. This mode is useful if you just want to be dumped at a command prompt, but can also be used to load a game by putting commands in the autoexec section.</li> <li>To be useful the frontend will need to have keyboard+mouse support, and all keyboard shortcuts need to be remapped.</li> </ul>"},{"location":"library/dosbox/#usage","title":"Usage","text":"<p>DOSBox can load DOS executables or custom config files. To get started you can generate a config file by creating the DOSbox folder in your libretro SYSTEM directory, and then loading any DOS application, exit back to the command interpreter and then run config -wcd, Configuration files allow you far better control than core options so far. Eventually every single useable option will be exposed but in the meantime combining both is the best alternative.</p> <p>If you generate a default config it will always be loaded by default, but you can override it by saving your custom settings, preferably in the game folder. You can create a config like this:</p> <p><pre><code>[autoexec]\n@echo off\nmount d \"/storage/roms/dos/game\"\nd:\ngame.exe\n</code></pre> Then you can store this config in the game folder (or any other directory) and just the config instead of the exe file. Once you change a setting using the config command or via core options, you can always update the config file by using config -wc</p>"},{"location":"library/dosbox/#midi","title":"MIDI","text":"<ul> <li>To use MIDI you need MT32_CONTROL.ROM and MT32_PCM.ROM in the system directory of RetroArch.Then set:</li> </ul> <pre><code>[midi]\nmpu401=intelligent\nmididevice=mt32\n</code></pre>"},{"location":"library/dosbox/#core-options","title":"Core options","text":"<p>The DOSBox core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded.</p> <p>Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch.</p> <ul> <li> <p>Machine type [dosbox_machine_type] (vgaonly|svga_s3|svga_et3000|svga_et4000|svga_paradise|hercules|cga|tandy|pcjr|ega)</p> <p>Select what machine will be emulated.</p> </li> <li> <p>Gamepad emulated mouse [dosbox_emulated_mouse] (enable|disable)</p> <p>CPU cycles are divided in core options to allow fine control of the desired CPU cycles. Setting this too low may cause slow gameplay, setting this too high might cause sound crackling and bad performance.</p> </li> <li> <p>CPU cycles x 100000 [dosbox_cpu_cycles_0] (0|1|2|3|4|5|6|7|8|9)</p> <p>CPU cycles are divided in core options to allow fine control of the desired CPU cycles. Setting this too low may cause slow gameplay, setting this too high might cause sound crackling and bad performance.</p> </li> <li> <p>PU cycles x 10000 [dosbox_cpu_cycles_1] (0|1|2|3|4|5|6|7|8|9)</p> <p>CPU cycles are divided in core options to allow fine control of the desired CPU cycles. Setting this too low may cause slow gameplay, setting this too high might cause sound crackling and bad performance.</p> </li> <li> <p>CPU cycles x 1000 [dosbox_cpu_cycles_2] (1|2|3|4|5|6|7|8|9|0)</p> <p>CPU cycles are divided in core options to allow fine control of the desired CPU cycles. Setting this too low may cause slow gameplay, setting this too high might cause sound crackling and bad performance.</p> </li> <li> <p>CPU cycles x 100 [dosbox_cpu_cycles_3] (0|1|2|3|4|5|6|7|8|9\")</p> <p>CPU cycles are divided in core options to allow fine control of the desired CPU cycles. Setting this too low may cause slow gameplay, setting this too high might cause sound crackling and bad performance.</p> </li> </ul>"},{"location":"library/dosbox/#user-1-2-device-types","title":"User 1 - 2 device types","text":"<p>The DOSBox core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p> <ul> <li>None - Input disabled.</li> <li>Gamepad - Joypad</li> <li>Joystick - Analog</li> <li>Keyboard - Keyboard - Keyboard inputs are always active. Has keymapper support.</li> </ul>"},{"location":"library/dosbox/#joypad","title":"Joypad","text":"Input descriptors for Gamepad 2 Button RetroPad Inputs Button 2 Button 1 D-Pad Up D-Pad Down D-Pad Left D-Pad Right Input descriptors for Gamepad 4 Button RetroPad Inputs Button 3 Button 1 D-Pad Up D-Pad Down D-Pad Left D-Pad Right Button 4 Button 2 Input descriptors for Joystick 2 Button RetroPad Inputs Button 2 Button 1 Left Analog X  X Left Analog Y  Y Input descriptors for Joystick 4 Button RetroPad Inputs Button 3 Button 1 Button 4 Button 2 Left Analog X  X Left Analog Y  Y Right Analog X  X Right Analog Y  Y Input descriptors for Keyboard RetroPad Inputs Esc Enter Kbd Up Kbd Down Kbd Left Kbd Right Input descriptors for Emulated mouse RetroPad Inputs Emulated Mouse Right Click Emulated Mouse Left Click Emulated Mouse X Axis  X Emulated Mouse Y Axis  Y"},{"location":"library/dosbox/#keyboard","title":"Keyboard","text":"RetroKeyboard Inputs Keyboard Keyboard Backspace Backspace Keyboard Tab Tab Keyboard Return Enter Keyboard Pause Pause Keyboard Escape Escape Keyboard Space Space Keyboard ' ' Keyboard , , Keyboard . . Keyboard / / Keyboard 0 0 Keyboard 1 1 Keyboard 2 2 Keyboard 3 3 Keyboard 4 4 Keyboard 5 5 Keyboard 6 6 Keyboard 7 7 Keyboard 8 8 Keyboard 9 9 Keyboard ; ; Keyboard - - Keyboard = = Keyboard [ [ Keyboard \\ \\ Keyboard ] ] Keyboard <code>|</code> Keyboard a a Keyboard b b Keyboard c c Keyboard d d Keyboard e e Keyboard f f Keyboard g g Keyboard h h Keyboard i i Keyboard j j Keyboard k k Keyboard l l Keyboard m m Keyboard n n Keyboard o o Keyboard p p Keyboard q q Keyboard r r Keyboard s s Keyboard t t Keyboard u u Keyboard v v Keyboard w w Keyboard x x Keyboard y y Keyboard z z Keyboard Delete Delete Keyboard Numpad 0 Numpad 0 Keyboard Numpad 1 Numpad 1 Keyboard Numpad 2 Numpad 2 Keyboard Numpad 3 Numpad 3 Keyboard Numpad 4 Numpad 4 Keyboard Numpad 5 Numpad 5 Keyboard Numpad 6 Numpad 6 Keyboard Numpad 7 Numpad 7 Keyboard Numpad 8 Numpad 8 Keyboard Numpad 9 Numpad 9 Keyboard Numpad . Numpad . Keyboard Numpad / Numpad / Keyboard Numpad * Numpad * Keyboard Numpad - Numpad - Keyboard Numpad + Numpad + Keyboard Numpad Enter Numpad Enter Keyboard Up Up Keyboard Down Down Keyboard Right Left Keyboard Left Right Keyboard Insert Insert Keyboard Home Home Keyboard End End Keyboard Page Up Page Up Keyboard Page Down Page Down Keyboard F1 F1 Keyboard F2 F2 Keyboard F3 F3 Keyboard F4 F4 Keyboard F5 F5 Keyboard F6 F6 Keyboard F7 F7 Keyboard F8 F8 Keyboard F9 F9 Keyboard F10 F10 Keyboard F11 F11 Keyboard F12 F12 Keyboard Num Lock Num Lock Keyboard Caps Lock Caps Lock Keyboard Scroll Lock Scroll Lock Keyboard Right Shift Right Shift Keyboard Left Shift Left Shift Keyboard Right Control Right Control Keyboard Left Control Left Control Keyboard Right Alt Right Alt Keyboard Left Alt Left Alt Keyboard Sys Req Print Screen"},{"location":"library/dosbox/#external-links","title":"External Links","text":"<ul> <li>Official DOSBox Website</li> <li>Official/Original DOSBox SourceForge Repository</li> <li>Libretro DOSBox Core info file</li> <li>Libretro DOSBox Github Repository</li> <li>Report Libretro DOSBox Core Issues Here</li> </ul>"},{"location":"library/dosbox_pure/","title":"DOS (DOSBox Pure)","text":""},{"location":"library/dosbox_pure/#background","title":"Background","text":"<p>DOSBox Pure is a fork of the multiplatform MS-DOS emulator, DOSBox. It was built by Psyraven in 2020 specifically for RetroArch/Libretro and implements advanced features like save states, an on-screen keyboard, highly customizable controller setup or rewinding. DOSBox Pure aims for simplicity and ease of use.</p> <p>The DOSBox Pure core has been authored by</p> <ul> <li>DOSBox Team</li> <li>Psyraven</li> </ul> <p>The DOSBox Pure core is licensed under</p> <ul> <li>GPLv2</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/dosbox_pure/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the DOSBox Pure core has the following file extensions:</p> <ul> <li>.zip (see Load games from ZIP)</li> <li>.dosz (alternative extension to .ZIP)</li> <li>.exe (DOS program)</li> <li>.com (DOS program)</li> <li>.bat (DOS batch file)</li> <li>.iso (CDROM image)</li> <li>.cue (CDROM image)</li> <li>.ins (CDROM image)</li> <li>.img (hard disk/floppy disk/CDROM image)</li> <li>.ima (hard disk/floppy disk image)</li> <li>.vhd (hard disk image)</li> <li>.jrc (PCjr cartridge)</li> <li>.tc (PCjr cartridge)</li> <li>.m3u _(playlist for multiple CDROM/floppy)</li> <li>.m3u8 _(playlist for multiple CDROM/floppy)</li> <li>.conf (bootable, see Loading of dosbox.conf files)</li> </ul> <p>RetroArch database(s) that are associated with the DOSBox Pure core:</p> <ul> <li>DOS</li> </ul>"},{"location":"library/dosbox_pure/#features","title":"Features","text":"<p>Frontend-level settings or features that the DOSBox Pure core respects.</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2715 Core Options \u2714 RetroAchievements \u2715 RetroArch Cheats \u2714 Native Cheats \u2714 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2714 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/dosbox_pure/#midi-playback-with-soundfonts","title":"MIDI playback with SoundFonts","text":"<p>If DOSBox Pure finds one or more <code>.SF2</code> sound font files in the <code>system</code> directory of the frontend, one of them can be selected via the <code>Audio &gt; MIDI Output</code> core option. This sound font will then be used to play <code>General Midi</code> and <code>Sound Canvas</code> music.</p>"},{"location":"library/dosbox_pure/#mpu-401-midi-device-emulation-through-munt","title":"MPU-401 MIDI device emulation through MUNT","text":"<p>To emulate pre-General MIDI (MPU-401) devices such as the Roland MT-32, CM-32L, CM-64 and LAPC-I, you need the correct ROM files, e.g., MT32_CONTROL.ROM and MT32_PCM.ROM (more details about necessary files here). Place them in the RetroArch <code>system</code> directory.</p> <p>Then, bring up DOSBox Pure's options and in <code>Audio &gt; MIDI Output</code>, select the device you want to emulate (e.g., <code>Roland MT-32</code>).</p>"},{"location":"library/dosbox_pure/#cheats-support","title":"Cheats support","text":"<p>DOSBox Pure exposes its memory for cheats in the libretro frontend.</p> <p>For details how to use it and how to find new cheats while playing the game, check the Libretro documentation for cheats. This can also be used to add controller rumble support to DOS games.</p>"},{"location":"library/dosbox_pure/#save-states","title":"Save states","text":"<p>The DOSBox Pure core fully supports libretro save states. Make sure to test it in each game before using it. Complex late era DOS games might have problems. Be aware that states saved with different video or cpu settings are not loadable.</p> <p>Read more about save file handling.</p>"},{"location":"library/dosbox_pure/#rewind-support","title":"Rewind support","text":"<p>Using the core option <code>Save States Support</code>, rewinding can be enabled. Keep in mind that rewind support comes at a high performance cost.</p>"},{"location":"library/dosbox_pure/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The DOSBox Pure core's core provided FPS is dependent on the DOS application</li> <li>The DOSBox Pure core's core provided sample rate is dependent on the 'Audio &gt; Audio Sample Rate' core option</li> <li>The DOSBox Pure core's base width is 320</li> <li>The DOSBox Pure core's base height is 200</li> <li>The DOSBox Pure core's max width is 1280</li> <li>The DOSBox Pure core's max height is 1024</li> <li>The DOSBox Pure core's core provided aspect ratio is dependent on the DOS application and the 'Video &gt; Aspect Ratio Correction' core option</li> </ul>"},{"location":"library/dosbox_pure/#loading-content","title":"Loading content","text":""},{"location":"library/dosbox_pure/#load-games-from-zip","title":"Load games from ZIP","text":"<p>DOSBox Pure can load games directly from ZIP files without the need to extract them.</p>"},{"location":"library/dosbox_pure/#store-modifications-in-separate-save-files","title":"Store modifications in separate save files","text":"<p>Changes made to a loaded ZIP file will be stored as a separate ZIP file into the libretro saves directory. If a game is loaded directly without using a ZIP file, the saves directory is not used.</p>"},{"location":"library/dosbox_pure/#mount-disc-images-from-inside-zip-files","title":"Mount disc images from inside ZIP files","text":"<p>CD images (ISO or CUE) and floppy disk images (IMG/IMA/VHD) can be mounted directly from inside ZIP files. The system will automatically mount the first found disk image as the A: or D: drive. Additional disks can be loaded or swapped by using the <code>Disc Control</code> menu in RetroArch.</p> <p>When mounting a ZIP file which has just a single directory in its root, core versions before 0.9.0 used to mount that directory as the C: drive. Since 0.9.0, the core will mount the root of the ZIP to improve compatibility with DOS games that need to be installed in a specific location on the hard drive. The old behavior will still be used if an old save file (named <code>GAME.save.zip</code>) exists. The new behavior uses a differently named save file (<code>GAME.pure.zip</code>).</p> <p>The start menu also offers the option to mount or unmount an image.</p>"},{"location":"library/dosbox_pure/#start-menu-with-auto-start","title":"Start menu with auto start","text":"<p>This is the first screen that appears when loading a game. It offers a gamepad controllable list of all executable files for the loaded game. By pressing right an item can be selected as the default which will skip the menu on the next launch.</p> <p>By pressing right multiple times, a number of frames can be specified that will automatically be skipped on start. This can be used to skip over loading screens or start-up sequences.</p> <p>If there is only a single executable, the menu will not show and directly run the file.</p> <p>To force the menu to be shown, hold shift on the keyboard or L2 or R2 on the gamepad while selecting <code>Restart</code> in the core menu.</p>"},{"location":"library/dosbox_pure/#installing-cd-rom-games-from-disc-images-iso-etc-and-running-them","title":"Installing CD-ROM games from disc images (ISO etc.) and running them","text":"<p>This can be done in 3 steps:</p> <ol> <li>In order to install a game from a CD-ROM image (e.g., a .iso file), use the \"Load Content\" option in the RetroArch main menu. Navigate to the ISO and launch it with the DOSBox Pure core.</li> <li>From the start menu, select the executable on the CD-ROM to install the game (probably something like <code>SETUP.EXE</code>, <code>INSTALL.EXE</code>, <code>START.EXE</code>...). Follow the installer's instructions to install the game in any local directory of your choice (e.g., <code>C:\\</code>, <code>C:\\C&amp;C\\</code>, ...).</li> <li>Now, the next time you run the ISO in DOSBox Pure (same way as in step 1 above), the start menu will feature the \"local\" executables, e.g.: <code>C:\\C&amp;C\\C&amp;C.EXE</code>. They'll be available to select above the executables from mounted discs. Launch the correct executable to run the game.</li> </ol> <p>See screenshot in \"Start menu with auto start\" section above for reference.</p>"},{"location":"library/dosbox_pure/#directly-run-pc-booter-games-from-the-start-menu","title":"Directly run PC booter games from the start menu","text":"<p>When loading a ZIP file which contains a floppy or hard-disk image or loading such a disk image directly, the start menu will show an additional option <code>[BOOT IMAGE FILE]</code>. When selected, a list of system modes (emulated graphics card) will be shown and once a mode is selected, DOSBox Pure will try to boot from the mounted image. While running a booter game, the mounted disk can be easily swapped with the Disc Control menu or hotkeys set in the frontend.</p> <p>There's also support for swapping floppy disk images (or PCjr cartridges) at runtime via a frontend's Disc Control menu and hotkeys.</p>"},{"location":"library/dosbox_pure/#auto-execution-of-dosboxbat","title":"Auto-execution of DOSBOX.BAT","text":"<p>The core automatically executes <code>DOSBOX.BAT</code> instead of showing the start menu if it exists in the mounted ZIP or path.</p>"},{"location":"library/dosbox_pure/#loading-of-dosboxconf-files","title":"Loading of dosbox.conf files","text":"<p>If a .conf file gets selected in the frontend, DOSBox Pure will load it directly and run its autoexec commands.</p> <p>Alternatively, a .conf file can get loaded automatically depending on the 'Emulation &gt; Loading of dosbox.conf' core option. There are two modes that can be enabled: - \"Try 'dosbox.conf' in the loaded content (ZIP or folder)\" - Will load C:\\DOSBOX.CONF automatically if it exists in the mounted ZIP or path - \"Try '.conf' with same name as loaded content (next to ZIP or folder)\" - Will automatically load GAME.conf next to GAME.zip if it exists.</p>"},{"location":"library/dosbox_pure/#loading-m3u8-files","title":"Loading M3U8 files","text":"<p>If the core gets loaded with a <code>.m3u8</code> file, all files listed in it will be added to the disc swap menu. The first image will automatically get mounted as the A: or D: drive depending on whether it is a CD or floppy disk image.</p>"},{"location":"library/dosbox_pure/#tips-qa-troubleshooting","title":"Tips, Q&amp;A, Troubleshooting","text":""},{"location":"library/dosbox_pure/#smooth-scrolling","title":"Smooth scrolling","text":"<p>You might have trouble getting stutter-free scrolling in some games (cf. this bug report). There are a number of things you can try to remedy this:</p> <ul> <li>In <code>Quick Menu &gt; Options &gt; Emulation Options</code>, set <code>Force 60 FPS Output</code> to ON.</li> <li>In RetroArch's settings, navigate to <code>Video</code> and set <code>Threaded Video</code> to OFF.</li> <li>Try <code>Video</code> &gt; <code>Output</code> &gt; <code>Set Display-Reported Refresh Rate</code>.</li> <li>Try setting <code>Video</code> &gt; <code>Synchronization</code> &gt; <code>Vertical Sync</code> to ON.</li> <li>If using a variable refresh rate screen (G-Sync, FreeSync, HDMI 2.1 VRR): navigate to <code>Video</code> &gt; <code>Synchronization</code> and set <code>Sync to Exact Content Framerate (G-Sync, FreeSync)</code> to ON.</li> </ul>"},{"location":"library/dosbox_pure/#playing-with-keyboard-and-mouse","title":"Playing with keyboard and mouse","text":"<p>To play not with a gamepad but with keyboard and mouse, be sure to use the 'Game Focus' mode available in RetroArch.</p> <p>By default, you can toggle game focus by pressing the scroll lock key. While game focus is active, the RetroArch hotkeys are disabled and keyboard presses will not cause RetroPad button presses (which could cause multiple keys to be pressed at once).</p> <p>You can change the hotkey for game focus mode in RetroArch's \"Hotkeys\" menu.</p>"},{"location":"library/dosbox_pure/#zip-files-can-be-renamed-to-dosz","title":"ZIP files can be renamed to DOSZ","text":"<p>If your libretro frontend wants to load the content of <code>.ZIP</code> files instead of sending it to DOSBox Pure to load, the files can be renamed from <code>.ZIP</code> to <code>.DOSZ</code>.</p> <p>This is especially useful for CD images in ZIP format which RetroArch refuses to append through its <code>Disc Control</code> menu. Using an .M3U8 file also avoids this problem.</p>"},{"location":"library/dosbox_pure/#force-opening-the-start-menu","title":"Force opening the start menu","text":"<p>If you have assigned an auto start item in the start menu but want to go back to it, hold shift on the keyboard or L2 or R2 on the gamepad while selecting <code>Restart</code> in the core menu.</p>"},{"location":"library/dosbox_pure/#mount-zip-as-a-or-d-drive","title":"Mount ZIP as A or D drive","text":"<p>If you have a ZIP file you want to load as a fake floppy disk or fake CD-ROM, there are multiple options.</p> <ul> <li>The easiest is to rename the file from <code>.ZIP</code> to e.g., <code>.D.ZIP</code> (to use the D: drive).</li> <li>You can also edit the RetroArch <code>.LPL</code> playlist file to add a <code>#D</code> after the file like <code>game.zip#D</code>.</li> <li>A third option is available inside DOSBox Pure with a new remount command that can be called with REMOUNT C: D: to remount the C: drive to D:. This can for example be used in a startup batch file.</li> </ul>"},{"location":"library/dosbox_pure/#change-disk-label-with-label-command","title":"Change disk label with label command","text":"<p>DOSBox Pure by default uses the first word of the ZIP file name as the label of the mounted disk. Some games require a specific label on a floppy or a CD-ROM so DOSBox Pure offers a new command to change the label of a mounted disk. For example, <code>LABEL C: HELLO</code> changes the label of the C: drive.</p> <p>This label is not saved anywhere and needs to be reapplied on every launch so it's best to add the command in a startup batch file. You can run the <code>MOUNT</code> command to check all mounted disks and their disk label.</p>"},{"location":"library/dosbox_pure/#keyboard-layout-defaults-to-us","title":"Keyboard layout defaults to US","text":"<p>The keyboard layout defaults to the US Layout (QWERTY). If you need a different layout, you can change the core option <code>Input Options &gt; Advanced &gt; Keyboard Layout</code>.</p>"},{"location":"library/dosbox_pure/#save-file-handling","title":"Save file handling","text":"<p>When modifications to the file system loaded from a ZIP file happen, these modifications are written into a separate save file. You can find these save files inside the data directory of your libretro frontend, usually in a sub-directory called <code>saves</code>, or any other directory you have set in <code>RetroArch's Settings &gt; Directory &gt; Savefile</code>.</p> <ul> <li>Save files get re-written to disk a short while after a modification happens in the file system.</li> <li>The larger the save, the less often it will be written out.</li> <li>Up to 1MB of total save data, it will be written out 2 seconds after the previous file modification. Then gradually until at max 59MB and more, it will be written out 60 seconds after the last file modification.</li> </ul>"},{"location":"library/dosbox_pure/#core-options","title":"Core options","text":"<p>The DOSBox Pure core has the following options that can be tweaked from the core options menu. The default setting is bolded.</p> <p>Settings with (Restart) mean that core has to be closed for the new setting to be applied on next launch.</p>"},{"location":"library/dosbox_pure/#manage-core-options","title":"Manage Core Options","text":"<p>Save or remove option overrides for the current content.</p> <ul> <li> <p>Save game options</p> <p>Saves current options specifically for running game.</p> </li> <li> <p>Save Content Directory Options</p> <p>Saves current options specifically for running game's content directory.</p> </li> <li> <p>Reset Options</p> <p>Reset all core options to default values.</p> </li> </ul>"},{"location":"library/dosbox_pure/#emulation-options","title":"Emulation Options","text":"<p>Core specific settings (latency, save states, start menu).</p> <ul> <li> <p>Force 60 FPS Output [dosbox_pure_force60fps] (OFF | ON)</p> <p>Enable this to force output at 60FPS. Use this if you encounter screen tearing or vsync issues.</p> </li> <li> <p>Show Performance Statistics [dosbox_pure_perfstats] (Disabled | Simple | Detailed information)</p> <p>Enable this to show statistics about performance and framerate and check if emulation runs at full speed.</p> </li> <li> <p>Save States Support [dosbox_pure_savestate]  (Enable save states | Enable save states with rewind | OFF)</p> <p>Make sure to test it in each game before using it. Complex late era DOS games might have problems. Be aware that states saved with different video, CPU or memory settings are not loadable. Rewind support comes at a high performance cost and needs at least 40MB of rewind buffer.</p> </li> <li> <p>Loading of dosbox.conf [dosbox_pure_conf] (Disabled conf support (default) | Try 'dosbox.conf' in the loaded content (ZIP or folder) | Try '.conf' with same name as loaded content (next to ZIP or folder))</p> <p>DOSBox Pure is meant to be configured via core options but optionally supports loading of legacy .conf files.</p> </li> <li> <p>Start Menu [dosbox_pure_menu_time] (Show at start, shut down core 5 seconds after auto started game exit | Show at start, shut down core 3 seconds after auto started game exit | Show at start, shut down core immediately after auto started game exit | Show at start, show again after game exit (default) | Always show menu on startup and after game exit, ignore auto start setting)</p> <p>Set the behavior of the start menu before and after launching a game. You can also force it to open by holding shift or L2/R2 when selecting 'Restart'.</p> </li> <li> <p>Advanced &gt; Input Latency [dosbox_pure_latency] (Default | Lowest latency - See CPU usage setting below! | Irregular latency - Might improve performance on low-end devices)</p> <p>By default the core operates in a high performance mode with good input latency. There is a special mode available which minimizes input latency further requiring manual tweaking.</p> </li> <li> <p>Advanced &gt; Low latency CPU usage [dosbox_pure_auto_target] (90% | 50% &gt; 100%)</p> <p>In low latency mode when emulating DOS as fast as possible, how much time per frame should be used by the emulation. If the video is stuttering, lower this or improve render performance in the frontend (for example by disabling vsync or video processing). Use the performance statistics to easily find the maximum that still hits the emulated target framerate.</p> </li> </ul>"},{"location":"library/dosbox_pure/#input-options","title":"Input Options","text":"<p>Keyboard, mouse and joystick settings.</p> <ul> <li> <p>Bind Unused Buttons [dosbox_pure_bind_unused] (On | Off)</p> <p>Bind all unused controller buttons to keyboard keys. Can be remapped in the Controls section of the core settings.</p> </li> <li> <p>Enable On Screen Keyboard [dosbox_pure_on_screen_keyboard] (On | Off)</p> <p>Enable the On Screen Keyboard feature which can be activated with the L3 button on the controller.</p> </li> <li> <p>Bind Mouse Wheel To Key [dosbox_pure_mouse_wheel] (Left-Bracket/Right-Bracket | Comma/Period | Page-Up/Page-Down | Home/End | Delete/Page-Down | Minus/Equals | Semicolon/Quote | Numpad Minus/Plus | Numpad Divide/Multiply | Up/Down | Left/Right | Q/E | Disable)</p> <p>Bind mouse wheel up and down to two keyboard keys to be able to use it in DOS games.</p> </li> <li> <p>Mouse Sensitivity [dosbox_pure_mouse_speed_factor] (100% | 20% to 100% in 5% increments | 100% to 500% in 10% increments)</p> <p>Sets the overall mouse cursor movement speed.</p> </li> <li> <p>Advanced &gt; Horizontal Mouse Sensitivity [dosbox_pure_mouse_speed_factor_x] (100% | 20% to 100% in 5% increments | 100% to 500% in 10% increments)</p> <p>Experiment with this value if the mouse is too fast/slow when moving left/right.</p> </li> <li> <p>Advanced &gt; Use Mouse Input [dosbox_pure_mouse_input] (ON | OFF)</p> <p>You can disable input handling from a mouse or a touchscreen (emulated mouse through joypad will still work).</p> </li> <li> <p>Advanced &gt; Automatic Game Pad Mappings [dosbox_pure_auto_mapping] (On (default) | Enable with notification on game detection | Off)</p> <p>DOSBox Pure can automatically apply a gamepad control mapping scheme when it detects a game. These button mappings are provided by the Keyb2Joypad Project (by Jemy Murphy and bigjim).</p> </li> <li> <p>Advanced &gt; Keyboard Layout [dosbox_pure_keyboard_layout] (US (default) | UK | Belgium | Brazil | Croatia | Czech Republic | Denmark | Finland | France | Germany | Greece | Hungary | Iceland | Italy | Netherlands | Norway | Poland | Portugal | Russia | Slovakia | Slovenia | Spain | Sweden | Switzerland (German) | Switzerland (French) | Turkey)</p> <p>Select the keyboard layout (will not change the On Screen Keyboard).</p> </li> <li> <p>Advanced &gt; Menu Transparency [dosbox_pure_menu_transparency] (15% | 10% to 100% in 10% increments)</p> <p>Set the transparency level of the On Screen Keyboard and the Gamepad Mapper.</p> </li> <li> <p>Advanced &gt; Joystick Analog Deadzone [dosbox_pure_joystick_analog_deadzone] (15% | 0% to 35% in 5% increments)</p> <p>Set the deadzone of the joystick analog sticks. May be used to eliminate drift caused by poorly calibrated joystick hardware.</p> </li> <li> <p>Advanced &gt; Enable Joystick Timed Intervals [dosbox_pure_joystick_timed] (On (default) | Off)</p> <p>Enable timed intervals for joystick axes. Experiment with this option if your joystick drifts.</p> </li> </ul>"},{"location":"library/dosbox_pure/#performance-options","title":"Performance Options","text":"<p>Adjust the performance of the emulated CPU.</p> <ul> <li> <p>Emulated Performance [dosbox_pure_cycles] (AUTO - DOSBox will try to detect performance needs (default) | MAX - Emulate as many instructions as possible | 8086/8088, 4.77 MHz from 1980 (315 cps) | 286, 6 MHz from 1982 (1320 cps) | 286, 12.5 MHz from 1985 (2750 cps) | 386, 20 MHz from 1987 (4720 cps) | 386DX, 33 MHz from 1989 (7800 cps) | 486DX, 33 MHz from 1990 (13400 cps) | 486DX2, 66 MHz from 1992 (26800 cps) | Pentium, 100 MHz from 1995 (77000 cps) | Pentium II, 300 MHz from 1997 (200000 cps) | Pentium III, 600 MHz from 1999 (500000 cps) | AMD Athlon, 1.2 GHz from 2000 (1000000 cps))</p> <p>The raw performance that DOSBox will try to emulate.</p> </li> <li> <p>Detailed &gt; Performance Scale [dosbox_pure_cycles_scale] (100% | 20% to 200% in 5% increments)</p> <p>Fine tune the emulated performance for specific needs.</p> </li> <li> <p>Detailed &gt; Limit CPU Usage [dosbox_pure_cycle_limit] (100% | 20% to 100% in 1% increments)</p> <p>When emulating DOS as fast as possible, how much time per frame should be used by the emulation. Lower this if your device becomes hot while using this core.</p> </li> </ul>"},{"location":"library/dosbox_pure/#video-options","title":"Video Options","text":"<p>Settings for the emulated graphics card and aspect ratio.</p> <ul> <li> <p>Emulated Graphics Chip (restart required) [dosbox_pure_machine] (SVGA (Super Video Graphics Array) (default) | VGA (Video Graphics Array) | EGA (Enhanced Graphics Adapter | CGA (Color Graphics Adapter) | Tandy (Tandy Graphics Adapter | Hercules (Hercules Graphics Card) | PCjr)</p> <p>The type of graphics chip that DOSBox will emulate.</p> </li> <li> <p>CGA Mode [dosbox_pure_cga] (Early model, composite mode auto (default) | Early model, composite mode on | Early model, composite mode off | Late model, composite mode auto | Late model, composite mode on | Late model, composite mode off)</p> <p>The CGA variation that is being emulated.</p> </li> <li> <p>Hercules Color Mode [dosbox_pure_hercules] (Black &amp; white (default) | Black &amp; amber | Black &amp; green)</p> <p>The color scheme for Hercules emulation.</p> </li> <li> <p>SVGA Mode (restart required) [dosbox_pure_svga] (S3 Trio64 (default) | S3 Trio64 no-line buffer hack (reduces flickering in some games) | S3 Trio64 VESA 1.3 | Tseng Labs ET3000 | Tseng Labs ET4000 | Paradise PVGA1A)</p> <p>The SVGA variation that is being emulated. Try changing this if you encounter graphical glitches.</p> </li> <li> <p>Aspect Ratio Correction [dosbox_pure_aspect_correction] (Off (default) | On)</p> <p>When enabled, the core's aspect ratio is set to what a CRT monitor would display.</p> </li> </ul>"},{"location":"library/dosbox_pure/#system-options","title":"System Options","text":"<p>Other system settings for emulated RAM and CPU.</p> <ul> <li> <p>Memory Size (restart required) [dosbox_pure_memory_size] (16 MB (default) | Disable extended memory (no EMS/XMS) | 4 MB | 8 MB | 24 MB | 32 MB (unsafe) | 48 MB (unsafe) | 64 MB (unsafe) | 96 MB (unsafe) | 128 MB (unsafe) | 224 MB (unsafe))</p> <p>The amount of (high) memory that the emulated machine has. You can also disable extended memory (EMS/XMS). Using more than the default is not recommended, due to incompatibility with certain games and applications.</p> </li> <li> <p>CPU Type (restart required) [dosbox_pure_cpu_type] (Auto - Mixed feature set with maximum performance and compatibility | 386 - 386 instruction with fast memory access | 386 (slow) - 386 instruction set with memory privilege checks | 386 (prefetch) - With prefetch queue emulation (only on 'auto' and 'normal' core) | 486 (slow) - 486 instruction set with memory privilege checks | Pentium (slow) - 586 instruction set with memory privilege checks)</p> <p>Emulated CPU type. Auto is the fastest choice. Games that require specific CPU type selection: 386 (prefetch): X-Men: Madness in The Murderworld, Terminator 1, Contra, Fifa International Soccer 1994 486 (slow): Betrayal in Antara Pentium (slow): Fifa International Soccer 1994, Windows 95/Windows 3.x games</p> </li> <li> <p>Advanced &gt; CPU Core [dosbox_pure_cpu_core] (Auto - Real-mode games use normal, protected-mode games use dynamic | Dynamic - Dynamic recompilation (fast, using dynamic_x86 implementation) | Auto - Real-mode games use normal, protected-mode games use dynamic | Dynamic - Dynamic recompilation (fast, using dynrec implementation) | Normal (interpreter) | Simple (interpreter optimized for old real-mode games))</p> <p>Emulation method (DOSBox CPU core) used.</p> </li> </ul>"},{"location":"library/dosbox_pure/#audio-options","title":"Audio Options","text":"<p>MIDI, SoundBlaster and other audio settings.</p> <ul> <li> <p>Audio Sample Rate (restart required) [dosbox_pure_audiorate] (48000 | 44100 | 32730 | 32000 | 22050 | 16000 | 11025 | 8000 | 49716)</p> <p>This should match the frontend audio output rate (Hz) setting. 49716 is for perfect OPL emulation.</p> </li> <li> <p>SoundBlaster Settings [dosbox_pure_sblaster_conf] (Port 0x220, IRQ 7, 8-Bit DMA 1, 16-bit DMA 5 | Port 0x220, IRQ 5, 8-Bit DMA 1, 16-bit DMA 5 | Port 0x240, IRQ 7, 8-Bit DMA 1, 16-bit DMA 5 | Port 0x240, IRQ 7, 8-Bit DMA 3, 16-bit DMA 7 | Port 0x240, IRQ 2, 8-Bit DMA 3, 16-bit DMA 7 | Port 0x240, IRQ 5, 8-Bit DMA 3, 16-bit DMA 5 | Port 0x240, IRQ 5, 8-Bit DMA 1, 16-bit DMA 5 | Port 0x240, IRQ 10, 8-Bit DMA 3, 16-bit DMA 7 | Port 0x280, IRQ 10, 8-Bit DMA 0, 16-bit DMA 6 | Port 0x210, IRQ 5, 8-Bit DMA 1, 16-bit DMA 5)</p> <p>Set the address, interrupt, low 8-bit and high 16-bit DMA.</p> </li> <li> <p>MIDI Output [dosbox_pure_midi] (will cycle through the .ROMs or .SF2s you have installed, + frontend MIDI driver)</p> <p>Select the .SF2 SoundFont file, .ROM file or interface used for MIDI output. To add SoundFonts or ROM files, copy them into the 'system' directory of the frontend. To use the frontend MIDI driver, make sure it's set up correctly.</p> </li> <li> <p>Advanced &gt; SoundBlaster Type [dosbox_pure_sblaster_type] (SoundBlaster 16 (default) | SoundBlaster Pro 2 | SoundBlaster Pro | SoundBlaster 2.0 | SoundBlaster 1.0 | GameBlaster | none)</p> <p>Type of emulated SoundBlaster card.</p> </li> <li> <p>Advanced &gt; SoundBlaster Adlib/FM Mode [dosbox_pure_sblaster_adlib_mode] (Auto (select based on the SoundBlaster type) (default) | CMS (Creative Music System / GameBlaster) | OPL-2 (AdLib / OPL-2 / Yamaha 3812) | Dual OPL-2 (Dual OPL-2 used by SoundBlaster Pro 1.0 for stereo sound) | OPL-3 (AdLib / OPL-3 / Yamaha YMF262) | OPL-3 Gold (AdLib Gold / OPL-3 / Yamaha YMF262))</p> <p>The SoundBlaster emulated FM synth mode. All modes are Adlib compatible except CMS.</p> </li> <li> <p>Advanced &gt; SoundBlaster Adlib Provider [dosbox_pure_sblaster_adlib_emu] (Default | High quality Nuked OPL3)</p> <p>Provider for the Adlib emulation. Default has good quality and low performance requirements.</p> </li> <li> <p>Advanced &gt; Enable Gravis Ultrasound (restart required) [dosbox_pure_gus] (Off (default) | On)</p> <p>Enable Gravis Ultrasound emulation. Settings are fixed at port 0x240, IRQ 5, DMA 3. If the ULTRADIR variable needs to be different than the default 'C:\\ULTRASND' you need to issue 'SET ULTRADIR=...' in the command line or in a batch file.</p> </li> </ul>"},{"location":"library/dosbox_pure/#controls","title":"Controls","text":""},{"location":"library/dosbox_pure/#automated-controller-mappings","title":"Automated controller mappings","text":"<p>When a game is loaded, DOSBox Pure will try to detect the game and apply a controller mapping. </p> <p>To see the applied mapping, check the <code>Port 1 Controls</code> screen in the RetroArch menu. It will show <code>Detected Automatic Key Mapping: &lt;GAMENAME&gt;</code>. Additionally you can set the core option <code>Input &gt; Advanced &gt; Automatic Game Pad Mappings</code> to <code>Enable with notification on game detection</code>.</p>"},{"location":"library/dosbox_pure/#mouse-emulation","title":"Mouse emulation","text":"<p>On the <code>Controls</code> screen in the RetroArch menu, there are 2 mouse emulation modes available by switching the <code>Device Type</code> setting of any port with left/right. There is <code>Mouse with Left Analog Stick</code> and <code>Mouse with Right Analog Stick</code>.</p> <ul> <li>When choosing left stick, the face buttons (B/A) will be used as left/right mouse buttons.</li> <li>For the right stick, the shoulder buttons L/R will be used as left/right mouse buttons.</li> <li>The X button is the middle mouse button and L2/R2 can be used to speed up or slow down mouse movement.</li> </ul> <p>There is also the core option <code>Input &gt; Mouse Sensitivity</code> to increase/decrease mouse movement speed.</p>"},{"location":"library/dosbox_pure/#keyboard-emulation","title":"Keyboard emulation","text":"<p>For games that don't have automated controller mappings or are not detected successfully, by default the option <code>Input &gt; Bind Unused Buttons</code> will assign all unused buttons on the game pad with a respective default key.</p> <p>If the <code>Device Type</code> on the <code>Controls</code> screen in the RetroArch menu of any port is set to <code>Generic Keyboard Bindings</code>, all buttons will be assigned with a keyboard key.</p> <p>Additionally, it can be set to <code>Custom Keyboard Bindings</code> which will allow fully customizable mappings.</p>"},{"location":"library/dosbox_pure/#joystick-emulation","title":"Joystick emulation","text":"<p>There are multiple DOS era joysticks available as mappings on the <code>Controls</code> screen in the RetroArch menu.</p> <p><code>Gravis GamePad (1 D-Pad, 4 Buttons)</code>, <code>Basic joystick (2 Axes, 2 Buttons)</code>, <code>ThrustMaster Flight Stick (3 axes, 4 buttons, 1 hat)</code> and <code>Control both DOS joysticks (4 axes, 4 buttons)</code>.</p> <p>These can be assigned to any port and the button layout can be remapped as with any other device type.</p>"},{"location":"library/dosbox_pure/#on-screen-keyboard","title":"On-screen keyboard","text":"<p>By pressing L3 on the gamepad (usually by pushing in the left analog stick), the on-screen keyboard will open. The cursor can be controlled with the controller (or mouse or keyboard) and L2/R2 will speed up or slow down the move speed.</p> <p>By clicking a key on the on-screen keyboard for 0.5 seconds, it will be held down, clicking it again will release it. This allows multiple keys to be pressed at the same time through the on-screen-keyboard.</p> <p>Tip</p> <p>Depending on your controller, you might experience a slight drift (the cursor moving on its own). Fix this by going to <code>Settings &gt; Input</code> in RetroArch and nudging the option <code>Analog Deadzone</code> up a bit (e.g., 0.3).</p> <p>If the cursor is moved above the middle of the screen, the keyboard will move to the top. The button can be remapped in the controls menu and there is also a core option to disable it entirely.</p>"},{"location":"library/dosbox_pure/#gamepad-mapper","title":"Gamepad Mapper","text":"<p>If you need even more customization of the controls than provided by the Automated controller mappings, or the various presets for mouse, keyboard and joysticks, you can use the gamepad mapper introduced in version 0.9.0 in April, 2022.</p> <p>To open it, click the \"PAD MAPPER\" button in the On-screen keyboard (cf. above).</p> <p>It is available any time in-game and changes are immediately saved and applied when closing the mapper. Up to 4 functions can be mapped for any button/direction of the gamepad. A mapping can be to any function of the 3 emulated input devices: keyboard, mouse or joystick.</p>"},{"location":"library/dosbox_pure/#joypad-retropad","title":"Joypad (RetroPad)","text":"Input descriptors for Gamepad 2 Button RetroPad Inputs Button 2 Button 1 D-Pad Up D-Pad Down D-Pad Left D-Pad Right Input descriptors for Gamepad 4 Button RetroPad Inputs Button 3 Button 1 D-Pad Up D-Pad Down D-Pad Left D-Pad Right Button 4 Button 2 Input descriptors for Joystick 2 Button RetroPad Inputs Button 2 Button 1 Left Analog X  X Left Analog Y  Y Input descriptors for Joystick 4 Button RetroPad Inputs Button 3 Button 1 Button 4 Button 2 Left Analog X  X Left Analog Y  Y Right Analog X  X Right Analog Y  Y Input descriptors for Keyboard - Port 1 RetroPad Inputs Kbd Up Kbd Down Kbd Left Kbd Right Esc Enter Space Left Shift Left Ctrl Left Alt 1 2 3 4 F1 F2 Kbd Left/Right  X Kbd Up/Down  Y Home/End  X PgUp/PgDn  Y Input descriptors for Keyboard - Port 2 RetroPad Inputs 8 2 4 6 Period Enter 5 1 0 3 7 9 Minus Plus Divide Multiply 4/6  X 8/2  Y Minus/Plus  X Divide/Multiply  Y Input descriptors for Keyboard - Port 3 RetroPad Inputs Q A Z X G H D F C S W E R T V B Z/X  X Q/A  Y J/L  X I/K  Y Input descriptors for Keyboard - Port 4 RetroPad Inputs Backspace Backslash Semicolon Quote O P Slash Right Shift Right Ctrl Right Alt Left Bracket Right Bracket Comma Period Minus Equals Semicolon/Quote  X Backspace/Backslash  Y Left/Right Bracket  X Minus/Equals  Y <p>Tip</p> <p>Above are the default keyboard to RetroPad mappings for all 4 ports. Note that by using the Quick Menu, you can choose from various presets in the <code>Controls</code> &gt; <code>Port # Controls</code> section.</p> Input descriptors for Emulated mouse RetroPad Inputs Emulated Mouse Right Click Emulated Mouse Left Click Emulated Mouse X Axis  X Emulated Mouse Y Axis  Y"},{"location":"library/dosbox_pure/#keyboard","title":"Keyboard","text":"RetroKeyboard Inputs Keyboard Keyboard Backspace Backspace Keyboard Tab Tab Keyboard Return Enter Keyboard Pause Pause Keyboard Escape Escape Keyboard Space Space Keyboard ' ' Keyboard , , Keyboard . . Keyboard / / Keyboard 0 0 Keyboard 1 1 Keyboard 2 2 Keyboard 3 3 Keyboard 4 4 Keyboard 5 5 Keyboard 6 6 Keyboard 7 7 Keyboard 8 8 Keyboard 9 9 Keyboard ; ; Keyboard - - Keyboard = = Keyboard [ [ Keyboard \\ \\ Keyboard ] ] Keyboard <code>|</code> Keyboard a a Keyboard b b Keyboard c c Keyboard d d Keyboard e e Keyboard f f Keyboard g g Keyboard h h Keyboard i i Keyboard j j Keyboard k k Keyboard l l Keyboard m m Keyboard n n Keyboard o o Keyboard p p Keyboard q q Keyboard r r Keyboard s s Keyboard t t Keyboard u u Keyboard v v Keyboard w w Keyboard x x Keyboard y y Keyboard z z Keyboard Delete Delete Keyboard Numpad 0 Numpad 0 Keyboard Numpad 1 Numpad 1 Keyboard Numpad 2 Numpad 2 Keyboard Numpad 3 Numpad 3 Keyboard Numpad 4 Numpad 4 Keyboard Numpad 5 Numpad 5 Keyboard Numpad 6 Numpad 6 Keyboard Numpad 7 Numpad 7 Keyboard Numpad 8 Numpad 8 Keyboard Numpad 9 Numpad 9 Keyboard Numpad . Numpad . Keyboard Numpad / Numpad / Keyboard Numpad * Numpad * Keyboard Numpad - Numpad - Keyboard Numpad + Numpad + Keyboard Numpad Enter Numpad Enter Keyboard Up Up Keyboard Down Down Keyboard Right Left Keyboard Left Right Keyboard Insert Insert Keyboard Home Home Keyboard End End Keyboard Page Up Page Up Keyboard Page Down Page Down Keyboard F1 F1 Keyboard F2 F2 Keyboard F3 F3 Keyboard F4 F4 Keyboard F5 F5 Keyboard F6 F6 Keyboard F7 F7 Keyboard F8 F8 Keyboard F9 F9 Keyboard F10 F10 Keyboard F11 F11 Keyboard F12 F12 Keyboard Num Lock Num Lock Keyboard Caps Lock Caps Lock Keyboard Scroll Lock Scroll Lock Keyboard Right Shift Right Shift Keyboard Left Shift Left Shift Keyboard Right Control Right Control Keyboard Left Control Left Control Keyboard Right Alt Right Alt Keyboard Left Alt Left Alt Keyboard Sys Req Print Screen"},{"location":"library/dosbox_pure/#compatibility","title":"Compatibility","text":""},{"location":"library/dosbox_pure/#boppin","title":"Boppin'","text":"<p>If the game rapidly cycles through the main menu options indefinitely, it has to do with malfunctioning joystick calibration. try deleting the game's config file, <code>BOPPIN.CFG</code>, and then reconfiguring the game. To do so, go to the command line from the start menu, then type:</p> <pre><code>DEL BOPPIN.CFG\nSETUP.EXE\nBOPPIN.EXE\n</code></pre> <p>To fix this in-game, you need to go to the core options and fiddle around with the Emulated Performance setting until the cursor stops moving.</p> <p>Boppin' uses some form of joystick calibration which depends on the speed of the CPU. And it seems that once it has some form of calibration data, it saves that to its config file. So if you use the game pre-configured while running with different performance emulation (cycles) settings, it will have its joysticks off-calibrated and thus scrolling through the main menu (always holding up or down) or switching between the title screen and the menu (always holding left or right).</p> <p>More info here.</p>"},{"location":"library/dosbox_pure/#external-links","title":"External Links","text":"<ul> <li>Official DOSBox Website</li> <li>Official/Original DOSBox SourceForge Repository</li> <li>Libretro DOSBox Pure info file ![#f03c15]</li> <li>Libretro DOSBox Pure GitHub Repository</li> <li>Report Libretro DOSBox Pure core Issues Here</li> </ul>"},{"location":"library/doukutsu-rs/","title":"doukutsu-rs","text":"<p>This article primarily outlines the retroarch-specific features of this core. For a general feature-list and how-to for d-rs, please see the readme in the Upstream Repository.</p> <p> </p>"},{"location":"library/doukutsu-rs/#background","title":"Background","text":"<p>Doukutsu-rs (often abbreviated d-rs) is a modern and accurate re-implementation of the Cave Story Engine designed to be a drop-in replacement for all official and most fan ports, including:</p> <ul> <li>CS Freeware</li> <li>Cave Story+</li> <li>Cave Story Switch</li> <li>Cave Story Wiiware</li> <li>CSE2</li> <li>NXEngine-Evo</li> </ul> <p>The engine adds other Quality-of-life features like 2-player local multiplayer, lighting effects, and smooth motion interpolation.</p>"},{"location":"library/doukutsu-rs/#requirements","title":"Requirements","text":"<p>Currently, this core requires at least OpenGL 2 or OpenGLES 2 to run. On MacOS systems, it requires at least OpenGL 3 support.</p> <p>Supported platforms:</p> <ul> <li>Windows</li> <li>Linux</li> <li>Mac OS (at least openGL 3 required)</li> <li>Android</li> <li>iOS</li> </ul>"},{"location":"library/doukutsu-rs/#how-to-start-d-rs","title":"How to start d-rs:","text":"<p>D-rs does not ship with Cave Story data. To run it, you can either supply your own datafiles or use the \"Content Downloader\" (for Freeware only).</p> <p>For more information on how to get the files from your specific Cave Story install, see the Upstream Repository readme.</p>"},{"location":"library/doukutsu-rs/#freeware","title":"Freeware","text":"<p>Freeware files can be obtained from the tribute site or via the retroarch Content Downloader, in a similar manner to the NXEngine core:</p> <ol> <li>Go to RetroArch's main menu screen and select \"Online Updater\". From there, select \"Content Downloader\".</li> <li>In the list, there should be a folder labeled <code>Cave Story</code>. Select it, then select the <code>Cave Story (En).zip</code> file. The file should be downloaded and extracted to Retroarch's <code>Downloads</code> directory.</li> <li>Go back to RetroArch's main menu screen. Select \"Load Content\", then navigate to <code>Downloads/Cave Story (En)/</code> and select <code>Doukutsu.exe</code>.</li> <li>If given the choice on what core to run, choose <code>Cave Story (drs)</code>.</li> </ol> <p>The game should begin playing.</p>"},{"location":"library/doukutsu-rs/#cave-story","title":"Cave Story +","text":"<p>The process for Cave Story plus is largely the same, but you have to supply your own datafiles.</p> <ol> <li>Grab your CS+ install and place it where you can navigate to it from retroarch.</li> <li>Navigate to the CS+ folder and select the <code>CaveStory+.exe</code> file.</li> <li>If given the choice on what core to run, choose <code>Cave Story (drs)</code>.</li> </ol> <p>The game should begin playing.</p>"},{"location":"library/doukutsu-rs/#cave-story-switch-edition-wiiware-edition","title":"Cave Story + (Switch edition / Wiiware edition)","text":"<p>These versions of Cave Story don't have an executable bundled with the <code>data</code> folder. D-rs can load this just fine, but it needs to know where to find it, which requires the creation of a \"dummy\" executable next to the data folder.</p> <p> </p> <ol> <li>Grab your CS-Switch or CS-Wiiware install and place it where you can navigate to it from retroarch.</li> <li>In the folder that contains the <code>data</code> folder (not INSIDE the data folder, but next to it), create an empty file with the <code>.exe</code> extension. Name doesn't matter, (example: <code>Target.exe</code>)</li> <li>Navigate to the containing folder and select the target file you just made.</li> <li>If given the choice on what core to run, choose <code>Cave Story (drs)</code>.</li> </ol> <p>The game should begin playing.</p>"},{"location":"library/doukutsu-rs/#extensions","title":"Extensions","text":"<p>With the exception of Freeware cave story, d-rs mainly uses the target file as a reference to figure out where the data folder is. (since at the time of writing, retroarch can't load a folder directly through the GUI) </p> <p>If the core is loading from Freeware for the first time, it will open the file in order to dump its internal assets into the <code>data</code> directory. After this, the executable isn't needed beyond use as a starting \"target\" for the core.</p> <p>For CS+, Wiiware, or NXEngine, placing an empty \"target\" file in the same directory as the <code>data</code> folder with one of these extensions will load the game.</p> <ul> <li>.so</li> <li>.dll</li> <li>.exe</li> </ul> <p>The info file source can be found here: https://github.com/libretro/libretro-super/blob/master/dist/info/doukutsu_rs_libretro.info</p>"},{"location":"library/doukutsu-rs/#frontend-features","title":"Frontend Features","text":"Feature Supported Restart \u2714 Saves X States X Rewind X Netplay X Core Options \u2714 Memory Monitoring (achievements) X RetroArch Cheats X Native Cheats \u2714 Controls \u2714 Remapping \u2714 Multi-Mouse X Rumble \u2714 Sensors X Camera X Location X Subsystem X Softpatching X Disk Control X Username X Language X Crop Overscan X LEDs X Fast Forward X Slow-mo \u2714"},{"location":"library/doukutsu-rs/#directories","title":"Directories","text":"<p>D-rs will modify the following files/folders:</p> <ul> <li><code>~/data</code> - (only with freeware), will be populated with Cave Story's internal assets the first time the game is launched (things like music and credit images).</li> <li><code>~/user</code> - If this folder already exists (I.E. continuing a game that was started on another port of d-rs), d-rs will use this directory instead of <code>RetroArch/saves/d-rs</code>.</li> <li><code>RetroArch/saves/d-rs</code> - game saves, internal settings, and operation logs will be stored in this folder.</li> </ul>"},{"location":"library/doukutsu-rs/#geometry-and-timing","title":"Geometry and timing","text":"<p>D-rs separates in-game time from screen refresh rate. The game can be either set to run at 50 TPS (mimicking Freeware CS) or 60 FPS (mimicking CS+).</p> <p>Screen drawing varies depending on hardware capability, but is typically around 60 FPS.</p> <p>Depending on the <code>Core Options</code> (see below), the game's screen ratio can be changed.</p>"},{"location":"library/doukutsu-rs/#core-options","title":"Core options","text":"<ul> <li>Internal upscaling factor - The size of the \"screen\" that the core thinks it's drawing to. Larger resolutions provide smoother visuals. For CS+, a minimum scale of x2 is needed to retain all image detail. <code>2x (CS+, default)|1x (freeware, fastest)|3x (smoother motion)|4x (smoothest motion)</code>,</li> <li>Screen Ratio - Shape of the \"screen\" that the core thinks it's drawing to. Original CS is 4:3, but d-rs supports widescreen. <code>4:3 (original)|16:9 (switch)|16:10|21:9</code></li> <li>Debug Outlines - Draw onscreen markers to show where entities are and what they are colliding with. <code>Disabled|Enabled</code></li> <li>Show FPS - Show in-game TPS and FPS. <code>Disabled|Enabled</code></li> <li>Show Debug GUI - Show the IMGUI debug menu (no real use at the moment; mouse input is disabled). <code>Disabled|Enabled</code></li> <li>GOD Mode (Invincibility) - Player cannot take damage. <code>Disabled|Enabled</code></li> <li>Infinite Booster - Gives the player the jetpack without a fuel limit. <code>Disabled|Enabled</code></li> <li>Noclip - Allows the player to float through the map without tile or NPC collision. <code>Disabled|Enabled</code></li> <li>More Rust - Turns Sue into the d-rs mascot (). <code>Disabled|Enabled</code></li> </ul>"},{"location":"library/doukutsu-rs/#user-1-2-device-types","title":"User 1-2 device types","text":"<p>The d-rs core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p> <ul> <li>Retropad (Port 1) - Player 1 controls.</li> <li>Retropad (Port 2) - Player 2 controls.</li> </ul> <p>These controls can be re-assigned in both the retroarch frontend and in the core itself.</p>"},{"location":"library/doukutsu-rs/#rumble","title":"Rumble","text":"<p>If the frontend supports rumble and is paired with a controller that has the capability, d-rs will provide vibration feedback during screen shakes and other various in-game events. Rumble can also be disabled within the core's settings menu.</p>"},{"location":"library/doukutsu-rs/#joypad","title":"Joypad","text":"<p>Note: These buttons can be re-bound in the frontend as well as within the core.</p> RetroPad Inputs Input descriptors Shoot Jump Inventory/Cutscene Fast Forward Pause Show/Hide Map Aim up Interact/Aim down Move Left Move Right Previous Weapon Next Weapon Strafe Move (d-pad equivalent)"},{"location":"library/doukutsu-rs/#external-links","title":"External Links","text":"<ul> <li>Official doukutsu-rs source (GitHub)</li> <li>Official doukutsu-rs website</li> </ul> <ul> <li>Libretro port of d-rs (backend)</li> <li>Libretro port of d-rs (interface layer)</li> </ul> <ul> <li>d-rs discord server</li> </ul>"},{"location":"library/doukutsu-rs/#related-cores","title":"(Related cores)","text":"<ul> <li>NXEngine</li> </ul>"},{"location":"library/dummy/","title":"Dummy core","text":""},{"location":"library/dummy/#background","title":"Background","text":"<p>'Load Dummy on Core Shutdown' option in RetroArch's Core settings.</p> <p>Some cores might have a shutdown feature. If enabled, it will prevent the core from shutting RetroArch down. Instead, it loads a dummy core.</p>"},{"location":"library/dummy/#authorlicense","title":"Author/License","text":"<p>The Dummy core has been authored by</p> <ul> <li>The RetroArch Team</li> </ul> <p>The Dummy core is licensed under</p> <ul> <li>MIT</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/dummy/#external-links","title":"External Links","text":"<ul> <li>Libretro Dummy core Github Repository</li> </ul>"},{"location":"library/easyrpg/","title":"RPG Maker 2000/2003 (EasyRPG)","text":""},{"location":"library/easyrpg/#background","title":"Background","text":"<p>EasyRPG Player is a game interpreter to play RPG Maker 2000, 2003 and EasyRPG games. It uses the LCF parser library (liblcf) to read RPG Maker game data.</p> <p>EasyRPG Player is part of the EasyRPG Project. More information is available at the project website: https://easyrpg.org/</p>"},{"location":"library/easyrpg/#authorlicense","title":"Author/License","text":"<p>The EasyRPG core has been authored by</p> <ul> <li>EasyRPG team</li> </ul> <p>The EasyRPG core is licensed under</p> <ul> <li>GPLv3</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/easyrpg/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the EasyRPG core have the following file extensions:</p> <ul> <li>.ldb</li> <li>.zip</li> <li>.easyrpg</li> </ul>"},{"location":"library/easyrpg/#rtp-files","title":"RTP files","text":"<p>You must download the RTP2000 and RTP2003 from here. They are exe/zip files but can be extracted with e.g. 7zip. Create <code>rtp</code> folder in <code>system</code> folder. Put the extracted data in \"rtp/2000\" and \"rtp/2003\" to <code>system/rtp</code> accordingly.</p> retroarch system rtp 2000 2003"},{"location":"library/easyrpg/#databases","title":"Databases","text":"<p>RetroArch database(s) that are associated with the EasyRPG core:</p> <ul> <li>RPG Maker</li> <li>RPG Maker thumbnails</li> </ul>"},{"location":"library/easyrpg/#features","title":"Features","text":"<p>Frontend-level settings or features that the EasyRPG core respects.</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2714 Memory Monitoring (achievements) \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/easyrpg/#directories","title":"Directories","text":"<p>The EasyRPG core's internal core name is 'EasyRPG'</p> <p>The EasyRPG core saves/loads to/from these directories.</p> <p>Loaded content's directory</p> <ul> <li>Save##.lsd (Save files)</li> <li>Save##.dyn (Additional save file data used by some games)</li> <li>Save.lgs (Global save data used by some games)</li> <li>easyrpg_log.txt (EasyRPG log file)</li> </ul> <p>Frontend's system directory</p> <ul> <li>easyrpg-player/config.ini (configuration of the engine)</li> </ul>"},{"location":"library/easyrpg/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The EasyRPG core's core provided FPS is (FPS)</li> <li>The EasyRPG core's core provided sample rate is 44100 Hz</li> <li>The EasyRPG core's core provided aspect ratio is (Ratio)</li> </ul>"},{"location":"library/easyrpg/#controllers","title":"Controllers","text":"<p>The EasyRPG core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/easyrpg/#user-1-device-types","title":"User 1 device types","text":"<ul> <li>None - Doesn't disable input. There's no reason to switch to this.</li> <li>RetroPad - Joypad - Stay on this.</li> <li>RetroPad w/Analog - Joypad - Same as RetroPad. There's no reason to switch to this.</li> </ul>"},{"location":"library/easyrpg/#controller-tables","title":"Controller tables","text":""},{"location":"library/easyrpg/#joypad","title":"Joypad","text":"RetroPad Inputs EasyRPG core inputs Up Down Left Right Decision Cancel Cancel Shift Number 0 Number 1 Number 2 Number 3 Number 4 Number 5 Number 6 Number 7 Number 8 Number 9 Settings Menu Reset Fast Forward (x3) Fast Forward (x10) Debug Menu (Test Play mode only) Debug Through (Test Play mode only) Debug Save (Test Play mode only) Debug Abort Event (Test Play mode only)"},{"location":"library/easyrpg/#external-links","title":"External Links","text":"<ul> <li>Official EasyRPG Website</li> <li>Official EasyRPG Github Repository</li> <li>Libretro EasyRPG Core info file</li> <li>Libretro EasyRPG Github Repository</li> <li>Report Libretro EasyRPG Core Issues Here</li> </ul>"},{"location":"library/easyrpg/#related-cores","title":"(Related cores)","text":"<ul> <li>RPG Maker XP/VX/VX Ace (mkxp-z)</li> </ul>"},{"location":"library/ecwolf/","title":"Wolfenstein 3D/Spear of Destiny/Super 3D Noah\u2019s Ark (ECWolf) WIP","text":""},{"location":"library/ecwolf/#background","title":"Background","text":"<p>ECWolf is a port of the Wolfenstein 3D engine based of Wolf4SDL. It combines the original Wolfenstein 3D engine with the user experience of ZDoom to create the most user and mod author friendly Wolf3D source port.</p> <p>Like ZDoom, ECWolf aims to support all games which use the Wolfenstein 3D engine including Blake Stone (coming in ECWolf 3.0), Corridor 7, Operation Body Count, Rise of the Triad, and Super 3D Noah's Ark. ECWolf will also support Macintosh Wolfenstein 3D along with all of its user created missions (coming in ECWolf 2.0).</p> <ul> <li>phcoder</li> </ul> <p>The ECWolf core is licensed under</p> <ul> <li>BSD/LGPL</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p> <ul> <li>Single binary runs all supported games. (Wolfenstein 3D, Spear of Destiny, ...)</li> <li>Full support for high resolution modes with aspect ratio correction including wide screen support.</li> <li>Modern control schemes (WASD + mouse).</li> <li>Mac Wolf/S3DNA/ROTT style automap.</li> <li>Unlimited save slots.</li> <li>This is actually based on the Wolf3D engine instead of a recreation or forcing into a more modern engine.</li> <li>Software rendered using the same 8-bit ray casting.</li> </ul>"},{"location":"library/ecwolf/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the ECWolf core have the following file extensions:</p> <ul> <li>wl6</li> <li>n3d</li> <li>sod</li> <li>sdm</li> <li>wl1</li> <li>pk3</li> <li>exe</li> </ul>"},{"location":"library/ecwolf/#databases","title":"Databases","text":"<p>RetroArch database(s) that are associated with the ECWolf core:</p> <ul> <li>ECWolf</li> </ul>"},{"location":"library/ecwolf/#bios","title":"BIOS","text":"<p>ECWolf does require BIOS (bootrom) files to work.</p> <ul> <li>ecwolf.pk3</li> </ul>"},{"location":"library/ecwolf/#features","title":"Features","text":"Feature Supported Restart \u2715 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2715 Core Options \u2715 Memory Monitoring (achievements) \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Crop Overscan (in RetroArch's Video settings) \u2715"},{"location":"library/ecwolf/#directories","title":"Directories","text":"<p>The ECWolf core's internal core name is <code>ecwolf</code>.</p>"},{"location":"library/ecwolf/#core-provided-aspect-ratio","title":"Core provided aspect ratio","text":"<p>ECWolf's core provided aspect ratio is 16:10.</p>"},{"location":"library/ecwolf/#core-options","title":"Core options","text":""},{"location":"library/ecwolf/#controllers","title":"Controllers","text":""},{"location":"library/ecwolf/#device-types","title":"Device types","text":"<p>The ECWolf core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/ecwolf/#user-1-1-device-types","title":"User 1 - 1 device types","text":"<ul> <li>None - Input disabled.</li> <li>RetroPad - Joypad</li> <li>RetroPad w/Analog - Joypad - There is no reason to switch to this.</li> </ul>"},{"location":"library/ecwolf/#controller-tables","title":"Controller tables","text":""},{"location":"library/ecwolf/#joypad-and-analog-device-type-table","title":"Joypad and analog device type table","text":"RetroPad Inputs User 1 input descriptors Move Forward Move Backward Turn Left Turn Right Strafe Left Strafe Right Fire Use Run Show Status Map Previous Weapon Next Weapon Pause  X Strafe Left/Right  Y Move Forward/Backward  X Turn Left/Right"},{"location":"library/ecwolf/#external-links","title":"External Links","text":"<ul> <li>Libretro ECWolf Core info file</li> <li>Libretro ECWolf Github Repository</li> <li>Report ECWolf Core Issues Here</li> </ul>"},{"location":"library/eightyone/","title":"ZX81 (EightyOne) WIP","text":""},{"location":"library/eightyone/#background","title":"Background","text":"<p>81-libretro is an work in progress port of the EightyOne (a.k.a. THE Sinclair Emulator) to libretro. The classic ZX81 games are all over the Internet, but check the colorized folder for games with Chroma 81 support. There are also many original games for the Zeddy, check Bob's Stuff for some high quality games.</p> <p>The EightyOne core has been authored by</p> <ul> <li>Michael D Wynne</li> </ul> <p>The EightyOne core is licensed under</p> <ul> <li>GPLv3</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p> <p>EightyOne emulates a number of ZX80, ZX81, clones, and other computers based on the same hardware:</p> <ul> <li>Sinclair ZX80</li> <li>Sinclair ZX81</li> <li>Timex TS1000</li> <li>Timex TS1500</li> <li>Lambda 8300</li> <li>Ringo R470</li> <li>MicroDigital TK85</li> <li>Jupiter ACE</li> </ul> <p>However, 81-libretro only emulates the Sinclair ZX81 with 16Kb RAM for now. Other machines will be added as time permits. Push requests are welcome.</p> <p>The port correctly loads and runs some many games I have around in the p format. tzx format is also supported.</p> <p>EightyOne also emulates some ZX Spectrum machines, but those were left out of this core on purpose.</p>"},{"location":"library/eightyone/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the EightyOne core have the following file extensions:</p> <ul> <li>.p</li> <li>.tzx</li> <li>.t81</li> </ul>"},{"location":"library/eightyone/#databases","title":"Databases","text":"<p>RetroArch database(s) that are associated with the EightyOne core:</p> <ul> <li>Sinclair - ZX 81</li> </ul>"},{"location":"library/eightyone/#features","title":"Features","text":"<p>RetroArch-level settings or features that the EightyOne core respects.</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2715 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 Memory Monitoring (achievements) \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2715 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/eightyone/#directories","title":"Directories","text":"<p>The EightyOne core's directory name is 'EightyOne'</p> <p>The EightyOne core saves/loads to/from these directories.</p> <p>RetroArch's State directory</p> <ul> <li>'content-name'.state# (State)</li> </ul>"},{"location":"library/eightyone/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The EightyOne core's core provided FPS is 50</li> <li>The EightyOne core's core provided sample rate is 44100 Hz</li> <li>The EightyOne core's core provided aspect ratio is (Ratio)</li> </ul>"},{"location":"library/eightyone/#auto-configuration","title":"Auto-configuration","text":"<p>Since configuring the core for each game can be a tedious task, the EightyOne core features auto-configuration. Games that support auto-configuration are listed in the src/gamedb/gamedb.json file, along with some information and the configuration required to play them.</p> <p>Currently, there's no way to change the auto-configuration settings short of recompiling the core after making the changes. If you feel the provided auto-configuration could be better or has bugs, please open an issue.</p>"},{"location":"library/eightyone/#colorization","title":"Colorization","text":"<p>Colorization works by loading a program prior to loading the game. This program will check if the Chroma 81 expansion is installed, and, if it is, configures the colors of the ZX81 characters, and then loads the original game, which runs unaware that it's playing with colors.</p> <p>Since the EightyOne core can't load arbitrary programs from the file system, the colorization program and the game must exist in the same file.</p>"},{"location":"library/eightyone/#core-options","title":"Core options","text":"<p>The EightyOne core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded.</p> <p>Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch.</p> <ul> <li> <p>Tape Fast Load (Off/On)</p> <p>Instantly loads files if enabled, or disable it to see the moving horizontal lines while the game loads.</p> </li> <li> <p>8K-16K Contents (auto/ROM shadow/RAM/dK'tronics 4K Graphics ROM + 4K RAM)</p> <p>Selects the contents of memory addresses between 8192 and 16383, a shadow copy of the ROM, 8K of RAM, or dK'tronics 4K ROM plus 4K of RAM.</p> </li> <li> <p>High Resolution (auto/none/WRX)</p> <p>Enables WRX high resolution.</p> </li> <li> <p>Emulate Chroma 81 (auto/Off/On)</p> <p>Enable the Chroma 81 interface (colorization).</p> </li> </ul> Emulate Chroma 81 - auto/On <p></p> Emulate Chroma 81 - Off <p></p> <ul> <li> <p>Video Presets (clean/tv/noisy)</p> <p>Change how the video is emulated (if Chroma 81 is enabled, the video is set to \"clean\" regardless of this option).</p> </li> </ul> Video Presets - clean <p></p> Video Presets - tv <p></p> Video Presets - noisy <p></p> <ul> <li> <p>Sound emulation (auto/none/Zon X-81)</p> <p>Enables sound emulation.</p> </li> <li> <p>Joypad Left mapping (auto/default/new line/shift/space/./0/\u00bd/\u00be/\u215a/\u215e/9/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y/z)</p> <p>Maps this joypad button to a keyboard key, defaults are the cursor keys for the directional pad and '0' to all the other buttons.</p> </li> <li> <p>Joypad Right mapping (auto/default/new line/shift/space/./0/\u00bd/\u00be/\u215a/\u215e/9/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y/z)</p> <p>Maps this joypad button to a keyboard key, defaults are the cursor keys for the directional pad and '0' to all the other buttons.</p> </li> <li> <p>Joypad Up mapping (auto/default/new line/shift/space/./0/\u00bd/\u00be/\u215a/\u215e/9/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y/z)</p> <p>Maps this joypad button to a keyboard key, defaults are the cursor keys for the directional pad and '0' to all the other buttons.</p> </li> <li> <p>Joypad Down mapping (auto/default/new line/shift/space/./0/\u00bd/\u00be/\u215a/\u215e/9/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y/z)</p> <p>Maps this joypad button to a keyboard key, defaults are the cursor keys for the directional pad and '0' to all the other buttons.</p> </li> <li> <p>Joypad A button mapping (auto/default/new line/shift/space/./0/\u00bd/\u00be/\u215a/\u215e/9/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y/z)</p> <p>Maps this joypad button to a keyboard key, defaults are the cursor keys for the directional pad and '0' to all the other buttons.</p> </li> <li> <p>Joypad B button mapping (auto/default/new line/shift/space/./0/\u00bd/\u00be/\u215a/\u215e/9/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y/z)</p> <p>Maps this joypad button to a keyboard key, defaults are the cursor keys for the directional pad and '0' to all the other buttons.</p> </li> <li> <p>Joypad X button mapping (auto/default/new line/shift/space/./0/\u00bd/\u00be/\u215a/\u215e/9/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y/z)</p> <p>Maps this joypad button to a keyboard key, defaults are the cursor keys for the directional pad and '0' to all the other buttons.</p> </li> <li> <p>Joypad Y button mapping (auto/default/new line/shift/space/./0/\u00bd/\u00be/\u215a/\u215e/9/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y/z)</p> <p>Maps this joypad button to a keyboard key, defaults are the cursor keys for the directional pad and '0' to all the other buttons.</p> </li> <li> <p>Joypad L button mapping (auto/default/new line/shift/space/./0/\u00bd/\u00be/\u215a/\u215e/9/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y/z)</p> <p>Maps this joypad button to a keyboard key, defaults are the cursor keys for the directional pad and '0' to all the other buttons.</p> </li> <li> <p>Joypad R button mapping (auto/default/new line/shift/space/./0/\u00bd/\u00be/\u215a/\u215e/9/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y/z)</p> <p>Maps this joypad button to a keyboard key, defaults are the cursor keys for the directional pad and '0' to all the other buttons.</p> </li> <li> <p>Joypad L2 button mapping (auto/default/new line/shift/space/./0/\u00bd/\u00be/\u215a/\u215e/9/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y/z)</p> <p>Maps this joypad button to a keyboard key, defaults are the cursor keys for the directional pad and '0' to all the other buttons.</p> </li> <li> <p>Joypad R2 button mapping (auto/default/new line/shift/space/./0/\u00bd/\u00be/\u215a/\u215e/9/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y/z)</p> <p>Maps this joypad button to a keyboard key, defaults are the cursor keys for the directional pad and '0' to all the other buttons.</p> </li> <li> <p>Transparent Keyboard Overlay (Off/On)</p> <p>If the keyboard overlay is transparent or opaque.</p> </li> </ul> Transparent Keyboard Overlay - On <p></p> Transparent Keyboard Overlay - Off <p></p> <ul> <li> <p>Time to Release key in ms (100/300/500/1000)</p> <p>How many milliseconds to wait before releasing the key pressed using the keyboard overlay.</p> </li> </ul>"},{"location":"library/eightyone/#controllers","title":"Controllers","text":"<p>The EightyOne core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/eightyone/#user-1-device-types","title":"User 1 device types","text":"<ul> <li>None - Input disabled.</li> <li>RetroPad - Joypad</li> <li>Cursor Joystick - Joypad -  Switch to this for joypad inputs.</li> </ul>"},{"location":"library/eightyone/#user-2-device-types","title":"User 2 device types","text":"<ul> <li>None - Input disabled.</li> <li>RetroPad - Joypad</li> <li>Sinclair Keyboard - Keyboard - Switch to this for keyboard inputs. Switch the User 1 device type to none if the correct keyboard inputs aren't being read.</li> </ul>"},{"location":"library/eightyone/#controller-tables","title":"Controller tables","text":""},{"location":"library/eightyone/#joypad","title":"Joypad","text":"<p>Attention</p> <p>Use the Joypad mapping core options to configure the Cursor Joystick inputs.</p> User 1 Remap descriptors RetroPad Inputs Cursor Joystick Joypad B button mapping Joypad Y button mapping Keyboard overlay Joypad Up mapping Joypad Down mapping Joypad Left mapping Joypad Right mapping Joypad A button mapping Joypad X button mapping Joypad L button mapping Joypad R button mapping Joypad L2 button mapping Joypad R2 button mapping"},{"location":"library/eightyone/#keyboard","title":"Keyboard","text":"RetroKeyboard Inputs Sinclair Keyboard Keyboard Backspace VK_BACK Keyboard Tab VK_TAB Keyboard Clear VK_CLEAR Keyboard Return VK_RETURN Keyboard Pause VK_PAUSE Keyboard Escape VK_ESCAPE Keyboard Space VK_SPACE Keyboard Comma , VK_COMMA Keyboard Delete VK_DELETE Keyboard Keypad 0 VK_NUMPAD0 Keyboard Keypad 1 VK_NUMPAD1 Keyboard Keypad 2 VK_NUMPAD2 Keyboard Keypad 3 VK_NUMPAD3 Keyboard Keypad 4 VK_NUMPAD4 Keyboard Keypad 5 VK_NUMPAD5 Keyboard Keypad 6 VK_NUMPAD6 Keyboard Keypad 7 VK_NUMPAD7 Keyboard Keypad 8 VK_NUMPAD8 Keyboard Keypad 9 VK_NUMPAD9 Keyboard Keypad Period . VK_DECIMAL Keyboard Keypad Divide / VK_DIVIDE Keyboard Keypad Multiply * VK_MULTIPLY Keyboard Keypad Minus - VK_SUBTRACT Keyboard Keypad Plus + VK_ADD Keyboard Up VK_UP Keyboard Down VK_DOWN Keyboard Right VK_RIGHT Keyboard Left VK_LEFT Keyboard Insert VK_INSERT Keyboard Home VK_HOME Keyboard End VK_END Keyboard Page Up VK_PRIOR Keyboard Page Down VK_NEXT Keyboard F1 VK_F1 Keyboard F2 VK_F2 Keyboard F3 VK_F3 Keyboard F4 VK_F4 Keyboard F5 VK_F5 Keyboard F6 VK_F6 Keyboard F7 VK_F7 Keyboard F8 VK_F8 Keyboard F9 VK_F9 Keyboard F10 VK_F10 Keyboard F11 VK_F11 Keyboard F12 VK_F12 Keyboard F13 VK_F13 Keyboard F14 VK_F14 Keyboard F15 VK_F15 Keyboard Num Lock VK_NUMLOCK Keyboard Caps Lock VK_CAPITAL Keyboard Scroll Lock VK_SCROLL Keyboard Right Shift VK_SHIFT Keyboard Left Shift VK_SHIFT Keyboard Right Control VK_CONTROL Keyboard Left Control VK_CONTROL Keyboard Right Alt VK_MENU Keyboard Left Alt VK_MENU Keyboard Print VK_SNAPSHOT"},{"location":"library/eightyone/#external-links","title":"External Links","text":"<ul> <li>Libretro EightyOne Core info file</li> <li>Libretro EightyOne Github Repository</li> <li>Report Libretro EightyOne Core Issues Here</li> <li>Official EightyOne Sourceforge Repository</li> </ul>"},{"location":"library/emuscv/","title":"Super Cassette Vision (EmuSCV) Not Finished","text":""},{"location":"library/emuscv/#background","title":"Background","text":"<p>Super Cassette Vision is a home video game console made by EPOCH CO. and released in Japan on July 17, 1984 and released in Europe (France only) later in 1984 under the YENO brand.</p> <p>The EmuSCV core has been authored by: - MARCONATO Maxime - TAKEDA Toshiya</p> <p>The EmuSCV core is licensed under GPLv3. A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/emuscv/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the EmuSCV core have the following file extensions:</p> <ul> <li><code>.cart</code> (Native)</li> <li><code>.bin</code></li> <li><code>.rom</code></li> </ul> <p>Supported ROMs extensions: .CART (native), .BIN, .ROM, .0 (.1, .2, .3) and Zipped Roms (the name of the rom must be the same as the ZIP archive).</p> <p>All ROMs can be stored in a 1 file ROM (.CART, .BIN, .ROM or .0). Large ROMs can be stored in multiple files (.0, .1, .2, .3).</p>"},{"location":"library/emuscv/#features","title":"Features","text":"<p>Frontend-level settings or features that the EmuSCV core respects.</p> Feature Supported Restart \u2714 Saves - States - Rewind - Netplay x Core Options \u2714 Memory Monitoring (achievements) \u2715 RetroArch Cheats x Native Cheats \u2715 Controls \u2714 Remapping x Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control x Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/emuscv/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The EmuSCV core's core provided FPS is 60.</li> <li>The EmuSCV core's core provided sample rate is 48000/00 Hz.</li> <li>The EmuSCV core's base width is 960.</li> <li>The EmuSCV core's base height is 720.</li> <li>The EmuSCV core's core provided aspect ratio is 4:3.</li> </ul>"},{"location":"library/emuscv/#usage","title":"Usage","text":"<p>Load any supported content file. Content type will be autodetected, and if possible, started. </p>"},{"location":"library/emuscv/#core-options","title":"Core options","text":"<p>The EmuSCV core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch.</p> <ul> <li>CONSOLE (AUTO|EPOCH|YENO|EPOCHLADY) - forced sleep in main thread for lower CPU use</li> <li>DISPLAY (AUTO|EMUSCV|EPOCH|YENO)</li> <li>PIXELASPECT (AUTO|RECTANGULAR|SQUARE) - enable in case of performance problems (has some </li> </ul>"},{"location":"library/emuscv/#control-device-types","title":"Control device types","text":""},{"location":"library/emuscv/#joypad","title":"Joypad","text":""},{"location":"library/emuscv/#keyboard","title":"Keyboard","text":""},{"location":"library/emuscv/#bios","title":"BIOS","text":"<p>EmuSCV require a Super Cassette Vision BIOS to run.</p> <p>There is only one version of the BIOS that can use diferent names: - upd7801g.s01 (standard) - upd7801g.bin - upd7801g.bios - bios.rom - bios.bin</p> <p>MD5: 635a978fd40db9a18ee44eff449fc126</p> <p>The MD5 Checksum control for the BIOS can be disabled in core options to permit use of custom BIOS.</p>"},{"location":"library/emuscv/#external-links","title":"External Links","text":""},{"location":"library/emux_chip8/","title":"CHIP-8 (Emux)","text":"<p>This core currently doesn't start so this documentation will remain incomplete until it is fixed.</p>"},{"location":"library/emux_chip8/#contribute-to-this-documentation","title":"Contribute to this documentation","text":"<p>In order to propose improvements to this document, visit it's corresponding source page on github. Changes are proposed using \"Pull Requests.\"</p>"},{"location":"library/emux_chip8/#background","title":"Background","text":"<p>Emux is a cross-platform emulator project with a goal of emulating multiple kinds of machines related to gaming, such as consoles or arcades. Its philosophy is very much inspired by the Linux kernel (hence the name), which brilliantly manages to support multiple machines while keeping drivers entirely platform-independent. Emux is designed in the same way, keeping a code base of CPUs and controllers separate from machines.</p>"},{"location":"library/emux_chip8/#how-to-get-and-install-the-emux-chip-8-core","title":"How to get and install the Emux CHIP-8 core:","text":"<ol> <li> <p>Start up RetroArch. Inside the main menu, go to 'Online Updater'.</p> </li> <li> <p>Just to make sure we have the latest info files, select 'Update Core Info FIles'. Wait until this is done. Then, select 'Core Downloader'.</p> </li> <li> <p>Browse through the list and select 'CHIP-8 (Emux)'.</p> </li> </ol> <p>After this has finished downloading, the core should now be ready for use!</p>"},{"location":"library/emux_chip8/#authors","title":"Authors","text":"<ul> <li>Sebastien Ronsse</li> </ul>"},{"location":"library/emux_chip8/#license","title":"License","text":"<p>A summary of the licenses behind RetroArch and its cores can be found here.</p> <ul> <li>GPLv2</li> </ul>"},{"location":"library/emux_chip8/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the Emux CHIP-8 core have the following file extensions:</p> <ul> <li>.ch8</li> <li>.bin</li> <li>.rom</li> </ul>"},{"location":"library/emux_chip8/#features","title":"Features","text":"Feature Supported Saves - States - Rewind - Netplay - Memory Monitoring (achievements) - RetroArch Cheats - Native Cheats - Controllers - Remapping - Multi-Mouse - Rumble - Sensors - Camera - Location - Subsystem - Softpatching -"},{"location":"library/emux_chip8/#savesstates","title":"Saves/States","text":"<p>The Emux CHIP-8 core's directory name is 'emux (chip8)'</p> <p>Awaiting description.</p>"},{"location":"library/emux_chip8/#core-options","title":"Core options","text":"<p>Awaiting description.</p>"},{"location":"library/emux_chip8/#controllers","title":"Controllers","text":"<p>Awaiting description.</p>"},{"location":"library/emux_chip8/#device-types","title":"Device types","text":"<p>Awaiting description.</p>"},{"location":"library/emux_chip8/#controllers-graph","title":"Controllers graph","text":"<p>Awaiting description.</p>"},{"location":"library/emux_chip8/#external-links","title":"External Links","text":"<ul> <li>Libretro Emux CHIP-8 Core info file</li> <li>Libretro Emux CHIP-8 Github Repository</li> <li>Report Libretro Emux CHIP-8 Core Issues Here</li> <li>Official Emux CHIP-8 Github Repository</li> </ul>"},{"location":"library/emux_chip8/#chip-8","title":"CHIP-8","text":"<ul> <li>XO-CHIP/CHIP-8 (JAXE)</li> </ul>"},{"location":"library/emux_gb/","title":"Game Boy/Game Boy Color (Emux GB) WIP","text":""},{"location":"library/emux_gb/#background","title":"Background","text":"<p>Emux is a cross-platform emulator project with a goal of emulating multiple kinds of machines related to gaming, such as consoles or arcades. Its philosophy is very much inspired by the Linux kernel (hence the name), which brilliantly manages to support multiple machines while keeping drivers entirely platform-independent. Emux is designed in the same way, keeping a code base of CPUs and controllers separate from machines.</p> <p>The Emux GB core has been authored by</p> <ul> <li>Sebastien Ronsse</li> </ul> <p>The Emux GB core is licensed under</p> <ul> <li>GPLv2</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/emux_gb/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the Emux GB core have the following file extensions:</p> <ul> <li>.gb</li> <li>.bin</li> <li>.rom</li> </ul>"},{"location":"library/emux_gb/#databases","title":"Databases","text":"<p>RetroArch database(s) that are associated with the Emux GB core:</p> <ul> <li>Nintendo - Game Boy</li> <li>Nintendo - Game Boy Color</li> </ul>"},{"location":"library/emux_gb/#bios","title":"BIOS","text":"<p>Required or optional firmware files go in RetroArch's system directory.</p> Filename Description md5sum dmg_boot.bin Game Boy Boot ROM - Required 32fbbd84168d3482956eb3c5051637f5"},{"location":"library/emux_gb/#features","title":"Features","text":"<p>RetroArch-level settings or features that the Emux GB core respects.</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2715 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2715 Memory Monitoring (achievements) \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2715 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715"},{"location":"library/emux_gb/#directories","title":"Directories","text":"<p>The Emux GB core's directory name is 'emux (gb)'</p>"},{"location":"library/emux_gb/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The Emux GB core's internal FPS is (FPS)</li> <li>The Emux GB core's internal sample rate is (Rate)</li> <li>The Emux GB core's core provided aspect ratio is (Ratio)</li> </ul>"},{"location":"library/emux_gb/#controllers","title":"Controllers","text":""},{"location":"library/emux_gb/#device-types","title":"Device types","text":"<p>The Emux GB core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/emux_gb/#user-1-device-types","title":"User 1 device types","text":"<ul> <li>None - Doesn't disable input.</li> <li>RetroPad - Joypad</li> <li>RetroPad w/Analog - Joypad - There is no reason to switch to this.</li> </ul>"},{"location":"library/emux_gb/#controller-tables","title":"Controller tables","text":""},{"location":"library/emux_gb/#joypad-and-analog-device-type-table","title":"Joypad and analog device type table","text":"User 1 Input descriptors RetroPad Inputs RetroPad B Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A"},{"location":"library/emux_gb/#compatibility","title":"Compatibility","text":"<p>Awaiting description.</p>"},{"location":"library/emux_gb/#external-links","title":"External Links","text":"<ul> <li>Libretro Emux GB Core info file</li> <li>Libretro Emux GB Github Repository</li> <li>Report Libretro Emux GB Core Issues Here</li> <li>Official Emux GB Github Repository</li> </ul>"},{"location":"library/emux_gb/#see-also","title":"See also","text":""},{"location":"library/emux_gb/#nintendo-game-boy-color","title":"Nintendo - Game Boy (+ Color)","text":"<ul> <li>Nintendo - Game Boy / Color (Gambatte)</li> <li>Nintendo - Game Boy / Color (Gearboy)</li> <li>Nintendo - Game Boy / Color (SameBoy)</li> <li>Nintendo - Game Boy / Color (TGB Dual)</li> <li>Nintendo - Game Boy Advance (mGBA)</li> <li>Nintendo - Game Boy Advance (VBA-M)</li> <li>Nintendo - SNES / Famicom (higan Accuracy)</li> <li>Nintendo - SNES / Famicom (nSide Balanced)</li> <li>Nintendo - SNES / Famicom (Mesen-S)</li> </ul>"},{"location":"library/emux_nes/","title":"Nintendo - NES / Famicom (Emux NES)","text":""},{"location":"library/emux_nes/#background","title":"Background","text":"<p>Emux is a cross-platform emulator project with a goal of emulating multiple kinds of machines related to gaming, such as consoles or arcades. Its philosophy is very much inspired by the Linux kernel (hence the name), which brilliantly manages to support multiple machines while keeping drivers entirely platform-independent. Emux is designed in the same way, keeping a code base of CPUs and controllers separate from machines.</p>"},{"location":"library/emux_nes/#authorlicense","title":"Author/License","text":"<p>The Emux NES core has been authored by</p> <ul> <li>Sebastien Ronsse</li> </ul> <p>The Emux NES core is licensed under</p> <ul> <li>GPLv2</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/emux_nes/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the Emux NES core have the following file extensions:</p> <ul> <li>.nes</li> <li>.bin</li> <li>.rom</li> </ul>"},{"location":"library/emux_nes/#databases","title":"Databases","text":"<p>RetroArch database(s) that are associated with the Emux NES core:</p> <ul> <li>Nintendo - Nintendo Entertainment System</li> </ul>"},{"location":"library/emux_nes/#features","title":"Features","text":"<p>Frontend-level settings or features that the Emux NES core respects.</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2715 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2715 Memory Monitoring (achievements) \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2715 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/emux_nes/#directories","title":"Directories","text":"<p>The Emux NES core's internal core name is 'emux (nes)'</p>"},{"location":"library/emux_nes/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The Emux NES core's core provided FPS is (FPS)</li> <li>The Emux NES core's core provided sample rate is (Rate)</li> <li>The Emux NES core's core provided aspect ratio is (Ratio)</li> </ul>"},{"location":"library/emux_nes/#controllers","title":"Controllers","text":"<p>The Emux NES core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/emux_nes/#user-1-2-device-types","title":"User 1 - 2 device types","text":"<ul> <li>None - Doesn't disable input. There's no reason to switch to this.</li> <li>RetroPad - Joypad - Stay on this.</li> <li>RetroPad w/Analog - Joypad - Same as RetroPad. There's no reason to switch to this.</li> </ul>"},{"location":"library/emux_nes/#controller-tables","title":"Controller tables","text":""},{"location":"library/emux_nes/#joypad","title":"Joypad","text":"RetroPad Inputs Emux NES core Inputs B Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A"},{"location":"library/emux_nes/#compatibility","title":"Compatibility","text":"<p>Awaiting description.</p>"},{"location":"library/emux_nes/#external-links","title":"External Links","text":"<ul> <li>Official Emux GB Github Repository</li> <li>Libretro Emux GB Core info file</li> <li>Libretro Emux GB Github Repository</li> <li>Report Libretro Emux GB Core Issues Here</li> </ul>"},{"location":"library/emux_nes/#see-also","title":"See also","text":""},{"location":"library/emux_nes/#nintendo-nintendo-entertainment-system","title":"Nintendo - Nintendo Entertainment System","text":"<ul> <li>Nintendo - NES / Famicom (bnes)</li> <li>Nintendo - NES / Famicom (FCEUmm)</li> <li>Nintendo - NES / Famicom (Mesen)</li> <li>Nintendo - NES / Famicom (Nestopia)</li> <li>Nintendo - NES / Famicom (QuickNES)</li> </ul>"},{"location":"library/emux_sms/","title":"Sega - Master System (Emux SMS)","text":""},{"location":"library/emux_sms/#background","title":"Background","text":"<p>Emux is a cross-platform emulator project with a goal of emulating multiple kinds of machines related to gaming, such as consoles or arcades. Its philosophy is very much inspired by the Linux kernel (hence the name), which brilliantly manages to support multiple machines while keeping drivers entirely platform-independent. Emux is designed in the same way, keeping a code base of CPUs and controllers separate from machines.</p>"},{"location":"library/emux_sms/#authorlicense","title":"Author/License","text":"<p>The Emux SMS core has been authored by</p> <ul> <li>Sebastien Ronsse</li> </ul> <p>The Emux SMS core is licensed under</p> <ul> <li>GPLv2</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/emux_sms/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the Emux SMS core have the following file extensions:</p> <ul> <li>.sms</li> <li>.bin</li> <li>.rom</li> </ul>"},{"location":"library/emux_sms/#databases","title":"Databases","text":"<p>RetroArch database(s) that are associated with the Emux SMS core:</p> <ul> <li>Sega - Master System - Mark III</li> </ul>"},{"location":"library/emux_sms/#bios","title":"BIOS","text":"<p>Required or optional firmware files go in the frontend's system directory.</p> Filename Description md5sum bios.sms Master System BIOS - Required 840481177270d5642a14ca71ee72844c"},{"location":"library/emux_sms/#features","title":"Features","text":"<p>Frontend-level settings or features that the Emux SMS core respects.</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2715 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2715 Memory Monitoring (achievements) \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2715 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/emux_sms/#directories","title":"Directories","text":"<p>The Emux SMS core's internal core name is 'emux (sms)'</p>"},{"location":"library/emux_sms/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The Emux SMS core's core provided FPS is (FPS)</li> <li>The Emux SMS core's core provided sample rate is (Rate)</li> <li>The Emux SMS core's core provided aspect ratio is (Ratio)</li> </ul>"},{"location":"library/emux_sms/#controllers","title":"Controllers","text":"<p>The Emux SMS core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/emux_sms/#user-1-device-types","title":"User 1 device types","text":"<ul> <li>None - Doesn't diable input. There's no reason to switch to this.</li> <li>RetroPad - Joypad - Stay on this.</li> <li>RetroPad w/Analog - Joypad - There's no reason to switch to this.</li> </ul>"},{"location":"library/emux_sms/#controller-tables","title":"Controller tables","text":""},{"location":"library/emux_sms/#joypad","title":"Joypad","text":"RetroPad Inputs Emux SMS core Inputs 1 Pause D-Pad Up D-Pad Down D-Pad Left D-Pad Right 2"},{"location":"library/emux_sms/#external-links","title":"External Links","text":"<ul> <li>Official Emux SMS Github Repository</li> <li>Libretro Emux SMS Core info file</li> <li>Libretro Emux SMS Github Repository</li> <li>Report Libretro Emux SMS Core Issues Here</li> </ul>"},{"location":"library/emux_sms/#see-also","title":"See also","text":""},{"location":"library/emux_sms/#sega-master-system-mark-iii","title":"Sega - Master System - Mark III","text":"<ul> <li>Sega - MS/GG/MD/CD (Genesis Plus GX)</li> <li>Sega - MS/MD/CD/32X (PicoDrive)</li> </ul>"},{"location":"library/ep128emu/","title":"Enterprise - 64/128 (ep128emu)","text":""},{"location":"library/ep128emu/#background","title":"Background","text":"<p>Leverage the convenience of libretro/retroarch to emulate the Z80 based home computers that the original ep128emu supports - that is, Enterprise 64/128, Videoton TVC, Amstrad CPC and ZX Spectrum. Focus is on Enterprise and TVC.</p> <p>The ep128emu core has been authored by: - Istvan Varga (ep128emu) - Zoltan Balogh (libretro core specific modifications)</p> <p>The ep128emu core is licensed under GPL2. A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/ep128emu/#requirements","title":"Requirements","text":"<p>Since the emulated machines are 8-bit platforms from the 1980's, modern setups should have no problem emulating them. Tested on Raspberry Pi 2.</p>"},{"location":"library/ep128emu/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the ep128emu core have the following file extensions:</p> <ul> <li><code>.img</code> - Enterprise, CPC or TVC floppy disk image</li> <li><code>.dsk</code> - Enterprise, CPC or TVC floppy disk image</li> <li><code>.tap</code> - Enterprise or ZX Spectrum tape image</li> <li><code>.dtf</code> - Enterprise compressed file</li> <li><code>.cas</code> - Videoton TVC file format</li> <li><code>.wav</code> - sound file interpreted as Enterprise tape</li> <li><code>.tvcwav</code> - sound file interpreted as Videoton TVC tape</li> <li><code>.cdt</code> - Amstrad CPC tape image</li> <li><code>.tzx</code> - ZX Spectrum tape image</li> <li><code>.bas</code>, <code>.com</code>, <code>.trn</code>, <code>.128</code>, <code>.</code> - common extensions for Enterprise executable files, including no extension</li> </ul> <p>From version 1.1.0, emulator core is able to handle mono PCM WAV files with 1..8 bit depth as tape recordings. It is possible to enable libsndfile support during compilation, and then a wider range of formats are recognized, including MP3 if libsndfile version is at least 1.1. Using the <code>.wav</code> file extension will trigger the built-in RetroArch media player by default, it can be disabled under Settings / File Browser / Use Built-in Media Player. Rename <code>.wav</code> files to have <code>.tvcwav</code> extension to be interpreted as TVC tapes.</p> <p>RetroArch database(s) that are associated with the ep128emu core:</p> <ul> <li>None yet</li> </ul>"},{"location":"library/ep128emu/#features","title":"Features","text":"<p>Frontend-level settings or features that the ep128emu core respects.</p> Feature Supported Restart \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay - Core Options \u2714 Memory Monitoring (achievements) \u2715 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping - Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2714 Username \u2715 Language \u2714 Crop Overscan \u2715 LEDs \u2714"},{"location":"library/ep128emu/#directories","title":"Directories","text":"<p>The ep128emu core's library name is <code>ep128emu</code>. The ep128emu core saves/loads to/from these directories.</p> <p>Frontend's System directory</p> File Description ep128emu/rom/* BIOS files are loaded from here ep128emu/config/* System-wide emulation configuration files"},{"location":"library/ep128emu/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The ep128emu core's core provided FPS is 50</li> <li>The ep128emu core's core provided sample rate is 44.1 kHz</li> <li>The ep128emu core's base width is 768</li> <li>The ep128emu core's base height is 288</li> <li>The ep128emu core's max width is 768</li> <li>The ep128emu core's max height is 576 (interlace mode)</li> <li>The ep128emu core's core provided aspect ratio is 4:3 (interlace mode)</li> </ul> <p>The intelligent zoom function can reduce the apparent width/height, aspect ratio is also adjusted.</p> <p>If there is LED driver configured in RetroArch, second LED should reflect disk activity state.</p>"},{"location":"library/ep128emu/#usage","title":"Usage","text":"<p>Load any supported content file. Content type will be autodetected, and if possible, started. Content-specific configuration file is also loaded if present. Without content, core starts with Enterprise 128 disk configuration.</p> <p>In case of multi-disk (or multi-tape) games, use the Disk Control menu to add the subsequent images and switch between them. You can also use RetroArch's built-in memory analyzer to set up cheats.</p> <p>Apart from disk/tape/fileIO differences, the core will adjust the emulated machine configuration in some cases:</p> <ul> <li>if content file has <code>.DTF</code> extension, ZozoTools BIOS will be used</li> <li>if content file name contains <code>[req brd-rom]</code>, German BIOS will be used</li> <li>if content file name contains <code>[req zrom]</code>, Hungarian language BIOS and EPDOS will be used</li> <li>if EP128_DISK_ISDOS (or EP64_DISK_ISDOS) type is supplied via configuration file, IS-DOS (CP/M flavor for Enterprise) will be used</li> </ul>"},{"location":"library/ep128emu/#core-options","title":"Core options","text":"<p>The ep128emu core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch.</p> <ul> <li>Main thread wait (ms) (0|1|5|10) - forced sleep in main thread for lower CPU use</li> <li>High sound quality (1|0) - disable in case of performance problems</li> <li>Use accelerated SW framebuffer (0|1) - enable in case of performance problems (has some known bugs with interlace mode)</li> <li>Enable resolution changes (requires restart) (1|0)</li> <li>Border lines to keep when zooming in (0|2|4|8|10|20)</li> <li>System ROM version (EP only) (Original|Enhanced) - enhanced ROM contains faster memory test at startup</li> <li>User 1 Zoom button (R3|Start|Select|X|Y|A|B|L|R|L2|R2|L3)</li> <li>User 1 Info button (L3|R3|Start|Select|X|Y|A|B|L|R|L2|R2)</li> <li>User 1 Autofire for button (None|X|Y|A|B|L|R|L2|R2|L3|R3|Start|Select)</li> <li>User 1 Autofire repeat delay (1|2|4|8|16)</li> </ul>"},{"location":"library/ep128emu/#control-device-types","title":"Control device types","text":"<p>The emulated systems use several joystick types (all digital, with 1 fire button usually). Enterprise and TVC have a built-in joystick, and two external joystick connections. The ep128emu core supports device type changes in the controls menu. Change of the type updates the joypad and fire button mapping.</p> Emulated machine User 1 default joypad User 2 default joypad User 3 default joypad Enterprise Internal External 1 External 2 TVC Internal External 1 External 2 CPC External 1 External 2 ZX Kempston Sinclair 1 Sinclair 2 <ul> <li>Core default - Joypad and fire button is mapped as default (see above)</li> <li>Internal Joystick - Joypad and fire button is mapped for internal joystick on Enterprise and TVC. On CPC it is mapped to cursor keys.</li> <li>External Joystick 1 / Kempston - Joypad and fire button is mapped for external joystick 1 (Kempston interface in case of ZX)</li> <li>External Joystick 2 - Joypad and fire button is mapped for external joystick 2</li> <li>Sinclair Joystick 1 - Joypad and fire button is mapped for Sinclair joystick 1. Only useful for ZX. Joystick inputs are emulated as keys: 1 (left), 2 (right), 3 (down), 4 (up), 5 (fire).</li> <li>Sinclair Joystick 2 - Joypad and fire button is mapped for Sinclair joystick 2. Only useful for ZX. Joystick inputs are emulated as keys: 6 (left), 7 (right), 8 (down), 9 (up) ,0 (fire).</li> <li>Protek Joystick - Joypad and fire button is mapped for Protek/AGF joystick. Only useful for ZX. Joystick inputs are emulated as keys: 5 (left), 6 (down), 7 (up), 8 (right) ,0 (fire).</li> <li>External Joystick 3..6 - Joypad and fire button is mapped for external joystick 3..6. Only useful for Enterprise, very rarely used.</li> </ul>"},{"location":"library/ep128emu/#joypad","title":"Joypad","text":"RetroPad Inputs Default action for user 1 Recommended override  for content-specific configuration Respective directions for:  Enterprise, TVC: Internal joystick  CPC: External joystick 1  ZX Spectrum: Kempston interface Enterprise, TVC: space (fire for internal joystick)  CPC: External joystick 1 fire  ZX Spectrum: Kempston joystick Enter CPC: External joystick 1 fire 2 In-game key required for secondary action - In-game key required for other action (if any) - In-game key required to select the supported input method (if any) - In-game key required to start the game (if any) Key 0 In-game key required for other action (if any) Key 1 In-game key required for other action (if any) Key 2 In-game key required for other action (if any) Key 3 In-game key required for other action (if any) Info display - Intelligent zoom (Zoom is also available via keyboard F12)"},{"location":"library/ep128emu/#mouse","title":"Mouse","text":"<p>Mouse input is used for the EnterMice emulation of the Enterprise.</p>"},{"location":"library/ep128emu/#keyboard","title":"Keyboard","text":""},{"location":"library/ep128emu/#enterprise-128","title":"Enterprise 128","text":"<p>The ep128emu core takes the Enterprise UK keyboard as a basis: </p> <p>Most mappings are straightforward positionally from an ISO UK keyboard:</p> <ul> <li>Dark green: natural mapping, both position and function matches nicely</li> <li>Light green: either position or function is slightly different</li> <li>Yellow: function is different</li> <li>Red: extra mapping</li> <li>Dark grey: keys intentionally reserved for RetroArch / OS functions</li> </ul> <p></p> <p>Exceptions are marked in the following table:</p> RetroKeyboard Inputs Enterprise keyboard input Keyboard F9 Hold Keyboard F10 Stop Keyboard Pause Stop Keyboard Backquote ` Escape (alternative mapping) Keyboard Equals = ^ (caret) Keyboard Backspace Erase Keyboard Left Bracket [ @ (at) Keyboard Right Bracket ] [ (left bracket) Keyboard Quote ' : (colon) Keyboard Backslash \\ ] (right bracket) (shown as # in ISO map) Keyboard Oem 102 \\ (backslash) Keyboard Home \\ (alternative mapping) Keyboard Delete Del Keyboard Insert Ins Keyboard Keypad 0 External joystick 1 fire Keyboard Keypad 2 External joystick 1 down Keyboard Keypad 4 External joystick 1 left Keyboard Keypad 6 External joystick 1 right Keyboard Keypad 8 External joystick 1 up"},{"location":"library/ep128emu/#videoton-tvc","title":"Videoton TVC","text":"<p>The Videoton TVC has a layout that is somewhat similar to ISO Hungarian layout:  </p> <p>Since TVC has several extra keys, but no function keys, F-row is used as replacement for those.</p> RetroKeyboard Inputs TVC keyboard input Keyboard F1 @ Keyboard F2 ; Keyboard F3 &lt; Keyboard F4 \\ Keyboard F5 * Keyboard F6 ^ Keyboard F7 [ Keyboard F8 ] Keyboard F9 * Keyboard F10 \u00ed Keyboard Backquote ` 0 Keyboard 0 \u00f6 Keyboard Minus - \u00fc Keyboard Equals = \u00f3 Keyboard Left Bracket [ \u0151 Keyboard Right Bracket ] \u00fa Keyboard Semicolon ; \u00e9 Keyboard Quote ' \u00e1 Keyboard Backslash \\ \u0171 Keyboard Oem 102 \u00ed Keyboard Home \u0171 (alternative mapping) Keyboard Delete Del Keyboard Insert Ins Keyboard Keypad 0 External joystick 1 fire Keyboard Keypad 2 External joystick 1 down Keyboard Keypad 4 External joystick 1 left Keyboard Keypad 6 External joystick 1 right Keyboard Keypad 8 External joystick 1 up"},{"location":"library/ep128emu/#amstrad-cpc","title":"Amstrad CPC","text":"<p>The Amstrad CPC 464/664 and 6128 fit well to ISO UK layout, with only slight differences:  </p> <p>Function key row is mapped to Fn-array. Extra mappings are marked in the following table:</p> RetroKeyboard Inputs CPC keyboard input Keyboard F1 Fn1 Keyboard F2 Fn2 Keyboard F3 Fn3 Keyboard F4 Fn4 Keyboard F5 Fn5 Keyboard F6 Fn6 Keyboard F7 Fn7 Keyboard F8 Fn8 Keyboard F9 Fn9 Keyboard F10 Fn0 Keyboard F11 Fn Dot (.) Keyboard Keypad Enter Fn Enter Keyboard Oem 102 \\ Keyboard Home \\ (alternative mapping) Keyboard Delete Del Keyboard Insert Copy Keyboard Left Alt Copy (alternative mapping) Keyboard Right Alt Fn Dot (alternative mapping) Keyboard Keypad 0 External joystick 1 fire Keyboard Keypad Period . External joystick 1 fire 2 Keyboard Keypad 2 External joystick 1 down Keyboard Keypad 4 External joystick 1 left Keyboard Keypad 6 External joystick 1 right Keyboard Keypad 8 External joystick 1 up"},{"location":"library/ep128emu/#bios","title":"BIOS","text":"<p>Following \"BIOS\" files are used for emulation. Note: in usual 8-bit home computer terms, these are \"ROM\"s as they contain the original machine's read-only memory dumps.</p> <p>From ep128emu_core version 1.1.0, external BIOS files are optional.</p> Filename Description md5sum <code>exos21.rom</code> Enterprise 128 Expandible OS 2.1  For EP128 f36f24cbb87745fbd2714e4df881db09 <code>basic21.rom</code> Enterprise 128 BASIC Interpreter v2.1  For EP128 e972fe42b398c9ff1d93ff014786aec6 <code>exdos13.rom</code> Enterprise 128 Disk Controller v1.3  For EP64/128 disk configs ddff70c014d1958dc75378b6c9aab6f8 <code>exos20.rom</code> Enterprise 64 Expandible OS 2.0  For EP64 5ad3baaad3b5156d6b60b34229a676fb <code>basic20.rom</code> Enterprise 64 BASIC Interpreter v2.0  For EP64 8e18edce4a7acb2c33cc0ab18f988482 <code>epfileio.rom</code> Enterprise 128 Direct File I/O  For loading from host file (instead of disk or tape image) a68ebcbc73a4d2178d755b7755bf18fe <code>exos24uk.rom</code> Enterprise 128 Expandible OS 2.4  Only for enhanced functions (fast memory test) 55af78f877a21ca45eb2df68a74fcc60 <code>hun.rom</code> Enterprise 128 Hungarian language extension 22167938f142c222f40992839aa21a06 <code>epdos16f.rom</code> Enterprise 128 EP-DOS 6593dff00ab32a4b1fc084674ededf2b <code>exdos14isdos10uk.rom</code> Enterprise 128 IS-DOS (CP/M) f91c4a507cc6895bdd9c43df4f021df3 <code>brd.rom</code> Enterprise 128 German language extension 6af0402906944fd134004b85097c8524 <code>zt19uk.rom</code> Enterprise 128 ZozoTools extension  For loading from DTF files 228540b6be83ae2acd7569c8ff0f91d0 <code>tvc22_sys.rom</code> Videoton TVC system BIOS  For TVC emulation 8c54285f541930cde766069942bad0f2 <code>tvc22_ext.rom</code> Videoton TVC extension BIOS  For TVC emulation 5ce95a26ceed5bec73995d83568da9cf <code>tvcfileio.rom</code> Videoton TVC Direct File I/O  For loading from host file (instead of disk or tape image) a2cf86ba8e7fc58b242137fe59036832 <code>tvc_dos12d.rom</code> Videoton TVC disk BIOS  For TVC disk configs 88dc7876d584f90e4106f91444ab23b7 <code>cpc464.rom</code> Amstrad CPC 464 BIOS  For CPC 464 a993f85b88ac4350cf4d41554e87fe4f <code>cpc664.rom</code> Amstrad CPC 664 BIOS  For CPC 664 5a384a2310f472c7857888371c00ed66 <code>cpc6128.rom</code> Amstrad CPC 6128 BIOS  For CPC 6128 b96280dc6c95a48857b4b8eb931533ae <code>cpc_amsdos.rom</code> Amstrad CPC AMSDOS BIOS  For CPC disk configs 25629dfe870d097469c217b95fdc1c95 <code>zx128.rom</code> ZX Spectrum 128 BIOS  For ZX Spectrum 128 85fede415f4294cc777517d7eada482e <code>zx48.rom</code> ZX Spectrum 48 BIOS  For ZX Spectrum 16/48 4c42a2f075212361c3117015b107ff68"},{"location":"library/ep128emu/#special-emulation","title":"Special emulation","text":"<p>Enterprise 128 has software extensions to emulate ZX Spectrum (48, 128) and Amstrad CPC. As a technical quirk, these emulators can be run in the ep128emu-core, creating a double emulation layer.</p>"},{"location":"library/ep128emu/#spemu","title":"SPEMU","text":"<ul> <li>Obtain ROM version of SPEmu from the EnterpriseForever forums.</li> <li>Place ROM files under RetroArch system directory: <code>system/ep128emu/roms/</code></li> <li> <p>Create a custom config file next to the content (such as a .tzx file) called <code>enterprise.ep128cfg</code>:</p> <p><code>machineDetailedType \"EP128_TAPE\"</code> <code>memory.ram.size 256</code> <code>memory.rom.40.file \"spemu128.rom\"</code> <code>memory.rom.40.offset 0</code> <code>memory.rom.41.file \"spemu128.rom\"</code> <code>memory.rom.41.offset 16384</code> <code>memory.rom.42.file \"spemu128.rom\"</code> <code>memory.rom.42.offset 32768</code> <code>tape.forceMotorOn Yes</code></p> </li> <li> <p>Start ep128emu core using the tape content</p> </li> <li>Invoke the SPEmu extension with <code>:sp128</code></li> <li>Choose Load tape</li> </ul>"},{"location":"library/ep128emu/#cpcemu","title":"CPCEMU","text":"<ul> <li>Obtain COM version of CPCEmu from the EnterpriseForever forums.</li> <li>Start CPCEMU.COM the usual way (select the file in RetroArch and open it with ep128emu core)</li> <li>Once the blue screen has loaded, open quick menu (F1) go to Disk Control and select the file that needs to be loaded</li> <li>Continue, enable keyboard pass-through with Scroll Lock, and issue RUN command as needed</li> <li>It may be needed to change the control type to External 2 in Quick Menu / Controls</li> </ul>"},{"location":"library/ep128emu/#external-links","title":"External Links","text":"<ul> <li>Official ep128emu-core Repository</li> <li>Libretro ep128emu Core info file</li> <li>Report Libretro ep128emu Core Issues Here</li> <li>Original ep128emu Implementation</li> <li>ep128.hu - games for Enterprise</li> <li>enterpriseforever.com - Enterprise community</li> <li>tvc.homeserver.hu - TVC page (Hungarian only)</li> </ul>"},{"location":"library/fbneo/","title":"FinalBurn Neo","text":""},{"location":"library/fbneo/#note-about-this-document","title":"Note about this document","text":"<p>It mostly assumes you are using RetroArch as your libretro frontend, some specific instructions might differ if you are using another frontend.</p> <p>It also assumes you are already knowledgeable about arcade emulation and its quirks. If you aren't, you should be reading getting started with arcade emulation first.</p>"},{"location":"library/fbneo/#background","title":"Background","text":"<p>FinalBurn Neo (also referred to as FBNeo or FBN) is a multi-system emulator (Arcade, consoles and computers) under active development. It is the follow-up of the FinalBurn and FinalBurn Alpha emulators. The libretro core provides wide compatibility with platforms and features supported by libretro.</p>"},{"location":"library/fbneo/#difference-from-mame","title":"Difference from MAME","text":"<p>FBNeo strives for accuracy, just like MAME. There are some arcade boards where one or the other will be more accurate, but for the most part they should be equally accurate. The main difference with MAME is that FBNeo doesn't mind including \"quality of life\" hacks, while MAME is mostly focused on preservation and documentation. \"Quality of life\" hacks include things like :</p> <ul> <li>improving original game's sound (some games like \"Burger Time\" have noise which was clearly unintended by their developpers, we are removing it)</li> <li>implementing alternative colors for games where the colors don't look right (sometimes there are controversies about which colors are right for an arcade board, like \"Tropical Angel\", we implement alternative colors as dipswitches)</li> <li>having control alternatives that didn't exist on original cabinet (play rotary stick games like twin-stick shooters, use lightguns in \"Rambo 3\", use simplified 8-way directional controls for \"Battlezone\", ...)</li> <li>improving the gaming experience by cutting what we deem as unnecessary aspect of emulation (you don't have to spend 20 minutes \"installing\" CPS-3 games, neither 100s loading Deco Cassette games)</li> <li>reducing hardware requirements by cutting what we deem as unnecessary corners in the emulation code</li> <li>supporting popular romhacks</li> </ul> <p>Note: some of those \"quality of life\" hacks might be doable with programming skills and lua language on MAME</p>"},{"location":"library/fbneo/#license-and-changelog","title":"License and changelog","text":"<p>It's distributed under a non-commercial license, see LICENSE.md and whatsnew.html.</p> <p>There are controversies about whether libretro's patreon and retroarch's GPL license breaks FBNeo's non-commercial license or not. This is what you should know :</p> <ul> <li>\"Redistributions may not be sold, nor may they be used in a commercial product or activity.\" : By definition, a commercial activity is an activity involving the sale of goods or services. The libretro project does none of that, and it is unclear whether a patreon should be treated as a commercial activity or not when no goods or services are provided in exchange of the donations.</li> <li>\"You may not ask for donations to support your work on any project that uses the FB Neo source code.\" : This FBNeo port is using libretro code, not the other way around. This port is directly authored/maintained/supported by members of the FBNeo team, and none of them is receiving donations. Interestingly, if receiving donations was de facto a commercial activity, this term shouldn't be required.</li> <li>If the libretro project was a commercial activity, it would still be unclear how it does affect this port. Our win32 standalone builds use the directx api, which belongs to a commercial company. Using the libretro api, which would belong to a commercial activity, wouldn't be any different. Furthermore, in all likeliness, there would still be alternative libretro frontends that don't belong to the libretro project and are not commercial. </li> <li>Actually, alternative commercial libretro frontends already exist, and we consider we are not concerned as long as they neither redistribute FBNeo nor use it as some mean of advertisement. In this scenario, only a manual installation of the core by the user will be considered legal and supported.</li> <li>While GPL code can't be mixed with non-commercial code, this is a non-issue since this port doesn't contain any GPL-licensed code.</li> <li>Under european law, where the libretro buildbots are located, linking GPL and non-commercial softwares doesn't produce a derivative work, and doesn't extend the GPL license to the non-commercial work (source here). It is unclear whether the same applies in non-EU countries or not.</li> </ul>"},{"location":"library/fbneo/#extensions","title":"Extensions","text":"<p>zip, 7z</p>"},{"location":"library/fbneo/#building-this-core-manually","title":"Building this core manually","text":"<p>From the root of the repository, run <pre><code>make -j5 -C src/burner/libretro\n</code></pre> Note : <code>-j5</code> is to optimize build time on cpus with 4 cores (X+1 cores), you can rise or reduce that value to match your own, however a value too high will increase ram usage and might even cause your system to become unstable.</p> <p>Note : Here is a non-exhaustive list of additional parameters you might want to append to the make command line :</p> <ul> <li>SUBSET=all : Build a core that supports everything. This is the default SUBSET so you don't need to append it.</li> <li>SUBSET=neogeo : Build a core that only supports neogeo games.</li> <li>SUBSET=cps12 : Build a core that only supports CPS-1 &amp; CPS-2 games.</li> <li>generate-files : Generate header/gamelist files and stop there.</li> <li>clean : Remove any previously built object.</li> <li>REGEN_HEADERS=1 : This will run generate-files and clean consecutively before building the core, which is usually required when you made a change to the list of drivers you want to build, either from modifying the project's code or switching between SUBSETs. Note that make version 4.4 may be required for this to behave properly.</li> </ul>"},{"location":"library/fbneo/#building-romsets-for-fbneo","title":"Building romsets for FBNeo","text":"<p>Arcade emulation won't work properly without the romsets matching the emulator. FBNeo being an emulator under active development, a given romset might change from time to time to stay in sync with the best dump available for that game.</p> <p>Don't expect things to work properly if you didn't build valid romsets, and don't report issues because your romsets are invalid.</p>"},{"location":"library/fbneo/#step-1-obtaining-an-xml-dat","title":"Step 1: Obtaining an XML DAT","text":"<p>You can download the dat files for the latest version of the core from the dats directory.</p>"},{"location":"library/fbneo/#step-2-gathering-the-ingredients","title":"Step 2: Gathering the ingredients","text":"<p>It mostly consists of latest dumps available for MAME. The other romsets are usually a mix of hacks and homebrews, most of them can be found in HBMAME dumps. Having an older FBAlpha/FBNeo set among your ingredients will also help a lot.</p>"},{"location":"library/fbneo/#step-3-building-the-romsets","title":"Step 3: Building the romsets","text":"<p>Refer to a clrmamepro tutorial for details on how to configure ClrMamePro to use your sources as \"rebuild\" folders.</p>"},{"location":"library/fbneo/#features","title":"Features","text":"Feature Supported Saves \u2714 States \u2714 Rewind \u2714 Run-Ahead \u2714 Preemptive Frames \u2714 Netplay \u2714 Memory Monitoring (achievements) \u2714 RetroArch Cheats \u2714 Native Cheats \u2714 Controllers \u2714 Multi-Mouse \u2714 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2714 IPS Patch \u2714 RomData \u2714 Multi-language \u2714"},{"location":"library/fbneo/#mapping","title":"Mapping","text":"<p>We don't have a tool like the MAME OSD, instead we use the libretro api to announce buttons and let the frontend customize mapping, this is done through <code>Quick Menu &gt; Controls</code>.</p> <p>For those who don't want to fully customize their mapping, there are 2 convenient presets you can apply by changing the \"device type\" for a player in this menu :</p> <ul> <li>Classic : it will apply the original neogeo layout from neogeo cd gamepads for neogeo games, and use L/R as 5<sup>th</sup> and 6<sup>th</sup> button for 6 buttons games like Street Fighter II.</li> <li>Modern : it will apply the modern neogeo layout from neogeo arcade stick pro and mini pad for neogeo games, and use R1/R2 as 5<sup>th</sup> and 6<sup>th</sup> button for 6 buttons games like Street Fighter II (because it's also their modern layout), this is really convenient with most arcade sticks.</li> </ul> <p>The following \"device type\" also exist, but they won't be compatible with every games :</p> <ul> <li>Mouse (ball only) : it will use mouse/trackball for analog movements, buttons will stay on retropad</li> <li>Mouse (full) : same as above, but the buttons will be on the mouse</li> <li>Pointer : it will use \"pointer\" device (can be a mouse/trackball) to determine coordinates on screen, buttons will stay on retropad</li> <li>Lightgun : it will use lightgun to determine coordinates on screen, buttons will be on the lightgun too.</li> <li>Analog Arcade Gun : it will use the analog stick for gun games but in a different way than \"Classic\" and \"Modern\", it is particularily useful if you have a \"fixed arcade gun\" (arcade gun mounted on an analog control).</li> </ul> <p>The following device types are mostly WIP, they haven't been thoroughly tested and might contain major bugs (please report them) :</p> <ul> <li>6-Panel : assuming you are using a 6-button arcade panel and followed the \"YXL as top row and BAR as bottom row\" mapping recommendation, it will map the top row then the bottom row as a general rule (with some exceptions), note that some users might be more comfortable with Classic/Modern's BAYX's assignment for 4-buttons systems like neogeo.</li> <li>Touchscreen : a variant of the \"Pointer\" device type meant for mobile devices, touchscreen \"tap events\" are used for gameplay, \"Start\" and \"Coin\" are still assigned to your retropad overlay.</li> </ul>"},{"location":"library/fbneo/#emulating-consoles-and-computers","title":"Emulating consoles and computers","text":"<p>It also requires usage of specific romsets, meaning the rom must have the expected crc/size, and be packaged in an archive with a specific name (the instructions to build those romsets don't differ from arcade's).</p> <p>You can use specific folder's name for detection, it's the easiest and recommended method, especially if you are using RetroArch playlists or if your device is not compatible with subsystems (android and consoles) :</p> <ul> <li>CBS ColecoVision : <code>coleco</code> | <code>colecovision</code></li> <li>Fairchild ChannelF : <code>chf</code> | <code>channelf</code></li> <li>MSX 1 : <code>msx</code> | <code>msx1</code></li> <li>Nec PC-Engine : <code>pce</code> | <code>pcengine</code></li> <li>Nec SuperGrafX : <code>sgx</code> | <code>supergrafx</code></li> <li>Nec TurboGrafx-16 : <code>tg16</code></li> <li>Nintendo Entertainment System : <code>nes</code></li> <li>Nintendo Family Disk System : <code>fds</code></li> <li>Super Nintendo Entertainment System : <code>snes</code></li> <li>Sega GameGear : <code>gamegear</code></li> <li>Sega Master System : <code>sms</code> | <code>mastersystem</code></li> <li>Sega Megadrive : <code>megadriv</code> | <code>megadrive</code> | <code>genesis</code></li> <li>Sega SG-1000 : <code>sg1000</code></li> <li>SNK Neo-Geo Pocket : <code>ngp</code></li> <li>SNK Neo-Geo CD : <code>neocd</code></li> <li>ZX Spectrum : <code>spectrum</code> | <code>zxspectrum</code></li> </ul> <p>You can also emulate consoles by prefixing the name of the roms with <code>XXX_</code> and removing the <code>zip|7z</code> extension in the command line, or adding the <code>--subsystem XXX</code> argument, here is the list of available prefixes :</p> <ul> <li>CBS ColecoVision : <code>cv</code></li> <li>Fairchild ChannelF : <code>chf</code></li> <li>MSX 1 : <code>msx</code></li> <li>Nec PC-Engine : <code>pce</code></li> <li>Nec SuperGrafX : <code>sgx</code></li> <li>Nec TurboGrafx-16 : <code>tg</code></li> <li>Nintendo Entertainment System : <code>nes</code></li> <li>Nintendo Family Disk System : <code>fds</code></li> <li>Super Nintendo Entertainment System : <code>snes</code></li> <li>Sega GameGear : <code>gg</code></li> <li>Sega Master System : <code>sms</code></li> <li>Sega Megadrive : <code>md</code></li> <li>Sega SG-1000 : <code>sg1k</code></li> <li>SNK Neo-Geo Pocket : <code>ngp</code></li> <li>SNK Neo-Geo CD : <code>neocd</code></li> <li>ZX Spectrum : <code>spec</code></li> </ul>"},{"location":"library/fbneo/#bios","title":"BIOS","text":"<p>When loading a romset requiring a bios romset, it will be searched through 3 folders in that order :</p> <ul> <li>the folder of the current romset</li> <li>the <code>SYSTEM_DIRECTORY/fbneo/</code> folder</li> <li>the <code>SYSTEM_DIRECTORY/</code> folder</li> </ul> <p>The following bios romsets are required for some of the emulated arcade systems :</p> Romset name Note bubsys Bubble System BIOS cchip C-Chip Internal ROM decocass DECO Cassette System BIOS isgsm ISG Selection Master Type 2006 System BIOS midssio Midway SSIO Sound Board Internal ROM msx MSX1 System BIOS namcoc69 Namco C69 BIOS namcoc70 Namco C70 BIOS namcoc75 Namco C75 BIOS neogeo Neo Geo BIOS nmk004 NMK004 Internal ROM pgm PGM System BIOS skns Super Kaneko Nova System BIOS ym2608 YM2608 Internal ROM <p>The following bios romsets are required for some of the emulated non-arcade systems :</p> Romset name Note channelf Fairchild Channel F BIOS coleco ColecoVision System BIOS dsp1 SNES DSP-1 dsp1b SNES DSP-1B dsp2 SNES DSP-2 dsp3 SNES DSP-3 dsp4 SNES DSP-4 fdsbios FDS System BIOS neocdz Neo Geo CDZ System BIOS ngp NeoGeo Pocket BIOS spectrum ZX Spectrum BIOS spec128 ZX Spectrum 128 BIOS spec1282a ZX Spectrum 128 +2a BIOS st010 SNES Seta ST010 st011 SNES Seta ST011"},{"location":"library/fbneo/#samples","title":"Samples","text":"<p>Samples should be put under <code>SYSTEM_DIRECTORY/fbneo/samples</code>.</p> <p>Here is a list of samples currently in use :</p> Sample name Note blockade buckrog carnival cheekyms Not from MAME congo dkongjr dkong donpachi Not from MAME, optional, replace OG music by HQ music, requires dipsw. elim2 fantasy galaga gaplus gridlee heiankyo Not from MAME invaders journey mario mmagic natodef nitedrvr Not from MAME nsub paprium Not from MAME, megadrive, huge usage of disk space and ram (2.1GB) qbert radarscp Not from MAME rallyx reactor safarir sasuke seawolf sfz3mix Not from MAME, optional, replace OG music by HQ music, no dipsw. sharkatt spacefb spacfury stinger Not from MAME subroc3d thehand thief tr606drumkit Not from MAME turbo twotiger vanguard xevious zaxxon zektor zerohour"},{"location":"library/fbneo/#hiscores","title":"Hiscores","text":"<p>Copy hiscore.dat to <code>SYSTEM_DIRECTORY/fbneo/</code> and have the hiscore core option enabled.</p> <p>It doesn't guarantee hiscores will work for a specific game though, sometimes a driver could just be missing the necessary support code for this feature, or <code>hiscore.dat</code> might have a missing or broken entry for that romset. You can request support in the issue tracker. </p> <p>Runahead now works with hiscores, it'll require fairly recent version of the core AND RetroArch though (support was added after 1.10.3).</p>"},{"location":"library/fbneo/#input-lag-reduction","title":"Input lag reduction","text":"<p>This core widely supports the RetroArch input latency reduction features, with runahead single instance and preemptive frames being the recommended methods. </p> <p>Proper support for runahead second instance is not guaranteed because it doesn't exist in standalone FBNeo unlike the other methods.</p> <p>Note : There seems to be possible conflicts when rewind is active simultaneously, see https://github.com/libretro/RetroArch/issues/16374.</p>"},{"location":"library/fbneo/#retroachievements","title":"RetroAchievements","text":"<p>This core provides support for RetroAchievements, and some were added for popular games.</p>"},{"location":"library/fbneo/#dipswitches","title":"Dipswitches","text":"<p>They are either directly available from <code>Quick Menu &gt; Core Options</code>, or from the service menu after setting its shortcut in the <code>Diagnostic Input</code> core option.</p>"},{"location":"library/fbneo/#cheats","title":"Cheats","text":"<p>This core supports the RetroArch cheat feature with the <code>.cht</code> files. However it is recommended to use FBNeo's native cheat support instead :</p> <ul> <li>Download the pack of cheats from here</li> <li>Uncompress all of them into the <code>SYSTEM_DIRECTORY/fbneo/cheats/</code> folder (which is NOT the same folder as the RetroArch feature with the <code>.cht</code> files)</li> <li>Cheats will become available through core options (<code>Quick Menu &gt; Core Options</code>, NOT <code>Quick Menu &gt; Cheats</code>) afterward.</li> </ul>"},{"location":"library/fbneo/#multi-language","title":"Multi-language","text":"<p>This core supports multi-language feature.</p> <ul> <li>Multi-language is based on the front-end User UI language switching</li> <li>Simplified Chinese and Traditional Chinese have been added.</li> </ul>"},{"location":"library/fbneo/#frequently-asked-questions","title":"Frequently asked questions","text":""},{"location":"library/fbneo/#where-can-i-find-the-xxx-roms","title":"Where can i find the XXX roms ?","text":"<p>As far as we are concerned, you are supposed to dump your own games, so we can't help you with acquiring romsets.</p>"},{"location":"library/fbneo/#why-am-i-getting-a-white-screen","title":"Why am i getting a white screen ?","text":"<p>If present, the line <code>Verify the following romsets : &lt;romset&gt; &lt;parent&gt; &lt;bios&gt;</code> gives you the list of split romsets required by the game you are trying to run. This is mainly for reference since you might not be striving to use romsets in split format. The next few lines give you the list of files it couldn't find within those romsets.</p> <p>Otherwise, a <code>Romset is unknown</code> message means the romset couldn't be found by its filename in our database.</p> <p>Both problems result from not reading the arcade documentation. Exceptionally there might be false positives due to your files being unreadable for some reason (file corruption during transfer, file permission, damaged disk drive, ...). This is a rabbit hole and something you should only concern yourself after using clrmamepro to verify your romsets.</p> <p>Rarely you could get a \"Failed initializing driver\" message, this is something you should report here</p>"},{"location":"library/fbneo/#how-can-i-run-that-romhack-i-found","title":"How can i run that romhack i found ?","text":"<p>A lot of romhacks are supported natively, so your romhack might already be supported under a specific romset name.</p> <p>For the unsupported romhacks, there are 3 methods, but those romhacks are not allowed and must be disabled by toggling off the <code>Allow patched romsets</code> core option if you intend to use RetroAchievements : </p>"},{"location":"library/fbneo/#using-the-patched-folder","title":"Using the \"patched\" folder","text":"<ul> <li>Put the patched version of the romset into <code>SYSTEM_DIRECTORY/fbneo/patched</code>, this folder has special privileges allowing it to ignore crcs. Sizes and names still need to match the original romset though.</li> <li>Optional : you could strip the patched version from any file that don't differ from the original romset.</li> <li>Note : The romset you must launch is still the original non-patched romset (its content will be overriden at runtime by the content of the patched one).</li> </ul>"},{"location":"library/fbneo/#using-ips-patches","title":"Using IPS Patches","text":"<ul> <li>Put all IPS patch files (including: driver name directory/.dat|.ips) into the <code>SYSTEM_DIRECTORY/fbneo/ips/</code> folder.</li> <li>IPS Patch will become available through core options (<code>Quick Menu &gt; Core Options</code>) afterward. To apply them, you need to launch the game, enable them in core options, then use RetroArch's \"restart\" action.</li> <li>Note : To avoid competing with loaded games for startup privileges, IPS Patches is initially disabled by default.</li> </ul>"},{"location":"library/fbneo/#using-romdata","title":"Using RomData","text":"<ul> <li>Put all RomData files (including: driver name directory/**.dat) into the <code>SYSTEM_DIRECTORY/fbneo/romdata/</code> folder</li> <li>RomData will become available through core options (<code>Quick Menu &gt; Core Options</code>) afterward. To apply them, you need to launch the game, enable them in core options, then use RetroArch's \"restart\" action.</li> </ul>"},{"location":"library/fbneo/#how-can-i-run-that-unibios-i-bought-from-httpunibiosfreefr","title":"How can i run that unibios i bought from http://unibios.free.fr/ ?","text":"<p>Use the \"patched folder\" method from above.</p>"},{"location":"library/fbneo/#i-think-i-found-a-glitch-how-do-i-report-it","title":"I think i found a glitch, how do i report it ?","text":"<p>Write a report here with details on the issue and your platform. If the issue is not self-explanatory, it is important to provide a video of the PCB (meaning real hardware), any other material (remakes, other emulators, fpga, game rips, ...) will be ignored. If the issue doesn't happen right from the beginning, please try to provide a savestate from right before the issue.</p>"},{"location":"library/fbneo/#why-does-game-xxx-run-slowly","title":"Why does game XXX run slowly ?","text":"<p>Your hardware is probably too slow to run the game with your current settings. Try the following :</p> <ul> <li>Check if there is a speedhack dipswitch in the core options, set it to \"yes\".</li> <li>Try disabling rewind, runahead, pre-emptive frames, shaders, or any other retroarch setting known for increasing requirements.</li> <li>Try enabling \"Threaded Video\" in retroarch settings.</li> <li>Try changing \"Max swapchain images\" in retroarch settings (higher values gave a small performance benefit on my setup).</li> <li>Try setting a value for frameskip in core options (note : \"Fixed\" frameskip is recommended, the other methods don't seem to be nearly as reliable).</li> <li>Try lowering CPU clock in core options (note : some games don't support this feature).</li> <li>Try lowering audio settings in the core options.</li> <li>With m68k games (most boards from the late 80s and early 90s) on arm platforms, you can try enabling cyclone in core options, however this is really a last resort since some games won't work properly with this, furthermore it's causing savestates incompatibilities.</li> <li>If it is not enough, upgrade/overclock your hardware, or use another core.</li> </ul> <p>We won't accept requests for \"making the core faster\", as far as we are concerned this core has a good balance between accuracy &amp; speed, and for the most part will already run really well on low-end devices (rpi3, ...).</p>"},{"location":"library/fbneo/#why-does-game-xxx-have-choppy-sound","title":"Why does game XXX have choppy sound ?","text":"<p>Most likely for the same reason as above.</p>"},{"location":"library/fbneo/#why-does-game-xxx-run-faster-in-mame2003mame2010","title":"Why does game XXX run faster in MAME2003/MAME2010 ?","text":"<p>Overall, FBNeo is slower than old MAME version, because it's more accurate, meaning graphics, sound and gameplay are more likely to be faithful to the real machine. This libretro port also supports various features which are usually buggy or totally missing in MAME cores (runahead, netplay, rewind, retroachievements, ...), those features might require additional resources.</p>"},{"location":"library/fbneo/#how-do-i-launch-a-neogeo-cd-game","title":"How do i launch a neogeo CD game ?","text":"<p>There are several things to know :</p> <ul> <li>You need to follow the instructions about emulating consoles</li> <li>You need a copy of the <code>neocdz.zip</code> and <code>neogeo.zip</code> bioses</li> <li>The supported format is single file MODE1/2352 cue/bin (the format where there is one .cue file with one single .bin file). Use \"CDmage\" to convert your dump if needed. It must not be compressed</li> </ul> <p>You can convert your unsupported dumps by following this tutorial :</p> <ul> <li>Get CDMage 1.02.1 (beta) (freeware &amp; no ads). Don't get CDMage 1.01.5, it doesn't have the \"Save As\" function</li> <li>File &gt; Open &gt; select your dump (NB : always choose the .cue file if there is one)</li> <li>File &gt; Save As &gt; write the name of your new file</li> <li>Make sure you select MODE1/2352 in the second drop-down</li> <li>Press OK, wait for the process to finish (a few seconds on my computer), and it\u2019s done !</li> </ul>"},{"location":"library/fbneo/#why-cant-i-launch-killer-instinct-i-heard-its-supported","title":"Why can't i launch Killer instinct ? I heard it's supported.","text":"<p>That driver was disabled for now, it didn't meet our quality criteria.</p>"},{"location":"library/fbneo/#why-are-vertical-games-not-working-properly","title":"Why are vertical games not working properly ?","text":"<p>2 settings are required when running vertical games in FBNeo :</p> <ul> <li><code>Settings &gt; Core &gt; Allow rotation</code> must be enabled  (<code>video_allow_rotate = \"true\"</code> in <code>retroarch.cfg</code>)</li> <li><code>Settings &gt; Video &gt; Scaling &gt; Aspect Ratio</code> should be set to <code>Core Provided</code> (<code>aspect_ratio_index = \"22\"</code> in <code>retroarch.cfg</code>)</li> </ul> <p>If you are wondering why this isn't required for the MAME core, you can find more information about it here</p> <p>Additionally :</p> <ul> <li>If you are playing on a vertical screen, you'll want to use the <code>Vertical Mode</code> core option to rotate the display for your needs, it should also be possible to rotate display from <code>Settings &gt; Video &gt; Output &gt; Video Rotation</code> but that method might handle the aspect ratio incorrectly.</li> <li>If you are using a bezel pack, make sure it's compatible with FBNeo (apparently, some were written specifically to work with MAME's internal rotation) and to follow its official instructions. In some case it seems enabling <code>Settings &gt; On-Screen Display &gt; On-Screen Overlay &gt; Auto-Scale Overlay</code> (<code>input_overlay_auto_scale = \"true\"</code> in <code>retroarch.cfg</code>) can help.</li> </ul>"},{"location":"library/fbneo/#why-is-the-music-high-pitched-too-fast-andor-different-from-upstream","title":"Why is the music high-pitched, too fast and/or different from upstream ?","text":"<p>For better or worse, it was decided to use different default audio settings from standalone in the libretro port.  By default standalone has 44100 samplerate and both interpolations off, and that's what you should set in core options if you want the same audio output.</p> <p>You might also want to make sure you are running the game at the correct speed, most crt games don't run at 60Hz and if you want the proper refresh rate to be emulated you'll need to make sure <code>Force 60Hz</code> isn't enabled in core options and <code>Settings &gt; Video &gt; Synchronization &gt; Sync to Exact Content Framerate</code> is enabled (<code>vrr_runloop_enable = \"true\"</code> in <code>retroarch.cfg</code>). Please note that your screen might not handle well the correct refresh rate, in which case you'll have to make a choice between smoothness and correct refresh rate.</p>"},{"location":"library/fbneo/#why-do-i-get-a-black-screen-andor-cant-i-change-bios-in-neogeo-games","title":"Why do i get a black screen and/or can't i change bios in neogeo games ?","text":"<p>The <code>neogeo</code> romset is a collection of neogeo bioses, and most of them are considered as optional so they won't cause a \"white screen\" when missing. Only <code>MVS Asia/Europe ver. 6 (1 slot)</code> is mandatory.</p> <p>However, having an incomplete romset can still cause various issues :</p> <ul> <li>If you are using the \"Use bios set in BIOS dipswitch\" as \"Neo-Geo mode\" and the bios set in dipswitches is missing, you'll have a black screen where you can hear some sound playing.</li> <li>If you are using any of the other choices available in \"Neo-Geo mode\" and a corresponding bios can't be found, the core will fallback to one of the available bioses.</li> </ul> <p>Obviously, none of this is supposed to ever happen if you followed the instructions about romsets as you are supposed to.</p>"},{"location":"library/fbneo/#why-do-i-get-some-weird-transparent-effects-in-game-xxx","title":"Why do i get some weird transparent effects in game XXX ?","text":"<p>You probably installed some <code>.bld</code> files in the <code>SYSTEM_DIRECTORY/fbneo/blend</code> folder. Those files are meant to create such effects but some of them are very broken. I'd recommend removing them.</p>"},{"location":"library/fbneo/#why-is-my-favorite-combo-button-not-available","title":"Why is my favorite combo button not available ?","text":"<p>Libretro doesn't allow cores to declare more buttons and map them later, meaning the number of different \"actions\" available is limited by the number of buttons available on the retropad model.</p> <p>Removing that limitation was asked in https://github.com/libretro/RetroArch/issues/6718, then again in https://github.com/libretro/RetroArch/issues/11273, it's not possible to add more macros as long as this limitation exists. If you want more macros, go support those issues, preferably the later.</p> <p>The currently available neogeo combos were decided in https://github.com/libretro/FBNeo/issues/51, they won't be replaced, but they might totally disappear if users keep complaining about them.</p> <p>Note that there was also a request to add a retroarch macro mapper in https://github.com/libretro/RetroArch/issues/8209.</p> <p>There is also a PR currently opened to implement this : https://github.com/libretro/RetroArch/pull/16035.</p>"},{"location":"library/fbneo/#why-cant-i-enable-hardcore-mode-in-retroachievements","title":"Why can't i enable hardcore mode in RetroAchievements ?","text":"<p>This feature doesn't accept achievements made with any kind of cheat, meaning unibios, cheats, and patched romsets must be disabled in core options.</p>"},{"location":"library/fbneo/#why-do-i-need-to-re-enable-cheats-every-time-i-boot-a-game","title":"Why do i need to re-enable cheats every time i boot a game ?","text":"<p>It is common for arcade machines to execute self-tests at boot, and in many cases they won't boot if unexpected values have been injected into their memory, which is exactly what cheats do. Disabling cheats at boot is a safety mecanism to prevent those boot issues.</p>"},{"location":"library/fbneo/#why-do-the-self-tests-at-boot-fail","title":"Why do the self-tests at boot fail ?","text":"<p>Sometimes the NVRAM/EEPROM saved on your disk gets corrupted for some reason, Konami games are especially known for getting this issue somewhat frequently. NVRAM/EEPROM are saved in the <code>SAVEFILES_DIRECTORY/fbneo</code> folder, and you can get around this issue by finding the files corresponding to your game and deleting them.</p>"},{"location":"library/fbneo/#should-i-use-retroarchs-analog-to-digital-feature","title":"Should i use retroarch's analog-to-digital feature ?","text":"<p>You should NEVER use that feature with this core, it already converts analog to digital and digital to analog internally. Exceptionally it might not do that conversion because each of those controls are already doing their own thing.</p>"},{"location":"library/fbneo/#where-is-system_directory","title":"Where is SYSTEM_DIRECTORY ?","text":"<p>Open your <code>retroarch.cfg</code> file and look for <code>system_directory</code>, or check <code>Settings &gt; Directory &gt; System/BIOS</code>.</p>"},{"location":"library/fbneo/#external-links","title":"External Links","text":"<ul> <li>Official FBNeo forum</li> <li>Official FBNeo github repository</li> <li>Libretro FBNeo github repository</li> <li>[GUIDE] Setting up RetroArch playlists with FBNeo</li> <li>Gameplay Videos</li> </ul>"},{"location":"library/fceumm/","title":"Nintendo - NES / Famicom (FCEUmm)","text":""},{"location":"library/fceumm/#background","title":"Background","text":"<p>FCEU \"mappers modified\" is an unofficial build of FCEU Ultra by CaH4e3, which supports a lot of new mappers including some obscure mappers such as one for unlicensed NES ROM's.</p>"},{"location":"library/fceumm/#authorlicense","title":"Author/License","text":"<p>The FCEUmm core has been authored by</p> <ul> <li>FCEU Team</li> <li>CaH4e3</li> </ul> <p>The FCEUmm core is licensed under</p> <ul> <li>GPLv2</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/fceumm/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the FCEUmm core have the following file extensions:</p> <ul> <li>.fds</li> <li>.nes</li> <li>.unif</li> <li>.unf</li> </ul>"},{"location":"library/fceumm/#databases","title":"Databases","text":"<p>RetroArch database(s) that are associated with the FCEUmm core:</p> <ul> <li>Nintendo - Nintendo Entertainment System</li> <li>Nintendo - Family Computer Disk System</li> </ul>"},{"location":"library/fceumm/#bios","title":"BIOS","text":"<p>Required or optional firmware files go in the frontend's system directory.</p> Filename Description md5sum disksys.rom Family Computer Disk System BIOS - Required for Famicom Disk System emulation ca30b50f880eb660a320674ed365ef7a gamegenie.nes Game Genie add-on cartridge - Required for Game Genei Add-on emulation 7f98d77d7a094ad7d069b74bd553ec98"},{"location":"library/fceumm/#features","title":"Features","text":"<p>Frontend-level settings or features that the FCEUmm core respects.</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 Memory Monitoring (achievements) \u2714 RetroArch Cheats \u2714 Native Cheats \u2714 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/fceumm/#directories","title":"Directories","text":"<p>The FCEUmm core's internal core name is 'FCEUmm'</p> <p>The FCEUmm core saves/loads to/from these directories.</p> <p>Frontend's Save directory</p> File Description *.srm Cartridge battery save <p>Frontend's State directory</p> File Description *.state# State <p>Frontend's System directory</p> File Description nes.pal Custom palette (64 triplets)"},{"location":"library/fceumm/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The FCEUmm core's core provided FPS is NTSC 60.10, PAL/Dendy 50.0</li> <li>The FCEUmm core's core provided sample rate is 48000 Hz</li> <li>The FCEUmm core's base width is 256 (602 when using NTSC Filters)</li> <li>The FCEUmm core's base height is 240</li> <li>The FCEUmm core's max width is 256 (602 when using NTSC Filters)</li> <li>The FCEUmm core's max height is 240</li> <li>The FCEUmm core's core provided aspect ratio is 4:3 DAR or 8:7 PAR</li> </ul>"},{"location":"library/fceumm/#custom-color-palettes","title":"Custom color palettes","text":"<p>To use custom color palettes in the FCEUmm core, the 'Color Palette' core option must be set to custom and the custom color palette file you want to use must be in RetroArch's system directory.</p> <p>Make sure the custom palette file is named 'nes.pal'</p> <p>Custom color palettes for the NES can be generated with either of these tools.</p> <ul> <li>Bisqwit's NTSC NES palette generator</li> <li>Drag's NTSC NES palette generator</li> </ul>"},{"location":"library/fceumm/#core-options","title":"Core options","text":"<p>The FCEUmm core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded.</p> <p>Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch.</p> <ul> <li> <p>Region [fceumm_region] (Auto|NTSC|PAL|Dendy)</p> <p>Force core to use NTSC, PAL or Dendy system audio / video timings.</p> </li> <li> <p>Preferred aspect ratio [fceumm_aspect] (8:7 PAR|4:3)</p> <p>Choose the preferred aspect ratio. RetroArch's aspect ratio must be set to Core provided in the Video settings.</p> </li> </ul> Preferred aspect ratio - 8:7 PAR <p></p> Preferred aspect ratio - 4:3 <p></p> <ul> <li> <p>Color Palette [fceumm_palette] (default|asqrealc|nintendo-vc|rgb|yuv-v3|unsaturated-final|sony-cxa2025as-us|pal|bmf-final2|bmf-final3|smooth-fbx|composite-direct-fbx|pvm-style-d93-fbx|ntsc-hardware-fbx|nes-classic-fbx-fs|nescap|wavebeam|raw|custom)</p> <p>Choose which color palette is going to be used. The raw palette can used in combination with the nes-decoder shader to give colors based off on Bisqwit's NES palette generator and applies either an FCC color conversion matrix or specific Sony US matrix.</p> </li> </ul> <p>Disclaimer</p> <p>These 'Color Palette core option screenshots have been taken with the 'Use NTSC Palette' core option set to Off.</p> Color Palette - default <p></p> Color Palette - asqrealc <p></p> Color Palette - nintendo-vc <p></p> Color Palette - rgb <p></p> Color Palette - yuv-v3 <p></p> Color Palette - unsaturated-final <p></p> Color Palette - sony-cxa2025as-us <p></p> Color Palette - pal <p></p> Color Palette - bmf-final2 <p></p> Color Palette - bmf-final3 <p></p> Color Palette - smooth-fbx <p></p> Color Palette - composite-direct-fbx <p></p> Color Palette - pvm-style-d93-fbx <p></p> Color Palette - ntsc-hardware-fbx <p></p> Color Palette - nes-classic-fbx-fs <p></p> Color Palette - nescap <p></p> Color Palette - wavebeam <p></p> Color Palette - raw <p></p> <ul> <li> <p>Allow Opposing Directions [fceumm_up_down_allowed] (disabled|enabled)</p> <p>Enabling this will allow pressing / quickly alternating / holding both left and right (or up and down in some games) directions at the same time.</p> <p>This may cause movement based glitches to occur in certain games.</p> <p>It's best to keep this core option disabled.</p> </li> <li> <p>Crop Overscan (Horizontal) [fceumm_overscan_h] (disabled|enabled)</p> <p>Crop out (horizontally) the potentially random glitchy video output that would have been hidden by the bezel around the edge of a standard-definition television screen.</p> </li> </ul> Crop Overscan (Horiontal) - Off <p></p> Crop Overscan (Horizontal) - On <p></p> <ul> <li> <p>Crop Overscan (Vertical) [fceumm_overscan_v] (enabled|disabled)</p> <p>Crop out (vertically) the potentially random glitchy video output that would have been hidden by the bezel around the edge of a standard-definition television screen.</p> </li> </ul> Crop Overscan (Vertical) - On <p></p> Crop Overscan (Vertical) - Off <p></p> <ul> <li> <p>No Sprite Limit [fceumm_nospritelimit] (disabled|enabled)</p> <p>Removes 8-sprites-per-scanline hardware limit.</p> </li> <li> <p>Sound Volume [fceumm_sndvolume] (0|1|2|3|4|5|6|7|8|9|10)</p> <p>Self-explanatory.</p> </li> <li> <p>Sound Quality [fceumm_sndquality] (Low|High|Very High)</p> <p>Enables high/higher sound quality for games using expansion audio (MMC5, VRC6, VRC7, Namco, Sunsoft). Use Low for slower devices.</p> </li> <li> <p>Swap Duty Cycles [fceumm_swapduty] (disabled|enabled)</p> <p>Replicates the sound of some famiclones that have duty cycles swapped for square channels. A quick sound comparison is in Contra's sound effect when shooting with normal bullets.</p> </li> <li> <p>Turbo Enable [fceumm_turbo_enable] (None|Player 1|Player 2|Both)</p> <p>Enable the use of the Turbo B and Turbo A buttons.</p> </li> <li> <p>Turbo Delay (in frames) [fceumm_turbo_delay] (3|5|10|15|30|60|1|2)</p> <p>The number of frames between consecutive button presses when the Turbo B or Turbo A buttons are held down.</p> </li> <li> <p>Zapper Mode [fceumm_zapper_mode] (lightgun|touchscreen|mouse)</p> <p>Pointer allows the Zapper Device Type to be used for touch-devices, but still can be used with regular mouse. Pointer and Mouse mode movement behaves differently with different input driver so user can choose which movement feels natural to them.</p> </li> <li> <p>Show Crosshair [fceumm_show_crosshair] (enabled|disabled)</p> <p>Show the crosshair for the Zapper device type.</p> </li> </ul> Show Crosshair - On <p></p> Show Crosshair - Off <p></p> <ul> <li> <p>Overclocking [fceumm_overclocking] (disabled|2x-Postrender|2x-VBlank)</p> <p>Overclocks the NES using PPU method to minimize ingame slowdowns of some games. Contra Force needs VBlank mode (stage 3 slowdowns). Choose which ever minimizes slowdowns without image distortion.</p> </li> <li> <p>RAM power up state (Restart) [fceumm_ramstate] (**FF**|00|random)</p> <p>Choose RAM startup during power up. Fill the ram with either $FF, $00 or random. Some games rely on initial ram values for random generator as an example.</p> <p>Some unlicensed carts and rom hacks prefers $00 or else rom will not boot up or causes graphics glitches or any other problems.</p> </li> <li> <p>NTSC Filter [fceumm_ntsc_filter] (disabled|composite|svideo|rgb|monochrome)</p> <p>Enable blargg NTSC filters.</p> </li> </ul> <p>Disclaimer</p> <p>These 'NTSC Filter' core option screenshots have been taken with the 'Color Palette' core option set to smooth-fbx.</p> NTSC Filter - Off <p></p> NTSC Filter - composite (color bleeding + artifacts) <p></p> NTSC Filter - svideo (color bleeding only) <p></p> NTSC Filter - rgb (crisp image) <p></p> NTSC Filter - monochrome (desaturated + artifacts) <p></p> <ul> <li> <p>Show Advanced System Options [fceumm_show_adv_system_options] (disabled|enabled)</p> <p>Show advanced system options and tweaks.</p> </li> <li> <p>Show Advanced Sound Options [fceumm_show_adv_sound_options] (disabled|enabled)</p> <p>Show advanced sound controls and tweaks.</p> </li> </ul>"},{"location":"library/fceumm/#controllers","title":"Controllers","text":"<p>The FCEUmm core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/fceumm/#user-1-device-types","title":"User 1 device types","text":"<ul> <li>None - Input disabled.</li> <li>Auto - Joypad - Based off the loaded game's crc, the core will automatically select a regular controller (NES or Famicom) for User 1.</li> <li>Gamepad - Joypad - Manually selects a regular controller (NES or Famicom) for User 1.</li> <li>Zapper - Mouse - Manually selects a Zapper light gun (NES or Famicom) for User 1.</li> </ul> <p>NOTE 1: Zapper connected to user 1 is only required on VS Unisystem games. You will hear a loud alarm when a game requires one and no zapped device is selected or the game's CRC fails to match existing database for autodetection.</p>"},{"location":"library/fceumm/#user-2-device-types","title":"User 2 device types","text":"<ul> <li>None - Input disabled.</li> <li>Auto - Joypad - Based off the loaded game's crc, the core will automatically select a regular controller (NES or Famicom) or a Zapper light gun (NES or Famicom) or a Arkanoid Paddle (NES only) for User 2.</li> <li>Gamepad - Joypad - Manually selects a regular controller (NES or Famicom) for User 2.</li> <li>Arkanoid - Mouse - Manually selects a Arkanoid Paddle (NES only) for User 2.</li> <li>Zapper - Mouse - Manually selects a Zapper light gun (NES or Famicom) for User 2.</li> </ul> <p>NOTE 2: Zapper connected to user 2 is required for most cases. See note 1 above.</p>"},{"location":"library/fceumm/#user-3-and-4-device-types-used-for-multitap","title":"User 3 and 4 device types - used for multitap","text":"<ul> <li>None - Input disabled.</li> <li>Auto - Joypad - Based off the loaded game's crc, the core will automatically select a regular controller (NES or Famicom) for User 3 and/or 4 in multitap games.</li> <li>Gamepad - Joypad - Manually selects a regular controller (NES or Famicom) for User \u00be.</li> </ul>"},{"location":"library/fceumm/#other-controllers-user-5-device-type","title":"Other controllers (User 5 device type)","text":"<p>The FCEUmm core will also auto select the following controllers for the Famicom based off the loaded game's crc.</p> <ul> <li>Arkanoid Paddle (Famicom) - Mouse</li> <li>Bandai Hyper Shot Gun (Famicom) - Mouse</li> <li>Oeka Kids Tablet (Famicom) - Mouse</li> <li>4-Player Adaptor - force enable multitap mode</li> </ul>"},{"location":"library/fceumm/#multitap-support","title":"Multitap support","text":"<p>The FCEUmm core supports up to 4 players in multitap games for the NES and Famicom, games with multitap usage are detected by their crc. Multitap can be manually enabled if selecting 4-Player Adaptor in User 5 Device type.</p>"},{"location":"library/fceumm/#controller-tables","title":"Controller tables","text":""},{"location":"library/fceumm/#joypad","title":"Joypad","text":"<p>Warning</p> <p>In order to use the Turbo A and Turbo B buttons, the 'Turbo Enable' core option must be set to On.</p> User 1 Remap descriptors RetroPad Inputs B Turbo B Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A Turbo A (FDS) Disk Side Change (FDS) Insert/Eject Disk (VSSystem) Insert Coin User 2 - 4 Remap descriptors RetroPad Inputs B Turbo B Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A Turbo A"},{"location":"library/fceumm/#mouse","title":"Mouse","text":"RetroMouse Inputs Zapper Arkanoid Oeka Kids Tablet Bandai Hyper Shot Gun  or  Zapper Crosshair Arkanoid Movement Oeka Kids Tablet Cursor Bandai Hyper Shot Gun Crosshair  or  Zapper Trigger Arkanoid Fire Oeka Kids Tablet Touch Bandai Hyper Shot Gun Trigger <ul> <li>When the 'Zapper Mode' core option is set to lightgun, the 'Zapper' device type can be controlled with lightgun inputs (such as Wii remote).</li> <li>When the 'Zapper Mode' core option is set to touchscreen, the 'Zapper' device type can be controlled with touch inputs.</li> <li>When the 'Zapper Mode' core option is set to mouse, the 'Zapper' device type can be controlled with mouse inputs.</li> </ul>"},{"location":"library/fceumm/#compatibility","title":"Compatibility","text":"Game Issue Skull &amp; Crossbones Graphical glitches and screen shaking when in 2-player mode."},{"location":"library/fceumm/#external-links","title":"External Links","text":"<ul> <li>Official FCEUmm Website</li> <li>Official FCEUmm Sourceforge Repository</li> <li>Libretro FCEUmm Core info file</li> <li>Libretro FCEUmm Github Repository</li> <li>Report Libretro FCEUmm Core Issues Here</li> <li>Gameplay Videos</li> </ul>"},{"location":"library/fceumm/#other-links","title":"Other Links","text":"<ul> <li>NES Header Database - Verify, remove or add headers for known No-Intro roms.</li> </ul>"},{"location":"library/fceumm/#see-also","title":"See also","text":""},{"location":"library/fceumm/#nintendo-family-computer-disk-system","title":"Nintendo - Family Computer Disk System","text":"<ul> <li>Nintendo - NES / Famicom (Mesen)</li> <li>Nintendo - NES / Famicom (Nestopia)</li> </ul>"},{"location":"library/fceumm/#nintendo-nintendo-entertainment-system","title":"Nintendo - Nintendo Entertainment System","text":"<ul> <li>Nintendo - NES / Famicom (bnes)</li> <li>Nintendo - NES / Famicom (Emux NES)</li> <li>Nintendo - NES / Famicom (Mesen)</li> <li>Nintendo - NES / Famicom (Nestopia)</li> <li>Nintendo - NES / Famicom (QuickNES)</li> </ul>"},{"location":"library/ffmpeg/","title":"FFmpeg","text":""},{"location":"library/ffmpeg/#background","title":"Background","text":"<p>Video/music player implemented in libretro. FFmpeg can play video and audio files of different formats in RetroArch. If a video file has more than one audio input, FFmpeg can switch between them. If there is a hard coded subtitle file in the video file, FFmpeg can switch between them in the same way.</p>"},{"location":"library/ffmpeg/#authorlicense","title":"Author/License","text":"<p>The FFmpeg core has been authored by</p> <ul> <li>Fabrice Bellard</li> <li>FFmpeg team</li> </ul> <p>The FFmpeg core is licensed under</p> <ul> <li>LGPLv2, GPLv2</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/ffmpeg/#experience","title":"Experience","text":"<p>Important</p> <p>RetroArch and LibRetro do not share any copyrighted content. RetroArch does not download any video or audio files. It does not stream content you have on different platforms.</p>"},{"location":"library/ffmpeg/#watching-movies-with-subtitles","title":"Watching Movies with Subtitles","text":"<p>You can open video files in the following formats(see: Extensions). If your video file in these formats has a subtitle file encoded with .SSA type, these subtitle files will appear automatically. External subtitles are currently not supported. The video files you have played will be added to the Videos section in the main menu.</p> Turkish subtitles encoded 95's Ghost in the Shell <p></p>"},{"location":"library/ffmpeg/#setup","title":"Setup","text":"<p>Watch the video below for details:</p>"},{"location":"library/ffmpeg/#listening-to-music","title":"Listening to Music","text":"<p>You can open audio files in the following formats (see: Extensions). In the example below, you can see and listen to an mp3 file running at the lowest settings. File quality will affect sound quality. The audio files you have played will be added to the Music section in the main menu.</p> Example <p>  Your browser does not support the video tag. </p>"},{"location":"library/ffmpeg/#setup_1","title":"Setup","text":"<p>Watch the video below for details:</p>"},{"location":"library/ffmpeg/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the FFmpeg core have the following file extensions:</p> <ul> <li>.mkv</li> <li>.avi</li> <li>.f4v</li> <li>.f4f</li> <li>.3gp</li> <li>.ogm</li> <li>.flv</li> <li>.mp4</li> <li>.mp3</li> <li>.flac</li> <li>.ogg</li> <li>.m4a</li> <li>.webm</li> <li>.3g2</li> <li>.mov</li> <li>.wmv</li> <li>.mpg</li> <li>.mpeg</li> <li>.vob</li> <li>.asf</li> <li>.divx</li> <li>.m2p</li> <li>.m2ts</li> <li>.ps</li> <li>.ts</li> <li>.mxf</li> <li>.wma</li> <li>.wav</li> </ul>"},{"location":"library/ffmpeg/#features","title":"Features","text":"<p>Frontend-level settings or features that the FFmpeg core respects.</p> Feature Supported Restart \u2714 Screenshots \u2714 Shaders \u2714 Saves \u2715 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2714 Memory Monitoring (achievements) \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/ffmpeg/#directories","title":"Directories","text":"<p>The FFmpeg core's directory name is 'FFmpeg'</p>"},{"location":"library/ffmpeg/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The FFmpeg core's core provided FPS is dependant on the loaded media.</li> <li>The FFmpeg core's core provided sample rate is dependant on the loaded media.</li> <li>The FFmpeg core's core provided aspect ratio is dependant on the loaded media.</li> </ul>"},{"location":"library/ffmpeg/#shaders","title":"Shaders","text":"<p>Shaders can improve your viewing quality as well as deliver the excitement of the 80s or 90s. In the example below you can see how a VHS shader can affect view quality. You can also provide more innovative watching possibilities by stacking shaders on top of each other.</p> VHSPro Shader <p></p>"},{"location":"library/ffmpeg/#core-options","title":"Core options","text":"<p>The FFmpeg core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded.</p> <p>Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch.</p> <ul> <li> <p>Temporal Interpolation [ffmpeg_temporal_interp] (Off/On)</p> <p>'Fake\u2019 a higher framerate by using motion blur.</p> </li> <li> <p>FFT Resolution [ffmpeg_fft_resolution] (1280x720/1920x1080/2560x1440/3840x2160/640x360/320x180)</p> <p>Modify the resolution of the music visualizer.</p> </li> </ul> FFT Resolution - 320x180 <p></p> FFT Resolution - 3840x2160 <p></p> <ul> <li> <p>FFT Multisample [ffmpeg_fft_multisample] (1x/2x/4x)</p> <p>Modify the antialiasing of the music visualizer.</p> </li> <li> <p>Colorspace [ffmpeg_color_space] (auto/BT.70/BT.601/FCC/SMPTE240M)</p> <p>Choose colorspaces from different broadcast regions/standards.</p> </li> </ul> Colorspace <p> </p>"},{"location":"library/ffmpeg/#controllers","title":"Controllers","text":"<p>The FFmpeg core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/ffmpeg/#user-1-device-types","title":"User 1 device types","text":"<ul> <li>None - Doesn't disable input.</li> <li>RetroPad - Joypad</li> <li>RetroPad w/Analog - Joypad - There's no reason to switch to this.</li> </ul>"},{"location":"library/ffmpeg/#other-controllers","title":"Other controllers","text":"<ul> <li>Mouse - The FFmpeg core allows Wheel Up and Wheel Down mouse inputs for seeking. This is always active, completely separate from the device types in the Controls menu and cannot be manually selected.</li> </ul>"},{"location":"library/ffmpeg/#controller-tables","title":"Controller tables","text":""},{"location":"library/ffmpeg/#joypad","title":"Joypad","text":"User 1 Remap descriptors RetroPad Inputs Seek +60 seconds Seek -60 seconds Seek -10 seconds Seek +10 seconds Cycle Audio Track Cycle Subtitle Track"},{"location":"library/ffmpeg/#mouse","title":"Mouse","text":"RetroMouse Inputs FFmpeg Core Inputs Wheel Up Seek +60 seconds Wheel Down Seek -60 seconds"},{"location":"library/ffmpeg/#external-links","title":"External Links","text":"<ul> <li>Official FFmpeg Website</li> <li>Official FFmpeg Repositories</li> <li>Libretro FFmpeg Core info file</li> <li>Internal Libretro FFmpeg Github Repository</li> <li>Buildbot Libretro FFmpeg Github repository</li> <li>Report Libretro FFmpeg Core Issues Here</li> <li>Video Setup</li> <li>Audio Setup</li> </ul>"},{"location":"library/flycast/","title":"Sega - Dreamcast/NAOMI (Flycast)","text":""},{"location":"library/flycast/#background","title":"Background","text":"<p>Flycast is a multi-platform Sega Dreamcast, NAOMI, Atomiswave and System SP emulator. The Flycast core has been authored by</p> <ul> <li>flyinghead</li> </ul> <p>The Flycast core is licensed under</p> <ul> <li>GPLv2</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/flycast/#how-to-play-naomi-games","title":"How to play NAOMI Games","text":"<ol> <li> <p>Run NAOMI games stored in MAME format zip files by following the same process as standard Dreamcast games</p> </li> <li> <p>Run NAOMI GD-ROM format games stored in MAME zip + chd format by running the zip file through RetroArch. The zip file should be stored in your roms folder with the chd file in a subdirectory of the roms folder named after the mame ID.</p> </li> </ol> <p>Example (MAME ID=ikaruga) - [ROM FOLDER]/ikaruga.zip - [ROM FOLDER]/ikaruga/gdl-0010.chd</p>"},{"location":"library/flycast/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the flycast core have the following file extensions:</p> <ul> <li>.cdi</li> <li>.gdi</li> <li>.chd</li> <li>.cue</li> <li>.bin</li> <li>.elf</li> <li>.zip</li> <li>.7z</li> <li>.lst</li> <li>.dat</li> <li>.m3u</li> </ul>"},{"location":"library/flycast/#databases","title":"Databases","text":"<p>RetroArch database(s) that are associated with the flycast core:</p> <ul> <li>Sega - Dreamcast</li> </ul>"},{"location":"library/flycast/#bios","title":"BIOS","text":"<p>Required or optional firmware files go in RetroArch's system directory.</p> Filename Description md5sum dc/dc_boot.bin Dreamcast BIOS - Optional e10c53c2f8b90bab96ead2d368858623 dc/naomi.zip NAOMI BIOS from MAME - Optional dc/hod2bios.zip NAOMI The House of the Dead 2 BIOS from MAME - Optional dc/f355dlx.zip NAOMI Ferrari F355 Challenge (deluxe) BIOS from MAME - Optional dc/f355bios.zip NAOMI Ferrari F355 Challenge (twin/deluxe) BIOS from MAME - Optional dc/airlbios.zip NAOMI Airline Pilots (deluxe) BIOS from MAME - Optional dc/awbios.zip Atomiswave BIOS from MAME - Optional dc/naomi2.zip NAOMI 2 BIOS from MAME - Optional dc/segasp.zip System SP BIOS from MAME - Optional <p>Attention</p> <p>All bios files need to be in a directory named 'dc' in RetroArch's system directory.</p>"},{"location":"library/flycast/#features","title":"Features","text":"Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2715 Netplay \u2715 Core Options \u2714 Memory Monitoring (achievements) \u2714 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2714 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2714 Username \u2715 Crop Overscan (in RetroArch's Video settings) \u2715"},{"location":"library/flycast/#directories","title":"Directories","text":"<p>The FlyCast core's directory name is 'Flycast'</p> <p>The FlyCast core creates these files in RetroArch's system directory.</p> <pre><code>dc/\n\u251c\u2500\u2500 vmu_save_A1.bin\n\u251c\u2500\u2500 vmu_save_B1.bin\n\u251c\u2500\u2500 vmu_save_C1.bin\n\u251c\u2500\u2500 vmu_save_D1.bin\n\u2514\u2500\u2500 dc_nvmem.bin\n</code></pre>"},{"location":"library/flycast/#core-provided-aspect-ratio","title":"Core provided aspect ratio","text":"<p>FlyCast's core provided aspect ratio is 4/3.</p>"},{"location":"library/flycast/#rumble","title":"Rumble","text":"<p>Rumble only works when the Joypad being used has rumble functionality and the Joypad input driver being used has rumble function implementation (e.g. Xinput).</p>"},{"location":"library/flycast/#core-options","title":"Core options","text":"<p>The FlyCast core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch.</p>"},{"location":"library/flycast/#system","title":"System","text":"<p>Configure region, language, BIOS and base hardware settings.</p> <p>Region [flycast_region] (Default|Japan|USA|Europe)</p> <p>Language [flycast_language] (Default|Japanese|English|German|French|Spanish|Italian)</p> <p>Changes the language used by the BIOS and by any games that contain multiple languages.</p> <p>HLE BIOS [flycast_hle_bios] (disabled|enabled)</p> <p>Force use of high-level emulation BIOS.</p> <p>Boot to BIOS [flycast_boot_to_bios] (disabled|enabled)</p> <p>Boot directly into the Dreamcast BIOS menu.</p> <p>Enable DSP [flycast_enable_dsp] (enabled|disabled)</p> <p>Enable emulation of the Dreamcast's audio DSP (digital signal processor). Improves the accuracy of generated sound, but increases performance requirements.</p> <p>Force Windows CE Mode [flycast_force_windows_ce_modee] (disabled|enabled)</p> <p>Enable full MMU (Memory Management Unit) emulation and other settings for Windows CE games.</p>"},{"location":"library/flycast/#video","title":"Video","text":"<p>Configure visual buffers &amp; effects, display parameters, framerate/-skip and rendering/texture parameters.</p> <p>Internal resolution (restart) [flycast_internal_resolution] (640x480|1280x960|1920x1440|2560x1920|3200x2400|3840x2880| 4480x3360|5120x3840|5760x4320|6400x4800|7040x5280|7680x5760|8320x6240|8960x6720| 9600x7200|10240x7680|10880x8160|11520x8640|12160x9120|12800x9600)</p> <p>Modify rendering resolution.</p> Internal resolution - 640x480 <p></p> Internal resolution - 1920x1440 <p> </p> <p>Cable Type [flycast_cable_type] (TV (Composite)<sup>2</sup>|TV (RGB)|VGA(RGB))</p> <p>The output signal type. 'TV (Composite)' is the most widely supported.  </p> <p>Broadcast Standard [flycast_brodcast] (Default|PAL-M (Brazil)|PAL-N (Argentina, Paraguay, Uruguay)|NTSC|PAL (World))</p> <p>Screen Orientation [flycast_screen_orientation] (Horizontal|Vertical)   </p> <p>Alpha Sorting [flycast_alpha_sorting] (Per-Strip (fast, least accurate)|Per-Triangle (normal)|\"Per-Pixel (accurate, but slowest)<sup>1</sup>)</p> <p>Enable RTT (Render To Texture) Buffer (Off|On)</p> <p>Mipmapping (Off|On)</p> <p>Volume modifier (On|off)</p> <p>A GPU feature that is typically used by games to draw shadows of objects. You should typically leave this on - performance impact should be minimal to negligible.</p> <p>Anisotropic Filtering [flycast_anistropic_filtering] (4|2|8|16)</p> <p>Enhance the quality of textures on surfaces that are at oblique viewing angles with respect to the camera.</p> <p>Delay Frame Swapping [flycast_delay_frame_swapping] (disabled|enabled)</p> <p>Useful to avoid flashing screens or glitchy videos. Not recommended on slow platforms. Note: This setting only applies when 'Threaded Rendering' is enabled.</p> <p>PowerVR2 Post-processing Filter [flycast_pvr2_filtering] (disabled|enabled)</p> <p>Post-process the rendered image to simulate effects specific to the PowerVR2 GPU and analog video signals.</p>"},{"location":"library/flycast/#performance","title":"Performance","text":"<p>Configure threaded rendering, integer division optimisations and frame skip settings</p> <p>Threaded Rendering (Restart Required) [flycast_threaded_rendering] (enabled|disabled)</p> <p>Runs the GPU and CPU on different threads. Highly recommended.</p> <p>Auto Skip Frame [flycast_skip_frame] (disabled|enabled)</p> <p>Automatically skip frames when the emulator is running slow. Note: This setting only applies when 'Threaded Rendering' is enabled.</p> <p>Frame Skipping [flycast_frame_skipping] (disabled|1|2|3|4|5|6)</p> <p>Sets the number of frames to skip between each displayed frame.</p> <p>Widescreen Cheats (Restart Required) [flycast_widescreen_cheats] (Off|On)</p> <p>Activates cheats that allow certain games to display in widescreen format.</p> <p>Widescreen Hack [flycast_widescreen_hack] (Off|On)</p> <p>Draw geometry outside of the normal 4:3 aspect ratio. May produce graphical glitches in the revealed areas.</p> <p>GD-ROM Fast Loading (inaccurate) [flycast_gdrom_fast_loading] (On|Off)</p> <p>Speeds up GD-ROM loading.</p> <p>Load Custom Textures [flycast_custom_textures] (Off|On)</p> <p>Dump Textures [flycast_dump_textures] (Off|On)</p>"},{"location":"library/flycast/#input","title":"Input","text":"<p>Configure gamepad and light gun settings.</p> <p>Analog Stick Deadzone [flycast_analog_stick_deadzone] (15%|0%|5%|10%|20%|25%|30%)</p> <p>Trigger Deadzone [flycast_trigger_deadzone] (0%|5%|10%|15%|20%|25%|30%)</p> <p>Digital Triggers [flycast_digital_triggers] (Off|On)</p> <p>Purupuru Pack/Vibration Pack [flycast_enable_purupuru] (On|Off)</p> <p>Enables controller force feedback.</p> <p>Gun crosshair 1 Display [flycast_lightgun1_crosshair] (Off|White|Red|Green|Blue)</p> <p>Gun crosshair 2 Display [flycast_lightgun2_crosshair] (Off|White|Red|Green|Blue)</p> <p>Gun crosshair 3 Display [flycast_lightgun3_crosshair] (Off|White|Red|Green|Blue)</p> <p>Gun crosshair 4 Display [flycast_lightgun4_crosshair] (Off|White|Red|Green|Blue)</p>"},{"location":"library/flycast/#visual-memory-unit","title":"Visual Memory Unit","text":"<p>Configure per-game VMU save files and on-scren VMU visibility sttings.</p> <p>Per-Game VMUs [flycast_per_content_vmus] (disabled|VMU A1|All VMUs)</p> <p>When disabled, all games share 4 VMU save files (A1, B1, C1, D1) located in RetroArch's system directory. The 'VMU A1' setting creates a unique VMU 'A1' file in RetroArch's save directory for each game that is launched. The 'All VMUs' setting creates 4 unique VMU files (A1, B1, C1, D1) for each game that is launched.</p> <p>VMU Screen 1 Display [flycast_vmu1_screen_display] (Off|enabled)</p> <p>VMU Screen 1 Position [flycast_vmu1_screen_position] (Upper Left|Upper Right|Lower Left|Lower Right)</p> <p>VMU Screen 1 Size [flycast_vmu1_screen_size] (1x|2x|3x|4x|5x)</p> <p>VMU Screen 1 Pixel On Color [flycast_vmu1_pixel_on_color] (Default ON|Default OFF|Black|Blue|Light Blue|Green|Cyan|Cyan Blue|Light Green|Cyan Green|Light Cyan|Red|Purple|Light Purple|Yellow|Gray|Light Purple (2)|Light Green (2)|Light Green (3)|Light Cyan (2)|Light Red(2)|Magenta|Light Purple (3)|Light Oragen|Orange|Light Purple(4)|Light Yellow|Light Yellow (2)|White)</p> <p>VMU Screen 1 Pixel Off Color [flycast_vmu1_pixel_off_color] (Default OFF|Default ON|Black|Blue|Light Blue|Green|Cyan|Cyan Blue|Light Green|Cyan Green|Light Cyan|Red|Purple|Light Purple|Yellow|Gray|Light Purple (2)|Light Green (2)|Light Green (3)|Light Cyan (2)|Light Red(2)|Magenta|Light Purple (3)|Light Oragen|Orange|Light Purple(4)|Light Yellow|Light Yellow (2)|White)</p> <p>VMU Screen 1 Opacity [flycast_vmu1_screen_opacity] (100%|10%|20%|30%|40%|50%|60%|70%|80%|90%)</p> <p>VMU Screen 2 Display [flycast_vmu2_screen_display] (Off|enabled)</p> <p>VMU Screen 2 Position [flycast_vmu2_screen_position] (Upper Left|Upper Right|Lower Left|Lower Right)</p> <p>VMU Screen 2 Size [flycast_vmu2_screen_size] (1x|2x|3x|4x|5x)</p> <p>VMU Screen 2 Pixel On Color [flycast_vmu2_pixel_on_color] (Default ON|Default OFF|Black|Blue|Light Blue|Green|Cyan|Cyan Blue|Light Green|Cyan Green|Light Cyan|Red|Purple|Light Purple|Yellow|Gray|Light Purple (2)|Light Green (2)|Light Green (3)|Light Cyan (2)|Light Red(2)|Magenta|Light Purple (3)|Light Oragen|Orange|Light Purple(4)|Light Yellow|Light Yellow (2)|White)</p> <p>VMU Screen 2 Pixel Off Color [flycast_vmu2_pixel_off_color] (Default OFF|Default ON|Black|Blue|Light Blue|Green|Cyan|Cyan Blue|Light Green|Cyan Green|Light Cyan|Red|Purple|Light Purple|Yellow|Gray|Light Purple (2)|Light Green (2)|Light Green (3)|Light Cyan (2)|Light Red(2)|Magenta|Light Purple (3)|Light Oragen|Orange|Light Purple(4)|Light Yellow|Light Yellow (2)|White)</p> <p>VMU Screen 2 Opacity [flycast_vmu2_screen_opacity] (100%|10%|20%|30%|40%|50%|60%|70%|80%|90%)</p> <p>VMU Screen 3 Display [flycast_vmu3_screen_display] (Off|enabled)</p> <p>VMU Screen 3 Position [flycast_vmu3_screen_position] (Upper Left|Upper Right|Lower Left|Lower Right)</p> <p>VMU Screen 3 Size [flycast_vmu3_screen_size] (1x|2x|3x|4x|5x)</p> <p>VMU Screen 3 Pixel On Color [flycast_vmu3_pixel_on_color] (Default ON|Default OFF|Black|Blue|Light Blue|Green|Cyan|Cyan Blue|Light Green|Cyan Green|Light Cyan|Red|Purple|Light Purple|Yellow|Gray|Light Purple (2)|Light Green (2)|Light Green (3)|Light Cyan (2)|Light Red(2)|Magenta|Light Purple (3)|Light Oragen|Orange|Light Purple(4)|Light Yellow|Light Yellow (2)|White)</p> <p>VMU Screen 3 Pixel Off Color [flycast_vmu3_pixel_off_color] (Default OFF|Default ON|Black|Blue|Light Blue|Green|Cyan|Cyan Blue|Light Green|Cyan Green|Light Cyan|Red|Purple|Light Purple|Yellow|Gray|Light Purple (2)|Light Green (2)|Light Green (3)|Light Cyan (2)|Light Red(2)|Magenta|Light Purple (3)|Light Oragen|Orange|Light Purple(4)|Light Yellow|Light Yellow (2)|White)</p> <p>VMU Screen 3 Opacity [flycast_vmu3_screen_opacity] (100%|10%|20%|30%|40%|50%|60%|70%|80%|90%)</p> <p>VMU Screen 4 Display [flycast_vmu4_screen_display] (Off|enabled)</p> <p>VMU Screen 4 Position [flycast_vmu4_screen_position] (Upper Left|Upper Right|Lower Left|Lower Right)</p> <p>VMU Screen 4 Size [flycast_vmu4_screen_size] (1x|2x|3x|4x|5x)</p> <p>VMU Screen 4 Pixel On Color [flycast_vmu4_pixel_on_color] (Default ON|Default OFF|Black|Blue|Light Blue|Green|Cyan|Cyan Blue|Light Green|Cyan Green|Light Cyan|Red|Purple|Light Purple|Yellow|Gray|Light Purple (2)|Light Green (2)|Light Green (3)|Light Cyan (2)|Light Red(2)|Magenta|Light Purple (3)|Light Oragen|Orange|Light Purple(4)|Light Yellow|Light Yellow (2)|White)</p> <p>VMU Screen 4 Pixel Off Color [flycast_vmu4_pixel_off_color] (Default OFF|Default ON|Black|Blue|Light Blue|Green|Cyan|Cyan Blue|Light Green|Cyan Green|Light Cyan|Red|Purple|Light Purple|Yellow|Gray|Light Purple (2)|Light Green (2)|Light Green (3)|Light Cyan (2)|Light Red(2)|Magenta|Light Purple (3)|Light Oragen|Orange|Light Purple(4)|Light Yellow|Light Yellow (2)|White)</p> <p>VMU Screen 4 Opacity [flycast_vmu4_screen_opacity] (100%|10%|20%|30%|40%|50%|60%|70%|80%|90%)</p>"},{"location":"library/flycast/#controllers","title":"Controllers","text":""},{"location":"library/flycast/#device-types","title":"Device types","text":"<p>The Flycast core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/flycast/#user-1-4-device-types","title":"User 1 - 4 device types","text":"<ul> <li>None - Input disabled.</li> <li>RetroPad - Joypad</li> <li>RetroPad w/Analog - Joypad - There is no reason to switch to this.</li> </ul>"},{"location":"library/flycast/#controller-tables","title":"Controller tables","text":""},{"location":"library/flycast/#joypad-and-analog-device-type-table","title":"Joypad and analog device type table","text":"User 1 - 4 input descriptors RetroPad A A X X Start Start D-Pad Up D-Pad Up D-Pad Down D-Pad Down D-Pad Left D-Pad Left D-Pad Right D-Pad Right B B Y Y L (fierce) L (fierce) R (fierce) R (fierce) L (weak) L (weak) R (weak) R (weak) Analog X  X Analog X Analog Y  Y Analog Y"},{"location":"library/flycast/#multiple-disc-games","title":"Multiple-disc games","text":"<p>If foo is a multiple-disc game, you should have .chd/cue/cdi/gdi files for each one, e.g. <code>foo (Disc 1).chd</code>, <code>foo (Disc 2).chd</code>, <code>foo (Disc 3).chd</code>.</p> <p>To take advantage of Flycast's Disk Control feature for disk swapping, an index file (a m3u file) should be made.</p> <p>Create a text file and save it as <code>foo.m3u</code>. Then enter your game's .chd/cue/cdi/gdi files on it. The m3u file contents should look something like this:</p> <p><code>foo.m3u</code> <pre><code>foo (Disc 1).chd\nfoo (Disc 2).chd\nfoo (Disc 3).chd\n</code></pre></p> <p>After that, you can load the <code>foo.m3u</code> file in RetroArch with the Flycast core.</p> <p>An alternative is to append discs to the current playlist via the \"Disk Image Append\" option in the Disk Control RetroArch menu.</p>"},{"location":"library/flycast/#compatibility","title":"Compatibility","text":""},{"location":"library/flycast/#general-flycast-issues","title":"General Flycast Issues","text":"<ul> <li>If the date and time are not being saved properly, please ensure you have the correct dc_flash.bin and dc_bios.bin files (check the md5sum values). Also try deleting all of the dc_nvmem.bin files in the system/dc directory.</li> <li>Once you save to a VMU slot with any game, that VMU becomes inaccessible the next time you load the emulator. The fix for this is to enable the Core Option for \"Boot to BIOS\", exit RA, delete all of the vmu_save*.bin files, start RA/Flycast. It will boot to BIOS where you can select the VMU option, select one of the VMUs, click the \"All\" icon in upper-left, click Delete All and the VMU will be formatted/intialized. Disable the \"Boot to BIOS\" option, restart RA, and everything should be fine.</li> <li>Polygon sorting issues can make objects appear distorted. Use Per-Pixel Alpha sorting for accurate rendering (at the expense of performance).</li> <li>When using an Xbox 360 Controller, analog triggers don't work properly. Use the bumpers instead.</li> <li>Changing games without closing and reloading RetroArch often leads to RetroArch crashing.</li> </ul> Game Issue Crazy Taxi (PAL) Player taxis do not emit engine sounds. Crazy Taxi (USA) Player taxis do not emit engine sounds. Jet Grind Radio (USA) Police reports during levels do not display correctly. Sonic Adventure (PAL) Must be set to use \"VGA\" output in core options, as \"TV\" mode will cause all subsequent FMV to make RetroArch become unresponsive. Unreal Tournament (USA) Set Cable Type to 'VGA (RGB)', otherwise the game will crash at start."},{"location":"library/flycast/#external-links","title":"External Links","text":"<ul> <li>Libretro Flycast Core info file</li> <li>Flycast Github Repository</li> <li>Report Flycast Issues Here</li> <li>Gameplay Videos</li> <li>Steam page</li> </ul> <ol> <li> <p>If video driver is vulkan.\u00a0\u21a9</p> </li> <li> <p>If low end then VGA (RGB), otherwise TV (Composite).\u00a0\u21a9</p> </li> </ol>"},{"location":"library/fmsx/","title":"MSX (fMSX)","text":""},{"location":"library/fmsx/#background","title":"Background","text":"<p>This is a port of Marat Fayzullin's fMSX 6.0 (21-Feb-2021) to the libretro API. fMSX is a program that emulates MSX, MSX2, and MSX2+ 8bit home computers. It runs MSX/MSX2/MSX2+ software on many different platforms including Windows, Android, Symbian, MacOS, Unix, MSDOS, AmigaOS, etc. I started developing fMSX in 1993 when there were only two other MSX emulators available, both exclusively for MSDOS. From the very beginning, I developed fMSX as a portable program able to run on many different computers. The initial development, for example, was done on DEC Alpha workstations running Unix. Since then, fMSX has seen quite a lot of updates and been ported to many systems. It is still being developed, although not as actively as before because most features are pretty much complete now.</p> <p>The Meteor core has been authored by</p> <ul> <li>Marat Fayzullin</li> </ul> <p>The fMSX core is licensed under</p> <ul> <li>Non-commercial</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/fmsx/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the fMSX core have the following file extensions:</p> <ul> <li>.rom</li> <li>.mx1</li> <li>.mx2</li> <li>.dsk</li> <li>.cas</li> </ul>"},{"location":"library/fmsx/#databases","title":"Databases","text":"<p>RetroArch database(s) that are associated with the fMSX core:</p> <ul> <li>Microsoft - MSX</li> <li>Microsoft - MSX2</li> </ul>"},{"location":"library/fmsx/#bios","title":"BIOS","text":"<p>Required or optional firmware files go in RetroArch's system directory.</p> Filename Description md5sum MSX.ROM MSX BIOS - Required 364a1a579fe5cb8dba54519bcfcdac0d MSX2.ROM MSX2 BIOS - Required ec3a01c91f24fbddcbcab0ad301bc9ef MSX2EXT.ROM MSX2 ExtROM - Required 2183c2aff17cf4297bdb496de78c2e8a MSX2P.ROM MSX2+ BIOS - Required 847cc025ffae665487940ff2639540e5 MSX2PEXT.ROM MSX2+ ExtROM - Required 7c8243c71d8f143b2531f01afa6a05dc DISK.ROM DiskROM/BDOS (optional) 80dcd1ad1a4cf65d64b7ba10504e8190 FMPAC.ROM FMPAC BIOS (optional) 6f69cc8b5ed761b03afd78000dfb0e19 MSXDOS2.ROM MSX-DOS 2 (optional) 6418d091cd6907bbcf940324339e43bb PAINTER.ROM Yamaha Painter (optional) 403cdea1cbd2bb24fae506941f8f655e KANJI.ROM Kanji Font (optional) febe8782b466d7c3b16de6d104826b34 <p>This list of compatible ROMS is not complete.</p>"},{"location":"library/fmsx/#features","title":"Features","text":"<p>RetroArch-level settings or features that the fMSX core respects.</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves - States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 Memory Monitoring (achievements) \u2714 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2714 Username \u2715 Language \u2715 Crop Overscan \u2715"},{"location":"library/fmsx/#directories","title":"Directories","text":"<p>The fMSX core's directory name is 'fMSX'</p> <p>The fMSX core saves/loads to/from these directories.</p> <p>RetroArch's State directory</p> <ul> <li>'content-name'.state# (State)</li> </ul>"},{"location":"library/fmsx/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The fMSX core's internal FPS is 60</li> <li>The fMSX core's internal sample rate is 48000 Hz</li> <li>The fMSX core's core provided aspect ratio is (Ratio)</li> </ul>"},{"location":"library/fmsx/#core-options","title":"Core options","text":"<p>The fMSX core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded.</p> <p>Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch.</p> <ul> <li> <p>MSX Mode (MSX2+/MSX1/MSX2)</p> <p>Select MSX model.</p> </li> <li> <p>MSX Video Mode (NTSC/PAL)</p> <p>Awaiting description.</p> </li> <li> <p>MSX Mapper Type Mode (Guess Mapper Type A/Guess Mapper Type B)</p> <p>Awaiting description.</p> </li> <li> <p>MSX Main Memory (Auto/64KB/128KB/256KB/512KB)</p> <p>Awaiting description.</p> </li> <li> <p>MSX Video Memory (Auto/32KB/64KB/128KB/192KB)</p> <p>Awaiting description.</p> </li> </ul>"},{"location":"library/fmsx/#controllers","title":"Controllers","text":""},{"location":"library/fmsx/#device-types","title":"Device types","text":"<p>The fMSX core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/fmsx/#user-1-device-types","title":"User 1 device types","text":"<ul> <li>None - Input disabled.</li> <li>Joystick - Joypad</li> <li>Joystick + Emulated Keyboard - Joypad</li> <li>Emulated Keyboard - Joypad</li> <li>Keyboard - Keyboard - Has Keymapper support</li> </ul>"},{"location":"library/fmsx/#user-2-device-types","title":"User 2 device types","text":"<ul> <li>None - Input disabled. Joystick - Joypad</li> </ul>"},{"location":"library/fmsx/#controller-tables","title":"Controller tables","text":""},{"location":"library/fmsx/#joypad-and-analog-device-type-table","title":"Joypad and analog device type table","text":"User 1 - 2 Remap descriptors for 'Joystick device type' RetroPad Inputs Fire B Stick Up Stick Down Stick Left Stick Right Fire A User 1 Remap descriptors for 'Joystick + Emulated Keyboard' device type RetroPad Inputs Fire B Spacebar F2 F1 Stick Up Stick Down Stick Left Stick Right Fire A F3 F4 F5 Graph Ctrl Enter Escape User 1 Remap descriptors for 'Emulated Keyboard' device type RetroPad Inputs Enter M F4 F1 Arrow Up Arrow Down Arrow Left Arrow Right Space N F2 F3 Graph Ctrl F5 Escape"},{"location":"library/fmsx/#keyboard-device-type-table","title":"Keyboard device type table","text":"RetroKeyboard Inputs Keyboard Keyboard Backspace Backspace Keyboard Tab Tab Keyboard Return Enter Keyboard Pause Stop Keyboard Escape Escape Keyboard Space Space Keyboard ! ! Keyboard \" \" Keyboard # # Keyboard $ $ Keyboard &amp; &amp; Keyboard ' ` Keyboard ( ( Keyboard ) ) Keyboard * # Keyboard + + Keyboard , , Keyboard . . Keyboard / / Keyboard 0 0 Keyboard 1 1 Keyboard 2 2 Keyboard 3 3 Keyboard 4 4 Keyboard 5 5 Keyboard 6 6 Keyboard 7 7 Keyboard 8 8 Keyboard 9 9 Keyboard : : Keyboard ; ; Keyboard - - Keyboard = = Keyboard &lt; &lt; Keyboard &gt; &gt; Keyboard ? ? Keyboard @ @ Keyboard [ [ Keyboard \\ \\ Keyboard ] ] Keyboard ^ ^ Keyboard _ _ Keyboard ` - Keyboard a a Keyboard b b Keyboard c c Keyboard d d Keyboard e e Keyboard f f Keyboard g g Keyboard h h Keyboard i i Keyboard j j Keyboard k k Keyboard l l Keyboard m m Keyboard n n Keyboard o o Keyboard p p Keyboard q q Keyboard r r Keyboard s s Keyboard t t Keyboard u u Keyboard v v Keyboard w w Keyboard x x Keyboard y y Keyboard z z Keyboard Delete Delete Keyboard Numpad 0 Numpad 0 Keyboard Numpad 1 Numpad 1 Keyboard Numpad 2 Numpad 2 Keyboard Numpad 3 Numpad 3 Keyboard Numpad 4 Numpad 4 Keyboard Numpad 5 Numpad 5 Keyboard Numpad 6 Numpad 6 Keyboard Numpad 7 Numpad 7 Keyboard Numpad 8 Numpad 8 Keyboard Numpad 9 Numpad 9 Keyboard Up Up Keyboard Down Down Keyboard Right Right Keyboard Left Left Keyboard Insert Insert Keyboard Home Home Keyboard End Select Keyboard Page Up Country Keyboard F1 F1 Keyboard F2 F2 Keyboard F3 F3 Keyboard F4 F4 Keyboard F5 F5 Keyboard Caps Lock Caps Lock Keyboard Scroll Lock Shift Keyboard Right Shift Shift Keyboard Right Control Control Keyboard Left Control Control Keyboard Left Alt Graph"},{"location":"library/fmsx/#compatibility","title":"Compatibility","text":"<p>Awaiting description.</p>"},{"location":"library/fmsx/#external-links","title":"External Links","text":"<ul> <li>Libretro fMSX Core info file</li> <li>Libretro fMSX Github Repository</li> <li>Report Libretro fMSX Core Issues Here</li> <li>Official fMSX Website</li> <li>Official fMSX Downloads</li> </ul>"},{"location":"library/fmsx/#msx","title":"MSX","text":"<ul> <li>MSX/SVI/ColecoVision/SG-1000 (blueMSX)</li> </ul>"},{"location":"library/freeintv/","title":"Mattel - Intellivision (FreeIntv)","text":""},{"location":"library/freeintv/#background","title":"Background","text":"<p>FreeIntv is a libretro emulation core for the Mattel Intellivision designed to be compatible with joypads from the SNES era forward even if they originally required a number pad.</p> <p>Attention</p> <p>FreeIntv does not currently emulate Entertainment Computer System (ECS) functionality. Contributions to the source are welcome!</p>"},{"location":"library/freeintv/#authorlicense","title":"Author/License","text":"<p>The FreeIntv core has been authored by</p> <ul> <li>David Richardson</li> </ul> <p>The FreeIntv core is licensed under</p> <ul> <li>GPLv3</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/freeintv/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the FreeIntv core have the following file extensions:</p> <ul> <li>.int</li> <li>.rom</li> <li>.bin</li> </ul>"},{"location":"library/freeintv/#databases","title":"Databases","text":"<p>RetroArch database(s) that are associated with the FreeIntv core:</p> <ul> <li>Mattel - Intellivision</li> </ul>"},{"location":"library/freeintv/#bios","title":"BIOS","text":"<p>Required or optional firmware files go in the frontend's system directory.</p> Filename Description md5sum exec.bin Executive ROM - Required 62e761035cb657903761800f4437b8af grom.bin Graphics ROM - Required 0cd5946c6473e42e8e4c2137785e427f"},{"location":"library/freeintv/#features","title":"Features","text":"<p>Frontend-level settings or features that the FreeIntv core respects.</p> Feature Supported Restart \u2715 Screenshots \u2714 Saves \u2715 States \u2714 Rewind \u2715 Netplay (State based) \u2715 Core Options \u2715 Memory Monitoring (achievements) \u2714 Cheats (Cheats menu) \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/freeintv/#directories","title":"Directories","text":"<p>The FreeIntv core's directory name is 'FreeIntv'</p>"},{"location":"library/freeintv/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The FreeIntv core's core provided FPS is 60</li> <li>The FreeIntv core's core provided sample rate is 44100 Hz</li> <li>The FreeIntv core's core provided aspect ratio is 11/7</li> </ul>"},{"location":"library/freeintv/#controller-overlays","title":"Controller overlays","text":"<p>Mattel Intellivision games were often meant to be played with game-specific cards overlaid on the numeric keypad. These overlays convey information which can be very useful in gameplay. Images of a limited selection of Intellivision titles are available at: http://www.intellivisionlives.com/bluesky/games/instructions.shtml</p>"},{"location":"library/freeintv/#controls","title":"Controls","text":"<p>Definitions:</p> <ul> <li>Mini-Keypad - Allows the user to view and select keys from a small Intellivision pad in the lower corner of the display.</li> <li>Controller Swap - Some Intellivision games expect the left controller to be player one, others expect the right controller. This isn't a problem if you have two controllers (and don't mind juggling them) but users with only one controller or using a portable setup would be effectively locked out of some games. Controller Swap swaps the two controller interfaces so that the player does not have to physically swap controllers.</li> </ul> RetroPad FreeIntv Function D-Pad 8-way movement Left Analog Stick 16-way disc Right Analog Stick Keypad 1-9 A Right Action Button B Left Action Button Y Top Action Button X Use the Last Selected Intellivision Keypad Button. In Astrosmash, for example, you can leave \"3\" selected to enable instant access to hyperspace. L/R Activate the Mini-Keypad LT Keypad Clear RT Keypad Enter Left Thumb Keypad 0 Right Thumb Keypad 5 Start Pause Game Select Controller Swap"},{"location":"library/freeintv/#compatibility","title":"Compatibility","text":"<p>Awaiting description.</p>"},{"location":"library/freeintv/#external-links","title":"External Links","text":"<ul> <li>Official FreeIntv Website</li> <li>Libretro FreeIntv Core info file</li> <li>Libretro FreeIntv Github Repository</li> <li>Intellivision RetroPie Wiki page</li> <li>FreeIntv RetroPie Forums Topic</li> <li>FreeIntv Libretro Forums Topic</li> <li>Gameplay Videos</li> </ul>"},{"location":"library/fuse/","title":"ZX Spectrum (Fuse)","text":""},{"location":"library/fuse/#background","title":"Background","text":"<p>The Free Unix Spectrum Emulator (Fuse): an emulator of the 1980s home computer and various clones for Unix, Mac OS X and Windows.</p> <p>The Fuse core has been authored by</p> <ul> <li>Team Fuse</li> </ul> <p>The Fuse core is licensed under</p> <ul> <li>GPLv3</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/fuse/#bios","title":"BIOS","text":"<p>Required or optional firmware files go in the frontend's system directory.</p> <p>Attention</p> <p>The BIOS for the last four machines need to be in a directory named 'fuse' in RetroArch's System directory.</p> <ul> <li>Spectrum 48K</li> <li>Spectrum 48K (NTSC)</li> <li>Spectrum 128K</li> <li>Spectrum +2</li> <li>Spectrum +2A</li> <li>Spectrum +3</li> <li>Spectrum +3e</li> <li>Spectrum SE</li> <li>Timex TC2048</li> <li>Timex TC2068</li> <li>Timex TS2068</li> <li> <p>Spectrum 16K</p> </li> <li> <p>Pentagon 128K</p> </li> </ul> Filename Description md5sum fuse/128p-0.rom Pentagon 128K ROM - Required fuse/128p-1.rom Pentagon 128K ROM - Required fuse/trdos.rom Pentagon 128K ROM - Required <ul> <li>Pentagon 512K</li> </ul> Filename Description md5sum fuse/128p-0.rom Pentagon 512K ROM - Required fuse/128p-1.rom Pentagon 512K ROM - Required fuse/gluck.rom Pentagon 512K ROM - Required fuse/trdos.rom Pentagon 512K ROM - Required <ul> <li>Pentagon 1024</li> </ul> Filename Description md5sum fuse/128p-0.rom Pentagon 1024 ROM - Required fuse/128p-1.rom Pentagon 1024 ROM - Required fuse/gluck.rom Pentagon 1024 ROM - Required fuse/trdos.rom Pentagon 1024 ROM - Required <ul> <li>Scorpion 256K</li> </ul> Filename Description md5sum fuse/256s-0.rom Scorpion 256K ROM - Required fuse/256s-1.rom Scorpion 256K ROM - Required fuse/256s-2.rom Scorpion 256K ROM - Required fuse/256s-3.rom Scorpion 256K ROM - Required"},{"location":"library/fuse/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the Fuse core have the following file extensions:</p> <ul> <li>.tzx</li> <li>.tap</li> <li>.z80</li> <li>.rzx</li> <li>.scl</li> <li>.trd</li> </ul> <p>RetroArch database(s) that are associated with the Fuse core:</p> <ul> <li>Sinclair - ZX Spectrum +3</li> <li>Sinclair - ZX Spectrum</li> </ul>"},{"location":"library/fuse/#features","title":"Features","text":"<p>Frontend-level settings or features that the Fuse core respects.</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2715 States \u2714 Rewind \u2714 Netplay \u2715 Core Options \u2714 Memory Monitoring (achievements) \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/fuse/#directories","title":"Directories","text":"<p>The Fuse core's library name is 'fuse'</p> <p>The Fuse core saves/loads to/from these directories.</p> <p>Frontend's State directory</p> File Description *.state# State"},{"location":"library/fuse/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The Fuse core's core provided FPS is (FPS)</li> <li>The Fuse core's core provided sample rate is 44100 Hz</li> <li>The Fuse core's base width is (Base width)</li> <li>The Fuse core's base height is (Base height)</li> <li>The Fuse core's max width is (Max width)</li> <li>The Fuse core's max height is (Max height)</li> <li>The Fuse core's core provided aspect ratio is (Ratio)</li> </ul>"},{"location":"library/fuse/#games","title":"Games","text":"<p>There are hundreds of free, legally available ZX Spectrum games at World of Spectrum. You should start at the Visitor Voted Top 100 Best Games.</p>"},{"location":"library/fuse/#core-options","title":"Core options","text":"<p>The Fuse core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded.</p> <p>Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch.</p> <ul> <li> <p>Model (needs content load) [fuse_machine] (Spectrum 48K|Spectrum 48K (NTSC)|Spectrum 128K|Spectrum +2|Spectrum +2A|Spectrum +3|Spectrum +3e|Spectrum SE|Timex TC2048|Timex TC2068|Timex TS2068|Spectrum 16K|Pentagon 128K|Pentagon 512K|Pentagon 1024|Scorpion 256K)</p> <p>Set the machine to emulate. Note that the this setting will have effect only when a new content is loaded.</p> </li> <li> <p>Hide Video Border [fuse_hide_border] (Off|On)</p> <p>Hides the video border, making the game occupy the entire screen area.</p> </li> <li> <p>Tape Fast Load [fuse_fast_load] (Off|On)</p> <p>Instantly loads tape files if enabled, or disabled it to see the moving horizontal lines in the video border while the game loads.</p> </li> <li> <p>Tape Load Sound [fuse_load_sound] (Off|On)</p> <p>Outputs the tape sound if fast load is disabled.</p> </li> <li> <p>Speaker Type [fuse_speaker_type] (tv speaker|beeper|unfiltered)</p> <p>Applies an audio filter.</p> </li> <li> <p>AV Stereo Separation [fise_ay_stereo_separation] (none|acb|abc)</p> <p>The AY sound chip stereo separation.</p> </li> <li> <p>Transparent Keyboard Overlay [fuse_key_ovrlay_transp] (Off|On)</p> <p>If the keyboard overlay is transparent or opaque.</p> </li> <li> <p>Time to Release Key in ms [fuse_key_hold_time] (500|1000|100|300)</p> <p>How much time to keep a key pressed before releasing it (used when a key is pressed using the keyboard overlay).</p> </li> <li> <p>Joy Left mapping [fuse_joypad_left] (|0|1|2|3|4|5|6|7|8|9|a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|Enter|Caps|Symbol|Space) <p>Map the Left joypad input to a keyboard input.</p> <li> <p>Joy Right mapping [fuse_joypad_right] (|0|1|2|3|4|5|6|7|8|9|a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|Enter|Caps|Symbol|Space) <p>Map the Right joypad input to a keyboard input.</p> <li> <p>Joy Up mapping [fuse_joypad_up] (|0|1|2|3|4|5|6|7|8|9|a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|Enter|Caps|Symbol|Space) <p>Map the Up joypad input to a keyboard input.</p> <li> <p>Joy Down mapping [fuse_joypad_down] (|0|1|2|3|4|5|6|7|8|9|a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|Enter|Caps|Symbol|Space) <p>Map the Down joypad input to a keyboard input.</p> <li> <p>Joy Start mapping [fuse_joypad_start] (|0|1|2|3|4|5|6|7|8|9|a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|Enter|Caps|Symbol|Space) <p>Map the Start joypad input to a keyboard input.</p> <li> <p>Joy A mapping [fuse_joypad_a] (|0|1|2|3|4|5|6|7|8|9|a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|Enter|Caps|Symbol|Space) <p>Map the A joypad input to a keyboard input.</p> <li> <p>Joy B mapping [fuse_joypad_b] (|0|1|2|3|4|5|6|7|8|9|a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|Enter|Caps|Symbol|Space) <p>Map the B joypad input to a keyboard input.</p> <li> <p>Joy X mapping [fuse_joypad_x] (|0|1|2|3|4|5|6|7|8|9|a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|Enter|Caps|Symbol|Space) <p>Map the X joypad input to a keyboard input.</p> <li> <p>Joy Y mapping [fuse_joypad_y] (|0|1|2|3|4|5|6|7|8|9|a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|Enter|Caps|Symbol|Space) <p>Map the Y joypad input to a keyboard input.</p> <li> <p>Joy L mapping [fuse_joypad_l] (|0|1|2|3|4|5|6|7|8|9|a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|Enter|Caps|Symbol|Space) <p>Map the L joypad input to a keyboard input.</p> <li> <p>Joy R mapping [fuse_joypad_r] (|0|1|2|3|4|5|6|7|8|9|a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|Enter|Caps|Symbol|Space) <p>Map the R joypad input to a keyboard input.</p> <li> <p>Joy L2 mapping [fuse_joypad_l2] (|0|1|2|3|4|5|6|7|8|9|a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|Enter|Caps|Symbol|Space) <p>Map the L2 joypad input to a keyboard input.</p> <li> <p>Joy R2 mapping [fuse_joypad_r2] (|0|1|2|3|4|5|6|7|8|9|a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|Enter|Caps|Symbol|Space) <p>Map the R2 joypad input to a keyboard input.</p> <li> <p>Joy L3 mapping [fuse_joypad_l3] (|0|1|2|3|4|5|6|7|8|9|a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|Enter|Caps|Symbol|Space) <p>Map the L3 joypad input to a keyboard input.</p> <li> <p>Joy R3 mapping [fuse_joypad_r3] (|0|1|2|3|4|5|6|7|8|9|a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|Enter|Caps|Symbol|Space) <p>Map the R3 joypad input to a keyboard input.</p>"},{"location":"library/fuse/#controllers-usage","title":"Controllers usage","text":"<p>There are seven types of joysticks emulated:</p> <ol> <li>Cursor</li> <li>Kempston</li> <li>Sinclair 1</li> <li>Sinclair 2</li> <li>Timex 1</li> <li>Timex 2</li> <li>Fuller Joystick</li> </ol> <p>Users can configure their joystick types in the input configuration on the front end. However, fuse-libretro allows for two joysticks at maximum so only users one and two can actually use theirs in the emulation.</p> <p>Users 1 and 2 can choose any of the joysticks as their device types, user 3 can only choose the Sinclair Keyboard.</p> <p>Buttons A, X and Y are mapped to the joystick's fire button, and button B is mapped to the UP directional button. Buttons L1 and R1 are mapped to RETURN and SPACE, respectively. The SELECT button brings up the embedded, on-screen keyboard which is useful if you only have controllers attached to your box.</p> <p>There are some conflicts in the way the input devices interact because of the use of the physical keyboard keys as joystick buttons. For a good gaming experience, set the user device types as follows:</p> <ul> <li>For joystick games: Set user 1 to a joystick type. Optionally, set user 2 to another joystick type (local cooperative games). Set user 3 to none. This way, you can use L1 as RETURN, R1 as SPACE, and SELECT to bring the embedded keyboard.</li> <li>For keyboard games: Set users 1 and 2 to none, and user 3 to Sinclair Keyboard. You won't have any joystick and the embedded keyboard won't work, but the entire physical keyboard will be available for you to type in those text adventure commands.</li> </ul> <p>If you set a joystick along with the keyboard, the joystick will work just fine except for the bindings to RETURN and SPACE, and the keyboard won't register the keys assigned to the Cursor joystick, or to the L1 and R1 buttons for all other joystick types.</p>"},{"location":"library/fuse/#device-types","title":"Device types","text":"<p>The Fuse core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/fuse/#user-1-2-device-types","title":"User 1 - 2 device types","text":"<ul> <li>None - Input disabled.</li> <li>RetroPad - Joypad</li> <li>Cursor Joystick - Joypad</li> <li>Kempston Joystick - Joypad</li> <li>Sinclair 1 Joystick - Joypad</li> <li>Sinclair 2 Joystick - Joypad</li> <li>Timex 1 Joystick - Joypad</li> <li>Timex 2 Joystick - Joypad</li> <li>Fuller Joystick - Joypad</li> </ul>"},{"location":"library/fuse/#user-3-device-types","title":"User 3 device types","text":"<ul> <li>None - Input disabled.</li> <li>RetroPad - Joypad</li> <li>Sinclair Keyboard - Keyboard - Has keymapper support</li> </ul>"},{"location":"library/fuse/#joypad","title":"Joypad","text":"User 1 - 7 input descriptors RetroPad Inputs Up Fire Keyboard overlay Up Down Left Right Fire Fire Enter Space"},{"location":"library/fuse/#keyboard","title":"Keyboard","text":"RetroKeyboard Inputs Sinclair Keyboard Keyboard Backspace Backspace Keyboard Return Return Keyboard Space Space Keyboard 0 0 Keyboard 1 1 Keyboard 2 2 Keyboard 3 3 Keyboard 4 4 Keyboard 5 5 Keyboard 6 6 Keyboard 7 7 Keyboard 8 8 Keyboard 9 9 Keyboard a a Keyboard b b Keyboard c c Keyboard d d Keyboard e e Keyboard f f Keyboard g g Keyboard h h Keyboard i i Keyboard j j Keyboard k k Keyboard l l Keyboard m m Keyboard n n Keyboard o o Keyboard p p Keyboard q q Keyboard r r Keyboard s s Keyboard t t Keyboard u u Keyboard v v Keyboard w w Keyboard x x Keyboard y y Keyboard z z Keyboard Right Shift Right Shift Keyboard Left Shift Left Shift Keyboard Right Control Right Control Keyboard Left Control Left Control Keyboard Right Alt Right Alt Keyboard Left Alt Left Alt Keyboard Right Meta Right Meta Keyboard Left Meta Left Meta Keyboard Right Super Right Super Keyboard Left Super Left Super"},{"location":"library/fuse/#external-links","title":"External Links","text":"<ul> <li>Official Fuse Website</li> <li>Official Fuse SourceForge Repository</li> <li>Libretro Fuse Core info file</li> <li>Libretro Fuse Github Repository</li> <li>Report Libretro Fuse Core Issues Here</li> </ul>"},{"location":"library/gam4980/","title":"GAM4980","text":""},{"location":"library/gam4980/#background","title":"Background","text":"<p>GAM4980 is a libretro core for playing BBK Longman 4980 electronic dictionary games.</p> <p>The GAM4980 core has been authored by:</p> <ul> <li>\u65e0\u4e91</li> <li>iyzsong</li> </ul> <p>The GAM4980 core is licensed under:</p> <ul> <li>GPLv3+</li> </ul>"},{"location":"library/gam4980/#bios","title":"BIOS","text":"<p>Required firmware files go in the frontend's system directory:</p> Filename Description gam4980/8.BIN font rom, dumped from 0x800000-0x9fffff gam4980/E.BIN system rom, dumped from 0xe00000-0xffffff <p>You need run a rom dumper on BBK4980 (or 4988/5980) and a XMODEM1K terminal on PC to get the firmware files.</p>"},{"location":"library/gam4980/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the GAM4980 core have the following file extensions:</p> <ul> <li>.gam</li> </ul>"},{"location":"library/gam4980/#features","title":"Features","text":"<p>Frontend-level settings or features that the [Core name] core respects:</p> Feature Supported Restart \u2715 Saves \u2714 States \u2714 Rewind \u2714 Netplay - Core Options \u2714 Memory Monitoring (achievements) \u2715 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching - Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/gam4980/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The [Core name] core's core provided FPS is 60.0</li> <li>The [Core name] core's base width is 159</li> <li>The [Core name] core's base height is 96</li> <li>The [Core name] core's max width is 159</li> <li>The [Core name] core's max height is 96</li> <li>The [Core name] core's core provided aspect ratio is 5/3</li> </ul>"},{"location":"library/gam4980/#user-1-device-types","title":"User 1 device types","text":"<p>The GAM4980 core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/gam4980/#joypad","title":"Joypad","text":"RetroPad Inputs User # input descriptors Exit Help (4988: Z) Insert (4988: Shift) Search (4988: ZY) Up Down Left Right Enter R Page Up Page Down Modify (4988: Space) Del (4988: X) A Z (4988: S)"},{"location":"library/gambatte/","title":"Nintendo - Game Boy / Color (Gambatte)","text":""},{"location":"library/gambatte/#background","title":"Background","text":"<p>Gambatte is an accuracy-focused, open-source, cross-platform Game Boy Color emulator written in C++. It is based on hundreds of corner case hardware tests, as well as previous documentation and reverse engineering efforts.</p> <p>The Gambatte core has been authored by</p> <ul> <li>Sinamas</li> </ul> <p>The Gambatte core is licensed under</p> <ul> <li>GPLv2</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/gambatte/#bios","title":"BIOS","text":"<p>Required or optional firmware files go in the frontend's system directory.</p> <p>Attention</p> <p>The 'Use official bootloader' core option must be set to On in order for these BIOS files to be used.</p> Filename Description md5sum gb_bios.bin Game Boy BIOS - Optional 32fbbd84168d3482956eb3c5051637f5 gbc_bios.bin Game Boy Color BIOS - Optional dbfce9db9deaa2567f6a84fde55f9680"},{"location":"library/gambatte/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the Gambatte core have the following file extensions:</p> <ul> <li>.gb</li> <li>.gbc</li> <li>.dmg</li> </ul> <p>RetroArch database(s) that are associated with the Gambatte core:</p> <ul> <li>Nintendo - Game Boy</li> <li>Nintendo - Game Boy Color</li> </ul>"},{"location":"library/gambatte/#features","title":"Features","text":"<p>Frontend-level settings or features that the Gambatte core respects.</p> Feature Supported Restart \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2715 Core Options \u2714 Memory Monitoring (achievements) \u2714 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2714 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/gambatte/#directories","title":"Directories","text":"<p>The Gambatte core's library name is 'Gambatte'</p> <p>The Gambatte core saves/loads to/from these directories.</p> <p>Frontend's Save directory</p> File Description *.srm Cartridge battery save <p>Frontend's State directory</p> File Description *.state# State <p>***Frontend's System directory**</p> File Description palettes/default.pal Global custom palette palettes/'content-name'.pal Per-game custom palette"},{"location":"library/gambatte/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The Gambatte core's core provided FPS is 59.7275005696</li> <li>The Gambatte core's core provided sample rate is [Sample rate]</li> <li>The Gambatte core's base width is [Base width]</li> <li>The Gambatte core's base height is [Base height]</li> <li>The Gambatte core's max width is [Max width]</li> <li>The Gambatte core's max height is [Max height]</li> <li>The Gambatte core's core provided aspect ratio is [Aspect ratio]</li> </ul>"},{"location":"library/gambatte/#color-palette","title":"Color Palette","text":"<ul> <li>The core option <code>GB Colorization</code> enables colorization of Game Boy games, using pre-defined or user-selected color palettes.</li> <li>When satisfied you can save the currently chosen palette per the whole core, per content-directory or per game with the usual RetroArch override mechanism.</li> <li>During gameplay you can instantly swap color palettes.</li> <li> <p>You can cycle through the available color palettes with the L/R shoulder buttons.</p> <p>(Source: Feature request in issue 182 was implemented in pull request 204 in October 2021)   - This is ideal for your initial browsing / exploration of the color palettes.   - But also if you spontanously want to change the palette in your currently running game.</p> </li> </ul>"},{"location":"library/gambatte/#custom-palettes-for-game-boy-games","title":"Custom palettes for Game Boy games","text":"<p>The 'GB Colorization' core option must be set to custom.</p> <p>Create a folder called \"palettes\" in RetroArch's system directory. Then, you can place custom palette files (.pal) inside the \"palettes\" folder</p> <p>You can define different palettes for specific games by creating a .pal file in the \"palettes\" folder with 'INTERNALROMNAME.pal' or \"rom-name.pal\". If no specific palette is found for a ROM then the default palette is used.</p> <p>You can also define a palette to be used for all Game Boy games by creating a .pal file in the \"palettes\" folder named \"default.pal\"</p> Custom palettes can be created from the GUI in standalone Gambatte <p></p>"},{"location":"library/gambatte/#core-options","title":"Core options","text":"<p>The Gambatte core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded.</p> <p>Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch.</p> <ul> <li> <p>Allow Opposing Directions [gambatte_up_down_allowed] (disabled/enabled)</p> <p>Enabling this will allow pressing / quickly alternating / holding both left and right (or up and down in some games) directions at the same time.</p> <p>This may cause movement based glitches to occur in certain games.</p> <p>It's best to keep this core option disabled.</p> </li> <li> <p>GB Colorization [gambatte_gb_colorization] (disabled|auto|GBC|SGB|internal|custom)</p> <p>Enables colorization of Game Boy games, using pre-defined or user-selected color palettes.</p> <p>'auto': Selects automatically the 'best' (most colorful/appropriate) palette for each individual game, using the following order of preference:</p> <ol> <li> <p>Game-specific Super Game Boy palette, if defined and more colorful than game-specific Game Boy Color palette.</p> </li> <li> <p>Game-specific Game Boy Color palette, if defined.</p> </li> <li> <p>Game-specific Super Game Boy palette, if defined.</p> </li> <li> <p>Palette specified by 'Internal Palette' core option.</p> </li> </ol> <p>'GBC': Selects game-specific Game Boy Color palette, if defined. If not, falls back to the Game Boy Color hardware default palette of 'GBC - Dark Green'.</p> <p>'SGB': Selects game-specific Super Game Boy palette, if defined. If not, falls back to the Super Game Boy hardware default palette of 'SGB - 1A'.</p> <p>'internal': Selects palette specified by 'Internal Palette' core option.</p> <p>'custom': Loads user-created palettes from RetroArch's system directory, as described in the 'Custom palettes for Game Boy games' section.</p> </li> </ul> GB Colorization: Off <p></p> GB Colorization: auto (in this case, a game-specific SGB palette is auto-selected) <p></p> GB Colorization: GBC <p></p> <ul> <li> <p>Internal Palette [gambatte_gb_internal_palette] (GB - DMG|GB - Pocket|GB - Light|GBC - Blue|GBC - Brown|GBC - Dark Blue|GBC - Dark Brown|GBC - Dark Green|GBC - Grayscale|GBC - Green|GBC - Inverted|GBC - Orange|GBC - Pastel Mix|GBC - Red|GBC - Yellow|SGB - 1A|SGB - 1B|SGB - 1C|SGB - 1D|SGB - 1E|SGB - 1F|SGB - 1G|SGB - 1H|SGB - 2A|SGB - 2B|SGB - 2C|SGB - 2D|SGB - 2E|SGB - 2F|SGB - 2G|SGB - 2H|SGB - 3A|SGB - 3B|SGB - 3C|SGB - 3D|SGB - 3E|SGB - 3F|SGB - 3G|SGB - 3H|SGB - 4A|SGB - 4B|SGB - 4C|SGB - 4D|SGB - 4E|SGB - 4F|SGB - 4G|SGB - 4H|Special 1|Special 2|Special 3)</p> <p>Selects the internal color palette to use for colorizing Game Boy games when the 'GB Colorization' core option is set to 'internal', or when the 'GB Colorization' core option is set to 'auto' and a game has no pre-defined Super Game Boy/Game Boy Color palette.</p> <p>'GB' palettes mimic the display characteristics of original Game Boy hardware.</p> <p>'GBC' palettes are identical to those used by original Game Boy Color hardware when colorizing Game Boy games.</p> <p>'SGB' palettes are identical to those used by original Super Game Boy hardware when colorizing Game Boy games.</p> </li> </ul> Internal Palette: GB - DMG <p></p> Internal Palette: GB - Pocket <p></p> Internal Palette: GB - Light <p></p> Internal Palette: GBC - Blue <p></p> Internal Palette: GBC - Brown <p></p> Internal Palette: GBC - Dark Blue <p></p> Internal Palette: GBC - Dark Brown <p></p> Internal Palette: GBC - Dark Green <p></p> Internal Palette: GBC - Grayscale <p></p> Internal Palette: GBC - Green <p></p> Internal Palette: GBC - Inverted <p></p> Internal Palette: GBC - Orange <p></p> Internal Palette: GBC - Pastel Mix <p></p> Internal Palette: GBC - Red <p></p> Internal Palette: GBC - Yellow <p></p> Internal Palette: SGB - 1A <p></p> Internal Palette: SGB - 1B <p></p> Internal Palette: SGB - 1C <p></p> Internal Palette: SGB - 1D <p></p> Internal Palette: SGB - 1E <p></p> Internal Palette: SGB - 1F <p></p> Internal Palette: SGB - 1G <p></p> Internal Palette: SGB - 1H <p></p> Internal Palette: SGB - 2A <p></p> Internal Palette: SGB - 2B <p></p> Internal Palette: SGB - 2C <p></p> Internal Palette: SGB - 2D <p></p> Internal Palette: SGB - 2E <p></p> Internal Palette: SGB - 2F <p></p> Internal Palette: SGB - 2G <p></p> Internal Palette: SGB - 2H <p></p> Internal Palette: SGB - 3A <p></p> Internal Palette: SGB - 3B <p></p> Internal Palette: SGB - 3C <p></p> Internal Palette: SGB - 3D <p></p> Internal Palette: SGB - 3E <p></p> Internal Palette: SGB - 3F <p></p> Internal Palette: SGB - 3G <p></p> Internal Palette: SGB - 3H <p></p> Internal Palette: SGB - 4A <p></p> Internal Palette: SGB - 4B <p></p> Internal Palette: SGB - 4C <p></p> Internal Palette: SGB - 4D <p></p> Internal Palette: SGB - 4E <p></p> Internal Palette: SGB - 4F <p></p> Internal Palette: SGB - 4G <p></p> Internal Palette: SGB - 4H <p></p> Internal Palette: Special 1 <p></p> Internal Palette: Special 2 <p></p> Internal Palette: Special 3 <p></p> <ul> <li> <p>Color correction [gambatte_gbc_color_correction] (GBC only|always|disabled)</p> <p>Enables adjustment of output colors to match the display characteristics of the LCD panel used in original Game Boy Color hardware.</p> <p>'GBC only': Color correction is only applied when playing Game Boy Color games, or when using a Game Boy Color palette to colorize a Game Boy game.</p> <p>'always': Color correction is always applied, regardless of which color palette is being used.</p> </li> </ul> <p>Attention</p> <p>Setting this option to 'always' will result in unexpected/suboptimal output when using 'GB' or 'SGB' internal color palettes, since these are intended for display on a normal TV/monitor rather than a Game Boy Color LCD panel.</p> <ul> <li> <p>Color correction mode [gambatte_gbc_color_correction_mode] (accurate|fast)</p> <p>Specifies the method to use when performing color correction.</p> <p>'accurate': Provides a very close approximation of the image displayed on a real Game Boy Color LCD panel.</p> <p>'fast': Darkens colors in a loose approximation of the image displayed on a real Game Boy Color LCD panel. Has negligible performance impact, and may be used on low-end hardware in cases where the 'accurate' method is too slow.</p> </li> </ul> Color correction: Off <p></p> Color correction: fast <p></p> Color correction: accurate <p></p> <ul> <li> <p>Color correction - frontlight position [gambatte_gbc_frontlight_position] (central|above screen|below screen)</p> <p>Simulates the physical response of the Game Boy Color LCD panel when illuminated from different angles.</p> <p>'central': Standard color reproduction, corresponding to ambient light hitting the screen at 90\u00b0.</p> <p>'above screen': Increases brightness (gamma), corresponding to sunlight or a ceiling light shining on the screen from above.</p> <p>'below screen': Reduces brightness (gamma), corresponding to light shining on the screen from below.</p> </li> </ul> <p>Attention</p> <p>This setting only takes effect when 'Color correction mode' is set to 'accurate'.</p> Color correction - frontlight position: central <p></p> Color correction - frontlight position: above screen <p></p> Color correction - frontlight position: below screen <p></p> <ul> <li> <p>Dark Filter Level (percent) [gambatte_dark_filter_level] (0|5|10|15|20|25|30|35|40|45|50)</p> <p>Enables selective brightness reduction based upon pixel luminosity. May be used to reduce glare/eye strain. Of particular value when playing games with white backgrounds, which are intended for display on a non-backlit Game Boy Color LCD panel and appear uncomfortably bright when viewed on a modern backlit screen.</p> </li> </ul> Dark Filter Level: 0% <p></p> Dark Filter Level: 30% <p></p> <ul> <li> <p>Emulated hardware (restart) [gambatte_gb_hwmode] (Auto|GB|GBC|GBA)</p> <p>Choose which hardware is emulated Game Boy, Game Boy Color, or Game Boy Advance.</p> </li> <li> <p>Use official bootloader (restart) [gambatte_gb_bootloader] (enabled|disabled)</p> <p>Enables support for using official Game Boy and Game Boy Color bootloaders with startup logos. Check the BIOS section to see what files are needed.</p> </li> </ul> Game Boy bootloader <p></p> Game Boy Color bootloader <p></p> <ul> <li> <p>Mix frames [gambatte_mix_frames] (disabled|accurate|fast)</p> <p>Enables simulation of LCD ghosting effects by blending the current and previous frames.</p> <p>'accurate': Blends pixel RGB values with floating point precision.</p> <p>'fast': Blends pixel RGB values using fast bit manipulation. Causes slight color darkening/shifting (due to rounding errors). May be used on low-end hardware in cases where the 'accurate' method is too slow.</p> </li> </ul> <p>Attention</p> <p>A number of games generate transparency effects (or additional shades of color) by drawing objects on alternate frames, relying on the LCD ghosting of original hardware to 'smooth out' the result. Notable examples are Wave Race, Ballistic and Chikyuu Kaihou Gun ZAS. In order for these games to render correctly, 'Mix frames' must be set to 'accurate' or 'fast'. More importantly, the rapid flickering that is produced by these games when 'Mix frames' is disabled can lead to a form of screen burn-in on certain types of LCD panel (that of the 3DS in particular).</p> Mix frames: Off <p></p> Mix frames: accurate <p></p> Mix frames: fast <p></p> <ul> <li>GameBoy Link Mode - New config options</li> </ul> Core Option Description gambatte_gb_link_mode Not Connected / Network Server / Network Client gambatte_gb_link_network_port 56400 to 56420 in increments of 1. 56400 is default gambatte_show_gb_link_settings enabled / disabled gambatte_gb_link_network_server_ip_1 (client only) 0 to 9, 1<sup>st</sup> digit of ipv4 address, (eg. 1) gambatte_gb_link_network_server_ip_2 (client only) 0 to 9, 2<sup>nd</sup> digit of ipv4 address, (eg. 9) gambatte_gb_link_network_server_ip_3 (client only) 0 to 9, 3<sup>rd</sup> digit of ipv4 address, (eg. 2) gambatte_gb_link_network_server_ip_4 (client only) 0 to 9, 4<sup>th</sup> digit of ipv4 address, (eg. 1) gambatte_gb_link_network_server_ip_5 (client only) 0 to 9, 5<sup>th</sup> digit of ipv4 address, (eg. 6) gambatte_gb_link_network_server_ip_6 (client only) 0 to 9, 6<sup>th</sup> digit of ipv4 address, (eg. 8) gambatte_gb_link_network_server_ip_7 (client only) 0 to 9, 7<sup>th</sup> digit of ipv4 address, (eg. 0) gambatte_gb_link_network_server_ip_8 (client only) 0 to 9, 8<sup>th</sup> digit of ipv4 address, (eg. 0) gambatte_gb_link_network_server_ip_9 (client only) 0 to 9, 9<sup>th</sup> digit of ipv4 address, (eg. 1) gambatte_gb_link_network_server_ip_10 (client only) 0 to 9, 10<sup>th</sup> digit of ipv4 address, (eg. 0) gambatte_gb_link_network_server_ip_11 (client only) 0 to 9, 11<sup>th</sup> digit of ipv4 address, (eg. 0) gambatte_gb_link_network_server_ip_12 (client only) 0 to 9, 12<sup>th</sup> digit of ipv4 address, (eg. 1) <ul> <li>GameBoy Link Mode - Old config options</li> </ul> Core Option Description, values gambatte_gb_link_mode Mode, Not Connected / Network Server / Network Client gambatte_gb_link_network_port Network link port, 56400 to 56420 in increments of 1. 56400 is default gambatte_gb_link_network_server_ip_octet1 (client only) Network link server address part 1, (0 to 255 in increments of 1. 0 is default.) gambatte_gb_link_network_server_ip_octet2 (client only) Network link server address part 2, (0 to 255 in increments of 1. 0 is default.) gambatte_gb_link_network_server_ip_octet3 (client only) Network link server address part 3, (0 to 255 in increments of 1. 0 is default.) gambatte_gb_link_network_server_ip_octet4 (client only) Network link server address part 4, (0 to 255 in increments of 1. 0 is default.)"},{"location":"library/gambatte/#rumble","title":"Rumble","text":"<p>Rumble only works in the mGBA core when</p> <ul> <li>The content being ran has rumble support. (e.g. Cartridges with a Rumble Pak)</li> <li>The frontend being used has rumble support.</li> <li>The joypad device being used has rumble support.</li> </ul>"},{"location":"library/gambatte/#joypad","title":"Joypad","text":"RetroPad Inputs User 1 input descriptors A B D-Pad Up D-Pad Down D-Pad Left D-Pad Right Select Start Previous Color Palette Next Color Palette"},{"location":"library/gambatte/#compatibility","title":"Compatibility","text":"Game Issue Command Master Crashes on start. Unemulated MBC7 mapper. Game Boy Camera Crashes on start. Unemulated Pocket Camera mapper. Game de Hakken!! Tamagotchi - Osutchi to Mesutchi Crashes on start. Unemulated TAMA5 mapper. Kirby Tilt 'n' Tumble Crashes on start. Unemulated MBC7 mapper. Net de Get: Mini-Game @ 100 Crashes on start. Unemulated MBC6 mapper."},{"location":"library/gambatte/#external-links","title":"External Links","text":"<ul> <li>Official Gambatte Github Repository</li> <li>Old Standalone Gambatte builds</li> <li>Libretro Gambatte Core info file</li> <li>Libretro Gambatte Github Repository</li> <li>Report Libretro Gambatte Core Issues Here</li> <li>Gameplay Videos</li> </ul>"},{"location":"library/gambatte/#nintendo-game-boy-color","title":"Nintendo - Game Boy (+ Color)","text":"<ul> <li>Nintendo - Game Boy / Color (Emux GB)</li> <li>Nintendo - Game Boy / Color (Gearboy)</li> <li>Nintendo - Game Boy / Color (SameBoy)</li> <li>Nintendo - Game Boy / Color (TGB Dual)</li> <li>Nintendo - Game Boy Advance (mGBA)</li> <li>Nintendo - Game Boy Advance (VBA-M)</li> <li>Nintendo - SNES / Famicom (higan Accuracy)</li> <li>Nintendo - SNES / Famicom (nSide Balanced)</li> <li>Nintendo - SNES / Famicom (Mesen-S)</li> </ul>"},{"location":"library/game_music_emu/","title":"Game Music Emu","text":""},{"location":"library/game_music_emu/#background","title":"Background","text":"<p>Multi-purpose video game console music player.</p>"},{"location":"library/game_music_emu/#authorlicense","title":"Author/License","text":"<p>The Game Music Emu core has been authored by</p> <ul> <li>Blargg</li> </ul> <p>The Game Music Emu core is licensed under</p> <ul> <li>GPLv3</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/game_music_emu/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the Game Music Emu core have the following file extensions:</p> <ul> <li>.ay</li> <li>.gbs</li> <li>.gym</li> <li>.hes</li> <li>.kss</li> <li>.nsf</li> <li>.nsfe</li> <li>.sap</li> <li>.spc</li> <li>.vgm</li> <li>.vgz</li> </ul>"},{"location":"library/game_music_emu/#features","title":"Features","text":"<p>Frontend-level settings or features that the Game Music Emu core respects.</p> Feature Supported Restart \u2715 Screenshots \u2714 Saves \u2715 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2715 Memory Monitoring (achievements) \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2715 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/game_music_emu/#directories","title":"Directories","text":"<p>The Game Music Emu core's internal core name is 'Game Music Emulator'</p>"},{"location":"library/game_music_emu/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The Game Music Emu core's core provided FPS is 60</li> <li>The Game Music Emu core's core provided sample rate is 44100 Hz</li> <li>The Game Music Emu core's core provided aspect ratio is 4/3</li> </ul>"},{"location":"library/game_music_emu/#controllers","title":"Controllers","text":"<p>The Game Music Emu core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/game_music_emu/#user-1-device-types","title":"User 1 device types","text":"<ul> <li>None - Doesn't disable input.</li> <li>RetroPad - Joypad - Stay on this.</li> <li>RetroPad w/Analog - Joypad - There's no reason to switch to this.</li> </ul>"},{"location":"library/game_music_emu/#controller-tables","title":"Controller tables","text":""},{"location":"library/game_music_emu/#joypad","title":"Joypad","text":"RetroPad Inputs Game Music Emu core inputs Pause Previous Track Next Track"},{"location":"library/game_music_emu/#external-links","title":"External Links","text":"<ul> <li>Official Game Music Emu Website</li> <li>Official Game Music Emu Github Repository</li> <li>Libretro Game Music Emu Core info file</li> <li>Libretro Game Music Emu Github Repository</li> <li>Report Libretro Game Music Emu Core Issues Here</li> </ul>"},{"location":"library/gearboy/","title":"Nintendo - Game Boy / Color (Gearboy)","text":""},{"location":"library/gearboy/#background","title":"Background","text":"<p>Gearboy is an open source, cross-platform, Nintendo Game Boy (DMG) / Game Boy Color (GBC) emulator written in C++.</p> <ul> <li>Accurate CPU emulation, passes cpu_instrs.gb from blargg's tests.</li> <li>Accurate instruction and memory timing, passes instr_timing.gb and mem_timing.gb from blargg's tests.</li> <li>Supported cartridges: ROM, ROM + RAM, MBC1, MBC2, MBC3 + RTC, MBC5, HuC-1 and MBC1M (multicart).</li> <li>Accurate LCD controller emulation with correct timings and priorities including mid-scanline effects.</li> <li>Sound emulation using SDL Audio and Gb_Snd_Emu library.</li> <li>Battery powered RAM save support.</li> <li>Save states.</li> <li>Game Genie and GameShark cheat support.</li> <li>Bootrom (BIOS) support.</li> <li>Supported platforms (libretro): Windows, Linux, macOS, Raspberry Pi, Android, iOS, tvOS, PlayStation Vita, PlayStation 3, Nintendo 3DS, Nintendo GameCube, Nintendo Wii, Nintendo WiiU, Nintendo Switch, Emscripten, Classic Mini systems (NES, SNES, C64, ...), OpenDingux, RetroFW and QNX.</li> </ul> <p>The Gearboy core has been authored by:</p> <ul> <li>Ignacio Sanchez (drhelius)</li> </ul> <p>The Gearboy core is licensed under:</p> <ul> <li>GPLv3</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/gearboy/#bios","title":"BIOS","text":"<p>Gearboy does not require bootrom (BIOS) files to work but they can be used optionally.</p> <p>When the bootrom is enabled it will execute as in original hardware, causing invalid roms to lock or forcing hardware like GB Pocket or GBA, depending on the bootrom file.</p> <p>Required or optional firmware files go in the frontend's system directory.</p> <p>Attention</p> <p>If you\u2019d like to use any bootrom, you can place the following files in RetroArch's system directory. Then, you need to enable DMG Bootrom and/or Game Boy Color Bootrom core options for these bootrom files to be used.</p> Filename Description md5sum dmg_boot.bin Game Boy boot ROM - Optional 32fbbd84168d3482956eb3c5051637f5 cgb_boot.bin Game Boy Color boot ROM - Optional dbfce9db9deaa2567f6a84fde55f9680"},{"location":"library/gearboy/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the Gearboy core have the following file extensions:</p> <ul> <li>.gb</li> <li>.dmg</li> <li>.gbc</li> <li>.cgb</li> <li>.sgb</li> </ul> <p>RetroArch database(s) that are associated with the Gearboy core:</p> <ul> <li>Nintendo - Game Boy</li> <li>Nintendo - Game Boy Color</li> </ul>"},{"location":"library/gearboy/#features","title":"Features","text":"<p>Frontend-level settings or features that the Gearboy core respects.</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2715 Core Options \u2714 Memory Monitoring (achievements) \u2714 RetroArch Cheats - Game Genie \u2714 RetroArch Cheats - GameShark \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/gearboy/#directories","title":"Directories","text":"<p>The Gearboy core's library name is 'Gearboy'</p> <p>The Gearboy core saves/loads to/from these directories.</p> <p>Frontend's Save directory</p> File Description *.srm Cartridge battery save *.rtc Real time clock save <p>Frontend's State directory</p> File Description *.state# State"},{"location":"library/gearboy/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The Gearboy core's core provided FPS is 59.7275005696</li> <li>The Gearboy core's core provided sample rate is 44100 Hz</li> <li>The Gearboy core's base width is 160</li> <li>The Gearboy core's base height is 144</li> <li>The Gearboy core's max width is 160</li> <li>The Gearboy core's max height is 144</li> <li>The Gearboy core's core provided aspect ratio is 10/9</li> </ul>"},{"location":"library/gearboy/#core-options","title":"Core options","text":"<p>The Gearboy core has the following options that can be tweaked from the core options menu. The default setting is bolded.</p> <p>Settings with (restart) means that core has to be closed for the new setting to be applied on next launch.</p> <ul> <li> <p>Game Boy Model (restart) [gearboy_model] (Auto|Game Boy DMG|Game Boy Advance)</p> <p>Select which hardware/model is emulated.</p> <ul> <li>Auto selects the best hardware based on the rom.</li> <li>Game Boy DMG forces original Game Boy hardware.</li> <li>Game Boy Advance enables Game Boy Advance hardware.</li> </ul> </li> <li> <p>Mapper (restart) [gearboy_mapper] (Auto|ROM Only|MBC 1|MBC 2|MBC 3|MBC 5|MBC 1 Multicart)</p> <p>Select which Memory Bank Controller (MBC or mapper) is emulated.</p> <ul> <li>Auto selects the best MBC based on the rom.</li> <li>ROM Only forces no MBC.</li> <li>MBC 1 forces MBC 1.</li> <li>MBC 2 forces MBC 2.</li> <li>MBC 3 forces MBC 3 + RTC.</li> <li>MBC 5 forces MBC 5.</li> <li>MBC 1 Multicart forces MBC 1 Multicart.</li> </ul> </li> <li> <p>DMG Palette [gearboy_palette] (Original|Sharp|B/W|Autumn|Soft|Slime)</p> <p>Select a color palette for Game Boy DMG games.</p> </li> <li> <p>DMG Bootrom [gearboy_bootrom_dmg] (Disabled|Enabled)</p> <p>This option will enables/disables bootrom for Game Boy DMG model. For this to work, the <code>dmg_boot.bin</code> file must exist in Retro Arch's system directory.</p> </li> <li> <p>Game Boy Color Bootrom [gearboy_bootrom_gbc] (Disabled|Enabled)</p> <p>This option will enables/disables bootrom for Game Boy Color model. For this to work, the <code>cgb_boot.bin</code> file must exist in Retro Arch's system directory.</p> </li> <li> <p>Allow Up+Down / Left+Right [gearboy_up_down_allowed] (Disabled|Enabled)</p> <p>Enabling this option allows pressing, quickly alternating, or holding both left and right (or up and down in some games) directions at the same time.</p> <p>This may cause movement based glitches to occur in certain games.</p> <p>It's best to keep this core option disabled.</p> </li> </ul>"},{"location":"library/gearboy/#joypad","title":"Joypad","text":"User 1 input descriptors RetroPad Inputs B Select Start Up Down Left Right A"},{"location":"library/gearboy/#compatibility","title":"Compatibility","text":"<ul> <li>Gearboy Accuracy Tests</li> </ul>"},{"location":"library/gearboy/#external-links","title":"External Links","text":"<ul> <li>Official Gearboy Github Repository</li> <li>Libretro Gearboy Core info file</li> <li>Report Libretro Gearboy Core Issues Here</li> </ul>"},{"location":"library/gearboy/#see-also","title":"See also","text":""},{"location":"library/gearboy/#nintendo-game-boy-color","title":"Nintendo - Game Boy (+ Color)","text":"<ul> <li>Nintendo - Game Boy / Color (Emux GB)</li> <li>Nintendo - Game Boy / Color (Gambatte)</li> <li>Nintendo - Game Boy / Color (SameBoy)</li> <li>Nintendo - Game Boy / Color (TGB Dual)</li> <li>Nintendo - Game Boy Advance (mGBA)</li> <li>Nintendo - Game Boy Advance (VBA-M)</li> <li>Nintendo - SNES / Famicom (higan Accuracy)</li> <li>Nintendo - SNES / Famicom (nSide Balanced)</li> <li>Nintendo - SNES / Famicom (Mesen-S)</li> </ul>"},{"location":"library/gearcoleco/","title":"Coleco - ColecoVision (GearColeco)","text":""},{"location":"library/gearcoleco/#background","title":"Background","text":"<p>Gearcoleco is an open source, cross-platform, ColecoVision emulator written in C++.</p> <ul> <li>Accurate Z80 core, including undocumented opcodes and behavior like R and MEMPTR registers.</li> <li>Accurate TMS9918 emulation.</li> <li>Support for ColecoVision Super Game Module (SGM) and MegaCart ROMs.</li> <li>Support for Super Action Controller (SAC), Wheel Controller and Roller Controller.</li> <li>Supported platforms (libretro): Windows, Linux, macOS, Raspberry Pi, Android, iOS, tvOS, PlayStation Vita, PlayStation 3, Nintendo 3DS, Nintendo GameCube, Nintendo Wii, Nintendo WiiU, Nintendo Switch, Emscripten, Classic Mini systems (NES, SNES, C64, ...), OpenDingux, RetroFW and QNX.</li> </ul> <p>The Gearcoleco core has been authored by</p> <ul> <li>Ignacio Sanchez (drhelius)</li> </ul> <p>The Gearcoleco core is licensed under</p> <ul> <li>GPLv3</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/gearcoleco/#bios","title":"BIOS","text":"<p>Gearcoleco requires a BIOS file to work.</p> <p>Required or optional firmware files go in the frontend's system directory.</p> <p>Attention</p> <p>Gearcoleco emulator requires a ColecoVision BIOS. In order to get it to work you must place the following file in RetroArch's system directory.</p> Filename Description md5sum colecovision.rom ColecoVision BIOS - Required 2c66f5911e5b42b8ebe113403548eee7"},{"location":"library/gearcoleco/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the Gearcoleco core have the following file extensions:</p> <ul> <li>.col</li> <li>.cv</li> <li>.bin</li> <li>.rom</li> </ul> <p>RetroArch database(s) that are associated with the Gearcoleco core:</p> <ul> <li>Coleco - ColecoVision</li> </ul>"},{"location":"library/gearcoleco/#features","title":"Features","text":"<p>Frontend-level settings or features that the Gearcoleco core respects.</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2715 Core Options \u2714 Memory Monitoring (achievements) \u2714 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2714 LEDs \u2715"},{"location":"library/gearcoleco/#directories","title":"Directories","text":"<p>The Gearcoleco core's library name is 'Gearcoleco'</p> <p>The Gearcoleco core saves/loads to/from these directories.</p> <p>Frontend's Save directory</p> File Description *.srm Cartridge battery save <p>Frontend's State directory</p> File Description *.state# State"},{"location":"library/gearcoleco/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The Gearcoleco core's core provided FPS is 60 for NTSC games and 50 for PAL games</li> <li>The Gearcoleco core's core provided sample rate is 44100 Hz</li> <li>The Gearcoleco core's width is 256</li> <li>The Gearcoleco core's height is 192</li> <li>The Gearcoleco core's core provided aspect ratio is 4:3</li> </ul>"},{"location":"library/gearcoleco/#core-options","title":"Core options","text":"<p>The Gearcoleco core has the following options that can be tweaked from the core options menu. The default setting is bolded.</p> <p>Settings with (restart) means that core has to be closed for the new setting to be applied on next launch.</p> <ul> <li> <p>Refresh Rate (restart) [gearcoleco_timing] (Auto|NTSC (60 Hz)|PAL (50 Hz))</p> <p>Select which refresh rate will be used in emulation.</p> <ul> <li>Auto selects the best refresh rate based on the rom.</li> <li>NTSC (60 Hz) forces 60 Hz.</li> <li>PAL (50 Hz) forces 50 Hz.</li> </ul> </li> <li> <p>Aspect Ratio [gearcoleco_aspect_ratio] (1:1 PAR|4:3 DAR|16:9 DAR|16:10 DAR)</p> <p>Select which aspect ratio will be presented by the core.</p> <ul> <li>1:1 PAR selects an aspect ratio that produces square pixels.</li> <li>4:3 DAR forces 4:3 aspect ratio.</li> <li>16:9 DAR forces 16:9 aspect ratio.</li> <li>16:10 DAR forces 16:10 aspect ratio.</li> </ul> </li> <li> <p>Overscan [gearcoleco_overscan] (Disabled|Top+Bottom|Full (284 width)|Full (320 width))</p> <p>Select which overscan (borders) will be used in emulation.</p> <ul> <li>Disabled disables overscan.</li> <li>Top+Bottom enables overscan for top and bottom.</li> <li>Full (284 width) enables overscan for top, bottom, left and right (284 width).</li> <li>Full (320 width) enables overscan for top, bottom, left and right (320 width).</li> </ul> </li> <li> <p>Allow Up+Down / Left+Right [gearcoleco_up_down_allowed] (Disabled|Enabled)</p> <p>Enabling this option allows pressing, quickly alternating, or holding both left and right (or up and down in some games) directions at the same time.</p> <p>This may cause movement based glitches to occur in certain games.</p> <p>It's best to keep this core option disabled.</p> </li> <li> <p>No Sprite Limit [gearcoleco_no_sprite_limit] (Disabled|Enabled)</p> <p>Enabling this will remove the sprite limit in a single line.</p> <p>This may cause glitches to occur in certain games.</p> <p>It's best to keep this core option disabled.</p> </li> <li> <p>Spinner Support [gearcoleco_spinners] (Disabled|Super Action Controller|Wheel Controller|Roller Controller)</p> <p>Select which controller will be used in emulation. Spinners are controlled by mouse movement. Mouse buttons are mapped to Left (Yellow) and Right (Red) buttons.</p> <ul> <li>Disabled disables spinner support.</li> <li>Super Action Controller enables spinner support for Super Action Controller.</li> <li>Wheel Controller enables spinner support for Wheel Controller.</li> <li>Roller Controller enables spinner support for Roller Controller.</li> </ul> </li> <li> <p>Spinner Sensitivity [gearcoleco_spinner_sensitivity] (1|1-10)</p> <p>Select the spinner sensitivity.</p> <ul> <li>1 is the lowest sensitivity.</li> <li>10 is the highest sensitivity.</li> </ul> </li> </ul>"},{"location":"library/gearcoleco/#joypad","title":"Joypad","text":"Coleco Controller RetroPad Inputs Joystick Up Joystick Down Joystick Left Joystick Right Yellow (Left) Red (Right) Keypad 1 Keypad 2 Keypad 3 Keypad 4 Keypad 5 Keypad 6 Keypad 7 Keypad 8 Keypad * Keypad # Keypad 9   Left Analog Y Keypad 0   Left Analog X Purple   Right Analog Y Blue   Right Analog X"},{"location":"library/gearcoleco/#external-links","title":"External Links","text":"<ul> <li>Official Gearcoleco Repository</li> <li>Libretro Gearcoleco Core info file</li> <li>Report Gearcoleco Core Issues Here</li> </ul>"},{"location":"library/gearcoleco/#see-also","title":"See also","text":"<ul> <li>ColecoVision/CreatiVision/My Vision (JollyCV)</li> <li>MSX/SVI/ColecoVision/SG-1000 (blueMSX)</li> </ul>"},{"location":"library/geargrafx/","title":"NEC - PC Engine / SuperGrafx (Geargrafx)","text":""},{"location":"library/geargrafx/#background","title":"Background","text":"<p>Geargrafx is an open source, cross-platform, PC Engine / TurboGrafx-16 / SuperGrafx emulator written in C++.</p> <ul> <li>Accurate emulation supporting the entire HuCard PCE / SGX catalog</li> <li>CD-ROM\u00b2, Super CD-ROM\u00b2 and Arcade CD-ROM\u00b2 systems</li> <li>Multi Tap support (up to 5 players)</li> <li>Controllers:<ul> <li>Standard Gamepad (2 buttons)</li> <li>Avenue Pad 3 (3 buttons, auto-configured based on game)</li> <li>Avenue Pad 6 (6 buttons)</li> </ul> </li> <li>Internal database for automatic rom detection and hardware selection if <code>Auto</code> options are selected</li> <li>Backup RAM support</li> <li>Save state support</li> <li>Retro Achievements support</li> <li>Adjustable scanline count (224p, 240p, or manual)</li> <li>RGB or Composite color output</li> <li>Supported platforms (libretro): Windows, Linux, macOS, Raspberry Pi, Android, iOS, tvOS, PlayStation Vita, PlayStation 3, Nintendo 3DS, Nintendo GameCube, Nintendo Wii, Nintendo WiiU, Nintendo Switch, Emscripten, Classic Mini systems (NES, SNES, C64, etc.), OpenDingux, RetroFW and QNX.</li> </ul> <p>The Geargrafx core has been authored by</p> <ul> <li>Ignacio Sanchez (drhelius)</li> </ul> <p>The Geargrafx core is licensed under</p> <ul> <li>GPLv3</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/geargrafx/#bios","title":"BIOS","text":"<p>Geargrafx requires a BIOS file to run CD-ROM games.</p> <p>Required or optional firmware files go in RetroArch's system directory.</p> <p>Attention</p> <p>Any CD-ROM System BIOS will work, but some are known to be incompatible with certain games.</p> <p>Attention</p> <p>You can choose the BIOS to use in the core options menu.</p> Filename Description md5sum syscard3.pce Super CD-ROM2 System V3.xx - Required 38179df8f4ac870017db21ebcbf53114 syscard2.pce CD-ROM System V2.xx - Optional syscard1.pce CD-ROM System V1.xx - Optional gexpress.pce Game Express CD Card - Optional"},{"location":"library/geargrafx/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the Geargrafx core have the following file extensions:</p> <ul> <li>.pce</li> <li>.sgx</li> <li>.cue</li> <li>.chd</li> </ul> <p>Geargrafx supports <code>chd</code>, <code>cue/bin</code>, <code>cue/img</code> and <code>cue/iso</code> CD-ROM images. <code>cue/iso + wav</code> is also supported when audio track format is 44100Hz, 16 bit, stereo. It does not support MP3 or OGG audio tracks.</p> <p>RetroArch database(s) that are associated with the Geargrafx core:</p> <ul> <li>NEC - PC Engine - TurboGrafx 16</li> <li>NEC - PC Engine SuperGrafx</li> <li>NEC - PC Engine CD - TurboGrafx-CD</li> </ul>"},{"location":"library/geargrafx/#features","title":"Features","text":"<p>Frontend-level settings or features that the Geargrafx core respects.</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2715 Core Options \u2714 Memory Monitoring (achievements) \u2714 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2714 LEDs \u2715"},{"location":"library/geargrafx/#directories","title":"Directories","text":"<p>The Geargrafx core's library name is 'Geargrafx'</p> <p>The Geargrafx core saves/loads to/from these directories.</p> <p>Frontend's Save directory</p> File Description *.srm Cartridge battery save <p>Frontend's State directory</p> File Description *.state# State"},{"location":"library/geargrafx/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The Geargrafx core's provided FPS is 59.82</li> <li>The Geargrafx core's provided sample rate is 44100 Hz</li> <li>The Geargrafx core's base width is dependent on the content and overscan settings (Without overscan: 256, 341, 512. With overscan: 280, 373, 560) </li> <li>The Geargrafx core's base height is dependent on the 'Scanline Start' and 'Scanline End' core options.</li> <li>The Geargrafx core's max width is 560</li> <li>The Geargrafx core's max height is 242</li> <li>The Geargrafx core's provided aspect ratio is dependent on the 'Aspect Ratio' core option.</li> </ul>"},{"location":"library/geargrafx/#core-options","title":"Core options","text":"<p>The Geargrafx core has the following options that can be tweaked from the core options menu. The default setting is bolded.</p> <p>Settings with (restart) means that core has to be closed for the new setting to be applied on next launch.</p> <ul> <li> <p>System (restart) [geargrafx_console_type] (Auto|PC Engine (JAP)|SuperGrafx (JAP)|TurboGrafx-16 (USA))</p> <p>Select the console type to emulate. The default setting, Auto, automatically detects the appropriate console type based on the loaded content. Many US games will not start if a Japanese system is detected.</p> </li> <li> <p>Aspect Ratio [geargrafx_aspect_ratio] (1:1 PAR|4:3 DAR|6:5 DAR|16:9 DAR|16:10 DAR)</p> <p>Select which aspect ratio will be presented by the core.</p> <ul> <li>1:1 PAR selects an aspect ratio that produces square pixels.</li> <li>4:3 DAR forces 4:3 aspect ratio.</li> <li>6:5 DAR forces 6:5 aspect ratio.</li> <li>16:9 DAR forces 16:9 aspect ratio.</li> <li>16:10 DAR forces 16:10 aspect ratio.</li> </ul> </li> <li> <p>Overscan [geargrafx_overscan] (Disabled|Enabled)</p> <p>This option enables/disables overscan (borders). Overscan width is dependent on the content.</p> </li> <li> <p>Scanline Count [geargrafx_scanline_count] (224p|240p|Manual)</p> <p>Select which scanline count will be used in emulation.</p> <ul> <li>224p forces 224 scanlines.</li> <li>240p forces 240 scanlines.</li> <li>Manual lets you set the first and last scanline manually.</li> </ul> </li> <li> <p>Scanline Start (Manual) [geargrafx_scanline_start] (3|values from 0 to 30)</p> <p>This option will set the first scanline to be displayed. Scanline 0 is the first visible scanline. This option is only available when 'Scanline Count' is set to 'Manual'.</p> </li> <li> <p>Scanline End (Manual) [geargrafx_scanline_end] (241|values from 220 to 241)</p> <p>This option will set the last scanline to be displayed. Scanline 241 is the last visible scanline. This option is only available when 'Scanline Count' is set to 'Manual'.</p> </li> <li> <p>Composite Colors [geargrafx_composite_colors] (Disabled|Enabled)</p> <p>If enabled, the core will use composite colors instead of RGB colors.</p> </li> <li> <p>No Sprite Limit [geargrafx_no_sprite_limit] (Disabled|Enabled)</p> <p>Enabling this option removes the per-line sprite limit, but may cause glitches in certain games. It's best to keep this core option disabled.</p> </li> <li> <p>Backup RAM (restart) [geargrafx_backup_ram] (Enabled|Disabled)</p> <p>This option allows you to disable backup RAM (not recommended).</p> </li> <li> <p>CD-ROM (restart) [geargrafx_cdrom_type] (Auto|Standard|Super CD-ROM|Arcade CD-ROM)</p> <p>Choose the type of CD-ROM system to emulate. The Auto setting automatically selects the appropriate CD-ROM type based on the loaded content.</p> </li> <li> <p>CD-ROM Bios (restart) [geargrafx_cdrom_bios] (Auto|System Card 1|System Card 2|System Card 3|Game Express)</p> <p>Specify the BIOS file to use for CD-ROM emulation. The Auto setting automatically selects the appropriate BIOS based on the loaded content. You can also manually choose one for compatibility with specific games.</p> </li> <li> <p>Preload CD-ROM (restart) [geargrafx_cdrom_preload] (Disabled|Enabled)</p> <p>This option will preload all CD-ROM tracks in RAM. It will increase the memory usage of the core, but may improve performance.</p> </li> <li> <p>PSG Volume [geargrafx_psg_volume] (100|0 - 200)</p> <p>This option sets the volume of the PSG sound system, which is used for sound effects and music in many games. The value is a percentage from 0 to 200, where 100 is the default volume.</p> </li> <li> <p>CD-ROM Volume [geargrafx_cdrom_volume] (100|0 - 200)</p> <p>This option sets the volume of the CD-ROM sound system, which is used for music in CD-ROM games. The value is a percentage from 0 to 200, where 100 is the default volume.</p> </li> <li> <p>ADPCM Volume [geargrafx_adpcm_volume] (100|0 - 200)</p> <p>This option sets the volume of the ADPCM sound system, which is typically used for speech in CD-ROM games. The value is a percentage from 0 to 200, where 100 is the default volume.</p> </li> <li> <p>Allow Up+Down / Left+Right [geargrafx_up_down_allowed] (Disabled|Enabled)</p> <p>Enabling this option allows pressing, quickly alternating, or holding both left and right (or up and down in some games) directions at the same time. This may cause movement based glitches to occur in certain games. It's best to keep this core option disabled.</p> </li> <li> <p>Allow Soft Reset [geargrafx_soft_reset] (Enabled|Disabled)</p> <p>Pressing RUN and SELECT simultaneously on the PCE gamepad will SOFT RESET the console. This is the default hardware behavior. Disable this option if you want the soft reset functionality turned off.</p> </li> <li> <p>TurboTap [geargrafx_turbotap] (Disabled|Enabled)</p> <p>This option enables/disables TurboTap support (up to 5 players).</p> </li> <li> <p>Avenue Pad 3 Switch [geargrafx_avenue_pad_3_switch] (Auto|SELECT|RUN)</p> <p>When using the Avenue Pad 3 controller, you can set the switch to either RUN or SELECT with this option. If you choose Auto, the emulator will select the best option based on the game being played.</p> </li> <li> <p>P1 Turbo I [geargrafx_turbo_p1_i] (Disabled|Enabled)</p> <p>Enables/disables the Turbo I button for Player 1.</p> </li> <li> <p>P1 Turbo II [geargrafx_turbo_p1_ii] (Disabled|Enabled)</p> <p>Enables/disables the Turbo II button for Player 1.</p> </li> <li> <p>P2 Turbo I [geargrafx_turbo_p2_i] (Disabled|Enabled)</p> <p>Enables/disables the Turbo I button for Player 2.</p> </li> <li> <p>P2 Turbo II [geargrafx_turbo_p2_ii] (Disabled|Enabled)</p> <p>Enables/disables the Turbo II button for Player 2.</p> </li> <li> <p>P3 Turbo I [geargrafx_turbo_p3_i] (Disabled|Enabled)</p> <p>Enables/disables the Turbo I button for Player 3.</p> </li> <li> <p>P3 Turbo II [geargrafx_turbo_p3_ii] (Disabled|Enabled)</p> <p>Enables/disables the Turbo II button for Player 3.</p> </li> <li> <p>P4 Turbo I [geargrafx_turbo_p4_i] (Disabled|Enabled)</p> <p>Enables/disables the Turbo I button for Player 4.</p> </li> <li> <p>P4 Turbo II [geargrafx_turbo_p4_ii] (Disabled|Enabled)</p> <p>Enables/disables the Turbo II button for Player 4.</p> </li> <li> <p>P5 Turbo I [geargrafx_turbo_p5_i] (Disabled|Enabled)</p> <p>Enables/disables the Turbo I button for Player 5.</p> </li> <li> <p>P5 Turbo II [geargrafx_turbo_p5_ii] (Disabled|Enabled)</p> <p>Enables/disables the Turbo II button for Player 5.</p> </li> <li> <p>P1 Turbo I Speed [geargrafx_turbo_speed_p1_i] (4|values from 1 to 15)</p> <p>Number of frames between each button I toggle for Player 1.</p> </li> <li> <p>P1 Turbo II Speed [geargrafx_turbo_speed_p1_ii] (4|values from 1 to 15)</p> <p>Number of frames between each button II toggle for Player 1.</p> </li> <li> <p>P2 Turbo I Speed [geargrafx_turbo_speed_p2_i] (4|values from 1 to 15)</p> <p>Number of frames between each button I toggle for Player 2.</p> </li> <li> <p>P2 Turbo II Speed [geargrafx_turbo_speed_p2_ii] (4|values from 1 to 15)</p> <p>Number of frames between each button II toggle for Player 2.</p> </li> <li> <p>P3 Turbo I Speed [geargrafx_turbo_speed_p3_i] (4|values from 1 to 15)</p> <p>Number of frames between each button I toggle for Player 3.</p> </li> <li> <p>P3 Turbo II Speed [geargrafx_turbo_speed_p3_ii] (4|values from 1 to 15)</p> <p>Number of frames between each button II toggle for Player 3.</p> </li> <li> <p>P4 Turbo I Speed [geargrafx_turbo_speed_p4_i] (4|values from 1 to 15)</p> <p>Number of frames between each button I toggle for Player 4.</p> </li> <li> <p>P4 Turbo II Speed [geargrafx_turbo_speed_p4_ii] (4|values from 1 to 15)</p> <p>Number of frames between each button II toggle for Player 4.</p> </li> <li> <p>P5 Turbo I Speed [geargrafx_turbo_speed_p5_i] (4|values from 1 to 15)</p> <p>Number of frames between each button I toggle for Player 5.</p> </li> <li> <p>P5 Turbo II Speed [geargrafx_turbo_speed_p5_ii] (4|values from 1 to 15)</p> <p>Number of frames between each button II toggle for Player 5.</p> </li> </ul>"},{"location":"library/geargrafx/#joypad","title":"Joypad","text":"RetroPad Inputs PCE Pad (2-button) Avenue Pad 3 (3-button) Avenue Pad 6 (6-button) D-Pad Up D-Pad Up D-Pad Up D-Pad Down D-Pad Down D-Pad Down D-Pad Left D-Pad Left D-Pad Left D-Pad Right D-Pad Right D-Pad Right Select Select Select Run Run Run I I I II II II III (mapped to Select/Run) III IV V VI Toggle Turbo II Toggle Turbo II Toggle Turbo II Toggle Turbo I Toggle Turbo I Toggle Turbo I"},{"location":"library/geargrafx/#external-links","title":"External Links","text":"<ul> <li>Official Geargrafx Repository</li> <li>Libretro Geargrafx Core info file</li> <li>Report Libretro Geargrafx Core Issues Here</li> </ul>"},{"location":"library/gearsystem/","title":"Sega - MS/GG (Gearsystem)","text":""},{"location":"library/gearsystem/#background","title":"Background","text":"<p>Gearsystem is an open source, cross-platform, Sega Master System / Game Gear / SG-1000 / Othello Multivision emulator written in C++.</p> <ul> <li>Accurate Z80 core, including undocumented opcodes and behavior like R and MEMPTR registers.</li> <li>Supported cartridges: ROM, ROM + RAM, SEGA, Codemasters, Korean, MSX + Nemesis, Janggun, SG-1000, and many Korean multi-carts.</li> <li>Automatic region detection: NTSC-JAP, NTSC-USA, PAL-EUR.</li> <li>Accurate VDP emulation, including timing and VDP specifics for SMS, SMS2, GG and TMS9918 modes.</li> <li>Support for YM2413 (OPLL) FM sound chip.</li> <li>Light Phaser and Paddle Control</li> <li>Internal database for rom detection.</li> <li>Battery powered RAM save support.</li> <li>Save states.</li> <li>Game Genie and Pro Action Replay cheat support.</li> <li>Supported platforms (libretro): Windows, Linux, macOS, Raspberry Pi, Android, iOS, tvOS, PlayStation Vita, PlayStation 3, Nintendo 3DS, Nintendo GameCube, Nintendo Wii, Nintendo WiiU, Nintendo Switch, Emscripten, Classic Mini systems (NES, SNES, C64, ...), OpenDingux, RetroFW and QNX.</li> </ul> <p>The Gearsystem core has been authored by</p> <ul> <li>Ignacio Sanchez (drhelius)</li> </ul> <p>The Gearsystem core is licensed under</p> <ul> <li>GPLv3</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/gearsystem/#bios","title":"BIOS","text":"<p>Gearsystem does not require BIOS (bootrom) files to work but they can be used optionally.</p> <p>When the BIOS is enabled it will execute as in original hardware, causing invalid roms to lock or preventing them to boot, depending on the BIOS file and rom region and system. If you experience issues disable the BIOS.</p> <p>Required or optional firmware files go in the frontend's system directory.</p> <p>Attention</p> <p>If you\u2019d like to use any BIOS, you can place the following files in RetroArch's system directory. Then, you need to enable Master System BIOS and/or Game Gear BIOS core options for these BIOS files to be used.</p> Filename Description md5sum bios.sms Master System BIOS - Optional 840481177270d5642a14ca71ee72844c bios.gg Game Gear BIOS - Optional 672e104c3be3a238301aceffc3b23fd6"},{"location":"library/gearsystem/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the Gearsystem core have the following file extensions:</p> <ul> <li>.sms</li> <li>.gg</li> <li>.sg</li> <li>.mv</li> <li>.bin</li> <li>.rom</li> </ul> <p>RetroArch database(s) that are associated with the Gearsystem core:</p> <ul> <li>Sega - Game Gear</li> <li>Sega - Master System - Mark III</li> <li>Sega - SG-1000</li> </ul>"},{"location":"library/gearsystem/#features","title":"Features","text":"<p>Frontend-level settings or features that the Gearsystem core respects.</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2715 Core Options \u2714 Memory Monitoring (achievements) \u2714 RetroArch Cheats - Game Genie \u2714 RetroArch Cheats - Pro Acion Replay \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2714 LEDs \u2715"},{"location":"library/gearsystem/#directories","title":"Directories","text":"<p>The Gearsystem core's library name is 'Gearsystem'</p> <p>The Gearsystem core saves/loads to/from these directories.</p> <p>Frontend's Save directory</p> File Description *.srm Cartridge battery save <p>Frontend's State directory</p> File Description *.state# State"},{"location":"library/gearsystem/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The Gearsystem core's core provided FPS is 60 for NTSC games and 50 for PAL games</li> <li>The Gearsystem core's core provided sample rate is 44100 Hz</li> <li>The Gearsystem core's base width is 256 for Master System / SG-1000 games and 160 for Game Gear games</li> <li>The Gearsystem core's base height is 192 for Master System / SG-1000 games and 144 for Game Gear games</li> <li>The Gearsystem core's max width is 256 for Master System games and 160 for Game Gear games</li> <li>The Gearsystem core's max height is 224 for Master System games and 144 for Game Gear games</li> <li>The Gearsystem core's core provided aspect ratio is 4:3 for Master System / SG-1000 games and 10:9 for Game Gear games</li> </ul>"},{"location":"library/gearsystem/#core-options","title":"Core options","text":"<p>The Gearsystem core has the following options that can be tweaked from the core options menu. The default setting is bolded.</p> <p>Settings with (restart) means that core has to be closed for the new setting to be applied on next launch.</p> <ul> <li> <p>System (restart) [gearsystem_system] (Auto|Master System / Mark III|Game Gear|SG-1000 / Multivision)</p> <p>Select which hardware/model is emulated.</p> <ul> <li>Auto selects the best hardware based on the rom.</li> <li>Master System / Mark III forces original Master System / Mark III hardware.</li> <li>Game Gear forces Game Gear hardware.</li> <li>SG-1000 / Multivision forces SG-1000 / Multivision hardware.</li> </ul> </li> <li> <p>Region (restart) [gearsystem_region] (Auto|Master System Japan|Master System Export|Game Gear Japan|Game Gear Export|Game Gear International)</p> <p>Select which region is emulated.</p> <ul> <li>Auto selects the best region based on the rom.</li> <li>Master System Japan forces Master System Japan region.</li> <li>Master System Export forces Master System Export region.</li> <li>Game Gear Japan forces Game Gear Japan region.</li> <li>Game Gear Export forces Game Gear Export region.</li> <li>Game Gear International forces Game Gear International region.</li> </ul> </li> <li> <p>Mapper (restart) [gearsystem_mapper] (Auto|ROM|SEGA|Codemasters|Korean|SG-1000)</p> <p>Select which mapper (memory bank controller) is emulated.</p> <ul> <li>Auto selects the best mapper based on the rom.</li> <li>ROM forces no mapper.</li> <li>SEGA forces SEGA mapper.</li> <li>Codemasters forces Codemasters mapper.</li> <li>Korean forces Korean mapper.</li> <li>SG-1000 forces SG-1000 mapper.</li> </ul> </li> <li> <p>Refresh Rate (restart) [gearsystem_timing] (Auto|NTSC (60 Hz)|PAL (50 Hz))</p> <p>Select which refresh rate will be used in emulation.</p> <ul> <li>Auto selects the best refresh rate based on the rom.</li> <li>NTSC (60 Hz) forces 60 Hz.</li> <li>PAL (50 Hz) forces 50 Hz.</li> </ul> </li> <li> <p>Aspect Ratio [gearsystem_aspect_ratio] (1:1 PAR|4:3 DAR|16:9 DAR|16:10 DAR)</p> <p>Select which aspect ratio will be presented by the core.</p> <ul> <li>1:1 PAR selects an aspect ratio that produces square pixels.</li> <li>4:3 DAR forces 4:3 aspect ratio.</li> <li>16:9 DAR forces 16:9 aspect ratio.</li> <li>16:10 DAR forces 16:10 aspect ratio.</li> </ul> </li> <li> <p>Overscan [gearsystem_overscan] (Disabled|Top+Bottom|Full (284 width)|Full (320 width))</p> <p>Select which overscan (borders) will be used in emulation.</p> <ul> <li>Disabled disables overscan.</li> <li>Top+Bottom enables overscan for top and bottom.</li> <li>Full (284 width) enables overscan for top, bottom, left and right (284 width).</li> <li>Full (320 width) enables overscan for top, bottom, left and right (320 width).</li> </ul> </li> <li> <p>Hide Left Bar (SMS only) [gearsystem_hide_left_bar] (No|Auto|Always)</p> <p>Select when to hide the left bar in Master System games.</p> <ul> <li>No never hides the left bar.</li> <li>Auto hides the left bar when the bar is detected.</li> <li>Always always hides the left bar even if no left bar is detected.</li> </ul> </li> <li> <p>Master System BIOS (restart) [gearsystem_bios_sms] (Disabled|Enabled)</p> <p>This option will enables/disables BIOS for Master System / Mark III models. For this to work, the <code>bios.sms</code> file must exist in RetroArch's system directory.</p> </li> <li> <p>Game Gear BIOS (restart) [gearsystem_bios_gg] (Disabled|Enabled)</p> <p>This option will enables/disables BIOS for Game Gear model. For this to work, the <code>bios.gg</code> file must exist in the RetroArch's system directory.</p> </li> <li> <p>YM2413 (restart) [gearsystem_ym2413] (Auto|Disabled)</p> <p>This option will enables/disables YM2413 (OPLL) FM sound chip.</p> <ul> <li>Auto selects the best option based on the rom.</li> <li>Disabled disables YM2413.</li> </ul> </li> <li> <p>3D Glasses [gearsystem_glasses] (Both Eyes / OFF|Left Eye|Right Eye)</p> <p>For games with 3D glasses support this option will let you choose to display only left or right eye.</p> <ul> <li>Both Eyes / OFF is required for games with NO 3D support or if you want to display both eyes in 3D games.</li> <li>Left Eye displays the left eye only.</li> <li>Right Eye displays the right eye only.</li> </ul> </li> <li> <p>Allow Up+Down / Left+Right [gearsystem_up_down_allowed] (Disabled|Enabled)</p> <p>Enabling this option allows pressing, quickly alternating, or holding both left and right (or up and down in some games) directions at the same time.</p> <p>This may cause movement based glitches to occur in certain games.</p> <p>It's best to keep this core option disabled.</p> </li> <li> <p>Light Gun Input [gearsystem_lightgun_input] (Light Gun|Touchscreen)</p> <p>Select which input will be used for Light Phaser games.</p> <ul> <li>Light Gun - Selects mouse-controlled 'Light Gun' input (devices will use RetroLightgun inputs).</li> <li>Touchscreen - Selects a touchscreen input (devices will use RetroPointer inputs instead).</li> </ul> </li> <li> <p>Light Gun Crosshair [gearsystem_lightgun_crosshair] (Disabled|Enabled)</p> <p>Enable or disable the crosshair for Light Phaser games.</p> </li> <li> <p>Light Gun Crosshair Shape [gearsystem_lightgun_shape] (Cross|Square)</p> <p>Select the shape of the crosshair for Light Phaser games.</p> </li> <li> <p>Light Gun Crosshair Color [gearsystem_lightgun_color] (White|Black|Red|Green|Blue|Yellow|Magenta|Cyan)</p> <p>Select the color of the crosshair for Light Phaser games.</p> </li> <li> <p>Light Gun Crosshair Offset X [gearsystem_lightgun_crosshair_offset_x] (0|-10 - 10)</p> <p>Set the horizontal pixel offset of the crosshair for calibration.</p> </li> <li> <p>Light Gun Crosshair Offset Y [gearsystem_lightgun_crosshair_offset_y] (0|-10 - 10)</p> <p>Set the vertical pixel offset of the crosshair for calibration.</p> </li> <li> <p>Paddle Sensitivity [gearsystem_paddle_sensitivity] (1|1-15)</p> <p>Set the sensitivity of the Paddle Control.</p> <ul> <li>1 is the lowest sensitivity.</li> <li>15 is the highest sensitivity.</li> </ul> </li> </ul>"},{"location":"library/gearsystem/#joypad","title":"Joypad","text":"RetroPad Inputs SMS / GG Pad Up Down Left Right 1 2 Pause / Start"},{"location":"library/gearsystem/#lightgun","title":"Lightgun","text":"RetroLightgun Inputs Light Phaser  Gun Crosshair Light Phaser Crosshair Gun Trigger Light Phaser Trigger"},{"location":"library/gearsystem/#pointer","title":"Pointer","text":"RetroPointer Inputs Light Phaser  or  Pointer Position Light Phaser Crosshair  Mouse 1 Light Phaser Trigger"},{"location":"library/gearsystem/#mouse","title":"Mouse","text":"RetroMouse Inputs Paddle Control  Mouse Cursor Paddle wheel  Mouse 1 Paddle button"},{"location":"library/gearsystem/#compatibility","title":"Compatibility","text":"<ul> <li>Gearsystem Accuracy Tests</li> </ul>"},{"location":"library/gearsystem/#external-links","title":"External Links","text":"<ul> <li>Official Gearsystem Repository</li> <li>Libretro Gearsystem Core info file</li> <li>Report Libretro Gearsystem Core Issues Here</li> </ul>"},{"location":"library/gearsystem/#see-also","title":"See also","text":""},{"location":"library/gearsystem/#sega-game-gear","title":"Sega - Game Gear","text":"<ul> <li>Sega - MS/GG/MD/CD (Genesis Plus GX)</li> </ul>"},{"location":"library/gearsystem/#sega-master-system-mark-iii","title":"Sega - Master System - Mark III","text":"<ul> <li>Sega - Master System (Emux SMS)</li> <li>Sega - MS/GG/MD/CD (Genesis Plus GX)</li> <li>Sega - MS/MD/CD/32X (PicoDrive)</li> </ul>"},{"location":"library/gearsystem/#sega-sg-1000","title":"Sega - SG-1000","text":"<ul> <li>MSX/SVI/ColecoVision/SG-1000 (blueMSX)</li> <li>Sega - MS/GG/MD/CD (Genesis Plus GX)</li> </ul>"},{"location":"library/genesis_plus_gx/","title":"Sega - MS/GG/MD/CD (Genesis Plus GX)","text":""},{"location":"library/genesis_plus_gx/#background","title":"Background","text":"<p>Genesis Plus GX is an open-source Sega 8/16 bit emulator developed by Eke-Eke which focuses on accuracy and portability. The source code, originally based on Genesis Plus 1.3 by Charles MacDonald, has been heavily modified &amp; enhanced, with respect to initial goals and design, in order to improve the accuracy of emulation, implementing new features and adding support for extra peripherals, cartridge &amp; systems hardware such as various lightguns, the FM Sound Unit and Lock-On cartridge technology.</p> <p>Genesis Plus GX has 100% compatibility with Genesis / Mega Drive, Sega/Mega CD, Master System, Game Gear, SG-1000 &amp; Pico released software (including all unlicensed or pirate known dumps), also emulating backwards compatibility modes when available. </p> <p>Keep in mind that 32X games are not supported.</p> <p>The Genesis Plus GX core has been authored by:</p> <ul> <li>Eke-Eke</li> <li>Charles McDonald</li> </ul> <p>The Genesis Plus GX core is licensed under:</p> <ul> <li>Non-commercial</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/genesis_plus_gx/#bios","title":"BIOS","text":"<p>Required or optional firmware files go in the frontend's system directory:</p> <p>Please note that BIOS choice isn't locked to any specific revisions.</p> <p>BIOS files that are labeled (bootrom) and (lock-on) must have their corresponding core option ('System bootrom' core option or 'Cartridge lock-on' core option) configured correctly in order for them to be loaded.</p> Filename Description md5sum bios_MD.bin MegaDrive startup ROM (bootrom) - Optional 45e298905a08f9cfb38fd504cd6dbc84 bios_CD_E.bin MegaCD EU BIOS - Required for MegaCD EU games e66fa1dc5820d254611fdcdba0662372 bios_CD_U.bin SegaCD US BIOS - Required for SegaCD US games 854b9150240a198070150e4566ae1290 bios_CD_J.bin MegaCD JP BIOS - Required for MegaCD JP games 278a9397d192149e84e820ac621a8edd bios_E.sms MasterSystem EU BIOS (bootrom) - Optional 840481177270d5642a14ca71ee72844c bios_U.sms MasterSystem US BIOS (bootrom) - Optional 840481177270d5642a14ca71ee72844c bios_J.sms MasterSystem JP BIOS (bootrom) - Optional 24a519c53f67b00640d0048ef7089105 bios.gg GameGear BIOS (bootrom) - Optional 672e104c3be3a238301aceffc3b23fd6 sk.bin Sonic &amp; Knuckles ROM (lock-on) - Optional 4ea493ea4e9f6c9ebfccbdb15110367e sk2chip.bin [Sonic &amp; Knuckles UPMEM ROM]: Link 1; Link 2 (lock-on) - Optional b4e76e416b887f4e7413ba76fa735f16 areplay.bin Action Replay ROM (lock-on) - Optional a0028b3043f9d59ceeb03da5b073b30d ggenie.bin Game Genie ROM (lock-on) - Optional e8af7fe115a75c849f6aab3701e7799b"},{"location":"library/genesis_plus_gx/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the Genesis Plus GX core have the following file extensions:</p> <ul> <li>.m3u</li> <li>.mdx</li> <li>.md</li> <li>.smd</li> <li>.gen</li> <li>.bin</li> <li>.cue</li> <li>.iso</li> <li>.chd</li> <li>.bms</li> <li>.sms</li> <li>.gg</li> <li>.sg</li> <li>.68k</li> <li>.sgd</li> </ul> <p>RetroArch database(s) that are associated with the Genesis Plus GX core:</p> <ul> <li>Sega - Game Gear</li> <li>Sega - Master System - Mark III</li> <li>Sega - Mega-CD - Sega CD</li> <li>Sega - Mega Drive - Genesis</li> <li>Sega - PICO</li> <li>Sega - SG-1000</li> </ul>"},{"location":"library/genesis_plus_gx/#features","title":"Features","text":"<p>Frontend-level settings or features that the Genesis Plus GX core respects:</p> Feature Supported Restart \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 Memory Monitoring (achievements) \u2714 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2714 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2714 Username \u2715 Language \u2714 Crop Overscan* \u2715 LEDs \u2714 <p>* Overscan cropping available via the 'Borders' core option instead of frontend-level settings</p>"},{"location":"library/genesis_plus_gx/#directories","title":"Directories","text":"<p>The Genesis Plus GX core's library name is 'Genesis Plus GX'</p> <p>The Genesis Plus GX core saves/loads to/from these directories:</p> <p>Frontend's Save directory</p> File Description *.srm MS/GG/MD/Pico/SG-1000 Cartridge backup save cart.brm Sega/Mega CD RAM Cart scd_U.brm Sega CD US Backup RAM - When the CD System BRAM core option is set to 'Per-BIOS' scd_E.brm Mega CD EU Backup RAM - When the CD System BRAM core option is set to 'Per-BIOS' scd_J.brm Mega CD JP Backup RAM - When the CD System BRAM core option is set to 'Per-BIOS' *.brm Sega CD/MegaCD Backup RAM - When the CD System BRAM core option is set to 'Per-Game' <p>Frontend's State directory</p> File Description *.state# State"},{"location":"library/genesis_plus_gx/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The Genesis Plus GX core's provided FPS is dependent on the loaded content</li> <li>The Genesis Plus GX core's provided sample rate is 44100 Hz</li> <li>The Genesis Plus GX core's base width is dependent on the loaded content</li> <li>The Genesis Plus GX core's base height is dependent on the loaded content</li> <li>The Genesis Plus GX core's max width is dependent on the loaded content</li> <li>The Genesis Plus GX core's max height is dependent on the loaded content</li> <li>The Genesis Plus GX core's provided aspect ratio is dependent on the 'Core-provided aspect ratio' core option</li> </ul>"},{"location":"library/genesis_plus_gx/#loading-sega-cd-games","title":"Loading Sega CD games","text":"<p>When loading Sega CD games, Genesis Plus GX needs a cue-sheet that points to an image file. A cue sheet, or cue file, is a metadata file which describes how the tracks of a CD or DVD are laid out.</p> <p>If you have e.g. <code>foo.bin</code>, you should create a text file and save it as <code>foo.cue</code>. If the Sega CD game is single-track, the cue file contents should look like this:</p> <pre><code> FILE \"foo.bin\" BINARY\n  TRACK 01 MODE1/2352\n   INDEX 01 00:00:00\n</code></pre> <p>After that, you can load the <code>foo.cue</code> file in RetroArch with the Genesis Plus GX core.</p> <p>Certain Sega CD games are multi-track, so their .cue files might be more complicated.</p> <p>Here's a cue file example done with Lunar - Eternal Blue (USA)</p> <p></p> <p>For Sega-CD games, ISO + WAV, BIN + CUE and ISO + OGG formats are supported; ISO + MP3 is not supported. Audio files must be in the 16-bit stereo 44100Hz format. If using a cue sheet, WAV or OGG tracks should be denoted as AUDIO.</p> <p>When loading ISO + WAV or ISO + OGG format games, the core will attempt to load a cue named the same as the iso first. If one is not found, the following audio track naming formats are accepted for a data track of \"game.iso\":</p> <ul> <li>game02.ogg</li> <li>game 02.ogg</li> <li>game-02.ogg</li> <li>game - 02.ogg</li> <li>game_02.ogg</li> </ul>"},{"location":"library/genesis_plus_gx/#loading-multiple-disk-games","title":"Loading Multiple Disk games","text":"<p>If foo is a multiple-disk Sega CD game, you should have .cue files for each one, e.g. <code>foo (Disc 1).cue</code>, <code>foo (Disc 2).cue</code>, <code>foo (Disc 3).cue</code>.</p> <p>To take advantage of Genesis Plus GX's Disk Control feature for disk swapping, an index file (a m3u file) should be made.</p> <p>Create a text file and save it as <code>foo.m3u</code>. Then enter your game's .cue files on it. The m3u file contents should look something like this:</p> <p><code>foo.m3u</code> <pre><code>foo (Disc 1).cue\nfoo (Disc 2).cue\nfoo (Disc 3).cue\n</code></pre></p> <p>After that, you can load the <code>foo.m3u</code> file in RetroArch with the Genesis Plus GX core.</p> <p>Here's a m3u example done with the Sega CD 32x version of Night Trap</p> <p></p> <p>Attention</p> <p>Adding multi-track games to a RetroArch playlist is recommended. (Manually add an entry a playlist that points to <code>foo.m3u</code>)</p>"},{"location":"library/genesis_plus_gx/#swapping-disks","title":"Swapping Disks","text":"<p>Disks can be swapped through Quick Menu -&gt; Disk Control in RetroArch.</p> <p>If not using .m3u files, .cue files must be manually selected via the Load New Disk legacy feature.</p> <p>If using .m3u files, disks can be swapped by selecting Eject Disk, changing the Current Disk Index to your desired disk, and finally selecting Insert Disk.</p>"},{"location":"library/genesis_plus_gx/#chd","title":"CHD","text":"<p>Alternatively to using cue sheets with .bin/.iso files, you can convert your Sega CD games to .chd (MAME Compressed Hunks of Data) to reduce file sizes and neaten up your game folder.</p> <p>To convert content to CHD format, use the chdman tool found inside the latest MAME distribution and point it to a .cue file, like so:</p> <pre><code>chdman createcd --input foo.cue --output foo.chd\n</code></pre> <p>Attention</p> <p>For multi-disc content, make an .m3u file that lists all the .chd files instead of .cue files (content must be added to playlists manually).</p>"},{"location":"library/genesis_plus_gx/#playing-with-md-msu-md-modes","title":"Playing with MD+ / MSU-MD modes","text":"<p>Comparable to how MSU-1 modifcations can enhance SNES games; Mega Drive Plus / Genesis Plus (MD+) and MSU-MD (Mega SD flash cartridge) patches can be used to add CD quality level of audio to certain Sega Genesis and Mega Drive games via the emulated Sega CD hardware and its CDDA track functionality.</p> <p>Regarding Genesis Plus GX's implementation of MD+ mode operation, all CD overlay commands (incl. cue loop commands) described in MegaSD dev manual (see referenced PDF at the end of this section) are supported except the ones that deal with opening/reading files from SD card (starting from command 1Ch) but afaik no MD+ hacks use these commands so far.</p> <p>Since there is no way to auto-detect a MD+ patched ROM, MegaSD add-on emulation needs to be enabled in core options (through the newly added \"CD add-on\" core option). However, when \"CD add-on\" core option is set to Auto, if a cue file with same basename as loaded ROM file is found in same directory AND that cue file contains MegaSD specific keywords (\"REM LOOP xxx\", \"REM NOLOOP\",...), MegaSD CD overlay emulation will be automatically enabled (instead of full Sega/Mega CD hardware emulation).</p> <p>By setting the \"CD add-on\" core option to \"Sega/Mega CD\", you can force Sega/Mega CD hardware emulation when any MD game (&lt;8MB) is loaded even if there is no cue file found in loaded game directory (this can be useful for demos or homebrew games that want to use Mega CD extra hardware without necessarily having a loaded CD beforehand).</p> <p>And by setting the \"CD add-on\" option to \"None\", Sega/Mega CD hardware emulation will be forced disabled, even if a cue file is found in loaded game directory or when the loaded game is known to have Sega/Mega CD support (like Pier Solar, Flux or Wonder Library). This emulates the behavior where there is no Sega/Mega CD unit attached.</p> <p>Although no known games are using them, MegaSD extended SSF2 mapper and limited ROM write mapper (automatically enabled when respectively \"SEGA SSF2\" and \"SEGA MEGASD\" are found in loaded ROM header) are also emulated, according to the description in MegaSD dev manual. Note that MegaSD overlay will also automatically be enabled when these mappers are detected, no matter of the \"CD Add-on\" core option.</p> <p>Please peruse the official MegaSD manual for further information: https://downloads.terraonion.com/public/MegaSD_DEV_Manual.pdf</p> <p>Also, there's an useful reference wiki here for MSU-MD games/patches and its technical specifications here: https://arcadetv.github.io/msu-md-patches/</p> <p>Attention</p> <p>Make sure that your files match what's specified in your MD+/MSU-MD cue file!</p>"},{"location":"library/genesis_plus_gx/#core-options","title":"Core options","text":"<p>The Genesis Plus GX core has the following options that can be tweaked from your frontend's core options menu or manually changed via core configuration files. Options are listed below in the following format:</p> <p>Option Name [option_key] </p> <p>(setting1/setting2/...)</p> <p>To manually change an option, search for that option's key in the core configuration file you want to edit and set it to your desired setting value, enclosed in quotations. For example, if you had set the CD-DA Volume to 50% and wanted to revert it to 100%, you would change genesis_plus_gx_cdda_volume = \"50\" to genesis_plus_gx_cdda_volume = \"100\". Manually editing core configuration files is typically unnecessary unless your frontend does not have a method for toggling options.</p> <p>The default setting for each option will be highlighted in bold. Settings with (Restart) means that core has to be shut down for the new setting to be applied on next launch.</p>"},{"location":"library/genesis_plus_gx/#system","title":"System","text":"<p>Configure base hardware selection / region / BIOS / Sega CD save file parameters.</p> <p>System hardware [genesis_plus_gx_system_hw]</p> <p>Runs loaded content with a specific emulated console.</p> <ul> <li>Auto [auto] Loads the game with the most appropriate system based on the loaded game's ROM information like its ROM type, product code/version, checksum, size and region code.</li> <li>SG-1000 [sg-1000 II] - Loads game with the SG-1000 console.</li> <li>SG-1000 II + RAM Ext. [sg-1000 II + ram ext.] - Loads game with the SG-1000 II console with a RAM extension adapter.</li> <li>Mark III [mark-III] - Loads game with the Mark III console</li> <li>Master System [master system] - Loads game with the Master System console</li> <li>Master System II [master system II] - Loads game with the Master System II console</li> <li>Game Gear [game gear] - Loads game with the Game Gear handheld console</li> <li>Mega Drive/Genesis [mega drive / genesis] - Loads game with the Mega Drive/Genesis console</li> </ul> <p>System region [genesis_plus_gx_region_detect]</p> <p>Specify which region the system is from. For consoles other than the Game Gear, PAL is 50hz while NTSC is 60hz. Games may run faster or slower than normal if the incorrect region is selected.</p> <ul> <li>Auto [auto] - Changes the system's region to whatever is most appropriate for the game which is based on the loaded game's ROM information like its ROM type, product code/version, checksum, size and region code.</li> <li>NTSC-U [ntsc-u] - Changes the system's region to NTSC-U.</li> <li>PAL [pal] - Changes the system's region to PAL.</li> <li>NTSC-J [ntsc-j] - Changes the system's region to NTSC-J.</li> </ul> <p>System Boot ROM [genesis_plus_gx_bios] (disabled/enabled)</p> <p>Use official BIOS/bootloader for emulated hardware, if present in RetroArch's system directory. Displays console-specific start-up sequence/animation, then runs loaded content. Look above at the BIOS section for supported BIOS types/files.</p> <ul> <li>Off [disabled] - Disables using the user supplied System Boot ROM.</li> <li>On [enabled] - Enables using the user supplied System Boot ROM.</li> </ul> <p>CD System BRAM [genesis_plus_gx_system_bram]</p> <p>When running Sega CD content, specifies whether to share a single save file between all games from a specific region (Per-BIOS) or to create a separate save file for each game (Per-Game). Note that the Sega CD has limited internal storage, sufficient only for a handful of titles. To avoid running out of space, the 'Per-Game' setting is recommended.</p> <ul> <li>Per-BIOS [per bios] - All games from a specific region share a single save file.</li> <li>Per-Game [per game] - Creates a separate save file for each game.</li> </ul> CD System BRAM diagram <p></p> <p>CD Backup Cart BRAM [genesis_plus_gx_cart_bram]</p> <p>When running Sega CD content, specifies whether to share a single backup ram cart for all games (Per-Cart) or to create a separate backup ram cart for each game (Per-Game).</p> <ul> <li>Per-Cart [per cart] - All games share a single backup RAM cart.</li> <li>Per-Game [per game] - Creates a seperate backrup RAM cart for each game.</li> </ul> <p>CD add-on (MD mode) (Requires Restart) [genesis_plus_gx_add_on]</p> <p>Specify which add-on to use for CD audio playback with supported Mega Drive/Genesis games.</p> <ul> <li>Auto [auto] - Loads a CD game with the most appropriate CD add-on based on the loaded game's ROM information like its ROM type, product code/version, checksum, size and region code. (when \"CD add-on\" core option is set to Auto, if a cute file with same basename as loaded ROM file is found in same directory AND that cue file contains MegaSD specific keywords (\"REM LOOP xxx\", \"REM NOLOOP\",...), MegaSD CD overlay emulation will be automatically enabled (instead of full Sega/Mega CD hardware emulation))</li> <li>Sega/Mega CD [sega/mega cd] - Loads the game using the Sega/Mega CD add-on. (this can be useful for demos or homebrew games that want to use Mega CD extra hardware without necessarily having a loaded CD beforehand since it forces Sega/Mega CD hardware emulation when any MD game (&lt;8MB) is loaded even if there is no CUE file found in loaded game directory)</li> <li>MegaSD [megasd] - Loads the game using the MegaSD FPGA cartridge. Look at the # section for more information.</li> <li>None [none] - Disables loading a CD game with any CD add-on. (Sega/Mega CD hardware emulation will be forced disabled, even if a CUE file is found in loaded game directory or when the loaded game is known to have Sega/Mega CD support (like Pier Solar, Flux or Wonder Library). This emulates the behavior where there is no Sega/Mega CD unit attached.)</li> </ul> <p>Cartridge Lock-On [genesis_plus_gx_lock_on]</p> <p>Lock-On Technology is a Mega Drive/Genesis feature that allowed an older game to connect to the pass-through port of a special cartridge for extended or altered gameplay. This option specifies which type of special 'lock-on' cartridge to emulate. Look above at the BIOS section for supported BIOS types/files.</p> <ul> <li>Off [disabled]</li> <li>Game Genie [game genie] - Connects the loaded game to a Gamie Genie.</li> <li>Action Replay (Pro) [action replay (pro)] - Connects the loaded game to an Action Replay (Pro).</li> <li>Sonic &amp; Knuckles [sonic &amp; knuckles)] - Connects the loaded game to Sonic &amp; Knuckles.</li> </ul>"},{"location":"library/genesis_plus_gx/#video","title":"Video","text":"<p>Configure aspect ratio / display cropping / video filter / frame skipping parameters.</p> <p>Core-Provided Aspect Ratio [genesis_plus_gx_aspect_ratio]</p> <p>Choose the preferred content aspect ratio. This will only apply when RetroArch's aspect ratio is set to 'Core provided' in the Video settings.</p> <ul> <li>Auto [auto] - Chooses the aspect ratio based on the loaded game's ROM information like its ROM type, product code/version, checksum, size and region code.</li> <li>NTSC PAR [NTSC PAR] - Sets the game's aspect ratio to NTSC PAR.</li> <li>PAL PAR [PAL PAR] - Sets the game's aspect ratio to PAL PAR.</li> </ul> <p>Borders [genesis_plus_gx_overscan]</p> <p>Enable this to display the overscan regions at the top/bottom and/or left/right of the screen. These would normally be hidden by the bezel around the edge of a standard-definition television.</p> <ul> <li>Off [disabled] - Disables displaying the game's overscan regions.</li> <li>Top/Bottom [top/bottom] - Enables displaying the game's Top and Bottom overscan regions.</li> <li>Left/Right [left/right] - Enables displaying the game's Left and Right overscan regions.</li> <li>Full [full] - Enables displaying the game's Top/Bottom and Left/Right overscan regions.</li> </ul> <p>Hide Master System Side Borders [genesis_plus_gx_left_border]</p> <p>Cuts off 8 pixels from either the left side of the screen, or both left and right sides when running Master System games.</p> <ul> <li>Off [disabled] - Disabling cutting off pixels from the screen of a Master System game.</li> <li>Left Border Only [left border] - Cuts off 8 pixels from the left side of the screen of a Master System game.</li> <li>Left &amp; Right Borders [left &amp; right borders] - Cuts off 8 pixels from the right side of the screen of a Master System game.</li> </ul> <p>Game Gear Extended Screen [genesis_plus_gx_gg_extra]</p> <p>Forces Game Gear titles to run in 'SMS' mode, with an increased resolution of 256x192. May show additional content, but typically displays a border of corrupt/unwanted image data.</p> Off [disabled] <p></p> On [enabled] <p></p> <p>Blargg NTSC Filter [genesis_plus_gx_blargg_ntsc_filter] - Apply a video filter to mimic various NTSC TV signals.</p> Disabled vs All Filters (video) <p>https://youtu.be/buZPDyDzvPY</p> Off [disabled] <p></p> Monochrome [monochrome] <p></p> Composite [composite] <p></p> S-Video [svideo] <p></p> RGB [rgb] <p></p> <p>LCD Ghosting Filter [genesis_plus_gx_lcd_filter]</p> <p>Apply an image 'ghosting' filter to mimic the display characteristics of the Game Gear and 'Genesis Nomad' LCD panels.</p> <ul> <li>Off [disabled] - Disables ghosting filter.</li> <li>On [enabled] - Enables ghosting filter.</li> </ul> Disabled vs Enabled (video) <p>https://youtu.be/Us13sJPEUD8</p> Enabled <p></p> <p>Interlaced Mode 2 Output [genesis_plus_gx_render]</p> <p>Interlaced Mode 2 allows the Mega Drive/Genesis to output a double height (high resolution) 320x448 image by drawing alternate scanlines each frame (this is used by 'Sonic the Hedgehog 2' and 'Combat Cars' multiplayer modes). 'Single Field' mimics original hardware, producing each field (320x224) alternatively with flickering/interlacing artefacts. 'Double Field' simulates the interlaced display, which stabilises the image but causes mild blurring.</p> <ul> <li>Single Field [single field] - Sets Interlaced Mode 2 Output as Single Field.</li> <li>Double Field [double field] - Sets Interlaced Mode 2 Output as Double Field.</li> </ul> Single Field vs Double Field (video) <p>https://youtu.be/xZc58OSPj4Y</p> Single Field <p></p> Double Field <p></p> <p>Frameskip [genesis_plus_gx_frameskip]</p> <p>Skip frames to avoid audio buffer under-run (crackling). Improves performance at the expense of visual smoothness. 'Auto' skips frames when advised by the frontend. 'Manual' utilises the 'Frameskip Threshold (%)' setting.</p> <ul> <li>Off [disabled] - Disables frameskip.</li> <li>Auto [auto] - Automatically skips frames to avoid audio crackling.</li> <li>Manual [manual] - Allows the user to utilises the 'Frameskip Threshold' core option's set percentage to manually adjust frameskip.</li> </ul> <p>Frameskip Threshold (%) [genesis_plus_gx_frameskip_threshold]</p> When the 'Frameskip' core option is set to 'Manual', specifies the audio buffer occupancy threshold (percentage) below which frames will be skipped. Higher values reduce the risk of crackling by causing frames to be dropped more frequently. <p>15% to 60% in increments of 3%, 33% is default.</p>"},{"location":"library/genesis_plus_gx/#audio","title":"Audio","text":"<p>Change audio device settings.</p> <p>Master System FM (YM2413) [genesis_plus_gx_ym2413]</p> <p>Enable emulation of the FM Sound Unit used by certain Sega Mark III/Master System games for enhanced audio output.</p> <ul> <li>Auto [auto] - Automatically enables emulation of FM Sound Unit based on the loaded game's ROM information like its ROM type, product code/version, checksum, size and region code.</li> <li>Off [disabled] - Manually disables emulation of FM Sound Unit.</li> <li>On [enabled] - Manually enables emulation of FM Sound Unit.</li> </ul> <p>Master System FM (YM2413) Core - [genesis_plus_gx_ym2413_core]</p> <p>Select method used to emulate the FM Sound Unit of the Sega Mark III/Master System. 'MAME' option is fast, and runs full speed on most systems. 'Nuked' option is cycle accurate, very high quality, and has substantial CPU requirements.</p> <ul> <li>MAME [mame] - Uses the MAME option for emulating the FM Sound Unit for Sega Mark III/Master System games which is fast and full speed for most games.</li> <li>Nuked [nuked] - Uses the Nuked option for emulating the FM Sound Unit for Sega Mark III/Master System games which is high quality but has substantial CPU requirements.</li> </ul> <p>Mega Drive/Genesis FM [genesis_plus_gx_ym2612]</p> <p>Select method used to emulate the FM synthesizer (main sound generator) of the Mega Drive/Genesis. 'MAME' options are fast, and run full speed on most systems. 'Nuked' options are cycle accurate, very high quality, and have substantial CPU requirements. The 'YM2612' chip is used by the original Model 1 Mega Drive/Genesis. The 'YM3438' is used in later Mega Drive/Genesis revisions.</p> <ul> <li>MAME (YM2612) [mame (ym2612)] - Selects MAME (YM2612) [original Model 1 Mega Drive/Genesis] as FM synthesizer method which is fast and fullspeed.</li> <li>MAME (ASIC YM3438) [mame (asic ym3438)] - Selects MAME (ASIC YM3438) [later Mega Drive/Genesis revisions] as FM synthesizer method which is fast and fullspeed.</li> <li>MAME (Enhanced YM3438) [mame (enhanced ym3438)] - Selects MAME (Enhanced YM3438) [later Mega Drive/Genesis revisions] as FM synthesizer method which is fast and fullspeed.</li> <li>Nuked (YM2612) [nuked (ym2612)] - Selects Nuked (YM2612) [original Model 1 Mega Drive/Genesis] as FM synthesizer method which is high quality but has high CPU requirements.</li> <li>Nuked (YM3438) [nuked (ym3438)] - Selects Nuked (YM3438) [later Mega Drive/Genesis revisions] FM synthesizer method which is fast but has high CPU requirements.</li> </ul> <p>Sound Output [genesis_plus_gx_sound_output]</p> <p>Select stereo or mono sound reproduction.</p> <ul> <li>Stereo [stereo] - Selects stereo output.</li> <li>Mono (mono) - Selects mono output.</li> </ul> <p>Audio Filter [genesis_plus_gx_audio_filter]</p> <p>Enable a low pass audio filter to better simulate the characteristic sound of a Model 1 Mega Drive/Genesis.</p> <ul> <li>Off [disabled] - Disables low pass audio filter.</li> <li>Low-Pass [low-pass] - Enables low pass audio filter.</li> <li>EQ [EQ] - Enables internal audio equalizer.</li> </ul> <p>Low-Pass Filter % [genesis_plus_gx_lowpass_range]</p> <p>Specify the cut-off frequency of the low-pass audio filter. A higher value increases the perceived 'strength' of the filter, since a wider range of the high frequency spectrum is attenuated. This core option requires the 'Audio Filter' core option to be set to 'Low-Pass\".</p> <ul> <li>5% to 95% in increments of 5. 60% is default*. </li> </ul> <p>PSG Preamp Level [genesis_plus_gx_psg_preamp]</p> <p>Set the audio preamplifier level of the emulated SN76496 4-channel Programmable Sound Generator found in the SG-1000, Sega Mark III, Master System, Game Gear and Mega Drive/Genesis.</p> <ul> <li>0 to 200 in increments of 5. 150 is default.</li> </ul> <p>FM Preamp Level [genesis_plus_gx_fm_preamp]</p> <p>Set the audio preamplifier level of the emulated Mega Drive/Genesis FM sound synthesizer or Sega Mark III/Master System FM Sound Unit.</p> <ul> <li>0 to 200 in increments of 5. 100 is default.</li> </ul> <p>CD-DA Volume [genesis_plus_gx_cdda_volume]</p> <p>Adjust the mixing volume of the emulated CD audio playback output.</p> <ul> <li>0 to 100 in increments of 5. 100 is default.</li> </ul> <p>PCM Volume [genesis_plus_gx_pcm_volume] - Adjust the mixing volume of the emulated Sega CD/Mega-CD RF5C164 PCM sound generator output.</p> <ul> <li>0 to 100 in increments of 5. 100 is default.</li> </ul> <p>EQ Low [genesis_plus_gx_audio_eq_low]</p> <p>Adjust the low range band of the internal audio equalizer.</p> <ul> <li>0 to 100 in increments of 5. 100 is default.</li> </ul> <p>EQ Mid [genesis_plus_gx_audio_eq_mid]</p> <p>Adjust the mid range band of the internal audio equalizer.</p> <ul> <li>0 to 100 in increments of 5. 100 is default.</li> </ul> <p>EQ High [genesis_plus_gx_audio_eq_high]</p> <p>Adjust the high range band of the internal audio equalizer.</p> <ul> <li>0 to 100 in increments of 5. 100 is default.</li> </ul>"},{"location":"library/genesis_plus_gx/#input","title":"Input","text":"<p>Change light gun and/or mouse input settings.</p> <p>Light Gun Input [genesis_plus_gx_gun_input]</p> <p>Use a mouse-controlled 'Light Gun' or 'Touchscreen' input.</p> <ul> <li>Light Gun [lightgun] - Selects mouse-controlled 'Light Gun' input (devices will use RetroLightgun inputs).</li> <li>Touchscreen [touchscreen] - Allows the MS Light Phaser, MD Menancer and MD Justifiers device types to be controlled via touchscreen input (devices will use RetroPointer inputs instead).</li> </ul> <p>Show Light Gun Crosshair [genesis_plus_gx_gun_cursor]</p> <p>Display light gun crosshairs when using the MD Menacer, MD Justifiers and MS Light Phaser input device types.</p> <ul> <li>Off [disabled] - Disables light gun crosshair for the aftermentioned input device types.</li> <li>On [enabled] - Enables light gun crosshair for the aftermentioned input device types.</li> </ul> Disabled vs Enabled (video) <p>https://www.youtube.com/watch?v=w6iYysbni2g</p> <p>Invert Mouse Y-Axis [genesis_plus_gx_invert_mouse]</p> <p>Inverts the Y-axis of the 'MD Mouse' input device type.</p> <ul> <li>Off [disabled] - Enables Y-Axis inversion for the 'MD Mouse' device type.</li> <li>On [enabled] - Disables Y-Axis inversion for the 'MD Mouse' device type.</li> </ul>"},{"location":"library/genesis_plus_gx/#emulation-hacks","title":"Emulation Hacks","text":"<p>Change processor overclocking and emulation accuracy settings that affect low-level performance and compatibility.</p> <p>Remove Per-Line Sprite Limit [genesis_plus_gx_no_sprite_limit]</p> <p>Removes the original sprite-per-scanline hardware limit. This reduces flickering but can cause visual glitches, as some games exploit the hardware limit to generate special effects.</p> <ul> <li>Off [disabled] - Keeps the per-line sprite limit.</li> <li>On [enabled] - Disables the per-line sprite limit.</li> </ul> Disabled vs Enabled (video) <p>https://youtu.be/IZp5epy-hBM</p> <p>Enhanced per-tile vertical scroll [genesis_plus_gx_enhanced_vscroll]</p> <p>Allows each individual cell to be scrolled vertically, instead of 16px 2-cell, by averaging out with the vscroll value of the neighbouring cell. This hack only applies to few games that use 2-cell vertical scroll mode.</p> <ul> <li>Off [disabled] - Enables enhanced per-tile vertical scrolling.</li> <li>On [enabled] - Disables enhanced per-tile vertical scrolling.</li> </ul> Disabled <p></p> Enabled [16] <p></p> <p>Enhanced per-tile vertical scroll limit [genesis_plus_gx_enhanced_vscroll_limit]</p> <p>Only is usable when the 'Enhanced per-tile vertical scroll' core option is enabled. Adjusts the limit of the vertical scroll enhancement. When the vscroll difference between neighbouring tiles is bigger than this limit, the enhancement is disabled.</p> <ul> <li>2 to 16 in increments of 1. 8 is default</li> </ul> <p>CPU Speed [genesis_plus_gx_overclock]</p> <p>Overclock the emulated CPU. Can reduce slowdown, but may cause glitches.</p> <ul> <li>100% to 500% in increments of 25%. 100% is default.</li> </ul> !00% vs 200% (video) <p>https://youtu.be/yE8qzwVuy5Q</p> <p>System Locks-Ups [genesis_plus_gx_force_dtack]</p> <p>Emulate system lock-ups that occur on real hardware when performing illegal address access. This should only be disabled when playing certain demos, homebrew and ROM hacks that rely on illegal behavior for correct operation.</p> <ul> <li>On [enabled] - Enables emulation of system lock-ups.</li> <li>Off [disabled] - Disables emulation of system lock-ups.</li> </ul> Enabled vs Disabled (video) <p>https://youtu.be/B1n1wQGzzYk</p> <p>68K Address Error [genesis_plus_gx_addr_error]</p> <p>The Mega Drive/Genesis main CPU (Motorola 68000) generates an Address Error exception (crash) when attempting to perform unaligned memory access. Enabling this will simulate this behavior. It should only be disabled when playing ROM hacks, since these are typically developed using less accurate emulators and may rely on invalid RAM access for correct operation.</p> <ul> <li>On [enabled] - Enables simulation of 68K Address Error.</li> <li>Off [disabled] - Disables simulation of 68K Address Error.</li> </ul> Enabled vs Disabled (video) <p>https://youtu.be/zjBPz9QWRqI</p> Enabled <p></p> <p>CD access time [genesis_plus_gx_cd_latency]</p> <p>Simulate original CD hardware latency when initiating a read or seeking to a specific location on loaded disc. This is required by a few CD games that crash if CD data is available too soon and also fixes CD audio desync issues in some games. Disabling this can be useful with MD+ or MSU-MD games as it makes CD audio tracks loops more seamless.</p> <ul> <li>On [enabled] - Enables simulation of original CD hardware latency.</li> <li>Off [disabled] - Disables simulation of original CD hardware latency.</li> </ul>"},{"location":"library/genesis_plus_gx/#advanced-channel-volume-settings","title":"Advanced Channel Volume Settings","text":"<p>Change the volume of individual hardware audio channels.</p> <p>Show Advanced Audio Volume Settings (Reopen menu) [genesis_plus_gx_show_advanced_audio_settings]</p> <p>Enable configuration of low-level audio channel parameters core options listed below. NOTE: Quick Menu must be toggled for this setting to take effect.</p> <ul> <li>On [enabled] - Enables configuration of low-level audio channel parameters.</li> <li>Off [disabled] - Disables configuration of low-level audio channel parameters.</li> </ul> <p>PSG Tone Channel 0 Volume % [genesis_plus_gx_psg_channel_0_volume]</p> <p>Adjust the volume of Channel 0 of the PSG Tone.</p> <ul> <li>0% to 100% in increments of 10%. 100% is default.</li> </ul> <p>PSG Tone Channel 1 Volume % [genesis_plus_gx_psg_channel_1_volume]</p> <p>Adjust the volume of Channel 1 of the PSG Tone.</p> <ul> <li>0% to 100% in increments of 10%. 100% is default.</li> </ul> <p>PSG Tone Channel 2 Volume % [genesis_plus_gx_psg_channel_2_volume]</p> <p>Adjust the volume of Channel 2 of the PSG Tone.</p> <ul> <li>0% to 100% in increments of 10%. 100% is default.</li> </ul> <p>PSG Tone Channel 3 Volume % [genesis_plus_gx_psg_channel_3_volume]</p> <p>Adjust the volume of Channel 3 of the PSG Tone.</p> <ul> <li>0% to 100% in increments of 10%. 100% is default.</li> </ul> <p>Mega Drive/Genesis FM Channel 0 Volume % [genesis_plus_gx_md_channel_0_volume]</p> <p>Adjust the volume of Channel 0 of the Mega Drive/Genesis FM. Only works with MAME FM emulators ('Mega Drive/Genesis FM' core option).</p> <ul> <li>0% to 100% in increments of 10%. 100% is default.</li> </ul> <p>Mega Drive/Genesis FM Channel 1 Volume % [genesis_plus_gx_md_channel_1_volume]</p> <p>Adjust the volume of Channel 1 of the Mega Drive/Genesis FM. Only works with MAME FM emulators ('Mega Drive/Genesis FM' core option).</p> <ul> <li>0% to 100% in increments of 10%. 100% is default.</li> </ul> <p>Mega Drive/Genesis FM Channel 2 Volume % [genesis_plus_gx_md_channel_2_volume]</p> <p>Adjust the volume of Channel 2 of the Mega Drive/Genesis FM. Only works with MAME FM emulators ('Mega Drive/Genesis FM' core option).</p> <ul> <li>0% to 100% in increments of 10%. 100% is default.</li> </ul> <p>Mega Drive/Genesis FM Channel 3 Volume % [genesis_plus_gx_md_channel_3_volume]</p> <p>Adjust the volume of Channel 3 of the Mega Drive/Genesis FM. Only works with MAME FM emulators ('Mega Drive/Genesis FM' core option).</p> <ul> <li>0% to 100% in increments of 10%. 100% is default.</li> </ul> <p>Mega Drive/Genesis FM Channel 4 Volume % [genesis_plus_gx_md_channel_4_volume]</p> <p>Adjust the volume of Channel 4 of the Mega Drive/Genesis FM. Only works with MAME FM emulators ('Mega Drive/Genesis FM' core option).</p> <ul> <li>0% to 100% in increments of 10%. 100% is default.</li> </ul> <p>Mega Drive/Genesis FM Channel 5 Volume % [genesis_plus_gx_md_channel_5_volume]</p> <p>Adjust the volume of Channel 5 of the Mega Drive/Genesis FM. Only works with MAME FM emulators ('Mega Drive/Genesis FM' core option).</p> <ul> <li>0% to 100% in increments of 10%. 100% is default.</li> </ul> <p>Master System FM (YM2413) Channel 0 Volume % [genesis_plus_gx_sms_fm_channel_0_volume]</p> <p>Adjust the volume of Channel 0 of the Master System FM.</p> <ul> <li>0% to 100% in increments of 10%. 100% is default.</li> </ul> <p>Master System FM (YM2413) Channel 1 Volume % [genesis_plus_gx_sms_fm_channel_1_volume]</p> <p>Adjust the volume of Channel 1 of the Master System FM.</p> <ul> <li>0% to 100% in increments of 10%. 100% is default.</li> </ul> <p>Master System FM (YM2413) Channel 2 Volume % [genesis_plus_gx_sms_fm_channel_2_volume]</p> <p>Adjust the volume of Channel 2 of the Master System FM.</p> <ul> <li>0% to 100% in increments of 10%. 100% is default.</li> </ul> <p>Master System FM (YM2413) Channel 3 Volume % [genesis_plus_gx_sms_fm_channel_3_volume]</p> <p>Adjust the volume of Channel 3 of the Master System FM.</p> <ul> <li>0% to 100% in increments of 10%. 100% is default.</li> </ul> <p>Master System FM (YM2413) Channel 4 Volume % [genesis_plus_gx_sms_fm_channel_4_volume]</p> <p>Adjust the volume of Channel 4 of the Master System FM.</p> <ul> <li>0% to 100% in increments of 10%. 100% is default.</li> </ul> <p>Master System FM (YM2413) Channel 5 Volume % [genesis_plus_gx_sms_fm_channel_5_volume]</p> <p>Adjust  the volume of Channel 5 of the Master System FM.</p> <ul> <li>0% to 100% in increments of 10%. 100% is default.</li> </ul> <p>Master System FM (YM2413) Channel 6 Volume % [genesis_plus_gx_sms_fm_channel_6_volume]</p> <p>Adjust the volume of Channel 6 of the Master System FM.</p> <ul> <li>0% to 100% in increments of 10%. 100% is default.</li> </ul> <p>Master System FM (YM2413) Channel 7 Volume % [genesis_plus_gx_sms_fm_channel_7_volume]</p> <p>Adjust the volume of Channel 7 of the Master System FM.</p> <ul> <li>0% to 100% in increments of 10%. 100% is default.</li> </ul> <p>Master System FM (YM2413) Channel 8 Volume % [genesis_plus_gx_sms_fm_channel_8_volume]</p> <p>Adjust the volume of Channel 8 of the Master System FM.</p> <ul> <li>0% to 100% in increments of 10%. 100% is default.</li> </ul>"},{"location":"library/genesis_plus_gx/#user-1-device-types","title":"User 1 device types","text":"<p>The Genesis Plus GX core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p> <ul> <li>Joypad Port Empty - None - No device is connected; input is disabled.</li> <li>Joypad Auto - Joypad - Depending on the loaded game's ROM information, the core will automatically emulate a MD Joypad 3 Button controller, or a MD Joypad 6 Button controller or a MS Joypad 2 Button controller.</li> <li>MD Joypad 3 Button - Joypad</li> <li>MD Joypad 6 Button - Joypad</li> <li>MS Joypad 2 Button - Joypad - Also used for Game Gear.</li> <li>MD Joypad 3 Button + 4-WayPlay - Joypad - Enables multitap for 4-WayPlay games.</li> <li>MD Joypad 6 Button + 4-WayPlay - Joypad - Enables multitap for 4-WayPlay games.</li> <li>MD Joypad 3 Button + Teamplayer - Joypad - Enables multitap for Teamplayer games.</li> <li>MD Joypad 6 Button + Teamplayer - Joypad - Enables multitap for Teamplayer games.</li> <li>MS Joypad 2 Button + Master Tap - Joypad - Enables Furrtek's Master Tap (unofficial mulitap device).</li> <li>MS Light Phaser - Lightgun</li> <li>MS Paddle Control - Analog</li> <li>MS Sports Pad - Analog</li> <li>MS Graphic Board - Pointer</li> <li>MD XE-1AP - Analog</li> <li>MD Mouse - Mouse</li> </ul>"},{"location":"library/genesis_plus_gx/#user-2-device-types","title":"User 2 device types","text":"<ul> <li>Joypad Port Empty - None - No device is connected; input is disabled.</li> <li>Joypad Auto - Joypad - Depending on the loaded game's ROM information, the core will automatically emulate a MD Joypad 3 Button controller, or a MD Joypad 6 Button controller or a MS Joypad 2 Button controller.</li> <li>MD Joypad 3 Button - Joypad</li> <li>MD Joypad 6 Button - Joypad</li> <li>MS Joypad 2 Button - Joypad - Also used for Game Gear.</li> <li>MD Joypad 3 Button + 4-WayPlay - Joypad - Enables multitap for 4-WayPlay games.</li> <li>MD Joypad 6 Button + 4-WayPlay - Joypad - Enables multitap for 4-WayPlay games.</li> <li>MD Joypad 3 Button + Teamplayer - Joypad - Enables multitap for Teamplayer games.</li> <li>MD Joypad 6 Button + Teamplayer - Joypad - Enables multitap for Teamplayer games.</li> <li>MS Joypad 2 Button + Master Tap - Joypad - Enables Furrtek's Master Tap (unofficial mulitap device).</li> <li>MD Menancer - Lightgun</li> <li>MD Justifiers  - Lightgun</li> <li>MS Light Phaser - Lightgun</li> <li>MS Paddle Control - Analog</li> <li>MS Sports Pad - Analog</li> <li>MS Graphic Board - Pointer</li> <li>MD XE-1AP - Analog</li> <li>MD Mouse - Mouse</li> </ul>"},{"location":"library/genesis_plus_gx/#other-devices","title":"Other devices","text":"<ul> <li>PICO tablet - The Genesis Plus GX core can emulate PICO tablet inputs but this is done automatically; based on the loaded game's ROM information and cannot be manually selected as a device type.</li> <li>Terebi Oekaki tablet - The Genesis Plus GX core can emulate Terebi Oekaki table inputs but this is done automatically; based on the loaded game's ROM information and cannot be manually selected as a device type.</li> </ul>"},{"location":"library/genesis_plus_gx/#multitap","title":"Multitap","text":"<p>Activating multitap support in compatible games can be configured by the 4-WayPlay, Teamplayer or Master Tap device types for the User 1 and/or User 2 ports.</p>"},{"location":"library/genesis_plus_gx/#joypad","title":"Joypad","text":"RetroPad Inputs User 1 - 8 input descriptors MD Joypad 3 Button MD Joypad 6 Button MS Joypad 2 Button MS Paddle Control MS Sports Pad MD XE-1AP B B B 1 1 1 E2 A A A E1 Mode Mode Select Start Start Start Start Start Start Start D-Pad Up D-Pad Up D-Pad Up D-Pad Up D-Pad Down D-Pad Down D-Pad Down D-Pad Down D-Pad Left D-Pad Left D-Pad Left D-Pad Left D-Pad Right D-Pad Right D-Pad Right D-Pad Right C C C 2 2 Y Y X X C Z Z A D B  X Paddle Trackball X Thumb-stick X  Y Trackball Y Thumb-stick Y  X Slider Y  Y Slider X"},{"location":"library/genesis_plus_gx/#mouse","title":"Mouse","text":"RetroMouse Inputs MD Mouse  Mouse Cursor MD Mouse Cursor  Mouse 1 MD Mouse Left  Mouse 2 MD Mouse Right  Mouse 3 MD Mouse Start Wheel Down MD Mouse Center"},{"location":"library/genesis_plus_gx/#pointer","title":"Pointer","text":"RetroPointer Inputs MS Graphic Board  or  Pointer Position MS Graphic Board Stylus  Mouse 1 MS Graphic Board Pen  Mouse 2 MS Graphic Board Menu  Mouse 3 MS Graphic Board Do"},{"location":"library/genesis_plus_gx/#lightgun","title":"Lightgun","text":"RetroLightgun Inputs MD Menacer MD Justifier MS Light Phaser  Gun Crosshair MD Menacer Crosshair MD Justifier Crosshair MS Light Phaser Crosshair Gun Trigger MD Menacer A MD Justifier A MS Light Phaser A Gun Aux A MD Menacer B MD Justifer B MS Light Phaser B Gun Aux B MD Menacer C MD Justifer C MS Light Phaser C Gun Start MD Menacer Start MD Justifer Start MS Light Phaser Start"},{"location":"library/genesis_plus_gx/#other","title":"Other","text":"Inputs PICO tablet Terebi Oekaki tablet  or  Pointer Position PICO tablet Stylus Terebi Oekaki tablet Stylus  Mouse 1 PICO tablet Pen Terebi Oekaki tablet Pen  Mouse 2 PICO tablet Red  Mouse 3 Terebo Oekaki tablet Start Wheel Up PICO tablet Previous page Wheel Down PICO tablet Next page PICO tablet Up (White) PICO tablet Down (Orange) PICO tablet Left (Purple) PICO tablet Right (Green)"},{"location":"library/genesis_plus_gx/#external-links","title":"External Links","text":"<ul> <li>Official Genesis Plus GX Github Repository</li> <li>Libretro Genesis Plus GX Core Info File</li> <li>Libretro Genesis Plus GX Github Repository</li> <li>Report Libretro Genesis Plus GX Core Issues Here</li> <li>Gameplay Videos Playlist on YouTube</li> </ul>"},{"location":"library/genesis_plus_gx/#sega-816-bit-cores","title":"Sega 8/16-bit cores","text":"<ul> <li>Sega - Master System (Emux SMS)</li> <li>Sega - MS/MD/CD/32X (PicoDrive)</li> <li>Sega - MS/GG/SG-1000 (Gearsystem)</li> <li>MSX/SVI/ColecoVision/SG-1000 (blueMSX)</li> </ul>"},{"location":"library/geolith/","title":"SNK - Neo Geo AES / MVS (Geolith)","text":""},{"location":"library/geolith/#background","title":"Background","text":"<p>Geolith is a highly accurate Neo Geo AES/MVS emulator written in ISO C11. Geolith takes a different approach to Neo Geo emulation than most existing emulators, aiming for a home-console-first experience and using single file ROMs (which never need to be updated) similar to a typical home console emulator. Despite the focus on the home experience, Geolith also fully supports arcade mode.</p> <p>The Geolith core has been authored by</p> <ul> <li>Rupert Carmichael (carmiker)</li> </ul> <p>The Geolith core is licensed under</p> <ul> <li>BSD-3-Clause</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/geolith/#bios","title":"BIOS","text":"<p>Geolith requires a BIOS.</p> <p>Required or optional firmware files go in the frontend's system directory.</p> <p>Attention</p> <p>Geolith requires BIOS files to function. Place the following files in RetroArch's system directory:</p> Filename Description md5sum aes.zip Neo Geo AES BIOS - Required ad9585c72130c56f04ae26aae87c289d neogeo.zip Neo Geo MVS BIOS - Required 00dad01abdbf8ea9e79ad2fe11bdb182"},{"location":"library/geolith/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the Geolith core have the following file extensions:</p> <ul> <li>.neo</li> </ul>"},{"location":"library/geolith/#features","title":"Features","text":"<p>Frontend-level settings or features that the Geolith core respects.</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 Memory Monitoring (achievements) \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2714 LEDs \u2715"},{"location":"library/geolith/#directories","title":"Directories","text":"<p>The Geolith core's library name is 'Geolith'</p> <p>The Geolith core saves/loads to/from these directories.</p> <p>Frontend's Save directory</p> File Description *.nv NVRAM save *.mcr Memory Card save *.srm Cartridge battery save <p>Frontend's State directory</p> File Description *.state# State"},{"location":"library/geolith/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The Geolith core's core provided FPS is 59.599484 for AES and 59.185606 for MVS</li> <li>The Geolith core's core provided sample rate is 55943.49Hz for AES and 55555Hz for MVS</li> <li>The Geolith core provides adjustable overscan masking and aspect ratio options</li> </ul>"},{"location":"library/geolith/#core-options","title":"Core options","text":"<p>The Geolith core has the following options that can be tweaked from the core options menu. The default setting is bolded.</p> <p>Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch.</p> <ul> <li> <p>System Type (Restart) [geolith_system_type] (Neo Geo AES (Home Console)|Neo Geo MVS (Arcade)|Universe BIOS (Community-enhanced BIOS))</p> <p>Specify the System Type: AES, MVS, or Universe BIOS System</p> </li> <li> <p>Region (Restart) [geolith_region] (USA|Japan|Asia|Europe)</p> <p>Specify the Region: USA, Japan, Asia, Europe</p> </li> <li> <p>Setting Mode (Restart, DIP Switch) [geolith_settingmode] (Off|On)</p> <p>Bring up the System ROM menu at boot on arcade systems</p> </li> <li> <p>Four Player Mode (Restart, Asia/Japan MVS Only) [geolith_4player] (Off|On)</p> <p>Set Four Player (dual MVS cabinet) mode for Asia/Japan MVS systems, for use with Kizuna Encounter or homebrew with four player support</p> </li> <li> <p>Freeplay (DIP Switch) [geolith_freeplay] (Off|On)</p> <p>Play MVS games without the need to insert coins</p> </li> <li> <p>Mask Overscan (Top) [geolith_overscan_t] (16|12|8|4|0)</p> <p>Mask off pixels hidden by a bezel or border on original CRTs (top)</p> </li> <li> <p>Mask Overscan (Bottom) [geolith_overscan_b] (16|12|8|4|0)</p> <p>Mask off pixels hidden by a bezel or border on original CRTs (bottom)</p> </li> <li> <p>Mask Overscan (Left) [geolith_overscan_l] (16|12|8|4|0)</p> <p>Mask off pixels hidden by a bezel or border on original CRTs (left)</p> </li> <li> <p>Mask Overscan (Right) [geolith_overscan_r] (16|12|8|4|0)</p> <p>Mask off pixels hidden by a bezel or border on original CRTs (right)</p> </li> <li> <p>Aspect Ratio [geolith_aspect] (Perfectly Square Pixels (1:1 PAR)|Ostensibly Accurate NTSC Aspect Ratio (45:44 PAR)|Very Traditional NTSC Aspect Ratio (4:3 DAR))</p> <p>Set the Aspect Ratio</p> </li> <li> <p>Sprites-per-line limit (Hack) [geolith_sprlimit] (Hardware Accurate (96)|Double (192)|Triple (288)|MAX 381 MEGA PRO-GEAR SPEC)</p> <p>Set the sprites-per-line limit - increasing causes glitches in some games</p> </li> <li> <p>Overclocking (Hack) [geolith_oc] (Off|On)</p> <p>Annihilate your accuracy with The 24MHz Shock - expect glitches. DO NOT USE THIS FOR ALL GAMES, enable only for specific cases with major slowdown.</p> </li> </ul>"},{"location":"library/geolith/#input-devices","title":"Input Devices","text":"Player \u00bd/\u00be Joysticks RetroPad Inputs Up Down Left Right A B C D Select/Coin Start C+D A+B B+C A+B+C Test (Arcade, Player 1 Only) Service (Arcade, Player 1 Only) V-Liner RetroPad Inputs Up Down Left Right Payout Table/Big Bet/Small Stop/Double-Up Start/Collect Operator Menu Clear Credit Coin 1 Coin 2 Hopper Out"},{"location":"library/geolith/#external-links","title":"External Links","text":"<ul> <li>Upstream Geolith Repository</li> <li>Libretro Geolith Core info file</li> <li>Libretro Geolith Repository</li> <li>Report Geolith Core Issues Here</li> </ul>"},{"location":"library/geolith/#see-also","title":"See also","text":"<ul> <li>Arcade (fbneo)</li> </ul>"},{"location":"library/gpsp/","title":"Nintendo - Game Boy Advance (gpSP)","text":""},{"location":"library/gpsp/#background","title":"Background","text":"<p>gpSP is a Game Boy Advance emulator based on notaz' fork of gpSP with additional codebase improvements.</p>"},{"location":"library/gpsp/#authorlicense","title":"Author/License","text":"<p>The gpSP core has been authored by</p> <ul> <li>Exophase</li> </ul> <p>The gpSP core is licensed under</p> <ul> <li>GPLv2</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/gpsp/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the gpSP core have the following file extensions:</p> <ul> <li>.gba</li> <li>.bin</li> </ul>"},{"location":"library/gpsp/#databases","title":"Databases","text":"<p>RetroArch database(s) that are associated with the gpSP core:</p> <ul> <li>Nintendo - Game Boy Advance</li> </ul>"},{"location":"library/gpsp/#bios","title":"BIOS","text":"<p>Required or optional firmware files go in the frontend's system directory.</p> Filename Description md5sum gba_bios.bin Game Boy Advance Image - Optional a860e8c0b6d573d191e4ec7db1b1e4f6"},{"location":"library/gpsp/#features","title":"Features","text":"<p>Frontend-level settings or features that the gpSP core respects.</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2715 Memory Monitoring (achievements) \u2714 RetroArch Cheats \u2714 RetroArch SaveRAM Autosave Interval support \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2714 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/gpsp/#directories","title":"Directories","text":"<p>The gpSP core's directory name is 'gpSP'</p> <p>The gpSP core saves/loads to/from these directories.</p> <p>Frontend's Save directory</p> <ul> <li>'content-name'.srm (Cartridge battery save)</li> </ul> <p>Frontend's State directory</p> <ul> <li>'content-name'.state# (State)</li> </ul>"},{"location":"library/gpsp/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The gpSP core's core provided FPS is 59.72750057</li> <li>The gpSP core's core provided sample rate is 65536 Hz</li> <li>The gpSP core's core provided aspect ratio is 3/2</li> </ul>"},{"location":"library/gpsp/#controllers","title":"Controllers","text":"<p>The gpSP core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/gpsp/#user-1-device-types","title":"User 1 device types","text":"<ul> <li>None - Doesn't disable input.</li> <li>RetroPad - Joypad</li> <li>RetroPad w/Analog - Joypad - There's no reason to switch to this.</li> </ul>"},{"location":"library/gpsp/#controller-tables","title":"Controller tables","text":""},{"location":"library/gpsp/#joypad","title":"Joypad","text":"User 1 Remap descriptors RetroPad Inputs B Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A"},{"location":"library/gpsp/#compatibility","title":"Compatibility","text":"Game Issue Banjo-Kazooie - Grunty's Revenge Black screen during developer logo. Boktai Trilogy The solar sensor is not emulated. Dragon Ball Z - The Legacy of Goku Graphics glitches. Final Fantasy VI Background/tiling order issues. Harry Potter - Quidditch World Cup Crashes when going ingame. Koro Koro Puzzle Happy Panechu! The tilt sensor is not emulated. Phantasy Star Collection Phantasy Star 1 flickers - turn on Interframe Blending in core options to fix. Sims 2, The - Pets Graphics glitches. Heavy flickering, black objects. Street Racing Syndicate Crashes afer pressing Start. Super Street Fighter II Turbo/X Revival Small graphics glitch. Selecting speed 'Turbo 1' and beyond on the character select screen makes the game speed window not fully visible. WarioWare: Twisted! The tilt sensor is not emulated. Yoshi\u2019s Universal Gravitation The tilt sensor is not emulated. (1) (2) (3)"},{"location":"library/gpsp/#external-links","title":"External Links","text":"<ul> <li>Official gpSP Website</li> <li>Official gpSP Github Repository</li> <li>Libretro gpSP Core info file</li> <li>Libretro gpSP Github Repository</li> <li>Report Libretro gpSP Core Issues Here</li> <li>Gameplay Videos</li> </ul>"},{"location":"library/gpsp/#see-also","title":"See also","text":""},{"location":"library/gpsp/#nintendo-game-boy-advance","title":"Nintendo - Game Boy Advance","text":"<ul> <li>Nintendo - Game Boy Advance (Beetle GBA)</li> <li>Nintendo - Game Boy Advance (Meteor)</li> <li>Nintendo - Game Boy Advance (mGBA)</li> <li>Nintendo - Game Boy Advance (TempGBA)</li> <li>Nintendo - Game Boy Advance (VBA-M)</li> <li>Nintendo - Game Boy Advance (VBA Next)</li> </ul>"},{"location":"library/gw/","title":"Handheld Electronic (GW)","text":""},{"location":"library/gw/#background","title":"Background","text":"<p>A libretro core for Game &amp; Watch simulators.</p> <p>It runs simulators converted from source code for the games available at MADrigal.</p> <p>The converted games are available at buildbot. </p> <p>The GW core has been authored by</p> <ul> <li>Andre Leiradella</li> </ul> <p>The GW core is licensed under</p> <ul> <li>zlib</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/gw/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the GW core have the following file extensions:</p> <ul> <li>.mgw</li> </ul>"},{"location":"library/gw/#databases","title":"Databases","text":"<p>RetroArch database(s) that are associated with the GW core:</p> <ul> <li>Handheld Electronic Game</li> </ul>"},{"location":"library/gw/#features","title":"Features","text":"<p>Frontend-level settings or features that the GW core respects.</p> Feature Supported Restart \u2715 Screenshots \u2714 Saves \u2715 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2715 Memory Monitoring (achievements) \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/gw/#directories","title":"Directories","text":"<p>The GW core's internal core name is 'Game &amp; Watch'</p>"},{"location":"library/gw/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The GW core's core provided FPS is 60</li> <li>The GW core's core provided sample rate is 44100 Hz</li> <li>The GW core's core provided aspect ratio is dependent on the loaded content.</li> </ul>"},{"location":"library/gw/#controllers","title":"Controllers","text":"<p>The GW core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/gw/#user-1-2-device-types","title":"User 1 - 2 device types","text":"<ul> <li>None - Doesn't diable input.</li> <li>Controller - Joypad - Stay on this.</li> </ul>"},{"location":"library/gw/#controller-tables","title":"Controller tables","text":""},{"location":"library/gw/#joypad","title":"Joypad","text":"<p>Attention</p> <p>What the inputs do are game specific. Without having anything selected, you can use the Start input to see a Controller overlay to see what the game specific inputs are.</p> <p></p> User 1 Remap descriptors RetroPad Inputs B Y Select Start Up Down Left Right A X L1 R1 L2 R2 L3 R3"},{"location":"library/gw/#external-links","title":"External Links","text":"<ul> <li>MADrigal Website</li> <li>Libretro GW Core info file</li> <li>Libretro GW Github Repository</li> <li>Report Libretro GW Core Issues Here</li> </ul>"},{"location":"library/handy/","title":"Atari - Lynx (Handy)","text":""},{"location":"library/handy/#background","title":"Background","text":"<p>Handy is an Atari Lynx video game system emulator that can be used as a libretro core.  Handy was the original name of the Lynx project that was started at Epyx and then finished by Atari.</p>"},{"location":"library/handy/#authorlicense","title":"Author/License","text":"<p>The Handy core has been authored by</p> <ul> <li>K. Wilkins</li> </ul> <p>The Handy core is licensed under</p> <ul> <li>zlib</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/handy/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the Handy core have the following file extensions:</p> <ul> <li>.lnx</li> </ul>"},{"location":"library/handy/#databases","title":"Databases","text":"<p>RetroArch database(s) that are associated with the Handy core:</p> <ul> <li>Atari - Lynx</li> </ul>"},{"location":"library/handy/#bios","title":"BIOS","text":"<p>Required or optional firmware files go in the frontend's system directory.</p> Filename Description md5sum lynxboot.img Lynx Boot Image - Required fcd403db69f54290b51035d82f835e7b"},{"location":"library/handy/#features","title":"Features","text":"<p>Frontend-level settings or features that the Handy core respects.</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2715 States \u2714 Rewind \u2714 Netplay (State based) \u2714 (not link-cable emulation) Core Options \u2714 Memory Monitoring (achievements) \u2714 Cheats (Cheats menu) \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/handy/#directories","title":"Directories","text":"<p>The Handy core's directory name is 'Handy'</p> <p>The Handy core saves/loads to/from these directories.</p> <p>Frontend's State directory</p> <ul> <li>'content-name'.state# (State)</li> </ul>"},{"location":"library/handy/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The Handy core's core provided FPS is 75</li> <li>The Handy core's core provided sample rate is 22050 Hz</li> <li>The Handy core's core provided aspect ratio is dependent on the 'Display rotation' core option. When set to None, the aspect ratio will be 80/51. When set to 90 or 240, the aspect ratio will be 51/80.</li> </ul>"},{"location":"library/handy/#core-options","title":"Core options","text":"<p>The Handy core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded.</p> <p>Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch.</p> <ul> <li> <p>Display rotation [handy_rot] (None/90/240)</p> <p>Self-explanatory. Need to restart content.</p> </li> </ul>"},{"location":"library/handy/#controllers","title":"Controllers","text":"<p>The Handy core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/handy/#user-1-device-types","title":"User 1 device types","text":"<ul> <li>None - Doesn't disable input.</li> <li>RetroPad - Joypad</li> <li>RetroPad w/Analog - Joypad - There's no reason to switch to this.</li> </ul>"},{"location":"library/handy/#controller-tables","title":"Controller tables","text":""},{"location":"library/handy/#joypad","title":"Joypad","text":"User 1 Remap descriptors RetroPad Inputs B Pause D-Pad Up D-Pad Down D-Pad Left D-Pad Right A Option 1 Option 2 <p>Supported combinations</p> <ul> <li>Option 1 + Pause = Restarts game</li> <li>Option 2 + Pause = Flips Screen</li> </ul>"},{"location":"library/handy/#compatibility","title":"Compatibility","text":"Game Issue RoadBlasters Graphics glitches. Minor flickering and glitches after starting a race."},{"location":"library/handy/#external-links","title":"External Links","text":"<ul> <li>Official Handy Website</li> <li>Official Handy Downloads</li> <li>Libretro Handy Core info file</li> <li>Libretro Handy Github Repository</li> <li>Report Libretro Handy Core Issues Here</li> <li>Gameplay Videos</li> </ul>"},{"location":"library/handy/#see-also","title":"See also","text":""},{"location":"library/handy/#atari-lynx","title":"Atari - Lynx","text":"<ul> <li>Atari - Lynx (Beetle Lynx)</li> <li>Atari - Lynx (Holani)</li> </ul>"},{"location":"library/hatari/","title":"Atari - ST/STE/TT/Falcon (Hatari)","text":""},{"location":"library/hatari/#background","title":"Background","text":"<p>Hatari is an Atari ST/STE/TT/Falcon system emulator that can be used as a libretro core. Hatari tries to emulate the hardware as close as possible so that it is able to run most of the old Atari games and demos.</p>"},{"location":"library/hatari/#authorlicense","title":"Author/License","text":"<p>The Hatari core has been authored by</p> <ul> <li>Nicolas Pomar\u00e8de</li> </ul> <p>The Hatari core is licensed under</p> <ul> <li>GPLv2</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/hatari/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the Hatari core have the following file extensions:</p> <ul> <li>.st</li> <li>.msa</li> <li>.zip</li> <li>.stx</li> <li>.dim</li> <li>.ipf</li> </ul>"},{"location":"library/hatari/#bios","title":"BIOS","text":"<p>Required or optional firmware files go in the frontend's system directory.</p> <p>Attention</p> <p>The plain ST mode only works with TOS 1.00, 1.02, 1.04, or 2.06. STE mode requires any of the TOS versions 1.xx or 2.xx. TOS 3.0x is for TT, and TOS 4.0x is for Falcon.</p> Filename Description md5sum tos.img TOS Boot Image - Required c1c57ce48e8ee4135885cee9e63a68a2"},{"location":"library/hatari/#features","title":"Features","text":"<p>Frontend-level settings or features that the Hatari core respects.</p> Feature Supported Restart \u2715 Screenshots \u2715 Saves \u2715 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2714 Memory Monitoring (achievements) \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/hatari/#directories","title":"Directories","text":"<p>The Hatari core's internal core name is 'Hatari'</p> <p>The Hatari core saves/loads to/from these directories.</p> <p>Frontend's System directory</p> <ul> <li>hatari.cfg (Hatari Config file)</li> </ul> <p>User directory</p> <ul> <li>.hatari/ (Unused directory)</li> </ul>"},{"location":"library/hatari/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The Hatari core's core provided FPS is (FPS)</li> <li>The Hatari core's core provided sample rate is (Rate)</li> <li>The Hatari core's core provided aspect ratio is (Ratio)</li> </ul>"},{"location":"library/hatari/#getting-started-with-hatari","title":"Getting Started With Hatari","text":"<p>Attention</p> <p>This guide was written by AnicetusCer on the LibRetro Forums.</p> <p>This was written using Lakka 2.1 rc6 x86_64</p> <p>I was excited to find out Lakka has an Atari ST core, but then disappointed that it chucked out some errors when I tried to \u201cjust load an .st image\u201d. There really was not much of a guide out there, even to get started, So I picked apart a handful of posts and docs and wrote my own mini guide below.</p>"},{"location":"library/hatari/#quick-start","title":"Quick Start","text":"<ul> <li> <p>Get a copy of US TOS 1.02 , name and put it here; \u201c/storage/system/tos.img\u201d</p> </li> <li> <p>Create a folder for your Atari ST games \u201c/storage/roms/Atari - ST\u201d</p> </li> <li> <p>Create a hatari.cfg file in \u201c/storage/system/hatari.cfg\u201d with the following lines</p> </li> </ul> <pre><code>[Floppy]\nbAutoInsertDiskB = TRUE\nFastFloppy = TRUE\nnWriteProtection = 0\nszDiskAFileName = /storage/roms/Atari\\ -\\ ST/game.st\nszDiskBFileName =\nszDiskImageDirectory = /storage/roms/Atari\\ -\\ ST/\nszDiskAZipPath =\nszDiskBZipPath =\n\n[ROM]\nszCartridgeImageFileName =\nszTosImageFileName = /storage/system/tos.img\n</code></pre> <ul> <li> <p>Changing Floppy disks can be achieved by accessing the Hatari menu and selecting the \u201cFloppy\u201d menu (see long winded explanation below)</p> </li> <li> <p>So far I have found non of my own .st files get scanned into a playlist so I\u2019ll have to build my own, but in the mean time to load a disk, in the Lakka menu go to \u201cLoad Content\u201d &gt; select you first game disk &gt; then select to run it with the Hatari Core, it will now try to load the game without complaining it has no TOS. (ST games can have varying Hardware requirements, see \u201cLong Winded Start\u201d on how to change settings, but you should be able to play a lot of games with just the defaults.</p> </li> <li> <p>Note on controllers, A controller can be used as both a mouse and joystick, see \u201cLong Winded Start\u201d for more info.</p> </li> </ul>"},{"location":"library/hatari/#long-winded-start","title":"Long Winded Start","text":"<ul> <li> <p>The TOS image (TOS stands for THE Operating System, cool huh) Consider TOS like a bios image used for other consoles, it needs adding to the the \u201c/storage/system\u201d directory. The one the retroarch Hatari documents mention is the US TOS version 1.02 this was an Atari ST OS and is probably the most compatible version for playing games, if you want to learn more about the different TOS versions and which hardware systems they correspond to (ST, STE, TT &amp; FALCON) here is a good link; http://www.atarimania.com/atari-st-tt-falcon.html9.</p> </li> <li> <p>I found Hatari would kick out this error when loading a game without the config set up \u201cCan not load TOS file J\u2019/usr/bin/TOS\u201d This is because it was looking for the tos.img in the /usr/bin directory of Lakka, this is a read only location so we can not just drop the TOS image there, this is what the config file is needed for. This section tells Hatari to look for TOS in the location specified.</p> </li> </ul> <pre><code>[ROM]\nszCartridgeImageFileName =\nszTosImageFileName = /storage/system/tos.img\n</code></pre> <ul> <li>Hatari does not seem to have a default hatari.cfg in place when first loaded (Hence the error above), It expects it to be read from two places by default, /storage/.hatari/hatari.cfg and /storage/system/hatari.cfg, I prefer the latter as it is more visible, once you load your first game you can then access the Hatari menu and save over your first base config in either location with whatever settings you change.</li> </ul>"},{"location":"library/hatari/#controller-and-hatari-menu-and-changing-floppy-disk","title":"Controller and Hatari Menu (And Changing Floppy Disk)","text":"<ul> <li> <p>The Hatari menu can be accessed using the default controller button \u201cY\u201d when the core is loaded (IE during a game\" (i was using a PlayStation 4 controller and it was the square button for me)</p> </li> <li> <p>Once in the menu I found a real mouse is not usable, however you can press \u201cselect\u201d on your controller to switch to mouse mode (there is also another button to display the mouse speed \u201cms\u201d and another to change it), now you can navigate the menu.</p> </li> <li> <p>The menu can be used to change your system settings, here you can;</p> <ul> <li>Point to new TOS images</li> <li>Change the CPU &amp; the amount of memory (needed sometimes to get some games working, dropping to 512k can help with some earlier games)</li> <li>Change floppy disks, \u201cYOU WILL DO THIS A LOT WITH SOME GAMES\u201d When the first game disk is loaded you can then access the Hatari menu, go to the \u201cFloppy\u201d Menu and then browse to a new disk to put into a drive (A or B). It is important that you choose not to reset the system when exiting the Hatari menu if still in a game (this is not selected by default , so you will be fine).</li> <li>Add a HDD not really needed (for die hard Atari fans).</li> <li>Change Keyboard and Joystick settings.</li> <li>Change the screen size (Warning Hatari is strict when it comes to aspect ratios it will always want to use the available resolutions of 1990s Monitors, with a little tweaking you can get it to fill most of your modern screen)</li> <li>Change the sound chip settings (don\u2019t touch unless you know what you\u2019re doing)</li> <li>There is also a save state option in the memory menu (Save state is not available directly from Lakka for Hatari, but it is inside the emulator  )</li> </ul> </li> <li> <p>Once you have finished setting up your settings you can now save them using the save config button , rather than use the default location of /storage/.hatari/hatari.cfg I would navigate back to your initial basic config file /storage/hatari.cfg as it is more accessible and visible, Note if you like, you can have as many config files as you want, as long as you remember where you put them  , \"The Immortal (one of the hardest games ever made), for instance, needs its memory setting back to 512k with a 68000 cpu in st mode 1.02 TOS, so why not create an \u201cimmortal.cfg\u201d with the right system settings and floppy already in the drive, then you can load it and it is all just done.</p> </li> </ul>"},{"location":"library/hatari/#core-options","title":"Core options","text":"<p>The Hatari core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded.</p> <p>Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch.</p> <ul> <li> <p>Internal resolution [Hatari_resolution] (640x480|832x576|832x588|800x600|960x720|1024x768|1024x1024)</p> <p>Set the internal resolution.</p> </li> </ul>"},{"location":"library/hatari/#controllers","title":"Controllers","text":"<p>The Hatari core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/hatari/#user-1-device-types","title":"User 1 device types","text":"<ul> <li>None - Doesn't disable input. There's no reason to switch to this.</li> <li>RetroPad - Joypad - Stay on this.</li> <li>RetroPad w/Analog - Joypad - Same as RetroPad. There's no reason to switch to this.</li> </ul>"},{"location":"library/hatari/#other-controllers","title":"Other controllers","text":"<ul> <li>Mouse - The Hatari core can emulate mouse inputs but this is done automatically and cannot be manually selected as a device type.</li> </ul>"},{"location":"library/hatari/#controller-tables","title":"Controller tables","text":""},{"location":"library/hatari/#joypad","title":"Joypad","text":"User 1 Remap descriptors RetroPad Inputs Enter GUI Mouse mode toggle Keyboard overlay Up Down Left Right Fire Joystick number Mouse speed Toggle m/k status"},{"location":"library/hatari/#keyboard","title":"Keyboard","text":"RetroKeyboard Inputs Hatari core Inputs Keyboard Backspace - Keyboard Tab - Keyboard Clear - Keyboard Return - Keyboard Pause - Keyboard Escape - Keyboard Space - Keyboard Exclaim ! - Keyboard Double Quote \" - Keyboard Hash # - Keyboard Dollar $ - Keyboard Ampersand &amp; - Keyboard Quote ' - Keyboard Left Parenthesis ( - Keyboard Right Parenthesis ) - Keyboard Asterisk * - Keyboard Plus + - Keyboard Comma , - Keyboard Minus - - Keyboard Period . - Keyboard Slash / - Keyboard 0 - Keyboard 1 - Keyboard 2 - Keyboard 3 - Keyboard 4 - Keyboard 5 - Keyboard 6 - Keyboard 7 - Keyboard 8 - Keyboard 9 - Keyboard Colon : - Keyboard Semicolon ; - Keyboard Less than &lt; - Keyboard Equals = - Keyboard Greater than &gt; - Keyboard Question ? - Keyboard At @ - Keyboard Left Bracket [ - Keyboard Backslash \\ - Keyboard Right Bracket ] - Keyboard Caret ^ - Keyboard Underscore _ - Keyboard Backquote ` - Keyboard a - Keyboard b - Keyboard c - Keyboard d - Keyboard e - Keyboard f - Keyboard g - Keyboard h - Keyboard i - Keyboard j - Keyboard k - Keyboard l - Keyboard m - Keyboard n - Keyboard o - Keyboard p - Keyboard q - Keyboard r - Keyboard s - Keyboard t - Keyboard u - Keyboard v - Keyboard w - Keyboard x - Keyboard y - Keyboard z - Keyboard Delete - Keyboard Keypad 0 - Keyboard Keypad 1 - Keyboard Keypad 2 - Keyboard Keypad 3 - Keyboard Keypad 4 - Keyboard Keypad 5 - Keyboard Keypad 6 - Keyboard Keypad 7 - Keyboard Keypad 8 - Keyboard Keypad 9 - Keyboard Keypad Period . - Keyboard Keypad Divide / - Keyboard Keypad Multiply * - Keyboard Keypad Minus - - Keyboard Keypad Plus + - Keyboard Keypad Enter - Keyboard Keypad Equals = - Keyboard Up - Keyboard Down - Keyboard Right - Keyboard Left - Keyboard Insert - Keyboard Home - Keyboard End - Keyboard Page Up - Keyboard Page Down - Keyboard F1 - Keyboard F2 - Keyboard F3 - Keyboard F4 - Keyboard F5 - Keyboard F6 - Keyboard F7 - Keyboard F8 - Keyboard F9 - Keyboard F10 - Keyboard F11 - Keyboard F12 - Keyboard F13 - Keyboard F14 - Keyboard F15 - Keyboard Num Lock - Keyboard Caps Lock - Keyboard Scroll Lock - Keyboard Right Shift - Keyboard Left Shift - Keyboard Right Control - Keyboard Left Control - Keyboard Right Alt - Keyboard Left Alt - Keyboard Right Meta - Keyboard Left Meta - Keyboard Right Super - Keyboard Left Super - Keyboard Mode - Keyboard Compose - Keyboard Help - Keyboard Print - Keyboard Sys Req - Keyboard Break - Keyboard Menu - Keyboard Power - Keyboard \u20ac - Keyboard Undo - Keyboard Unmapped - Keyboard Unknown -"},{"location":"library/hatari/#mouse","title":"Mouse","text":"RetroMouse Inputs Hatari core inputs  Mouse Cursor Mouse Cursor  Mouse 1 Mouse Left Button  Mouse 2 Mouse Right Button"},{"location":"library/hatari/#compatibility","title":"Compatibility","text":"<ul> <li>Hatari compatibility can be found here</li> </ul>"},{"location":"library/hatari/#external-links","title":"External Links","text":"<ul> <li>Official Hatari Website</li> <li>Official Hatari Downloads</li> <li>Libretro Hatari Core info file</li> <li>Libretro Hatari Github Repository</li> <li>Report Libretro Hatari Core Issues Here</li> </ul>"},{"location":"library/higan_accuracy/","title":"Nintendo - SNES / Famicom (higan Accuracy)","text":""},{"location":"library/higan_accuracy/#background","title":"Background","text":"<p>A port of higan v106's Super Famicom emulation core to libretro. This core is the most in sync with upstream higan.</p> <ul> <li>Most accurate SNES emulation available.</li> <li>Simplified and easily accessible Super Game Boy functionality compared to the other bsnes cores.</li> </ul>"},{"location":"library/higan_accuracy/#authorlicense","title":"Author/License","text":"<p>The higan Accuracy core has been authored by</p> <ul> <li>byuu</li> </ul> <p>The higan Accuracy core is licensed under</p> <ul> <li>GPLv3</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/higan_accuracy/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the higan Accuracy core have the following file extensions:</p> <ul> <li>.sfc</li> <li>.smc</li> <li>.gb</li> <li>.gbc</li> <li>.bml</li> <li>.rom</li> </ul>"},{"location":"library/higan_accuracy/#databases","title":"Databases","text":"<p>RetroArch database(s) that are associated with the higan Accuracy core:</p> <ul> <li>Nintendo - Super Nintendo Entertainment System</li> <li>Nintendo - Super Nintendo Entertainment System Hacks</li> <li>Nintendo - Game Boy</li> <li>Nintendo - Game Boy Color</li> </ul>"},{"location":"library/higan_accuracy/#bios","title":"BIOS","text":"<p>Required or optional firmware files go in the frontend's system directory.</p> <p>Attention</p> <p>higan Accuracy uses split ROMS for special chip games.</p> <p>Attention</p> <p>Firmware files for SGB emulation need to be in directories called SGB1.sfc and SGB2.sfc in RetroArch's system directory. Look at the Super GameBoy support section for more information.</p> <p>Notable DSP1.mdDSP1B Games:</p> <ul> <li>Super Mario Kart</li> <li>Pilotwings</li> </ul> <p>Notable DSP2 Games:</p> <ul> <li>Dungeon Master</li> </ul> <p>Notable DSP3 Games:</p> <ul> <li>SD Gundam GX</li> </ul> <p>Notable DSP4 Games:</p> <ul> <li>Top Gear 3000</li> </ul> <p>Notable Cx4 Games:</p> <ul> <li>Mega Man X2</li> <li>Mega Man X3</li> </ul> Filename Description md5sum dsp1.data.rom DSP1 co-processor firmware - Optional 3d81b45fa0c2aa8b852dfb1ece7c0971 dsp1.program.rom DSP1 co-processor firmware - Optional ae209fbe789fbf11a48aea5ab1197321 dsp1b.data.rom DSP1B co-processor firmware - Optional 1e3f568634a7d8284020dddc0ae905bc dsp1b.program.rom DSP1B co-processor firmware - Optional d10f446888e097cbf500f3f663cf4f6d dsp2.data.rom DSP2 co-processor firmware - Optional e9417e29223b139c3c4b635a2a3b8744 dsp2.program.rom DSP2 co-processor firmware - Optional aa6e5922a3ed5ded54f24247c11143c5 dsp3.data.rom DSP3 co-processor firmware - Optional 0a81210c0a940b997dd9843281008ee6 dsp3.program.rom DSP3 co-processor firmware - Optional d99ca4562818d49cee1f242705bba6f8 dsp4.data.rom DSP4 co-processor firmware - Optional ee4990879eb68e3cbca239c5bc20303d dsp4.program.rom DSP4 co-processor firmware - Optional a151023b948b90ffc23a5b594bb6fef2 cx4.data.rom CX4 co-processor firmware - Optional 037ac4296b6b6a5c47c440188d3c72e3 st010.data.rom ST010 co-processor firmware - Optional 254d70762b6f59f99c27c395aba7d07d st010.program.rom ST010 co-processor firmware - Optional 1d70019179a59a566a0bb5d3f2845544 st011.data.rom ST011 co-processor firmware - Optional 10bd3f4aa949737ab9836512c35bcc29 st011.program.rom ST011 co-processor firmware - Optional 95222ebf1c0c2990bcf25db43743f032 st018.data.rom ST018 co-processor firmware - Optional 49c898b60d0f15e90d0ba780dd12f366 st018.program.rom ST018 co-processor firmware - Optional dda40ccd57390c96e49d30a041f9a9e7 SGB1.sfc/sgb1.boot.rom Super Game Boy BIOS - Optional SGB1.sfc/program.rom Super Game Boy ROM - Optional SGB2.sfc/sgb2.boot.rom Super Game Boy 2 BIOS - Optional SGB2.sfc/program.rom Super Game Boy 2 ROM - Optional"},{"location":"library/higan_accuracy/#features","title":"Features","text":"<p>Frontend-level settings or features that the higan Accuracy core respects.</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 Memory Monitoring (achievements) \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse - Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan - LEDs \u2715"},{"location":"library/higan_accuracy/#directories","title":"Directories","text":"<p>The higan Accuracy core's internal core name is 'higan (Super Famicom Accuracy)'</p> <p>The higan Accuracy core saves/loads to/from these directories.</p> <p>Frontend's Save directory</p> <ul> <li>'content-name'.srm (Cartridge battery save)</li> </ul> <p>Frontend's State directory</p> <ul> <li>'content-name'.state# (State)</li> </ul>"},{"location":"library/higan_accuracy/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The higan Accuracy core's core provided FPS is (FPS)</li> <li>The higan Accuracy core's core provided sample rate is (Rate)</li> <li>The higan Accuracy core's core provided aspect ratio is (Ratio)</li> </ul>"},{"location":"library/higan_accuracy/#super-gameboy-support","title":"Super Gameboy Support","text":"<p>The higan Accuracy core uses a simplified Super Game Boy routine that makes it much easier to access this feature than with the old v094-based cores.</p> <p>Instead of using the complex, CLI-based 'subsystem' launch commands, it looks for the necessary files in the system/BIOS directory whenever you feed the core a *.gb/c file.</p> <p>To get it working, you'll need one or more Super Game Boy ROMs and the sgb.boot.rom BIOS.</p> <p>Step 1</p> <p>Make 2 subdirectories in RetroArch's system directory, one named SGB1.sfc and the other named SGB2.sfc.</p> <p>Step 2</p> <p>Copy your original Super Game Boy ROM into the SGB1.sfc directory and then rename it to program.rom. Copy your Super Game Boy 2 ROM into the SGB2.sfc directory and then rename it program.rom, as well.</p> <p>Step 3</p> <p>Copy your sgb.boot.rom BIOS into each of your SGB1.sfc and SGB2.sfc directories, and rename them to sgb1.boot.rom and sgb2.boot.rom, respectively.</p> <p>The 'Preferred Super GameBoy BIOS' core option lets you choose which of the two SGB BIOSes to use.</p> <p>Step 4</p> <p>Load a SGB-supported GB.mdGBC rom.</p> <p>Done</p> <p></p> <p>Warning</p> <p>There may be graphical glitches when Rewind is set to On in RetroArch's settings.</p>"},{"location":"library/higan_accuracy/#msu-1","title":"MSU-1","text":"<p>Attention</p> <p>MSU-1 support in this core is complex. Use the Snes9x core for simplified and easily accessible MSU-1 support.</p> <p>MSU-1 support can be used by loading a correct .bml file.</p> <p>There's documentation for loading MSU-1 games in standalone higan here.</p>"},{"location":"library/higan_accuracy/#core-options","title":"Core options","text":"<p>The higan Accuracy core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded.</p> <p>Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch.</p> <ul> <li> <p>Internal resolution [higan_sfc_internal_resolution] (512x480|512x448|512x240|512x224|256x240|256x224)</p> <p>Self-explanatory.</p> </li> </ul> 512x480 <p></p> 512x448 <p></p> 512x240 <p></p> 512x224 <p></p> 256x240 <p></p> 256x224 <p></p> <ul> <li> <p>Color emulation [higan_sfc_color_emulation] (OFF|ON)</p> <p>Simulates the way a console\u2019s display device differs from modern computer monitor\u2019s colour reproduction. In particular, it simulates the slightly-different gamma correction used by the Super Famicom.</p> </li> </ul> Color emulation - Disabled <p></p> Color emulation - Enabled <p></p> <ul> <li> <p>Blur emulation [higan_sfc_blur_emulation] (OFF|ON)</p> <p>Simulates the limited horizontal resolution of standard-definition TVs by blurring together horizontally-adjacent pixels. Games like Jurassic Park for the Super Famicom depend on this to emulate a transparency effect.</p> </li> </ul> Blur emulation - Disabled <p></p> Blur emulation - Enabled <p></p> <ul> <li> <p>Scanline emulation [higan_sfc_scanline_emulation] (OFF|ON)</p> <p>Currently does not function properly.</p> </li> <li> <p>Preferred Super GameBoy BIOS (restart) [higan_sfc_sgb_bios] (SGB1.sfc/|SGB2.sfc/)</p> <p>Choose what Super GameBoy BIOS you want to use. Look at the Super GameBoy Support section for more information.</p> </li> </ul>"},{"location":"library/higan_accuracy/#controllers","title":"Controllers","text":"<p>The higan Accuracy core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/higan_accuracy/#user-1-device-types","title":"User 1 device types","text":"<ul> <li>None - Input disabled.</li> <li>SNES Joypad - Joypad</li> <li>SNES Mouse - Mouse</li> </ul>"},{"location":"library/higan_accuracy/#user-2-device-types","title":"User 2 device types","text":"<ul> <li>None - Input disabled.</li> <li>SNES Joypad - Joypad</li> <li>SNES Mouse - Mouse</li> <li>Multitap - Joypad - Allows for up to five players to play together in multitap games.</li> <li>SuperScope - Lightgun - Inputs are not hooked up in this core.</li> <li>Justifier - Lightgun - Inputs are not hooked up in this core.</li> <li>Justifiers - Lightgun - Two Justifiers are plugged in, for two-player Justifier games. Inputs are not hooked up in this core.</li> </ul>"},{"location":"library/higan_accuracy/#multitap-support","title":"Multitap support","text":"<p>Activating multitap support in compatible games can be configured by switching to the Multitap device type for User 2.</p>"},{"location":"library/higan_accuracy/#controller-tables","title":"Controller tables","text":""},{"location":"library/higan_accuracy/#joypad","title":"Joypad","text":"User 1 - 5 Remap descriptors RetroPad Inputs B Y Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A X L R"},{"location":"library/higan_accuracy/#mouse","title":"Mouse","text":"RetroMouse Inputs SNES Mouse  Mouse Cursor SNES Mouse Cursor  Mouse 1 SNES Mouse Left Button  Mouse 2 SNES Mouse Right Button"},{"location":"library/higan_accuracy/#compatibility","title":"Compatibility","text":"<p>The higan Accuracy core fully emulates all SNES games that have ever been officially released.</p> <p>Incompatible with ROM hacks made to take advantage of emulator quirks, much like real hardware.</p>"},{"location":"library/higan_accuracy/#external-links","title":"External Links","text":"<ul> <li>Official higan Website</li> <li>Official higan Upstream Downloads</li> <li>Libretro higan Accuracy Core info file</li> <li>Libretro higan Accuracy Gitlab Repository</li> <li>Report Libretro higan Accuracy Core Issues Here</li> </ul>"},{"location":"library/higan_accuracy/#see-also","title":"See also","text":""},{"location":"library/higan_accuracy/#nintendo-game-boy-color","title":"Nintendo - Game Boy (+ Color)","text":"<ul> <li>Nintendo - Game Boy / Color (Emux GB)</li> <li>Nintendo - Game Boy / Color (Gambatte)</li> <li>Nintendo - Game Boy / Color (Gearboy)</li> <li>Nintendo - Game Boy / Color (SameBoy)</li> <li>Nintendo - Game Boy / Color (TGB Dual)</li> <li>Nintendo - Game Boy Advance (mGBA)</li> <li>Nintendo - Game Boy Advance (VBA-M)</li> <li>Nintendo - SNES / Famicom (nSide Balanced)</li> <li>Nintendo - SNES / Famicom (Mesen-S)</li> </ul>"},{"location":"library/higan_accuracy/#nintendo-super-nintendo-entertainment-system-hacks","title":"Nintendo - Super Nintendo Entertainment System (+ Hacks)","text":"<ul> <li>Nintendo - SNES / Famicom (Beetle bsnes)</li> <li>Nintendo - SNES / Famicom (bsnes-mercury Accuracy)</li> <li>Nintendo - SNES / Famicom (bsnes-mercury Balanced)</li> <li>Nintendo - SNES / Famicom (bsnes-mercury Performance)</li> <li>Nintendo - SNES / Famicom (bsnes Accuracy)</li> <li>Nintendo - SNES / Famicom (bsnes Balanced)</li> <li>Nintendo - SNES / Famicom (bsnes C++98 (v085))</li> <li>Nintendo - SNES / Famicom (bsnes Performance)</li> <li>Nintendo - SNES / Famicom (nSide Balanced)</li> <li>Nintendo - SNES / Famicom (Mesen-S)</li> <li>Nintendo - SNES / Famicom (Snes9x)</li> <li>Nintendo - SNES / Famicom (Snes9x 2002)</li> <li>Nintendo - SNES / Famicom (Snes9x 2005 Plus)</li> <li>Nintendo - SNES / Famicom (Snes9x 2005)</li> <li>Nintendo - SNES / Famicom (Snes9x 2010)</li> </ul>"},{"location":"library/holani/","title":"Atari - Lynx (Holani)","text":""},{"location":"library/holani/#background","title":"Background","text":"<p>Holani is a cycle-stepped Atari Lynx video game system emulator that can be used as a libretro core.  Holani's primary goal is to get closer to the Lynx hardware and provide a better emulation experience.</p>"},{"location":"library/holani/#authorlicense","title":"Author/License","text":"<p>The Holani core has been authored by</p> <ul> <li>LLeny</li> </ul> <p>The Holani core is licensed under</p> <ul> <li>GNU General Public License v3.0</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/holani/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the Holani core have the following file extensions:</p> <ul> <li>.lnx</li> <li>.o</li> </ul>"},{"location":"library/holani/#databases","title":"Databases","text":"<p>RetroArch database(s) that are associated with the Holani core:</p> <ul> <li>Atari - Lynx</li> </ul>"},{"location":"library/holani/#bios","title":"BIOS","text":"<p>Optional firmware files go in the frontend's system directory.</p> Filename Description md5sum lynxboot.img Lynx Boot Image - Required fcd403db69f54290b51035d82f835e7b"},{"location":"library/holani/#features","title":"Features","text":"<p>Frontend-level settings or features that the Holani core respects.</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay (State based) \u2714 (not link-cable emulation) Core Options \u2714 Memory Monitoring (achievements) \u2714 Cheats (Cheats menu) \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/holani/#directories","title":"Directories","text":"<p>The Holani core's directory name is 'Holani'</p> <p>The Holani core saves/loads to/from these directories.</p> <p>Frontend's State directory</p> <ul> <li>'content-name'.state# (State)</li> </ul>"},{"location":"library/holani/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The Holani core's core provided FPS is dynamic</li> <li>The Holani core's core provided sample rate is 16,000 Hz</li> </ul>"},{"location":"library/holani/#controllers","title":"Controllers","text":"<p>The Holani core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/holani/#user-1-device-types","title":"User 1 device types","text":"<ul> <li>None - Doesn't disable input.</li> <li>RetroPad - Joypad</li> <li>RetroPad w/Analog - Joypad - There's no reason to switch to this.</li> </ul>"},{"location":"library/holani/#controller-tables","title":"Controller tables","text":""},{"location":"library/holani/#joypad","title":"Joypad","text":"User 1 Remap descriptors RetroPad Inputs B Pause D-Pad Up D-Pad Down D-Pad Left D-Pad Right A Option 1 Option 2 <p>Supported combinations</p> <ul> <li>Option 1 + Pause = Restarts game</li> <li>Option 2 + Pause = Flips Screen</li> </ul>"},{"location":"library/holani/#external-links","title":"External Links","text":"<ul> <li>Official Holani Website</li> <li>Official Holani Downloads</li> <li>Libretro Holani Core info file</li> <li>Libretro Holani Github Repository</li> <li>Report Libretro Holani Core Issues Here</li> </ul>"},{"location":"library/holani/#see-also","title":"See also","text":""},{"location":"library/holani/#atari-lynx","title":"Atari - Lynx","text":"<ul> <li>Atari - Lynx (Beetle Lynx)</li> <li>Atari - Lynx (Handy)</li> </ul>"},{"location":"library/imageviewer/","title":"Imageviewer","text":""},{"location":"library/imageviewer/#background","title":"Background","text":"<p>View images</p>"},{"location":"library/imageviewer/#authorlicense","title":"Author/License","text":"<p>The Imageviewer core has been authored by</p> <ul> <li>The RetroArch Team</li> </ul> <p>The Imageviewer core is licensed under</p> <ul> <li>MIT</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/imageviewer/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the Imageviewer core have the following file extensions:</p> <ul> <li>.jpg</li> <li>.jpeg</li> <li>.png</li> <li>.bmp</li> <li>.psd</li> <li>.tga</li> <li>.gif</li> <li>.hdr</li> <li>.pic</li> <li>.ppm</li> <li>.pgm</li> </ul>"},{"location":"library/imageviewer/#features","title":"Features","text":"<p>Frontend-level settings or features that the Imageviewer core respects.</p> Feature Supported Restart \u2715 Screenshots \u2714 Saves \u2715 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2715 Memory Monitoring (achievements) \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2715 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/imageviewer/#directories","title":"Directories","text":"<p>The Imageviewer core's internal core name is 'image display'</p>"},{"location":"library/imageviewer/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The Imageviewer core's core provided FPS is 60</li> <li>The Imageviewer core's core provided sample rate is 44100 Hz</li> <li>The Imageviewer core's core provided aspect ratio is dependent on the loaded content.</li> </ul>"},{"location":"library/imageviewer/#controllers","title":"Controllers","text":"<p>The Imageviewer core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/imageviewer/#user-1-device-types","title":"User 1 device types","text":"<ul> <li>None - Doesn't disable input. There's no reason to switch to this.</li> <li>RetroPad - Joypad - Stay on this.</li> <li>RetroPad w/Analog - Joypad - There's no reason to switch to this.</li> </ul>"},{"location":"library/imageviewer/#controller-tables","title":"Controller tables","text":""},{"location":"library/imageviewer/#joypad","title":"Joypad","text":"RetroPad Inputs Imageviewer core inputs Automatic slideshow - Go to the next image every 2 seconds Go forward 5 images Go backward 5 images Go backward 1 image Go forward 1 image"},{"location":"library/imageviewer/#external-links","title":"External Links","text":"<ul> <li>Libretro Imageviewer Core info file</li> <li>Libretro Imageviewer Github Repository</li> <li>Report Libretro Imageviewer Core Issues Here</li> </ul>"},{"location":"library/imageviewer/#see-also","title":"See also","text":""},{"location":"library/imageviewer/#media","title":"Media","text":"<ul> <li>FFmpeg</li> <li>Game Music Emu</li> <li>PocketCDG</li> </ul>"},{"location":"library/jaxe/","title":"XO-CHIP/CHIP-8 (JAXE) WIP","text":""},{"location":"library/jaxe/#background","title":"Background","text":"<p>A fully-featured, cross platform XO-CHIP/S-CHIP/CHIP-8 emulator written in C. The JAXE core has been authored by</p> <ul> <li>phcoder (Vladimir Serbinenko)</li> <li>kurtjd (Kurtis Dinelle)</li> </ul> <p>The JAXE core is licensed under</p> <ul> <li>MIT</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/jaxe/#tecnical-info","title":"Tecnical Info","text":"<p>The original CHIP-8 virtual machine was designed with the following specs:</p> <ul> <li>35 opcodes</li> <li>4kb RAM</li> <li>16 8-bit general purpose registers</li> <li>16-bit program counter, stack pointer, and index registers</li> <li>8-bit delay and sound timer registers</li> <li>64x32 monochrome display</li> <li>16-key keypad (0-F)</li> <li>Program memory starting at address 0x200</li> </ul> <p>Due to the way CHIP-8 was designed, the \"flicker\" that happens when sprites are drawn is normal. Games developed for it also rarely made any attempt to cap their frame rate due to the slow hardware of the time hence the need to artificially slow the CPU down on modern emulators.</p> <p>In the early 90s, Andreas Gustafsson created a port for the HP48 calculator which was eventually superseded by S-CHIP 1.0/1.1 created by Erik Bryntse. The S-CHIP added several features as well as accidentally (or intentionally?) modifying the behavior of several original opcodes:</p> <ul> <li>9 new opcodes</li> <li>128x64 HI-RES display</li> <li>Persistent storage</li> <li>Modified Bnnn, Fx55, Fx65, Dxyn, 8xy6, and 8xyE instructions</li> </ul> <p>With time, it seems the S-CHIP became more popular and many programs were written to work with its various quirks. Thus, JAXE defaults to original S-CHIP design however many of its quirks can be toggled for improved compatibility using the flags in the Options section below.</p> <p>However, recently John Earnest designed the XO-CHIP extension allowing CHIP-8 programs to take advantage of modern hardware to an extent. This extension adds several more instructions and features including:</p> <ul> <li>7 new opcodes</li> <li>16-bit addressing for a total of ~64kb RAM</li> <li>Second display buffer allowing for 4 colors instead of the typical 2</li> <li>Improved sound support</li> <li>Modified Fx75 and Fx85 instructions to allow for 16 user flags instead of typical 8</li> <li>JAXE currently supports all of these extensions.</li> </ul> <p>It should also be noted that JAXE stores its fonts in memory starting at address 0x0000 followed immediately by large fonts and finally immediately by the stack. Therefore the stack pointer initially points to address 0x00F0.</p>"},{"location":"library/jaxe/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the JAXE core have the following file extensions:</p> <ul> <li>.ch8</li> <li>.sc8</li> <li>.xo8</li> </ul>"},{"location":"library/jaxe/#databases","title":"Databases","text":"<p>RetroArch database(s) that are associated with the JAXE core:</p> <ul> <li>CHIP-8</li> </ul>"},{"location":"library/jaxe/#bios","title":"BIOS","text":"<p>JAXE does not require BIOS (bootrom) files to work.</p>"},{"location":"library/jaxe/#features","title":"Features","text":"Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2715 Core Options \u2714 Memory Monitoring (achievements) \u2715 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2714 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2714 Disk Control \u2715 Username \u2715 Crop Overscan (in RetroArch's Video settings) \u2715"},{"location":"library/jaxe/#directories","title":"Directories","text":"<p>The JAXE core's directory name is 'JAXE'</p>"},{"location":"library/jaxe/#core-provided-aspect-ratio","title":"Core provided aspect ratio","text":"<p>JAXE's core provided aspect ratio is 2/1.</p>"},{"location":"library/jaxe/#core-options","title":"Core options","text":"<p>The JAXE core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch.</p> <p>Ram init quirk [] (ON|OFF)</p> <p>8xy6/8xyE quirk [] (ON|OFF)</p> <p>Fx55/Fx65 quirk [] (ON|OFF)</p> <p>Bnnn quirk [] (ON|OFF)</p> <p>Big Sprite LORES quirk [] (ON|OFF)</p> <p>00FE/00FF quirk [] (ON|OFF)</p> <p>Sprite Wrapping [] (ON|OFF)</p> <p>Collision Enumeration [] (ON|OFF)</p> <p>Collision with Bottom of Screen [] (ON|OFF)</p> <p>CPU frequency [] (1000|1500|2000|3000|5000|10000|800|750|600|500|400|300)</p> <p>Theme [] (Default|Black and white|Inverted black and white|Blood|Hacker|Space|Crazy Orange|Cyberpunk)</p>"},{"location":"library/jaxe/#controllers","title":"Controllers","text":""},{"location":"library/jaxe/#device-types","title":"Device types","text":"<p>The JAXE core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/jaxe/#user-1-1-device-types","title":"User 1 - 1 device types","text":"<ul> <li>None - Input disabled.</li> <li>RetroPad - Joypad</li> <li>RetroPad w/Analog - Joypad - There is no reason to switch to this.</li> </ul>"},{"location":"library/jaxe/#controller-tables","title":"Controller tables","text":""},{"location":"library/jaxe/#joypad-and-analog-device-type-table","title":"Joypad and analog device type table","text":"User 1 - 1 input descriptors RetroPad 0 B 2 Y 1 Start 5 D-Pad Up 8 D-Pad Down 7 D-Pad Left 9 D-Pad Right 6 A C X 5 L A R B L2 D R2 E L3 Button F R3 Button"},{"location":"library/jaxe/#external-links","title":"External Links","text":"<ul> <li>Libretro JAXE Core info file</li> <li>Libretro JAXE Github Repository</li> <li>Report JAXE Core Issues Here</li> </ul>"},{"location":"library/jaxe/#chip-8","title":"CHIP-8","text":"<ul> <li>CHIP-8 (Emux)</li> </ul>"},{"location":"library/jollycv/","title":"ColecoVision/CreatiVision/My Vision (JollyCV)","text":""},{"location":"library/jollycv/#background","title":"Background","text":"<p>JollyCV is a multi-emulator supporting ColecoVision (including Super Game Module), CreatiVision, and My Vision. JollyCV is fast, accurate, and highly portable.</p> <p>The JollyCV core has been authored by</p> <ul> <li>Rupert Carmichael (carmiker)</li> </ul> <p>The JollyCV core is licensed under</p> <ul> <li>BSD-3-Clause</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/jollycv/#bios","title":"BIOS","text":"<p>Required or optional firmware files go in the frontend's system directory.</p> <p>Attention</p> <p>JollyCV requires a BIOS for ColecoVision or CreatiVision content. Place the following files in RetroArch's system directory.</p> Filename Description md5sum coleco.rom ColecoVision BIOS - Required 2c66f5911e5b42b8ebe113403548eee7 bioscv.rom CreatiVision BIOS - Required 3b1ef759d8e3fb4071582efd33dd05f9"},{"location":"library/jollycv/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the JollyCV core have the following file extensions:</p> <ul> <li>.col</li> <li>.rom</li> <li>.myv</li> <li>.bin</li> </ul> <p>RetroArch database(s) that are associated with the JollyCV core:</p> <ul> <li>Coleco - ColecoVision</li> </ul>"},{"location":"library/jollycv/#features","title":"Features","text":"<p>Frontend-level settings or features that the JollyCV core respects.</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 Memory Monitoring (achievements) \u2714 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2714 LEDs \u2715"},{"location":"library/jollycv/#directories","title":"Directories","text":"<p>The JollyCV core's library name is 'JollyCV'</p> <p>The JollyCV core saves/loads to/from these directories.</p> <p>Frontend's Save directory</p> File Description *.srm Cartridge save <p>Frontend's State directory</p> File Description *.state# State"},{"location":"library/jollycv/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The JollyCV core's core provided FPS is 60 for NTSC and 50 for PAL</li> <li>The JollyCV core's core provided sample rate is 48000Hz</li> <li>The JollyCV core provides adjustable overscan masking and aspect ratio options</li> </ul>"},{"location":"library/jollycv/#core-options","title":"Core options","text":"<p>The JollyCV core has the following options that can be tweaked from the core options menu. The default setting is bolded.</p> <ul> <li> <p>TMS9918 Palette [jollycv_tmspalette] (TeaTime|SYoung|GCDatasheet)</p> <p>Set the Palette</p> </li> <li> <p>Aspect Ratio [jollycv_aspect] (Region-based Pixel Aspect Ratio|Perfectly Square Pixels (1:1 PAR)|Very Traditional NTSC Aspect Ratio (4:3 DAR)|Ostensibly Accurate PAL Aspect Ratio)</p> <p>Set the Aspect Ratio</p> </li> <li> <p>Mask Overscan (Top) [jollycv_overscan_t] (16|14|12|10|8|6|4|2|0)</p> <p>Mask off pixels hidden by a bezel or border on original CRTs (top)</p> </li> <li> <p>Mask Overscan (Bottom) [jollycv_overscan_b] (16|14|12|10|8|6|4|2|0)</p> <p>Mask off pixels hidden by a bezel or border on original CRTs (bottom)</p> </li> <li> <p>Mask Overscan (Left) [jollycv_overscan_l] (8|6|4|2|0)</p> <p>Mask off pixels hidden by a bezel or border on original CRTs (left)</p> </li> <li> <p>Mask Overscan (Right) [jollycv_overscan_r] (8|6|4|2|0)</p> <p>Mask off pixels hidden by a bezel or border on original CRTs (right)</p> </li> </ul>"},{"location":"library/jollycv/#input-devices","title":"Input Devices","text":"ColecoVision Paddle (Super Action) RetroPad Inputs Up Down Left Right Yellow (Fire L) Orange (Fire R) Purple Blue 1 2 3 4 5 6 7 8 9 0 * # Spinner- Spinner+ CreatiVision Paddle RetroPad Inputs Up Down Left Right Fire L Fire R Start 1 Start 2 Reset Reset My Vision RetroPad Inputs B (Up) C (Down) A (Left) D (Right) E 1 2 3 4 5 6 7 8 9 10 11 12 13 14"},{"location":"library/jollycv/#external-links","title":"External Links","text":"<ul> <li>Upstream JollyCV Repository</li> <li>Libretro JollyCV Core info file</li> <li>Libretro JollyCV Repository</li> <li>Report JollyCV Core Issues Here</li> </ul>"},{"location":"library/jollycv/#see-also","title":"See also","text":"<ul> <li>Coleco - ColecoVision (Gearcoleco)</li> <li>MSX/SVI/ColecoVision/SG-1000 (blueMSX)</li> </ul>"},{"location":"library/jumpnbump/","title":"Jump 'n Bump","text":""},{"location":"library/jumpnbump/#background","title":"Background","text":"<p>This is a game for the whole family. You play cute fluffy little bunnies and hop on each other's heads.</p> <p>At the beginning you are in the menu, where you have to let each active player jump over the tree trunk to enter the play area, and then walk to the right. You will then enter the arena. The aim is to jump on the other bunnies' heads\u2026</p> <p>Jump 'n Bump was originally a DOS game by Brainchild Design, which was open sourced under the GPL license and ported to SDL, and then SDL2.</p>"},{"location":"library/jumpnbump/#extra-levels","title":"Extra levels","text":"<p>Additional levels are available on the website of Brainchild Design.</p>"},{"location":"library/jumpnbump/#authorlicense","title":"Author/License","text":"<p>The Jump 'n Bump core has been authored by</p> <ul> <li>loki666</li> </ul> <p>The Jump 'n Bump core is licensed under</p> <ul> <li>GPLv2</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/jumpnbump/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the Jump 'n Bump core have the following file extensions:</p> <ul> <li>.dat</li> </ul>"},{"location":"library/jumpnbump/#databases","title":"Databases","text":"<p>RetroArch database(s) that are associated with the Jump 'n Bump core:</p> <ul> <li>Jump 'n Bump</li> </ul>"},{"location":"library/jumpnbump/#bios","title":"BIOS","text":"<p>There are no required BIOS.</p>"},{"location":"library/jumpnbump/#features","title":"Features","text":"<p>Frontend-level settings or features that the Jump 'n Bump core respects.</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2715 States \u2715 Rewind \u2715 Netplay \u2714 Core Options \u2714 Memory Monitoring (achievements) \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/jumpnbump/#directories","title":"Directories","text":"<p>The Jump 'n Bump core's internal core name is 'Jump 'n Bump'</p>"},{"location":"library/jumpnbump/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The Jump 'n Bump core's core provided FPS is (60)</li> <li>The Jump 'n Bump core's core provided sample rate is 44100 Hz</li> <li>The minivmac core's base width is 1200.</li> <li>The minivmac core's base height is 768.</li> <li>The minivmac core's core provided aspect ratio is 25/16.</li> </ul>"},{"location":"library/jumpnbump/#core-options","title":"Core options","text":"<p>The Jump 'n Bump core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded.</p> <p>Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch.</p> <ul> <li> <p>Flip Level [jnb-flip] (OFF|ON)</p> Flip Level - Off <p></p> Flip Level - On <p></p> </li> <li> <p>Flies [jnb-flies] (OFF|ON)</p> Flies - Off <p></p> Flies - On <p> </p> </li> </ul>"},{"location":"library/jumpnbump/#controllers","title":"Controllers","text":"<p>The Jump 'n Bump core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/jumpnbump/#user-1-4-device-types","title":"User 1 - 4 device types","text":"<ul> <li>None - Disables input.</li> <li>RetroPad - Joypad</li> <li>RetroPad with Analog</li> </ul>"},{"location":"library/jumpnbump/#controller-tables","title":"Controller tables","text":""},{"location":"library/jumpnbump/#joypad","title":"Joypad","text":"User 1 - 4 Remap descriptors RetroPad Inputs B Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right"},{"location":"library/jumpnbump/#external-links","title":"External Links","text":"<ul> <li>Jump 'n Bump Github Repository</li> <li>Libretro Jump 'n Bump Core info file</li> <li>Libretro Jump 'n Bump Github Repository</li> <li>Report Libretro Jump 'n Bump Core Issues Here</li> </ul>"},{"location":"library/kronos/","title":"Sega - Saturn/ST-V (Kronos)","text":""},{"location":"library/kronos/#background","title":"Background","text":"<p>Kronos is a fork of Yabause. It uses compute shaders and as such requires OpenGL 4.3. It emulates both the Sega Saturn and its arcade board version, the Sega Titan Video (ST-V).</p> <p>It's a fairly active project and the only Sega Saturn libretro core being officially supported by upstream.</p>"},{"location":"library/kronos/#authorlicense","title":"Author/License","text":"<p>The Kronos core has been authored by</p> <ul> <li>Guillaume Duhammel</li> <li>Theo Berkau</li> <li>Anders Montonen</li> <li>devmiyax</li> <li>Fran\u00e7ois Caron</li> </ul> <p>The Kronos core is licensed under</p> <ul> <li>GPLv2</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/kronos/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the Kronos core have the following file extensions:</p> <ul> <li>.cue</li> <li>.iso</li> <li>.ccd</li> <li>.mds</li> <li>.chd</li> <li>.zip</li> </ul>"},{"location":"library/kronos/#databases","title":"Databases","text":"<p>RetroArch database(s) that are associated with the Kronos core:</p> <ul> <li>Sega - Saturn</li> </ul>"},{"location":"library/kronos/#bios","title":"BIOS","text":"<p>Required or optional firmware files go in the frontend's system directory.</p> Filename Description md5sum kronos/saturn_bios.bin Saturn BIOS - Required for Saturn games af5828fdff51384f99b3c4926be27762 kronos/stvbios.zip ST-V BIOS - Required for ST-V games mpr-18811-mx.ic1 The King of Fighters '95 ROM Cartridge - Required for this game 255113ba943c92a54facd25a10fd780c mpr-19367-mx.ic1 Ultraman: Hikari no Kyojin Densetsu ROM Cartridge - Required for this game 1cd19988d1d72a3e7caa0b73234c96b4 <p>This md5sum for the Saturn BIOS is just a hint, any valid saturn bios should work.</p> <p>Kronos will try searching for locations commonly used by other Sega Saturn libretro cores if it can't find a Sega Saturn bios at the expected path.</p> <p>Note that unlike yabause, Kronos won't automatically switch to HLE bios if a bios file is not present, because the Kronos project doesn't recommend using this HLE bios and actually won't provide support for any issue related to its usage.  This is the reason for the file to be required.</p>"},{"location":"library/kronos/#features","title":"Features","text":"<p>Frontend-level settings or features that the Kronos core respects.</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2715 Netplay \u2715 Core Options \u2714 Memory Monitoring (achievements) \u2714 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2714 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/kronos/#savefiles","title":"Savefiles","text":"<p>Their location depends on the content running and the core options. By default they'll be stored in a <code>kronos</code> subdirectory of your savefiles directory, which will be split further between <code>saturn</code> and <code>stv</code> directories. However Kronos also has a core option named \"Share saves with beetle\", which will try to match Sega Saturn savefiles with Beetle-saturn.</p>"},{"location":"library/kronos/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The Kronos core's core provided FPS is 60 for NTSC games and 50 for PAL games</li> <li>The Kronos core's core provided sample rate is 44100 Hz</li> <li>The Kronos core's core provided aspect ratio is 4/3</li> <li>The Kronos core will ask the frontend to rotate display for (ST-V) vertical games</li> </ul>"},{"location":"library/kronos/#loading-sega-saturn-content","title":"Loading Sega Saturn content","text":"<ul> <li>Kronos is not compatible with cue sheets containing references to audio files with wav/mp3/ogg/flac/ape extensions.</li> <li>Zip files containing cue+bin files can be loaded directly, however the dump will be loaded in RAM (meaning it will use around 700MB of RAM depending on the size of the dump).</li> <li>It is recommended to use Redump releases because this is the most thoroughly tested format.</li> </ul>"},{"location":"library/kronos/#core-options","title":"Core options","text":"<p>The Kronos core has the following options that can be tweaked from the core options menu. The default settings are bolded.</p> <ul> <li> <p>Force HLE BIOS [kronos_force_hle_bios] (disabled|enabled)</p> <p>HLE BIOS will be forced. Use at your own risk, this is mainly for debugging purpose and is neither recommended nor supported. Requires a restart.</p> </li> <li> <p>Video format [kronos_videoformattype] (auto|NTSC|PAL)</p> <p>Force video format to PAL or NTSC, default is auto which will try to detect from loaded content.</p> </li> <li> <p>Frameskip [kronos_skipframe] (0|1|2|3|4|5)</p> <p>It will skip rendering at a fixed rate, it can improve playability dramatically on lower end devices</p> </li> <li> <p>SH-2 cache support (experimental) [kronos_sh2coretype] (kronos|old)</p> <p>Support for SH-2's cache. It is required for some game to work properly. It can kill performance.</p> </li> <li> <p>Share saves with beetle [kronos_use_beetle_saves] (disabled|enabled)</p> <p>Details above. Requires a restart.</p> </li> <li> <p>Addon Cartridge [kronos_addon_cartridge] (none | 1M_extended_ram | 4M_extended_ram | 16M_extended_ram | 512K_backup_ram | 1M_backup_ram | 2M_backup_ram | 4M_backup_ram)</p> <p>This is the default cartridge you want Kronos to use. Note that your choice will be ignored if Kronos detects that the game requires a specific cartridge. Requires a restart.</p> </li> <li> <p>6Player Adaptor on Port 1 [kronos_multitap_port1] (disabled|enabled)</p> <p>Enable multitap in port 1.</p> </li> <li> <p>6Player Adaptor on Port 2 [kronos_multitap_port2] (disabled|enabled)</p> <p>Enable multitap in port 2.</p> </li> <li> <p>Resolution [kronos_resolution_mode] (original|480p|720p|1080p|4k|8k)</p> <p>Modify rendering resolution. Requires a restart.</p> </li> <li> <p>Output to original resolution [kronos_force_downsampling] (disabled|enabled)</p> <p>Useful when using resolution higher than your screen's, will also replace meshed transparency by real transparency to avoid moir\u00e9 effect.</p> </li> <li> <p>Improved mesh [kronos_meshmode] (disabled|enabled)</p> <p>Replace meshed transparency by real transparency.</p> </li> <li> <p>Improved banding [kronos_bandingmode] (disabled|enabled)</p> <p>Apply gouraud shading instead of flat shading, requires OpenGL CS renderer.</p> </li> <li> <p>Wireframe mode [kronos_wireframe_mode] (disabled|enabled)</p> <p>Wireframe mode, requires OpenGL CS renderer.</p> </li> <li> <p>ST-V Service/Test Buttons [kronos_service_enabled] (disabled|enabled)</p> <p>Enable Service/Test for ST-V, to enter cabinet settings. By default they aren't mapped so that you won't press them by mistake.</p> </li> <li> <p>ST-V Favorite Region [kronos_stv_favorite_region] (EU|US|JP|TW)</p> <p>Choose your favorite bios region for ST-V. It will be ignored if not compatible with your game.</p> </li> <li> <p>Bios Language [kronos_language_id] (English|German|French|Spanish|Italian|Japanese)</p> <p>Choose your favorite language, will translate some games. Requires a restart.</p> </li> </ul>"},{"location":"library/kronos/#controllers","title":"Controllers","text":"<p>The Kronos core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/kronos/#user-device-types","title":"User device types","text":"<ul> <li>None</li> <li>Saturn Pad</li> <li>Saturn 3D Pad</li> <li>Saturn Wheel</li> <li>Saturn Mouse</li> </ul>"},{"location":"library/kronos/#multitap-support","title":"Multitap support","text":"<p>Must be enabled in core options.</p>"},{"location":"library/kronos/#controller-tables","title":"Controller tables","text":""},{"location":"library/kronos/#joypad","title":"Joypad","text":"User 1 - 12 Remap descriptors RetroPad Inputs A X Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right B Y C Z L R Analog X  X Analog Y  Y"},{"location":"library/kronos/#compatibility","title":"Compatibility","text":"<ul> <li>Official Kronos Compatibility List</li> </ul>"},{"location":"library/kronos/#known-issues","title":"Known issues","text":"<ul> <li>Savestates work but can sometime be quite unstable</li> <li>Enabling both multitaps at the same time causes some kind of \"autofire\" bug</li> <li>Switching between windowed and fullscreen will cause issues, you need to start the core in your prefered mode and stick with it</li> <li>It seems there are compatibility issues between RetroArch's \"threaded video\" setting and this core.</li> </ul>"},{"location":"library/kronos/#external-links","title":"External Links","text":"<ul> <li>Official Kronos Repository (please report issues there)</li> <li>Libretro Kronos Core info file</li> <li>Libretro Kronos Github Repository</li> <li>Report Issues Here or Here</li> </ul>"},{"location":"library/kronos/#saturn","title":"Saturn","text":"<ul> <li>Sega - Saturn (Beetle Saturn)</li> <li>Sega - Saturn/ST-V (Kronos)</li> <li>Sega - Saturn (Yabause)</li> <li>Sega - Saturn (YabaSanshiro)</li> </ul>"},{"location":"library/lowres_nx/","title":"LowRes NX","text":""},{"location":"library/lowres_nx/#background","title":"Background","text":"<p>A port of the LowRes NX fantasy console to libretro. This core represents an imaginary handheld game console inspired by real 8- and 16-bit systems that is intended for simple games that can be programmed in second-generation, structured BASIC. It supports a d-pad, two action buttons and a keyboard for input. The LowRes NX platform comes with a variety of development tools including a Character Designer for editing sprites tile sand fonts, a Background Designer for tile maps and screen layouts and a Sound Composer for music and sound effects.</p> <p>The LowRes NX core has been authored by</p> <ul> <li>Timoinutilis</li> </ul> <p>The LowRes NX core is licensed under</p> <ul> <li>zlib</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/lowres_nx/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the LowRes NX core have the following file extensions:</p> <ul> <li>.nx</li> </ul> <p>RetroArch database(s) that are associated with the LowRes NX core:</p> <ul> <li>LowRes NX</li> </ul>"},{"location":"library/lowres_nx/#features","title":"Features","text":"<p>Frontend-level settings or features that the LowRes NX core respects.</p> Feature Supported Restart \u2714 Saves \u2715 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2715 Memory Monitoring (achievements) \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse - Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching - Disk Control \u2715 Username - Language - Crop Overscan - LEDs -"},{"location":"library/lowres_nx/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The LowRes NX core's core provided FPS is 60</li> <li>The LowRes NX core's core provided sample rate is 44100 Hz</li> <li>The LowRes NX core's base width is 160</li> <li>The LowRes NX core's base height is 128</li> <li>The LowRes NX core's max width is 160</li> <li>The LowRes NX core's max height is 128</li> </ul>"},{"location":"library/lowres_nx/#controllers","title":"Controllers","text":""},{"location":"library/lowres_nx/#device-types","title":"Device types","text":"<p>The LowRes NX core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/lowres_nx/#user-1-1-device-types","title":"User 1 - 1 device types","text":"<ul> <li>None - Doesn't disable input.</li> <li>RetroPad - Joypad</li> </ul>"},{"location":"library/lowres_nx/#joypad","title":"Joypad","text":"RetroPad Inputs User 1 input descriptors Button 2 Button SELECT Button START Button UP Button DOWN Button LEFT Button RIGHT BUTTON 1"},{"location":"library/lowres_nx/#external-links","title":"External Links","text":"<ul> <li>Official LowRes NX Website</li> <li>Official LowRes NX Repository</li> <li>Lowres Nx games</li> <li>Libretro LowRes NX Core info file</li> <li>Report Libretro LowRes NX Core Issues Here</li> </ul>"},{"location":"library/lrps2/","title":"Sony - PlayStation (LRPS2)","text":"<p>LRPS2 is a heavily modified hard fork of the excellent and mature PCSX2 emulator ported to libretro. It runs on Windows, macOS and Linux on the x86_64 architecture. MacOS computers running on Apple's ARM chipsets can still run it through the Rosetta x86 compatibility mode. This core does not work natively on ARM hardware, so it is not available on iOS/tvOS, Android, ARM Linux or Windows on ARM.</p> <p>It supports hardware rendering via OpenGL (Windows and Linux), Vulkan (natively on Windows and Linux and via MoltenVk on macOS) and D3D11/12 (Windows-only), as well as software rendering for games that require its additional accuracy. Note: the D3D11 renderer produces a black screen with working audio on some GPUs (toggling fast-forward should show a flickering picture), so if you encounter this, switch to another renderer, if possible.</p> <p>LRPS2 also includes a brand new, high-accuracy Vulkan compute renderer known as ParaLLEl-GS (from the same author and tech behind the ParaLLEl-RDP renderer now used by almost every major N64 emulator).</p> <p>The ParaLLEl-GS renderer is essentially a software renderer that relies on the parallel-processing power of a modern gaming GPU to accurately reproduce console behavior at or beyond full speed. As a result, this renderer is recommended, if your hardware is able to run it at full speed (should be fine on any discrete GPU and possibly on AMD integrated graphics; Intel integrated graphics do not appear to be fast enough at the time of this writing).</p> <p>LRPS2 core has been authored by</p> <ul> <li>Libretro</li> <li>based on the PCSX2 emulator by the PCSX2 Dev Team</li> </ul> <p>LRPS2 core is licensed under</p> <ul> <li>GPLv3</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/lrps2/#requirements","title":"Requirements","text":"<p>CPU</p> <ul> <li>Supports SSE2/AVX2</li> <li>PassMark Single Thread Performance rating near or greater than 1600/2100</li> <li>Two physical cores, with hyperthreading</li> <li>Four physical cores, with or without hyperthreading</li> </ul> <p>GPU</p> <ul> <li>Direct3D10/11 support</li> <li>OpenGL 3.x/4.5 support</li> <li>Vulkan 1.3+ support</li> <li>PassMark G3D Mark rating around 3000 (GeForce GTX 750)</li> <li>2 GB/4 GB Video Memory</li> </ul> <p>RAM</p> <ul> <li>4GB/8GB</li> </ul> <p>Attention</p> <p>Because of the complex nature of emulation, even if you meet the recommended requirements there will be games that will NOT run at full speed due to emulation imperfection, floating point emulation differences, issues with emulator itself or other problems.</p>"},{"location":"library/lrps2/#setup-required","title":"Setup (Required!!)","text":"<p>For the LRPS2 core to function, it requires a set of real BIOS images dumped from your Playstation 2 console in accordance with your local laws, along with the <code>GameIndex.yaml</code> compatibility database.</p>"},{"location":"library/lrps2/#gameindexyaml","title":"GameIndex.yaml","text":"<p>In the past, most PS2 games required setting various hacks/options on a per-game basis to avoid compatibility issues and bugs. More recently, the PCSX2 team has automated this process by including a database of these per-game hacks/options in a file named <code>GameIndex.yaml</code>. Having this database in the correct spot is necessary for a good emulation experience.</p>"},{"location":"library/lrps2/#core-system-files-downloader","title":"Core System Files Downloader","text":"<p>The easiest way to get this file and put it where it needs to go is to stop by RetroArch's <code>Online Updater</code> and head to the <code>Core System Files Downloader</code>. Inside, you'll see a series of entries named for various cores. Look for <code>LRPS2.zip</code> and select it. The <code>Core System Files Downloader</code> will then download the <code>GameIndex.yaml</code> database and place it within the necessary directory structure automatically.</p>"},{"location":"library/lrps2/#manually","title":"Manually","text":"<p>If you don't have access to the <code>Core System Files Downloader</code> for whatever reason (e.g., using the Steam release of RetroArch, or some other libretro frontend), you can still get everything you need manually.</p> <p>First, you will need to download the <code>GameIndex.yaml</code> file from the core's source code repository on Github. This is a direct link to the file, but if that link breaks in the future, the database file is typically housed in the <code>bin/resources</code> directory.</p> <p>Once you have the <code>GameIndex.yaml</code> database: 1. Navigate to your 'system'/BIOS directory (the location of which you can find/confirm by going to settings &gt; directory in the RetroArch menu), then create a directory named <code>pcsx2</code> (must be in all lower-case). 2. Inside your new <code>pcsx2</code> directory, you'll make another directory named <code>resources</code> (again, all lower-case) 3. Place the <code>GameIndex.yaml</code> inside of it. The final structure should be <code>system/pcsx2/resources/GameIndex.yaml</code>.</p>"},{"location":"library/lrps2/#bios","title":"BIOS","text":"<p>Attention</p> <p>For compatibility reasons, it is recommended to not use a SCPH-10000 BIOS.</p> <p>Notes</p> <ul> <li>No specific filename required, as long as the BIOS was properly dumped the core will be able to find it.</li> <li>The BIOS files must be extracted, the core will not be able to find them if they're zipped.</li> <li>LRPS2 does not implement region locking, so if you have a PAL BIOS you can play NTSC games, and vice versa. However, this only applies with the <code>Fast Boot</code> core option enabled.</li> </ul> <p>LRPS2 requires a BIOS to work, the BIOS can be provided as a single 4MB .bin file or with additional files (usually .erom, .nvm, .rom1 and .rom2).</p> <p>In case you're having additional files with the .bin, make sure they're sharing the same filename or they'll be ignored. So as an example let's say you have a <code>SCPH-70004_BIOS_V12_EUR_200.BIN</code> file with an EROM file, a ROM1 file and a ROM2 file, it should look like this:</p> <pre><code>SCPH-70004_BIOS_V12_EUR_200.BIN\nSCPH-70004_BIOS_V12_EUR_200.EROM\nSCPH-70004_BIOS_V12_EUR_200.ROM1\nSCPH-70004_BIOS_V12_EUR_200.ROM2\n</code></pre>"},{"location":"library/lrps2/#how-to-set-up-your-bios","title":"How to set up your BIOS:","text":"<ol> <li>Go inside your RetroArch \"system\" folder (usually <code>retroarch/system/</code>, but if you're not sure check the path in <code>Settings &gt; Directory &gt; System/BIOS</code>).</li> <li>Create a <code>pcsx2</code> folder (if you used the Core System Files Downloader to download the <code>GameIndex.yaml</code>, this folder structure should already exist).</li> <li>Go inside the <code>pcsx2</code> folder and create a <code>bios</code> folder.</li> <li>Go inside the <code>bios</code> folder and paste your BIOS file(s) here.</li> </ol> <p>For example, the default path would look like this: <code>system\\pcsx2\\bios\\[bios_file_name].bin</code></p> <p>If you're on a case-sensitive OS, make sure both <code>pcsx2</code> and <code>bios</code> folders are lowercase.</p>"},{"location":"library/lrps2/#other-required-files-and-directories","title":"Other required files and directories","text":"<p>The file structure should look like this:</p> <pre><code>retroarch/\n\u2514\u2500\u2500 system/\n    \u2514\u2500\u2500 pcsx2/\n        \u251c\u2500\u2500 bios/\n        \u251c\u2500\u2500 cheats/\n        \u251c\u2500\u2500 cheats_ws/\n        \u2514\u2500\u2500 memcards/   (optional)\n</code></pre> <ul> <li><code>bios/</code> is where the BIOS files are located (see the 'BIOS' section above), this should be created by the user.</li> <li><code>cheats/</code> is where you can store cheat patches, the folder is created on the first boot automatically.</li> <li><code>cheats_ws/</code> is where you can store additional widescreen patches, the folder is created on the first boot automatically.</li> <li><code>memcards/</code> is where the \"legacy\" memory cards are stored. This folder is optional, see the 'Directories' section below.</li> </ul> <p>Info</p> <p>Although the <code>cheats_ws</code> folder is empty when created, a very large number of widescreen patches are already included in the core itself.</p>"},{"location":"library/lrps2/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the LRPS2 core have the following file extensions:</p> <ul> <li>.elf</li> <li>.iso</li> <li>.ciso</li> <li>.chd</li> <li>.cso</li> <li>.bin</li> <li>.mdf</li> <li>.nrg</li> <li>.dump</li> <li>.gz</li> <li>.img</li> <li>.m3u</li> </ul> <p>RetroArch database(s) that are associated with the LRPS2 core:</p> <ul> <li>Sony - PlayStation 2</li> </ul>"},{"location":"library/lrps2/#features","title":"Features","text":"<p>Frontend-level settings or features that the LRPS2 core respects.</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2715 Netplay \u2715 Core Options \u2714 Memory Monitoring (achievements) \u2714 RetroArch Cheats \u2715 Native Cheats \u2714 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2714 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2714 Username \u2715 Language \u2715 Crop Overscan<sup>1</sup> \u2715 LEDs \u2715"},{"location":"library/lrps2/#directories","title":"Directories","text":"<p>LRPS2's library name is 'pcsx2'</p> <p>LRPS2 core saves/loads to/from these directories.</p> <p>Frontend's System directory</p> <ul> <li>Legacy memory cards</li> </ul> <p><code>retroarch/system/pcsx2/memcards/</code></p>"},{"location":"library/lrps2/#rumble-support","title":"Rumble support","text":"<p>Rumble only works in the LRPS2 core when</p> <ul> <li>The content being run has rumble support.</li> <li>The frontend being used has rumble support.</li> <li>The joypad device being used has rumble support.</li> <li>The corresponding user's device type is set to DualShock 2</li> </ul>"},{"location":"library/lrps2/#joypad","title":"Joypad","text":"User 1 - 8 input descriptors RetroPad Inputs PlayStation Controller Inputs DualShock Inputs Analog Controller Inputs Analog Joystick Inputs neGcon Inputs Cross Analog button I Square Analog button II Select Start Start D-Pad Up D-Pad Up D-Pad Down D-Pad Down D-Pad Left D-Pad Left D-Pad Right D-Pad Right Circle A Triangle B L1 Left shoulder button (analog) R1 Right shoulder button (digital) L2 Analog button II R2 Analog button I L3 R3 Left Analog X  X Left Joystick X Twist Left Analog Y  Y Left Joystick Y Right Analog X  X Right Joystick X Right Analog Y  Y Right Joystick Y"},{"location":"library/lrps2/#compatibility","title":"Compatibility","text":"<p>The current standalone development version is reported to be compatible with approximately 97.4% of 2,641 tested games as of August 2020. Compatibility means only that the game will not crash, lock up, or enter a loop; there can still be bugs, missing post-processing effects, textures, and shadows in many compatible games. This is especially the case in hardware mode; a slower software mode is available for bugs without workarounds. You can check compatibilirt list in here</p>"},{"location":"library/lrps2/#external-links","title":"External Links","text":"<ul> <li>LRPS2 Core info file</li> <li>LRPS2 Github Repository</li> <li>Report LRPS2 Core Issues Here</li> </ul>"},{"location":"library/lrps2/#libretro-ps2-cores","title":"Libretro PS2 cores","text":"<ul> <li>PlayStation 2 (Play!)</li> </ul> <ol> <li> <p>Overscan cropping available via Core Options instead of frontend settings\u00a0\u21a9</p> </li> </ol>"},{"location":"library/lutro/","title":"Lua Engine (Lutro)","text":""},{"location":"library/lutro/#background","title":"Background","text":"<p>Lutro is an experimental lua game framework that follows the L\u00d6VE API. Lutro games can be played with LibRetro/RetroArch through the Lutro core.</p>"},{"location":"library/lutro/#how-to-start-the-lutro-core","title":"How to start the Lutro core:","text":"<ul> <li>As an example showcasing loading content with the Lutro core, we will load the Pong game hosted on RetroArch's Content Downloader.</li> </ul> <p>You can do this by going to RetroArch's main menu screen and selecting 'Online Updater'. From there, select 'Content Downloader'.</p> <p> </p> <ul> <li>Select 'Lutro', then select 'Pong.lutro'. This should download and extract this file to RetroArch's Downloads directory.</li> </ul> <p> </p> <ul> <li>Go back to RetroArch's main menu screen. Select 'Load Content', then 'Downloads'.</li> </ul> <p> </p> <p> </p> <ul> <li> <p>Select 'Pong.lutro'.</p> </li> <li> <p>If you are asked which core to select, choose 'Lua Engine (Lutro)'.</p> </li> </ul> <p>The content should now start running!</p>"},{"location":"library/lutro/#authorlicense","title":"Author/License","text":"<p>The Lutro core has been authored by</p> <ul> <li>Higor Euripedes</li> <li>Jean-Andre Santoni</li> </ul> <p>The Lutro core is licensed under</p> <ul> <li>MIT</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/lutro/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the Lutro core have the following file extensions:</p> <ul> <li>.lutro</li> <li>.lua</li> </ul>"},{"location":"library/lutro/#databases","title":"Databases","text":"<p>RetroArch database(s) that are associated with the Lutro core:</p> <ul> <li>Lutro</li> </ul>"},{"location":"library/lutro/#features","title":"Features","text":"<p>Frontend-level settings or features that the Lutro core respects.</p> Feature Supported Restart \u2715 Screenshots \u2715 Saves \u2715 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2715 Memory Monitoring (achievements) \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/lutro/#directories","title":"Directories","text":"<p>The Lutro core's internal core name is 'lutro'</p>"},{"location":"library/lutro/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The Lutro core's core provided FPS is 60</li> <li>The Lutro core's core provided sample rate is 44100 Hz</li> <li>The LUtro core's core provided aspect ratio is (Ratio)</li> </ul>"},{"location":"library/lutro/#controllers","title":"Controllers","text":"<p>The Lutro core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/lutro/#user-1-device-types","title":"User 1 device types","text":"<ul> <li>None - Doesn't disable input. There's no reason to switch to this.</li> <li>RetroPad - Joypad - Stay on this.</li> <li>RetroPad w/Analog - Joypad - Same as RetroPad. There's no reason to switch to this.</li> </ul>"},{"location":"library/lutro/#controller-tables","title":"Controller tables","text":""},{"location":"library/lutro/#joypad","title":"Joypad","text":"<p>Attention</p> <p>What the inputs do are game specific.</p> User 1 Remap descriptors RetroPad Inputs Lutro core inputs B Y Select Start Up Up Down Down Left Left Right Right A X L1 R1 L2 R2 L3 R3"},{"location":"library/lutro/#external-links","title":"External Links","text":"<ul> <li>Lua Website</li> <li>L\u00d6VE API Website</li> <li>Libretro Lutro Core info file</li> <li>Libretro Lutro Github Repository</li> <li>LUTRO L\u00d6VE API Comparison</li> <li>Lutro Github Wiki</li> <li>Report Libretro Lutro Core Issues Here</li> </ul>"},{"location":"library/lutro/#see-also","title":"See also","text":""},{"location":"library/lutro/#custom-engine","title":"Custom Engine","text":"<ul> <li>ChaiLove</li> </ul>"},{"location":"library/m2000/","title":"Philips - P2000T (M2000)","text":""},{"location":"library/m2000/#background","title":"Background","text":"<p>The P2000T was Philips' first computer for the home market in the early '80s, before they later switched to manufacturing MSX computers. The P2000T was a Z80-powered home computer, running at a clock speed of 2.5 MHz and it used a Mullard SAA5050 teletext display chip to produce the video picture. The machine was built like a tank and featured an integrated keyboard, power supply, two cartridge slots and a very innovative and fast Mini-Cassette system (MDCR), which was fully automated and used mini tapes that could hold up to 42 kilobytes of data.</p> <p>The P2000T was reasonably popular among hobbyists and kids in elementary schools in The Netherlands, as Philips promoted the machine strongly in the science and education sectors. Because of the relatively high introductory price and the fact that its SAA5050 video chip only supported a 40 x 24 character teletext display mode, the P2000T never became the success that Philips hoped for.</p> <p>While the system's video and sound capabilities were rather limited, some developers still were able to create remarkably good games, like a Pac-Man clone named \"Ghosthunt\", a Phoenix clone named \"Fraxxon\", a Lady Bug clone named \"Lazy Bug\" and a Breakout clone named \"Brick-Wall\".</p> <p>The P2000T (M2000) emulator core has been authored by:</p> <ul> <li>Dion Olsthoorn</li> <li>Marcel the Kogel (who wrote the original emulator back in 1997)</li> </ul> <p>and is licensed under:</p> <ul> <li>GPL3</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/m2000/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the M2000 core have the following file extensions:</p> <ul> <li>.cas</li> </ul>"},{"location":"library/m2000/#features","title":"Features","text":"<p>Frontend-level settings or features that the M2000 core respects:</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2715 Core Options \u2714 Memory Monitoring (achievements) \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/m2000/#directories","title":"Directories","text":"<p>The M2000 core's library name is 'M2000'.</p> <p>Frontend's Save directory</p> File Description Default.cas Writable cassette file, which is only created/attached when starting the M2000 core without content"},{"location":"library/m2000/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The M2000 core's provided FPS is <code>50</code></li> <li>The M2000 core's provided sample rate is <code>30000</code></li> <li>The M2000 core's base width is <code>480</code></li> <li>The M2000 core's base height is <code>480</code></li> <li>The M2000 core's max width is <code>480</code></li> <li>The M2000 core's max height is <code>480</code></li> <li>The M2000 core's provided aspect ratio is <code>4/3</code></li> </ul>"},{"location":"library/m2000/#usage","title":"Usage","text":"<p>You can use the M2000 core for playing P2000T cassette games, but you can also use it for programming your own P2000T Basic programs.</p>"},{"location":"library/m2000/#programming-in-basic","title":"Programming in Basic","text":"<p>When you start the M2000 core without content, you will see the \"Philips Cassette Basic\" screen with the white cursor waiting for your input. Here you can type in your Basic program and load or save your programs. An - initially empty - cassette named <code>Default.cas</code> will be attached and stored in the M2000 Save directory.  You can save a program using: <pre><code>csave \"program name\"\n</code></pre> ... and load it again using: <pre><code>cload \"program name\"\n</code></pre> Note that only the first(!) character of each program is used for identification, so e.g. a program named \"hello world\" can be loaded using <code>cload \"h\"</code>. To show the index of the cassette, press F3 or Shift + Numeric keypad 1.</p>"},{"location":"library/m2000/#game-focus-mode","title":"Game Focus mode","text":"<p>Programming P2000T Basic using the M2000 core requires full keyboard access. This works best when the core is in 'Game Focus' mode, which allows the M2000 core to take precedence in inputs. The easiest way to automatically enable 'Game Focus' mode for the M2000 core is in Settings &gt; Input where you set the option called Auto Enable 'Game Focus' Mode to <code>Detect</code>. Or correspondingly in retroarch.cfg set <code>input_auto_game_focus = \"2\"</code>. Be aware that the default hotkey for toggling the Game Focus mode is the Scroll Lock key, which might not be present on your keyboard. If that's the case, you'll need to remap this hotkey to a more suitable key.</p>"},{"location":"library/m2000/#playing-games","title":"Playing games","text":"<p>The P2000T didn't came with any joystick ports, so every P2000T game relies on keyboard input. Usually the Space key is used to fire and the Arrow-keys to navigate, but other keys are also used to answer simple Yes/No questions or for entering the number of players.</p> <p>While the P2000T didn't have any joystick ports, there was a third-party company back in the '80s who was selling I/O cartridges to which you could connect up to 2 joysticks. These cartridges basically simulated actual key presses and that is exactly what the Joypad is doing in the M2000 core.</p> <p>Playing P2000T games using the M2000 core usually works best in one of these three ways:</p> <ol> <li> <p>Using Keyboard only This basically means that you play the P2000T games like most people did back in the day.  This way of playing works best when the core is in 'Game Focus' mode, like explained above.</p> </li> <li> <p>Using both Keyboard and Joypad Use the Keyboard to answer the game's Yes/No questions and for things like entering the number of players or typing your name for the highscore list. Then switch to the Joypad during actual game play. This way of playing also works best when the core is in 'Game Focus' mode.</p> </li> <li> <p>Using Joypad only. This requires the use of the On-Screen Key Selector to enter the number of players or to answer Y/N questions. See the description below on how to use the On-Screen Key Selector. For this way of playing the core doesn't have to be in 'Game Focus' mode.</p> </li> </ol>"},{"location":"library/m2000/#on-screen-key-selector","title":"On-Screen Key Selector","text":"<p>The On-Screen Key Selector lets you simulate key presses using your Joypad controller. This allows you to play almost all P2000T games without the need of an actual keyboard. Next to the regular Joypad mappings (for the Navigation keys +  Space to fire), most games will ask simple Yes/No questions or allow you to enter your name in a high score list.</p> <p>The On-Screen Key Selector is activated by holding your Joypad's Left Bumper/Trigger/Shoulder button. Then with the D-pad you can loop through the keys and with the A/B button you then enter the highligted key.</p> <p>In the screenshot below you can see the On-Screen Key Selector in the bottom of the screen, where the player is about the enter the 'N' key to skip showing the \"spelregels\" (game rules):</p> <p></p>"},{"location":"library/m2000/#user-1-device-types","title":"User 1 device types","text":"<p>The M2000 core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p> <ul> <li>RetroKeyboard - Keyboard. The keyboard inputs are always active.</li> <li>RetroPad - Joypad. The buttons are internally mapped to actual keyboard key presses (see information below).</li> </ul>"},{"location":"library/m2000/#joypad","title":"Joypad","text":"RetroPad Inputs P2000T Keys Space / Fire Space / Fire &lt; START &gt; &lt; STOP &gt; Up Down Left Right On-Screen Key Selector On-Screen Key Selector"},{"location":"library/m2000/#joypad-remapping-for-games-that-use-alternative-keys","title":"Joypad remapping for games that use alternative keys","text":"<p>Some P2000T games use alternative keys for navigation. An example is Fraxxon, which uses the Left and Up keys to move the spaceship horizontally, which was probably done for better playability on the original P2000T keyboard.  To be able to use the D-pad for horizontal movement in the emulator, you should start Fraxxon, then open the menu and go to Quick Menu &gt; Controls &gt; Port 1 Controls and remap D-Pad Right to RetroPad Up. Now return to Quick Menu &gt; Controls, click Manage Remap Files and select Save Game Remap File to save the joypad remapping for Fraxxon only.</p>"},{"location":"library/m2000/#keyboard","title":"Keyboard","text":""},{"location":"library/m2000/#symbolic-key-mapping","title":"Symbolic key mapping","text":"<p>The M2000 core is using symbolic key mapping by default, which means that - where possible - keys on the PC keyboard are mapped to corresponding P2000T keys that show the same symbol, so you basically get the key which you pressed.</p> <p>The special keys &lt; START &gt;, &lt; STOP &gt; and &lt; ZOEK &gt; are mapped as follows:</p> RetroKeyboard Inputs P2000T Keys F1 &lt; START &gt; F2 &lt; STOP &gt; F3 &lt; ZOEK &gt; Shift + Numpad 1 &lt; ZOEK &gt; Shift + Numpad 3 &lt; START &gt; Shift + Numpad Enter &lt; STOP &gt;"},{"location":"library/m2000/#positional-key-mapping","title":"Positional key mapping","text":"<p>Optionally, the M2000 core supports positional key mapping, which maps every key from a \"real\" keyboard to the key which has the same position/location on a P2000T keyboard. </p> <p>As the layout of a P2000T keyboard differs from modern keyboards, this might cause some unexpected mappings. So below you can see how the keys on the RetroKeyboard map to positional keys on the P2000T keyboard:</p> RetroKeyboard Inputs P2000T Keys a .. z a .. z A .. Z A .. Z 0 .. 9 0 .. 9 Shift + 1 Exclaim ! Shift + 2 Double Quote \" Shift + 3 Pound &amp; Shift + 4 Dollar $ Shift + 5 Percent % Shift + 6 Ampersand &amp; Shift + 7 Quote ' Shift + 8 Left Parenthesis ( Shift + 9 Right Parenthesis ) Shift + 0 Equals = Minus - Minus - Underscore _ Dash \u2014 Equals = One Quarter \u00bc Plus + Three Quarters \u00be Left Bracket [ At @ Left Curly Brace { Arrow Up \u2191 Right Bracket ] Arrow Right \u2192 Right Curly Brace } Arrow Left \u2190 Backslash \\ Hash # Pipe | Block \u2588 Semicolon ; Semicolon ; Colon : Plus + Quote ' Colon : Double Quote \" Asterisk * Comma , Comma , Period . Period . Slash / Slash / Question ? Question ? Delete Less &lt; Shift + Delete Greater &gt; Backspace Backspace Return Enter Space Space Backquote ` &lt; CODE &gt; Tab Tab Caps Lock Shift Lock Left Shift Left Shift Right Shift Right Shift Up Up Down Down Right Right Left Left Numpad 0 .. 9 0 .. 9 Numpad Period . Double Zero 00 Numpad Enter Period . Numpad Multiply * Clear Line Shift + Numpad Multiply * Clear Page Shift + Numpad 1 &lt; ZOEK &gt; Shift + Numpad 3 &lt; START &gt; Shift + Numpad Enter &lt; STOP &gt; F1 &lt; START &gt; F2 &lt; STOP &gt; F3 &lt; ZOEK &gt;"},{"location":"library/m2000/#external-links","title":"External Links","text":"<ul> <li>Libretro M2000 Core info file</li> <li>Official M2000 Github Repository</li> <li>Report M2000 Issues Here</li> <li>Wikipedia page on the Philips P2000T</li> <li>P20000T documentation</li> <li>P20000T game collection</li> </ul>"},{"location":"library/mame2003_plus/","title":"MAME 2003-Plus","text":""},{"location":"library/mame2003_plus/#background","title":"Background","text":"<p>MAME 2003-Plus (also referred to as MAME 2003+ and mame2003-plus) is a libretro multi-arcade system emulator core which prioritizes 1) usability and frontend integration, 2) performance, and 3) compatibility across the range of libretro-supported platforms including mobile devices, single board computers, and consoles. MAME 2003-Plus is part of a long tradition in arcade emulation of producing platform-specific and performance-optimized MAME builds.</p> <p>Why is it called Plus?</p> <p>Unlike the other 'historic' libretro MAME cores which remain fixed at one MAME version, MAME 2003-Plus is actively maintained and has to date added support for hundreds of new games along with dozens of new features.</p> <p>MAME 2003-Plus is part of a lineage of codebase forks and ports: this core was forked from MAME 2003, which is itself derived from Xmame 0.78, the X11/Unix port of MAME 0.78.</p> <p>Authors: MAMEdev, MAME 2003-Plus team, et al (see LICENSE.md and CHANGELOG.md)</p>"},{"location":"library/mame2003_plus/#contribute-to-this-documentation","title":"Contribute to this documentation","text":"<p>In order to propose improvements to this document, visit it's corresponding source page on github. Changes are proposed using \"Pull Requests.\"</p>"},{"location":"library/mame2003_plus/#see-also","title":"See also","text":"<p>MAME 2003</p>"},{"location":"library/mame2003_plus/#license","title":"License","text":"<p>MAME Non-Commercial</p>"},{"location":"library/mame2003_plus/#extensions","title":"Extensions","text":"<p>zip, chd</p> <p>CHD paths</p> <p>Some games require data from an internal hard drive, CD-ROM, laserdisk, or other media in order to be emulated -- those forms of media are packaged as CHD files. CHD files should be copied to subfolders within the folder where the romset zips have been installed: <code>/libretro content dir/blitz/blitz.chd</code></p>"},{"location":"library/mame2003_plus/#building-romsets-for-mame-2003-plus","title":"Building romsets for MAME 2003-Plus","text":"<p>MAME 2003-Plus began with the game drivers from MAME 0.78, meaning that 95% or more of MAME 0.78 romsets will work as-is in MAME 2003-Plus, where they immediately benefit from its bugfixes and other improvements. In order to play the new games and games which received ROM updates in MAME 2003-Plus, you will need to find or build MAME 2003-Plus romsets.</p> <p>What is a romset?</p> <p>Arcade games are packaged as zip files, most of which are composed of more than one individual 'ROM' files. That is why some resources inaccurately refer to an individual arcade game as a ROM (like people use to describe a zipped game cartridge ROM) while other resources refer to an individual game as a ROM set, ROMset, or romset.</p> <p>MAME 2003-Plus has the ability to generate an XML \"DAT\" file directly from the MAME menu.</p>"},{"location":"library/mame2003_plus/#step-1-obtaining-an-xml-dat","title":"Step 1: Obtaining an XML DAT","text":"<p>DAT files describe the exact ROM contents that the emulator needs including filenames, file sizes, and checksums to verify contents are not incorrect or corrupt. mame2003-plus has the ability to generate an XML \"DAT\" file from the MAME Menu. You can also access the MAME menu by turning it on as a core option, selecting Generate XML DAT and then disabing the menu as a core option.</p>"},{"location":"library/mame2003_plus/#step-2-finding-a-source-for-roms","title":"Step 2: Finding a source for ROMs","text":"<p>In order to build a complete MAME 2003-Plus collection, the ingredients are:</p> <ul> <li>A complete MAME 0.223 or later romset collection</li> <li>A complete MAME 0.223 or later \"rollback\" romset collection</li> <li>MAME 0.78 CHD collection</li> <li>The NeoGeo UniBIOS 3.3, freely available at http://unibios.free.fr/</li> </ul>"},{"location":"library/mame2003_plus/#step-3-building-mame-2003-plus-romsets","title":"Step 3: Building MAME 2003-Plus romsets","text":"<p>Refer to Validating, Rebuilding, and Filtering ROM Collections for details on how to configure ClrMamePro to use your sources as \"rebuild\" folders.</p> <p>We recommend the Full Non-Merged format, where each romset zip files includes all the files needed to run each game, including any ROMs from 'parent' ROM sets and BIOS sets. To configure ClrMamePro to validate or rebuild a Full Non-Merged collection, use \"Non-Merged\" mode and disable \"Separate BIOS Sets\" from the \"Advanced\" menu in both ClrMamePro's Rebuild and Scanner menus.</p> <p>Tip</p> <p>A complete Full Non-Merged romset collection with CHDs and Samples only requires approximately 6% more storage space than the Split format romsets that are also sometimes used to structure arcade romsets. MAME 2003-Plus can read Split, TorrentZipped romsets, but the RetroArch playlist scanner only supports Full Non-Merged, TorrentZipped romsets for MAME 2003-Plus.</p>"},{"location":"library/mame2003_plus/#recommended-clrmamepro-settings","title":"Recommended ClrMamePro settings","text":"<p>ClrMamePro remains the most popular tool for rebuilding MAME romsets, at least for now. That said, ClrMamePro is focused on supporting more recent MAME versions so there are at least two things to know if you are using ClrMamePro to generate a MAME 2003-Plus set:</p> <ol> <li>If you are scanning CHDs, go to <code>Settings</code> -&gt; <code>Compressor</code> -&gt; <code>CHDMan</code> tab and change <code>Req. CHD Version</code> to <code>3</code>.</li> <li>If you are using the suggested setting of <code>Disable Separate BIOS Sets</code> then ClrMamePro will report the BIOS romset files as missing even though you told the program you don't want them. mame2003-plus incorporates 15 different kinds of BIOS romsets, so it is normal to see a ClrMamePro message like this after a clean and complete scan: <code>You are missing 15 of 4831 known mame2003-plus.xml sets (+ BIOS sets)</code></li> </ol>"},{"location":"library/mame2003_plus/#sourcing-chds","title":"Sourcing CHDs","text":"<p>MAME 2003-Plus uses exactly the same MAME 0.78 CHDs (CHD v3) as MAME 2003.</p>"},{"location":"library/mame2003_plus/#bios","title":"BIOS","text":"<p>BIOS romsets are not needed when using \"Full Non-Merged\" arcade romsets. For \"Split\" and \"Non-Merged\" romsets, place the BIOS in the same directory as the game romset.</p>"},{"location":"library/mame2003_plus/#features","title":"Features","text":"Feature Supported Saves \u2714 States game-dependent Rewind \u2714 Netplay \u2714 Memory Monitoring (achievements) \u2715 RetroArch Cheats \u2715 Native Cheats \u2714 Controllers \u2714 Multi-Mouse \u2714 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715"},{"location":"library/mame2003_plus/#input-system-controls-and-options","title":"Input system, controls, and options","text":"<p>mame2003-plus emulates thousands of games, many of which have unique control layouts. These games are emulated on more than a thousand variations of arcade hardware. The purpose of the input system is to communicate input from the user's physical controls through the libretro frontend, the mame2003-plus emulator core, and into the emulated game itself.</p> <p>No system of default input mappings can address the full range of emulated games and supported controls. Some degree of per-game customization should ways be expected. However, to the extent possible it is also within the purpose of the MAME 2003-Plus input system to attempt to provide predictable and meaningful defaults for input across this wide range.</p>"},{"location":"library/mame2003_plus/#default-retropad-layouts","title":"Default RetroPad Layouts","text":"Classic Gamepad The Classic Gamepad is based on mainline MAME's default Xbox 360 controller layout and is also likely to suit DualShock or SNES-style gamepads. The corresponding option in configuration file is <code>input_libretro_device_pX = \"1\"</code> (where X is the player number, <code>input_libretro_device_p1 = \"1\"</code> for player 1, etc.). Modern Fightstick The Modern Fightstick layout is the fight stick and pad layout popularized by Street Fighter IV and assumes an 8+ button controller. The corresponding option in configuration file is <code>input_libretro_device_pX = \"257\"</code> (where X is the player number, <code>input_libretro_device_p1 = \"257\"</code> for player 1, etc.). Gamepad can also serve as an alternative Xbox/PSX-style layout for Street Fighter 2.For arcade control panels, Modern Fightstick can be mapped in this way: 6-Button 6-button is a layout intended for SNES-type RetroPad controls as well as 6-button arcade panels arcade panels. The corresponding option in configuration file is <code>input_libretro_device_pX = \"769\"</code> (where X is the player number, <code>input_libretro_device_p1 = \"769\"</code> for player 1, etc.). 6-button can be mapped in this way: 8-Button 8-button is a layout intended for an arcade panel. The corresponding option in configuration file is <code>input_libretro_device_pX = \"513\"</code> (where X is the player number, <code>input_libretro_device_p1 = \"513\"</code> for player 1, etc.). 8-button is configured like this"},{"location":"library/mame2003_plus/#keyboard-input","title":"Keyboard Input","text":"<p><code>mame_keyboard</code> sets the core to process keyboard input directly through the legacy \"MAME\" keyboard interface. Use this input mode only if your input device is seen as a keyboard, including some arcade control panel hardware.</p>"},{"location":"library/mame2003_plus/#mouse-and-trackball-support","title":"Mouse and trackball support","text":"<p>MAME 2003-Plus has support for multiple mice or touch devices in games that support trackballs, etc. MAME 2003-Plus also supports one or two spinners/dials via the \"Share 2 player dial controls across one X/Y device\" core option. By default, mice/trackballs and analog sticks (the left one, for controllers with 2) are supported in games that would have them, or equivalents. For example, Centipede supports the mouse/trackball, and Afterburner supports the stick.</p>"},{"location":"library/mame2003_plus/#pointer-trackpad-touchscreen-support","title":"Pointer, trackpad, touchscreen support","text":"<p>Absolute pointer devices are supported, but need to be turned on via the corresponding core option.</p>"},{"location":"library/mame2003_plus/#lightgun-support","title":"Lightgun support","text":"<p>Because MAME 2003-Plus does not yet implement the libretro lightgun API, the core currently supports lightguns only if they are configured to emulate a mouse.</p>"},{"location":"library/mame2003_plus/#2-player-dial-and-spinner-devices","title":"2-player dial and spinner devices","text":"<p>2-player spinner and dial devices can be represented as 1 device with 2 axes. MAME 2003-Plus can be configured to share this device across both players: Player 1 = X axis, Player 2 = Y axis. This can be enabled via a setting in the <code>retroarch-core-options.cfg</code> file: <code>mame2003-plus-dialsharexy = \"enabled\"</code></p> <p>Warning</p> <p>Enabling this option will disable standard mouse support.</p>"},{"location":"library/mame2003_plus/#analog-and-digital-controller-support","title":"Analog and digital controller support","text":"<p>MAME 2003-Plus natively supports analog and digital controls.</p>"},{"location":"library/mame2003_plus/#4-way-joystick-simulation","title":"4-way joystick simulation","text":"<p>4-way joysticks are an essential aspect of the gameplay for many iconic arcade titles including games like Donkey Kong, Pac-Man, and Q-Bert. Because modern joysticks generally use 8-way designs, it is usually impossible to play these games well without special hardware. MAME 2003-Plus includes a core option to simulate 4-way joysticks. When enabled, this logic analyzes input from 8-way digital joysticks in order to render its position as if the joystick had a 4-way design. This simulation is not the same as using a real 4-way joystick, but it can make a significant improvement to playability.</p>"},{"location":"library/mame2003_plus/#content-aware-control-names","title":"Content-aware control names","text":"<p>In the same way that content-aware core options only appear when they are relevant to the current game, MAME 2003-Plus has added support for content-aware control names. In other words, when remapping Street Fighter 2 controls, the libretro frontend can display the control names that were printed on the real arcade control panel like <code>Jump</code>, <code>Strong Punch</code> and <code>Forward Kick</code> instead of a generic labels like <code>Up</code>, <code>Button 1</code>, <code>Button 2</code>, etc.</p> <p>Because support for control names is relatively new and is derived from the third-party controls.dat project, control names need to be verified by a human being before they are activated. As of end end of 2018, dozens of games have these active control names, but hundreds more need to be double-checked before being enabled. Coders, and users who are willing to learn basic github commands, are invited to join in this effort.</p>"},{"location":"library/mame2003_plus/#other-key-features","title":"Other key features","text":""},{"location":"library/mame2003_plus/#audio-samples","title":"Audio samples","text":"<p>Some games require an additional zip file with recorded sounds or music in order for audio to work correctly. Audio 'sample' files should be placed in a <code>samples</code> subdirectory within <code>/libretro system dir/mame2003-plus/</code>.</p> <p>Alternate CD soundtrack support</p> <p>MAME 2003-Plus also supports alternate soundtracks for several popular arcade titles that were also released in other formats with high quality audio soundtracks. Alternate soundtracks are supported for Double Dragon, Final Fight, Mortal Kombat, Michael Jackson\u2019s Moonwalker, NBA Jam, and Out Run.</p>"},{"location":"library/mame2003_plus/#backdrop-artwork","title":"Backdrop artwork","text":"<p>Some games require backdrop artwork files in order to be fully emulated. Because RetroArch, the reference libretro frontend, does not yet incorporate support for so-called \"backdrop\" artwork, the MAME 2003-Plus github repository includes a folder of high-resolution backdrop artwork that is compatible with the core's built-in artwork display system. These artwork <code>zip</code> files should be placed within <code>/libretro system dir/mame2003-plus/artwork</code>.</p> <p></p> <p>\"Armor Attack\" backdrop artwork pack prepared by UDB23</p>"},{"location":"library/mame2003_plus/#run-ahead-input-lag-reduction","title":"Run Ahead input lag reduction","text":"<p>This core supports the RetroArch \"Run Ahead\" input latency reduction feature when Run Ahead is set to <code>Second Instance</code>, but as of the end of 2018 there are known issues preventing Run Ahead from functioning properly and a bounty fundraiser to fix them.</p>"},{"location":"library/mame2003_plus/#mame-menu","title":"MAME Menu","text":"<p>The simplest way to access the \"MAME menu\" is by enabling it in the core options. If your input mode is set to allow input to the <code>mame_keyboard</code> interface, you can also enter the menu by pressing the <code>Tab</code> key.</p>"},{"location":"library/mame2003_plus/#dip-switches","title":"Dip-switches","text":"<p>Many arcade games have hardware switches for arcade owners to modify certain parameters which can be adjusted by accessing the MAME menu and selecting the 'Dip Switches' option. Dip switches often controlled features like free play (no coins needed), difficulty level, and cocktail table cabinet rotation mode.</p>"},{"location":"library/mame2003_plus/#service-menu","title":"Service menu","text":"<p>For games where dip switches are not available directly within the MAME menu, MAME 2003-Plus the core can often access a game's internal servic menus to set options by pressing <code>F2</code> with a keyboard while <code>mame_keyboard</code> or <code>simultaneous</code> input mode is enabled.</p>"},{"location":"library/mame2003_plus/#high-scores","title":"High scores","text":"<p>The hiscore.dat is compiled into MAME 2003-Plus and then spawned into <code>/libretro system dir/mame2003-plus/</code> the first time the core is run. Users do not need to install the hiscore.dat themselves. From then on, users can modify or replace this file with their own custom DAT if they choose. When high scores are saved, they are either stored as NVRAM data in <code>libretro system dir/mame2003-plus/nvram/</code> or as hiscore data in: <code>libretro system dir/mame2003-plus/hi/</code></p>"},{"location":"library/mame2003_plus/#cheats","title":"Cheats","text":"<p>MAME 2003-Plus supports the MAME cheat engine, allowing you to use the MAME menu to enable various in-game cheats. To activate these, there is a necessary supplementary file called <code>cheat.dat</code>. This file can be downloaded from the MAME 2003-Plus 'metadata' repository. Place <code>cheat.dat</code> in: <code>libretro system dir/mame2003-plus/</code>.</p>"},{"location":"library/mame2003_plus/#history-dat","title":"History DAT","text":"<p>MAME 2003-Plus supports the use of the history.dat file, which displays background information about many games from within the MAME Menu. This file can be downloaded from the MAME 2003-Plus 'metadata' repository. Place <code>history.dat</code> in: <code>libretro system dir/mame2003-plus/</code>.</p>"},{"location":"library/mame2003_plus/#led-output-system","title":"LED output system","text":"<p>As of late 2018, MAME 2003-Plus incorporates preliminary support for the libretro LED lighting output system. Documentation is yet to be written on this topic.</p>"},{"location":"library/mame2003_plus/#core-generated-content","title":"Core-generated content","text":"<p>Core-generated content is placed in sub-directories within <code>/libretro savefile dir/mame2003-plus/</code>: <pre><code>/libretro savefile dir/mame2003-plus/diff/\n/libretro savefile dir/mame2003-plus/nvram/\n/libretro savefile dir/mame2003-plus/hi/\n/libretro savefile dir/mame2003-plus/cfg/\n/libretro savefile dir/mame2003-plus/memcard/\n</code></pre></p>"},{"location":"library/mame2003_plus/#core-options","title":"Core options","text":"<p>Tip</p> <p>Restart core indicates that the core must be restarted in order for changes to that option to take effect.</p> <p>Content-aware core options</p> <p>Because MAME 2003-Plus supports more than 4,000 games, there are a number of core options which only apply to a subset of its library. For example, there are several options to configure vector displays which have no effect for games with any other kind of display. MAME 2003-Plus only presents core options to the frontend that are relevant to the game that is currently loaded In other words, the vector options only appear when a vector game is currently loaded.</p> Core option Description 4-way joystick emulation on 8-way joysticks See 4-way joystick simulation section of this doc. <code>mame2003-plus_four_way_emulation = \"enabled|disabled\"</code> Mouse Device Set mouse device input to be read either from a mouse, a pointer (pointer, trackpad, touchscreen), or to be disabled. <code>mame2003-plus_mouse_device = \"mouse|pointer|disabled\"</code> Show Lightgun crosshair Toggle crosshair visibilty for lightgun games. <code>mame2003-plus_crosshair_enabled = \"enabled|disabled\"</code> Skip Disclaimer Skip the copyright disclaimer message. <code>mame2003-plus_skip_disclaimer = \"disabled|enabled\"</code> Skip Warnings Advanced feature: changing from the default is not recommended in most cases. Skip any driver warnings about emulation quality. <code>mame2003-plus_skip_warnings = \"disabled|enabled\"</code> Display MAME menu Enable this core option to display the core's MAME Menu and then disable it when you have finished using the MAME Menu. <code>mame2003-plus_display_setup = \"disabled|enabled\"</code> Specify Neo Geo BIOS (Restart core) Manually specify your choice of Neo Geo BIOS from among those supported. <code>mame2003-plus_neogeo_bios = \"default|euro|euro-s1|us|us-e|asia|japan|japan-s2|unibios33|unibios20|unibios13|unibios11|unibios10|debug|asia-aes\"</code> Specify Sega ST-V BIOS (Restart core) Manually specify your choice of ST-V BIOS from among those supported. <code>mame2003-plus_stv_bios = \"default|japan|japana|us|japan_b|taiwan|europe\"</code> Use CD soundtrack (Restart core) See Alternate CD soundtrack support in the Audio samples section of this doc. <code>mame2003-plus_use_alt_sound = \"enabled|disabled\"</code> Share 2 player dial controls across one X/Y device See the 2-player dial and spinner devices section of this doc. <code>mame2003-plus_dialsharexy = \"disabled|enabled\"</code> Vector resolution multiplier (Restart core) Attempts to create a higher quality emulation of vector display hardware by upscaling the emulated display to a higher resolution. <code>mame2003-plus_vector_resolution = \"1024x768|640x480|1280x960|1440x1080|1600x1200|original\"</code> Vector antialiasing Enables or disables the anti-aliasing for vector games. <code>mame2003-plus_vector_antialias = \"enabled|disabled\"</code> Vector beam width Sets the emulated width of the vector beam in pixels. This setting is only effective when anti-aliasing is enabled. <code>mame2003-plus_vector_beam_width = \"2|1|1.2|1.4|1.6|1.8|2.5|3|4|5|6|7|8|9|10|11|12\"</code> Vector translucency Emulates the partial transparency of vector display hardware. Vector flicker Emulates the flicker of vector display hardware. <code>mame2003-plus_vector_flicker = \"20|0|10|30|40|50|60|70|80|90|1001.5|0.5|1|2|2.5|3\"</code> Vector intensity Emulates the variable intensity of vector display hardware. <code>mame2003-plus_vector_intensity  = \"1.5|0.5|1|2|2.5|3\"</code> DCS Speedhack Advanced feature: changing from the default is not recommended in most cases. Use so-called \"speed hacks\" to improve the performance of DCS sound hardware. <code>mame2003-plus_dcs_speedhack = \"enabled|disabled\"</code> Locate system files within a subfolder For historical reasons, MAME 2003-Plus reads system files within a subfolder named <code>mame2003-plus</code> even though this is not part of the libretro API. <code>mame2003-plus_core_sys_subfolder = \"enabled|disabled\"</code> Locate save files within a subfolder For historical reasons, MAME 2003-Plus saves files within a subfolder named <code>mame2003-plus</code> even though this is not part of the libretro API. <code>mame2003-plus_core_save_subfolder = \"enabled|disabled\"</code> TATE Mode From the Japanese \u7e26 (ta-te) meaning \"vertical\", TATE Mode renders vertical games lengthwise along the display. This mode is intended for use with rotating monitors and portable devices that can make the full use of their viewable area for games which used vertical monitors. <code>mame2003-plus_tate_mode = \"disabled|enabled\"</code> Brightness Simple brightness adjustment. <code>mame2003-plus_brightness = \"1.0|0.2|0.3|0.4|0.5|0.6|0.7|0.8|0.9|1.1|1.2|1.3|1.4|1.5|1.6|1.7|1.8|1.9|2.0\"</code> Gamma correction Simple gamma adjustment. <code>mame2003-plus_gamma = \"1.0|0.5|0.6|0.7|0.8|0.9|1.1|1.2|1.3|1.4|1.5|1.6|1.7|1.8|1.9|2.0\"</code> Frameskip Advanced feature: changing from the default is not recommended in most cases. <code>mame2003-plus_frameskip = \"0|1|2|3|4|5\"</code> Sample Rate (KHz) Advanced feature: changing from the default is not recommended in most cases. <code>mame2003-plus_sample_rate = \"48000|8000|11025|22050|30000|44100\"</code> Input interface Advanced feature: changing from the default is not recommended in most cases. retropad, the default option, processes input via the libretro retropad abstraction, including from any keyboard which are bound to the retropad. The keyboard setting only sends keyboard input directly to the core, ignoring the retropad. The simultaneous setting sends inputs both ways at the same time and is not recommended. This setting exists for historical reasons. <code>mame2003-plus_input_interface = \"retropad|keyboard|simultaneous\"</code> Legacy Remapping Note: Using the legacy MAME control remapper may affect stateless netplay between two users with their MAME remappings set differently. <code>mame2003-plus_mame_remapping = \"enabled|disabled\"</code> Display artwork (Restart core) Display artwork packs from within the core, particularly \"backdrop\" artwork. <code>mame2003-plus_display_artwork = \"enabled|disabled\"</code> Artwork resolution multiplier (Restart core) Upscales games with artwork backs so that the artwork can be displayed at a higher resolution. <code>mame2003-plus_art_resolution = \"1|2\"</code> NVRAM Bootstraps Advanced feature: changing from the default is not recommended in most cases. <code>mame2003-plus_nvram_bootstraps = \"enabled|disabled\"</code> Dip switch/Cheat input ports Advanced feature: changing from the default is not recommended in most cases. Activates a few specific cheats that manipulate the dipswitch input system. <code>mame2003-plus_cheat_input_ports = \"disabled|enabled\"</code> Bypass audio skew (Restart core) Advanced feature: changing from the default is not recommended in most cases. Bypass the frontend's \"audio skew\" feature which attempts to adjust the audio for games which displayed at framerates not native to modern displays. <code>mame2003-plus_machine_timing = \"enabled|disabled\"</code> Center joystick axis for digital controls Emulates the center position of an analog joystick to allow digital joysticks to play analog based games. This is only applied when the AD Stick type is used. <code>mame2003-plus_digital_joy_centering = \"enabled|disabled\"</code>"},{"location":"library/mame2003_plus/#external-links","title":"External Links","text":"<ul> <li>MAME 2003-Plus Github Repository</li> </ul>"},{"location":"library/mame2003_plus/#see-also_1","title":"See also","text":"<ul> <li>MAME 2003</li> <li>MAME 2010</li> <li>SAME_CDI</li> </ul>"},{"location":"library/mame_2003/","title":"MAME 2003","text":""},{"location":"library/mame_2003/#background","title":"Background","text":"<p>MAME 2003 is a libretro arcade system emulator core originally derived from xmame 0.78. This core is a popular choice for the Raspberry Pi family and other low-powered hardware because it supports most 2D-era arcade games and a broad set of features without requiring as much processor and memory resources as later MAME cores.</p> <p>Author(s): MAMEdev</p>"},{"location":"library/mame_2003/#contribute-to-this-documentation","title":"Contribute to this documentation","text":"<p>In order to propose improvements to this document, visit it's corresponding source page on github. Changes are proposed using \"Pull Requests.\"</p>"},{"location":"library/mame_2003/#see-also","title":"See also","text":"<p>MAME 2000, MAME 2003-Plus, MAME 2010, MAME 2014, MAME 2016, and MAME.</p>"},{"location":"library/mame_2003/#license","title":"License","text":"<p>MAME Non-Commercial</p>"},{"location":"library/mame_2003/#extensions","title":"Extensions","text":"<p>zip</p>"},{"location":"library/mame_2003/#bios","title":"BIOS","text":"<p>BIOS romsets are not needed when using \"Full Non-Merged\" arcade romsets. For \"Split\" and \"Non-Merged\" romsets, place the BIOS in the same directory as the game romset.</p>"},{"location":"library/mame_2003/#features","title":"Features","text":"Feature Supported Saves \u2714 States game-dependent Rewind \u2714 Netplay \u2714 Memory Monitoring (achievements) \u2715 RetroArch Cheats \u2715 Native Cheats \u2714 Controllers \u2714 Multi-Mouse \u2714 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715"},{"location":"library/mame_2003/#core-options","title":"Core options","text":"<ul> <li>Frameskip (0-5): Skips frame to make slow emulation look faster than it is while compromising playability. (Not advised)</li> <li>DCS Speedhack (On/Off): Speedhack for the Midway sound hardware used in Mortal Kombat 2, 3 and others. Improves performance in these games.</li> <li>Skip Disclaimer (On/Off): Skips the 'nag-screen'.</li> <li>Skip Warnings (On/Off): Skips the warning screen shown before games with incomplete emulation.</li> <li>Samples (On/Off): Requires valid sample zip files.              |       -          |</li> <li>Sample Rate (11025-48000): Lowering may improve performance on weaker devices.</li> <li>Cheats (On/Off): Requires a valid cheat.dat file.</li> <li>Share 2 player dial controls across one X/Y device (On/Off): Some dial/spinner hardware are actually one device with one axis for each player. This supports that setup, by breaking down the normal mouse x/y into two seperate inputs.</li> <li>Mouse Device (mouse/pointer/disabled): Switch between mouse (e.g. hardware mouse, trackball, etc), pointer (touchpad, touchscreen, lightgun, etc), or disabled.</li> <li>TATE Mode (On/Off): Enable if rotating display for vertically oriented games (Pac-Man, Galaga, etc). Requires <code>video_allow_rotate = \"false\"</code> setting in RetroArch.cfg or core override file.</li> </ul>"},{"location":"library/mame_2003/#directories","title":"Directories","text":"<ul> <li>Some MAME games require data from an internal hard drive, CD-ROM, laserdisk, or other media in order to be emulated -- those forms of media are packaged as CHD files. CHD files should be copied to subfolders within the folder where the MAME ROM zips have been installed. e.g.: <pre><code>/libretro content dir/blitz/blitz.chd\n</code></pre></li> <li>Some games require an additional zip file with recorded sounds or music in order for audio to work correctly. Audio 'sample' files should be placed in subdirectories within <code>/libretro system dir/mame2003/</code> e.g.: <pre><code>/libretro system dir/mame2003/samples/\n</code></pre></li> <li>Cheat and history metadata files should be moved from github's <code>/libretro/mame2003-libretro/tree/master/metadata</code> and placed within <code>/libretro system dir/mame2003/</code> e.g.: <pre><code>/libretro system dir/mame2003/cheat.dat\n/libretro system dir/mame2003/history.dat\n</code></pre></li> <li>User-generated content is placed in sub-directories within <code>/libretro savefile dir/mame2003/</code> e.g.: <pre><code>/libretro savefile dir/mame2003/diff/\n/libretro savefile dir/mame2003/nvram/\n/libretro savefile dir/mame2003/hi/\n/libretro savefile dir/mame2003/cfg/\n/libretro savefile dir/mame2003/memcard/\n</code></pre></li> </ul>"},{"location":"library/mame_2003/#mame-menu","title":"MAME menu","text":"<p>To access the MAME internal menu, press the 'TAB' key or RetroPad R2. If you rebind MAME global inputs ('Input (general)'), it will update a file in  <code>/libretro savefile dir/mame2003/cfg/</code> default.cfg. Note: If you rebind MAME global inputs ('Input (general)'), it will update a file in  <code>/libretro savefile dir/mame2003/cfg/</code> default.cfg.</p>"},{"location":"library/mame_2003/#controllers","title":"Controllers","text":"<p>The core supports one controller setting(s):</p> <ul> <li>RetroPad</li> </ul> MAME 2003 RetroPad Button 1/Right Stick Down/UI Cancel Button 2/Right Stick Left Coin in Start Left Joystick Button 4/Right Stick Right/UI Select Button 3/Right Stick Up Button 5 Button 6 Button 7 Button 8/TAB Menu Button 9 Button 10 Left Joystick"},{"location":"library/mame_2003/#mame-2003-features","title":"MAME 2003 Features","text":""},{"location":"library/mame_2003/#service-menu","title":"Service menu","text":"<p>MAME 2003 can ability to access games' internal service menus to set permanent game options. This allows you to, for example, configure a game to be 'free play' (no need to insert coins). To access the MAME service, press the 'F2' key. After changing options in the service mode, the game's internal memory will be stored to an .nv file in: <code>/libretro savefile dir/mame2003/nvram/</code></p>"},{"location":"library/mame_2003/#dip-switches","title":"Dip-switches","text":"<p>Similarly to the Service menu, many arcade games had hardware switches for arcade owners to modify certain parameters. These can be adjust by pressing the 'TAB' key to access the MAME menu, and select the 'Dip Switches' option. Here you can turn them on/off.</p>"},{"location":"library/mame_2003/#high-scores","title":"High scores","text":"<p>When high scores are saved, they are either stored as NVRAM data in <code>libretro system dir/mame2003/nvram/</code> or as hiscore data in: <code>libretro system dir/mame2003/hi/</code></p>"},{"location":"library/mame_2003/#save-states","title":"Save states","text":"<p>MAME 2003-Plus supports save states for many, but not all games.</p>"},{"location":"library/mame_2003/#cheats","title":"Cheats","text":"<p>MAME 2003-Plus supports the MAME cheat engine, allowing you to use the MAME menu to enable various in-game cheats. To active these, there is a necessary supplementary file called <code>cheat.dat</code>. This file can be downloaded from the MAME 2003 'metadata' repository. Place <code>cheat.dat</code> in: <code>libretro system dir/mame2003-plus/</code></p> <p>Additionally, the 'enabled cheats' core option needs to be turned on. This option is is called: <code>mame2003-cheats = \"enabled\"</code></p>"},{"location":"library/mame_2003/#mousetrackballanalog-controller-support","title":"Mouse/Trackball/Analog Controller support","text":"<p>MAME 2003 has support for multiple mice or touch devices in games that support trackballs, etc.</p> <p>MAME 2003 also supports one or two spinners/dials via the \"Share 2 player dial controls across one X/Y device\" core option. By default, mice/trackballs and analog sticks (the left one, for controllers with 2) are supported in games that would have them, or equivalents. For example, Centipede supports the mouse/trackball, and Afterburner supports the stick. Lightgun games are supported by either. The left and right mouse buttons can be bound to fire/etc using the MAME menu.</p>"},{"location":"library/mame_2003/#pointertrackpadtouchscreen-support","title":"Pointer/Trackpad/Touchscreen support","text":"<p>Absolute pointer devices are supported, but need to be turned on via a setting in the retroarch-core-options.cfg file.</p> <p>mame2003-mouse_device = \"pointer\"</p>"},{"location":"library/mame_2003/#2-player-dialspinner-devices","title":"2 player dial/spinner devices","text":"<p>2 player spinner/dial devices can be represented as 1 device with 2 axes. mame2003 can be configured to share this device across both players: Player 1 = X axis, Player 2 = Y axis. This can be enabled via a setting in the retroarch-core-options.cfg file, found in:</p> <p>mame2003-dialsharexy = \"enabled\" NOTE: This will disable Mouse support.</p>"},{"location":"library/mame_2003/#dual-stick-games","title":"Dual stick games","text":"<p>The right analog stick can now be used a second joystick. This is enabled by default, via a setting in the retroarch-core-options.cfg file, found in:</p> <p>mame2003-rstick_to_btns = \"enabled\"</p>"},{"location":"library/mame_2003/#compatibility","title":"Compatibility","text":"<p>The MAME 2003 core accepts MAME 0.78 ROMsets. Each version of an arcade emulator must be used with ROMs that have the same exact version number. For example, MAME 0.37b5 ROMsets are required by the MAME 2000 emulator, but MAME 0.37b5 sets will not work correctly with the MAME 2003 or MAME 2010 emulator cores. Those cores require MAME 0.78 and MAME 0.139 ROM sets, respectively.</p> <p>File-not-found errors are the result of a ROMset that is wrong or incomplete, including if you're trying to run a \"Split\" clone .zip without the parent .zip present. Non-Merged MAME0.78 ROMsets do not require parent .zips to be present.</p>"},{"location":"library/mame_2003/#external-links","title":"External Links","text":"<ul> <li>MAME 2003 Github Repository</li> <li>RetroPie MAME 2003 documentation</li> </ul>"},{"location":"library/mame_2003/#see-also_1","title":"See also","text":"<ul> <li>MAME 2003 Plus</li> <li>MAME 2010</li> <li>SAME_CDI</li> </ul>"},{"location":"library/mame_2010/","title":"Arcade (MAME 2010)","text":""},{"location":"library/mame_2010/#background","title":"Background","text":"<p>MAME 2010 is a port of MAME 0.139 for libretro, originally sourced from https://github.com/mamedev/mame/releases/download/mame0139/mame0139s.zip</p> <p>The OSD code is inspired by other MAME ports :</p> <ul> <li>mame2003: https://github.com/libretro/mame2003-libretro</li> <li>ps3 mame0.125: http://www.volny.cz/molej/ps3/mame_ps3.htm</li> <li>mame4droid: http://code.google.com/p/imame4all/source/browse/</li> </ul>"},{"location":"library/mame_2010/#authorlicense","title":"Author/License","text":"<p>MAME 2010 code is copyright Nicola Salmoria and the MAME team and distributed under a Non-Commercial MAME license.</p> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/mame_2010/#extensions","title":"Extensions","text":"<p>Content that can be loaded by MAME 2010 have the following file extensions:</p> <ul> <li><code>.zip</code></li> <li><code>.7z</code></li> <li><code>.chd</code></li> </ul>"},{"location":"library/mame_2010/#databases","title":"Databases","text":"<p>RetroArch database(s) that are associated with the MAME 2010 core:</p> <ul> <li>MAME 2010</li> </ul>"},{"location":"library/mame_2010/#bios","title":"BIOS","text":"<p>BIOS files should either be placed in the same folder as the Arcade romset ZIP file, or should be incorporated into the Arcade romset ZIP file itself in a \"Full Non-Merged\" romset format.</p>"},{"location":"library/mame_2010/#features","title":"Features","text":"<p>Frontend-level settings or features that the (Core name) core respects.</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves - States - Rewind - Netplay - Core Options \u2714 Memory Monitoring (achievements) \u2715 RetroArch Cheats - Native Cheats - Controls - Remapping - Multi-Mouse - Rumble - Sensors - Camera - Location - Subsystem - Softpatching - Disk Control - Username - Language - Crop Overscan - LEDs -"},{"location":"library/mame_2010/#directories","title":"Directories","text":"<p>MAME 2010 requires the following directories exist, and will create them if they are missing:</p> <ul> <li>libretro system folder/mame2010/: location for cheat.zip cheats file</li> <li>libretro system folder/mame2010/artwork: MAME bezels and overlay files</li> <li>libretro system folder/mame2010/crosshairs: custom crosshair images</li> <li>libretro system folder/mame2010/fonts: custom fonts</li> <li>libretro system folder/mame2010/samples: audio sample zip files needed by some games</li> <li>libretro saves folder/mame2010/cfg: automatically-generated MAME configuration files</li> <li>libretro saves folder/mame2010/comment: MAME debugger comment files</li> <li>libretro saves folder/mame2010/ctrlr: MAME controller customization files</li> <li>libretro saves folder/mame2010/image: game image content</li> <li>libretro saves folder/mame2010/ini: MAME.ini files</li> <li>libretro saves folder/mame2010/input: Recorded input files</li> <li>libretro saves folder/mame2010/memcard: Save folder for emulated memcard device memory</li> <li>libretro saves folder/mame2010/nvram: Save folder for emulated nvram device memory</li> </ul>"},{"location":"library/mame_2010/#core-options","title":"Core options","text":"<p>The MAME 2010 core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded. Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch.</p> <ul> <li>Mouse supported (disabled|enabled)</li> <li>Video approach 1 Enabled (disabled|enabled)</li> <li>Hide game info screen (disabled|enabled)</li> <li>Hide warning screen (disabled|enabled)</li> <li>Core provided aspect ratio (DAR|PAR)</li> <li>Enable autofire (disabled|button 1|button 2|R2 to button 1 mapping|R2 to button 2 mapping)</li> <li>Set autofire pulse speed (medium|slow|fast)</li> <li>Set frameskip (0|1|2|3|4|automatic)</li> <li>Set sample rate (Restart)** (48000Hz|44100Hz|32000Hz|22050Hz)</li> <li>Set brightness (default|+1%|+2%|+3%|+4%|+5%|+6%|+7%|+8%|+9%|+10%|+11%|+12%|+13%|+14%|+15%|+16%|+17%|+18%|+19%|+20%|-20%|-19%|-18%|-17%|-16%|-15%|-14%|-13%|-12%|-11%|-10%|-9%|-8%|-7%|-6%|-5%|-4%|-3%|-2%|-1%)</li> <li>Set contrast (default|+1%|+2%|+3%|+4%|+5%|+6%|+7%|+8%|+9%|+10%|+11%|+12%|+13%|+14%|+15%|+16%|+17%|+18%|+19%|+20%|-20%|-19%|-18%|-17%|-16%|-15%|-14%|-13%|-12%|-11%|-10%|-9%|-8%|-7%|-6%|-5%|-4%|-3%|-2%|-1%)</li> <li>Set gamma (default|+1%|+2%|+3%|+4%|+5%|+6%|+7%|+8%|+9%|+10%|+11%|+12%|+13%|+14%|+15%|+16%|+17%|+18%|+19%|+20%|-20%|-19%|-18%|-17%|-16%|-15%|-14%|-13%|-12%|-11%|-10%|-9%|-8%|-7%|-6%|-5%|-4%|-3%|-2%|-1%)</li> <li>Use external hiscore.dat (disabled|enabled)</li> </ul>"},{"location":"library/mame_2010/#controllers","title":"Controllers","text":"<p>MAME 2010 supports keyboard use and up to four joypads.</p> <pre><code>       RetroPad                        MAME Equivalent\n   RETRO_DEVICE_ID_JOYPAD_START    [KEY_START]\n   RETRO_DEVICE_ID_JOYPAD_SELECT   [KEY_COIN]\n   RETRO_DEVICE_ID_JOYPAD_A    [KEY_BUTTON_1]\n   RETRO_DEVICE_ID_JOYPAD_B        [KEY_BUTTON_2]\n   RETRO_DEVICE_ID_JOYPAD_X        [KEY_BUTTON_3]\n   RETRO_DEVICE_ID_JOYPAD_Y        [KEY_BUTTON_4]\n   RETRO_DEVICE_ID_JOYPAD_L        [KEY_BUTTON_5]\n   RETRO_DEVICE_ID_JOYPAD_R        [KEY_BUTTON_6]\n   RETRO_DEVICE_ID_JOYPAD_L2       [KEY_TAB]\n   RETRO_DEVICE_ID_JOYPAD_R3       [KEY_F3]\n   RETRO_DEVICE_ID_JOYPAD_L3       [KEY_F2]\n   RETRO_DEVICE_ID_JOYPAD_UP       [KEY_JOYSTICK_U]\n   RETRO_DEVICE_ID_JOYPAD_DOWN     [KEY_JOYSTICK_D]\n   RETRO_DEVICE_ID_JOYPAD_LEFT     [KEY_JOYSTICK_L]\n   RETRO_DEVICE_ID_JOYPAD_RIGHT    [KEY_JOYSTICK_R]\n</code></pre>"},{"location":"library/mame_2010/#lightgun","title":"Lightgun","text":"<p>To be written for MAME 2010</p> RetroLightgun Inputs (Device name) Inputs  Gun Crosshair - Gun Trigger - Gun Reload - Gun Aux A - Gun Aux B - Gun Aux C - Gun Start - Gun Select - Gun D-pad Up - Gun D-pad Down - Gun D-pad Left - Gun D-pad Right -"},{"location":"library/mame_2010/#external-links","title":"External Links","text":"<ul> <li>MAME 2010 Github Repository</li> <li>MAMEdev</li> <li>MAME 2010 Core info file</li> <li>MAME 2010 README</li> <li>Report MAME 2010 Issues Here</li> </ul>"},{"location":"library/mame_2010/#see-also","title":"See also","text":"<ul> <li>MAME 2003</li> <li>MAME 2003 Plus</li> <li>SAME_CDI</li> </ul>"},{"location":"library/melonds/","title":"Nintendo - DS (melonDS)","text":""},{"location":"library/melonds/#background","title":"Background","text":"<p>An up-and-coming Nintendo DS emulator by Arisotura, ported to libretro.</p> <p>This is the older version!</p> <p>This version of the melonDS core is obsolete and unmaintained. You are encouraged to migrate to melonDS DS, which is based on a newer version of the original emulator, has more features, and is easier to use.</p>"},{"location":"library/melonds/#authorlicense","title":"Author/License","text":"<p>The melonDS core has been authored by</p> <ul> <li>Arisotura</li> </ul> <p>The melonDS core is licensed under</p> <ul> <li>GPLv3</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/melonds/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the melonDS core have the following file extensions:</p> <ul> <li>.nds</li> </ul>"},{"location":"library/melonds/#databases","title":"Databases","text":"<p>RetroArch database(s) that are associated with the melonDS core:</p> <ul> <li>Nintendo - Nintendo DS</li> <li>Nintendo - Nintendo DS Decrypted</li> <li>Nintendo - Nintendo DS (Download Play)</li> </ul>"},{"location":"library/melonds/#bios","title":"BIOS","text":"<p>Required or optional firmware files go in the frontend's <code>system</code> directory.</p> Filename Description md5sum bios7.bin NDS ARM7 BIOS - Optional df692a80a5b1bc90728bc3dfc76cd948 bios9.bin NDS ARM9 BIOS - Optional a392174eb3e572fed6447e956bde4b25 firmware.bin NDS Firmware - Optional dsi_bios7.bin DSi ARM7 BIOS - Optional dsi_bios9.bin DSi ARM9 BIOS - Optional dsi_firmware.bin DSi Firmware - Optional dsi_nand.bin DSi NAND - Optional dsi_sd_card.bin DSi SD Card - Optional"},{"location":"library/melonds/#features","title":"Features","text":"<p>Frontend-level settings or features that the melonDS core respects.</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2715 Core Options \u2714 Memory Monitoring (achievements) \u2714 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/melonds/#directories","title":"Directories","text":"<p>The melonDS core's library name is 'melonDS'</p> <p>The melonDS core saves/loads to/from these directories.</p> <p>Frontend's Cache directory</p> File Description *.sav Cartridge battery save"},{"location":"library/melonds/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The melonDS core's core provided FPS is 59.8983059319</li> <li>The melonDS core's core provided sample rate is 32768 Hz</li> <li>The melonDS core's base width is 256</li> <li>The melonDS core's base height is 384</li> <li>The melonDS core's max width is 256</li> <li>The melonDS core's max height is 384</li> <li>The melonDS core's core provided aspect ratio is \u2154</li> </ul>"},{"location":"library/melonds/#controllers","title":"Controllers","text":"<p>The melonDS core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/melonds/#user-1-device-types","title":"User 1 device types","text":"<ul> <li>None - Doesn't disable input. There's no reason to switch to this.</li> <li>Nintendo DS - Joypad - Stay on this.</li> </ul>"},{"location":"library/melonds/#device-tables","title":"Device tables","text":""},{"location":"library/melonds/#joypad","title":"Joypad","text":"User 1 input descriptors RetroPad Inputs B Y Select Start Up Down Left Right A X L R Swap Screens Close Lid"},{"location":"library/melonds/#compatibility","title":"Compatibility","text":"<ul> <li>Upstream melonDS Forums Compatibility section</li> </ul>"},{"location":"library/melonds/#external-links","title":"External Links","text":"<ul> <li>Official melonDS Website</li> <li>Official melonDS Github Repository</li> <li>Libretro melonDS Core info file</li> <li>Libretro melonDS Github Repository</li> <li>Report Libretro melonDS Core Issues Here</li> <li>Gameplay Videos</li> </ul>"},{"location":"library/melonds/#see-also","title":"See also","text":""},{"location":"library/melonds/#nintendo-nintendo-ds-decrypted-download-play","title":"Nintendo - Nintendo DS + Decrypted + (Download Play)","text":"<ul> <li>Nintendo - DS (DeSmuME 2015)</li> <li>Nintendo - DS (DeSmuME)</li> <li>Nintendo - DS (melonDS DS)</li> </ul>"},{"location":"library/melonds_ds/","title":"Nintendo - DS (melonDS DS)","text":""},{"location":"library/melonds_ds/#background","title":"Background","text":"<p>A Nintendo DS emulator (with DSi support) by Arisotura and friends, ported to libretro by Jesse Talavera.</p> <p>This is the newer version!</p> <p>This version of the melonDS core is based on a newer version of the original emulator, and has more features than the older melonDS core. Use this one unless you're not ready to migrate.</p>"},{"location":"library/melonds_ds/#authorlicense","title":"Author/License","text":"<p>The melonDS DS core has been authored by</p> <ul> <li>Jesse Talavera</li> </ul> <p>The melonDS DS core is licensed under</p> <ul> <li>GPLv3</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/melonds_ds/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the melonDS core has one of the following file extensions:</p> <ul> <li>.nds</li> <li>.dsi</li> <li>.ids</li> </ul>"},{"location":"library/melonds_ds/#databases","title":"Databases","text":"<p>RetroArch database(s) that are associated with the melonDS DS core:</p> <ul> <li>Nintendo - Nintendo DS</li> <li>Nintendo - Nintendo DSi</li> </ul>"},{"location":"library/melonds_ds/#bios","title":"BIOS","text":"<p>Required or optional firmware files go in the frontend's <code>system</code> directory.</p> Filename Description md5sum bios7.bin NDS ARM7 BIOS - Optional df692a80a5b1bc90728bc3dfc76cd948 bios9.bin NDS ARM9 BIOS - Optional a392174eb3e572fed6447e956bde4b25 firmware.bin NDS Firmware - Optional Varies dsi_bios7.bin DSi ARM7 BIOS - Required in DSi mode dsi_bios9.bin DSi ARM9 BIOS - Required in DSi mode dsi_firmware.bin DSi Firmware - Required in DSi mode Varies dsi_nand.bin DSi NAND - Required in DSi mode Varies"},{"location":"library/melonds_ds/#features","title":"Features","text":"<p>Frontend-level settings or features that melonDS DS respects.</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714<sup>1</sup> Rewind \u2714<sup>1</sup> Netplay \u2714<sup>2</sup> Core Options \u2714 Memory Monitoring (achievements) \u2714 RetroArch Cheats \u2714 Native Cheats \u2714 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2714 Sensors \u2714 Camera \u2715 Location \u2715 Subsystem \u2714 Softpatching \u2714 Disk Control \u2715 Username \u2714 Language \u2714 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/melonds_ds/#directories","title":"Directories","text":"<p>The melonDS DS core's library name is 'melonDS DS'</p> <p>The melonDS DS core saves/loads to/from these directories.</p>"},{"location":"library/melonds_ds/#frontends-save-directory","title":"Frontend's Save directory","text":"File Description *.srm Cartridge battery save dldi_sd_card.bin Homebrew SD card image dldi_sd_card.bin.idx Homebrew SD card file index dsi_sd_card.bin DSi SD card image dsi_sd_card.bin.idx DSi SD card file index *.public.sav DSiWare public save data *.private.sav DSiWare private save data *.banner.sav DSiWare icon save data"},{"location":"library/melonds_ds/#frontends-system-directory","title":"Frontend's System directory","text":"File Description melonDS DS/tmd/*.tmd DSiWare title ID file wfcsettings.bin DS Wi-Fi settings (built-in BIOS only)"},{"location":"library/melonds_ds/#frontends-state-directory","title":"Frontend's State directory","text":"File Description *.state# State"},{"location":"library/melonds_ds/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The melonDS DS core's core provided FPS is 59.898307800293 FPS.</li> <li>The melonDS DS core's core provided sample rate is 32768 Hz.</li> <li>The melonDS DS core's base width depends on the screen layout and configured renderer.</li> <li>The melonDS DS core's base height depends on the screen layout and configured renderer.</li> <li>The melonDS DS core's max width depends on the screen layout and configured renderer.</li> <li>The melonDS DS core's max height depends on the screen layout and configured renderer.</li> <li>The melonDS DS core's core-provided aspect ratio depends on the screen layout and configured renderer.</li> </ul>"},{"location":"library/melonds_ds/#subsystems","title":"Subsystems","text":"<p>melonDS DS uses subsystems to enable inserting GBA ROMs into the emulated Slot-2. GBA save data (if any) must be loaded explicitly. Subsystems are not used for DSi mode.</p> Subsystem Description gba NDS ROM in Slot-1, GBA ROM in Slot-2 with optional save data gbanosav NDS ROM in Slot-1, GBA ROM in Slot-2 with no GBA save data <p>Not for playing GBA games.</p> <p>melonDS can load Game Boy Advance ROMs and save data for the purpose of Slot-2 connectivity, but it cannot actually play GBA games. Use a GBA core instead.</p> <p>Additional BIOS images are not required.</p>"},{"location":"library/melonds_ds/#wi-fi","title":"Wi-Fi","text":"<p>melonDS DS fully supports emulating Nintendo WFC services on all platforms. You can choose from one of several preconfigured servers in the core options menu, with Kaeru WFC being the default.</p> <p>If there's another server you'd like to use, you can set its DNS address from within the emulated console's Wi-Fi settings menu.</p> <p>Not related to netplay!</p> <p>Wi-fi emulation is not related to LAN-based netplay.</p>"},{"location":"library/melonds_ds/#lan-netplay","title":"LAN Netplay","text":"<p>melonDS DS supports emulating LAN multiplayer via netplay. See below for instructions and details.</p>"},{"location":"library/melonds_ds/#what-is-lan-multiplayer","title":"What is LAN Multiplayer?","text":"<p>The Nintendo DS has several forms of multiplayer, including local Wi-Fi (also called LAN), Nintendo Wi-Fi Connection (WFC) and infrared. You'll know when games use local Wi-Fi if the game mentions \"Wi-Fi\" and \"players nearby\", while games using WFC mention \"players around the world\" and use friend codes. The Nintendo DS local Wi-Fi does not use friend codes. This page only explains local Wi-Fi multiplayer.</p> <p>Now, the Nintendo DS local Wi-Fi isn't the normal Wi-Fi in your house, it is a mesh network that uses specialized hardware. This means that games expect extremely low latency, which is achievable between two consoles directly connected with special hardware, but harder to achieve with two computers with a router in-between, and simply impossible to achieve through the Internet. LAN multiplayer does not work through the Internet and neither with VPNs or tunnels such as Hamachi. This is not something that can be fixed easily. The only way to use emulated LAN Multiplayer is on an actual, low latency, wired LAN connection.</p> <p>The latency requirements are so extreme that even in LAN, you might still have issues. That is why using Wi-Fi in your LAN connection is not recommended, Wi-Fi simply adds too much latency, and the connection will drop frequently. The recommended way to use the emulated Wi-Fi LAN connection is with a wired LAN connection between the computers.</p>"},{"location":"library/melonds_ds/#what-is-a-mac-address","title":"What is a MAC address?","text":"<p>Every Nintendo DS (and every device capable of Wi-Fi) comes with an identifier built-in in its firmware called a \"MAC address\". For three or more Nintendo DS consoles to connect in a local Wi-Fi multiplayer network, all three need to have different MAC addresses. You can see the emulated console's MAC address in a game with Nintendo WFC by going to \"Nintendo WFC Settings\", \"Options\", \"System Information\".</p> <p>Some games will refuse to load save files that were created on a console with a different MAC address than the console loading the file. That is why it is important to pay attention to your MAC address when sharing save files across devices.</p> <p>So how does the emulated console obtain a MAC address? It depends on the core option \"MAC address mode\", in the \"Network\" category:</p> <ul> <li> <p>Set from firmware: The default setting. The emulator will use the firmware file's MAC address for the emulated console. If there is no firmware file, then a default MAC address of \"00-09-BF-11-22-33\" will be used. This setting will cause issues on LAN multiplayer with more than 2 players if the same firmware (or the default firmware) is used on more than one device.</p> </li> <li> <p>Derive from libretro username: The emulator will use your username as set on the libretro frontend to automatically generate a MAC address. Such generated MAC addresses will start with \"00-08-BF\". Devices with the same username set will always generate the same MAC address. Useful when syncing save files across devices to guarantee the emulated console's MAC address is the same on all devices. This setting will cause issues on LAN multiplayer if more than one player has the same username. The username can be set on RetroArch by going to \"Settings\", \"User\", \"Username\".</p> </li> </ul>"},{"location":"library/melonds_ds/#starting-a-multiplayer-session-retroarch","title":"Starting a multiplayer session (RetroArch)","text":"<p>Before starting a multiplayer session, it is recommended that all set a proper username in \"Settings\", \"User\", \"Username\", in RetroArch, and set the MAC address mode to \"Derive from libretro username\".</p> <p>In RetroArch, such a multiplayer session can be started through the \"Netplay\" menu either before starting a game or during a game. One player should host and the others should use the \"Refresh Netplay LAN List\" option to join. In game, you'd look for something mentioning local multiplayer and \"players nearby\". In Pok\u00e9mon games, this can be accessed on the top floor of Pok\u00e9mon centers, in Mario Kart DS, it is the \"Multiplayer\" option in the menu etc. There are a ton of pages online saying that \"Netplay is not network emulation\". For various reasons, these pages are wrong when it comes to melonDS DS.</p> <p>Again, emulated LAN multiplayer only works if all players are on the same real local network. This means the same house, apartment etc. For better results, a wired connection is recommended.</p>"},{"location":"library/melonds_ds/#dsi","title":"DSi","text":"<p>melonDS DS supports DSi mode, which allows you to play DSi-enhanced games and DSiWare. There is no need to prepare a NAND image externally; when selecting a DSiWare game from RetroArch, it (and its previously-exported save data) will be temporarily installed on the configured NAND image. At the end of the session, the save data will be exported to the frontend's save directory and the DSiWare will be uninstalled.</p>"},{"location":"library/melonds_ds/#screen-layouts","title":"Screen Layouts","text":"<p>melonDS DS supports a variety of screen layouts, including sideways rotation; you can configure a particular sequence of available layouts in the core options, and cycle through them with the <code>Next Screen Layout</code> button. Best used with per-game core option overrides.</p>"},{"location":"library/melonds_ds/#controllers","title":"Controllers","text":"<p>The melonDS DS core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/melonds_ds/#user-1-device-types","title":"User 1 device types","text":"<ul> <li>None - Doesn't disable input. There's no reason to switch to this.</li> <li>Nintendo DS - Joypad - Stay on this.</li> </ul> <p>Future device types may be added to include peripherals that provided additional inputs.</p>"},{"location":"library/melonds_ds/#device-tables","title":"Device tables","text":""},{"location":"library/melonds_ds/#joypad","title":"Joypad","text":"User 1 input descriptors RetroPad Inputs B Y Select Start Up Down Left Right A X L R Microphone Next Screen Layout Move Virtual Cursor Close Lid Touch Virtual Cursor"},{"location":"library/melonds_ds/#migrating-from-melonds-2021","title":"Migrating from melonDS 2021","text":"<p>melonDS DS is intended to replace the legacy melonDS core. If you have existing data you'd like to migrate, follow these steps.</p>"},{"location":"library/melonds_ds/#save-files","title":"Save Files","text":"<p>The save data format is unchanged between the legacy core and melonDS DS. However, the method used to save game data internally has changed.</p> <p>You'll need to do two things:</p> <ol> <li>Go to the RetroArch save directory and rename the \"melonDS\" folder to \"melonDS DS\" (if it exists)</li> <li>Rename the save files from <code>.sav</code> to <code>.srm</code>.</li> </ol>"},{"location":"library/melonds_ds/#savestates","title":"Savestates","text":"<p>Savestates taken in the legacy core cannot be migrated to melonDS DS. In the time since the last release of the legacy core, the savestate format has changed upstream. Save your game normally before migrating your data to melonDS DS.</p>"},{"location":"library/melonds_ds/#config-files","title":"Config Files","text":"<p>Rename the following directories to <code>melonDS DS</code>:</p> <ul> <li><code>$RETROARCH_ROOT/config/melonDS</code> to <code>melonDS DS</code>.</li> <li><code>$RETROARCH_ROOT/config/remaps/melonDS</code> to <code>melonDS DS</code>.</li> <li>Rename any files inside these directories named <code>melonDS.opt</code> to <code>melonDS DS.opt</code>.</li> </ul>"},{"location":"library/melonds_ds/#cheats","title":"Cheats","text":"<p>Rename <code>$RETROARCH_ROOT/cheats/melonDS</code> to <code>melonDS DS</code>. Cheat support is unchanged.</p>"},{"location":"library/melonds_ds/#system-files","title":"System Files","text":"<p>melonDS DS will detect system files (BIOS, firmware, NAND) in the system directory, so no action is required from you. However, melonDS DS will prefer system files in the \"melonDS DS\" subdirectory.</p>"},{"location":"library/melonds_ds/#compatibility","title":"Compatibility","text":"<ul> <li>Upstream melonDS Forums Compatibility section</li> </ul>"},{"location":"library/melonds_ds/#external-links","title":"External Links","text":"<ul> <li>Official melonDS Website</li> <li>Official melonDS GitHub Repository</li> <li>Libretro melonDS DS Core info file</li> <li>Libretro melonDS DS Github Repository</li> <li>Report Libretro melonDS DS Core Issues Here</li> </ul>"},{"location":"library/melonds_ds/#see-also","title":"See also","text":""},{"location":"library/melonds_ds/#nintendo-nintendo-ds-decrypted-download-play","title":"Nintendo - Nintendo DS + Decrypted + (Download Play)","text":"<ul> <li>Nintendo - DS (DeSmuME 2015)</li> <li>Nintendo - DS (DeSmuME)</li> <li>Nintendo - DS (melonDS 2021)</li> </ul> <ol> <li> <p>Not available in DSi mode.\u00a0\u21a9\u21a9</p> </li> <li> <p>LAN only. (No, VPNs won't work.)\u00a0\u21a9</p> </li> </ol>"},{"location":"library/mesen-s/","title":"Nintendo - SNES / SFC / Game Boy / Color (Mesen-S)","text":""},{"location":"library/mesen-s/#background","title":"Background","text":"<p>Mesen-S is a cross-platform SNES emulator for Windows &amp; Linux built in C++ and C#.</p> <p>Features</p> <ul> <li>High Accuracy: A lot of effort has gone into making Mesen-S as accurate as possible.</li> <li>High Compatibility</li> <li>SNES, Super Famicom, Game Boy, and Game Boy Color emulation is supported. Super Game Boy has complete support.</li> </ul>"},{"location":"library/mesen-s/#authorlicense","title":"Author/License","text":"<p>The Mesen-S core has been authored by</p> <ul> <li>M. Bibaud (aka Sour)</li> </ul> <p>The Mesen-S core is licensed under</p> <ul> <li>GPLv3</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/mesen-s/#bios","title":"BIOS","text":"<p>Required or optional firmware files go in the frontend's system directory.</p> Filename Description md5sum dsp1.data.rom DSP1 co-processor firmware - Optional 3d81b45fa0c2aa8b852dfb1ece7c0971 dsp1.program.rom DSP1 co-processor firmware - Optional ae209fbe789fbf11a48aea5ab1197321 dsp1b.data.rom DSP1B co-processor firmware - Optional 1e3f568634a7d8284020dddc0ae905bc dsp1b.program.rom DSP1B co-processor firmware - Optional d10f446888e097cbf500f3f663cf4f6d dsp2.data.rom DSP2 co-processor firmware - Optional e9417e29223b139c3c4b635a2a3b8744 dsp2.program.rom DSP2 co-processor firmware - Optional aa6e5922a3ed5ded54f24247c11143c5 dsp3.data.rom DSP3 co-processor firmware - Optional 0a81210c0a940b997dd9843281008ee6 dsp3.program.rom DSP3 co-processor firmware - Optional d99ca4562818d49cee1f242705bba6f8 dsp4.data.rom DSP4 co-processor firmware - Optional ee4990879eb68e3cbca239c5bc20303d dsp4.program.rom DSP4 co-processor firmware - Optional a151023b948b90ffc23a5b594bb6fef2 st010.data.rom ST010 co-processor firmware - Optional 254d70762b6f59f99c27c395aba7d07d st010.program.rom ST010 co-processor firmware - Optional 1d70019179a59a566a0bb5d3f2845544 st011.data.rom ST011 co-processor firmware - Optional 10bd3f4aa949737ab9836512c35bcc29 st011.program.rom ST011 co-processor firmware - Optional 95222ebf1c0c2990bcf25db43743f032 dmg_boot.bin GB Boot Image - Optional 32fbbd84168d3482956eb3c5051637f5 cgb_boot.bin GBC Boot Image - Optional dbfce9db9deaa2567f6a84fde55f9680 sgb_boot.bin SGB Boot Image - Optional d574d4f9c12f305074798f54c091a8b4 sgb2_boot.bin SGB2 Boot Image - Optional e0430bca9925fb9882148fd2dc2418c1 SGB1.sfc SGB ROM - Optional b15ddb15721c657d82c5bab6db982ee9 SGB2.sfc SGB2 ROM - Optional 8ecd73eb4edf7ed7e81aef1be80031d5 BS-X.bin Satellaview Boot ROM - Optional fed4d8242cfbed61343d53d48432aced"},{"location":"library/mesen-s/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the Mesen-S core have the following file extensions:</p> <ul> <li>.sfc</li> <li>.smc</li> <li>.fig</li> <li>.swc</li> <li>.bs</li> <li>.gb</li> <li>.gbc</li> </ul>"},{"location":"library/mesen-s/#databases","title":"Databases","text":"<p>RetroArch database(s) that are associated with the Mesen-S core:</p> <ul> <li>Nintendo - Game Boy</li> <li>Nintendo - Game Boy Color</li> <li>Nintendo - Super Nintendo Entertainment System</li> <li>Nintendo - Satellaview</li> </ul>"},{"location":"library/mesen-s/#features","title":"Features","text":"<p>Frontend-level settings or features that the Mesen-S core respects.</p> Feature Supported Restart \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 Memory Monitoring (achievements) \u2714 RetroArch Cheats \u2714 Native Cheats \u2714 Controls \u2714 Remapping \u2714 Multi-Mouse \u2714 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2714 LEDs \u2715"},{"location":"library/mesen-s/#directories","title":"Directories","text":"<p>The Mesen-S core's library name is 'Mesen-S'</p> <p>The Mesen-S core saves/loads to/from these directories.</p> <p>Frontend's Save directory</p> File Description *.srm Cartridge battery save <p>Frontend's State directory</p> File Description *.state# State"},{"location":"library/mesen-s/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The Mesen-S core's core provided FPS is 60 for NTSC games and 50 for PAL games.</li> <li>The Mesen-S core's core provided sample rate is 32040 Hz</li> <li>The Mesen-S core's base width is 256</li> <li>The Mesen-S core's base height is 239</li> <li>The Mesen-S core's max width is 512</li> <li>The Mesen-S core's max height is 478</li> <li>The Mesen-S core's core provided aspect ratio is dependent on the 'Aspect Ratio' core option</li> </ul>"},{"location":"library/mesen-s/#core-options","title":"Core options","text":"<p>The Mesen-S core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded.</p> <p>Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch.</p> <p>Attention</p> <p>These core option descriptions have been sourced from the official Mesen-S documentation. Please go there for more information.</p> <ul> <li> <p>NTSC filter [mesen-s_ntsc_filter] (Disabled/Composite (Blargg)/S-Video (Blargg)/RGB (Blargg)/Monochrome (Blargg))</p> <p>Selects a filter to apply to the picture. The NTSC filter available in Mesen-S is blargg\u2019s NTSC filter - this filter is very fast, and available in various other emulators.</p> </li> <li> <p>Region [mesen-s_region] (Auto/NTSC/PAL)</p> <p>When set to Auto, the emulator will try to detect the game\u2019s region (NTSC or PAL) - however, this is not always possible. When there is nothing to suggest a game is for the PAL region (Australia &amp; Europe), the NTSC region (North America &amp; Japan) will be used by default.</p> </li> <li> <p>Game Boy Model [mesen-s_gbmodel] (Auto/Game Boy/Game Boy Color/Super Game Boy)</p> <p>Determines which Game Boy model to emulate when loading a Game Boy or Game Boy Color game. When Auto is selected, Super Game Boy emulation is used for Game Boy games, and Game Boy Color emulation is used for Game Boy Color games.</p> </li> <li> <p>Use SGB2 [mesen-s_sgb2] (Off/On)</p> <p>When enabled, Super Game Boy 2 is used when emulating the SGB. Super Game Boy 2 has corrected CPU timing and some slight differences in behavior.</p> </li> <li> <p>Vertical Overscan [mesen-s_overscan_vertical] (None/8px/16px)</p> <p>This overscan setting allow you to cut out pixels vertically on the edge of the screen. On a CRT TV, a few pixels on each side of the screen are usually hidden. Most SNES games output 224 scanlines, while others use the SNES\u2019 239 scanlines mode. To avoid the window or picture size changing when the game changes between either mode, Mesen-S always outputs 239 scanlines. In the vast majority of games, this results in 7 blank lines on the top and 8 on the bottom. To hide these blank scanlines, set the overscan value to 8.</p> </li> <li> <p>Horizontal Overscan [mesen-s_overscan_horizontal] (None/8px/16px)</p> <p>This overscan setting allow you to cut out pixels horizontally on the edge of the screen.</p> </li> <li> <p>Aspect Ratio [mesen-s_aspect_ratio] (Auto/No Stretching/NTSC/PAL/4:3/16:9)</p> <p>The SNES\u2019 resolution in most games is 256x224, but it used to be displayed on CRT TVs that had a rectangular picture. To simulate a CRT TV, you can use the Auto option - it will switch between NTSC and PAL aspect ratios depending on the game you are playing. Using anything other than the Default (No Stretching) option may cause pixels to have irregular sizes. You can reduce this effect by using video filters.</p> </li> <li> <p>Blend Hi-Res Modes [mesen-s_blend_high_res] (Off/On)</p> <p>Some games use the SNES\u2019 \u201chigh resolution\u201d mode which produces a 512x224 picture. However, this mode causes horizontal blending, which is sometimes used for pseudo-transparency effects. Enabling this option will allow these pseudo-transparency effects to look as they were intended (but causes the entire picture to look softer/blurrier).</p> </li> <li> <p>Cubic Interpolation (Audio) [mesen-s_cubic_interpolation] (Off/On)</p> <p>This option replaces the SNES\u2019 default gaussian interpolation filter with a cubic interpolation filter which can produce better audio.</p> </li> <li> <p>Overclock [mesen-s_overclock] (None/Low/Medium/High/Very High)</p> <p>Use this to overclock the CPU.</p> </li> </ul> <p>Warning</p> <p>Overclocking can cause issues in some games.</p> <ul> <li> <p>Overclock Type [mesen-s_overclock_type] (Before NMI/After NMI)</p> <p>Before NMI: Increases the number of scanlines in the PPU, before the NMI signal is triggered at the end of the visible frame. This effectively gives more time for games to perform calculations, which can reduce slowdowns in games. This is the preferred option for overclocking.</p> <p>After NMI: Increases the number of scanlines in the PPU, after the NMI signal is triggered at the end of the visible frame. This effectively gives more time for games to perform calculations, which can reduce slowdowns in games. This option is less compatible and should only be used if the Before NMI variation does not work as expected.</p> </li> <li> <p>Super FX Clock Speed [mesen-s_superfx_overclock] (100%/200%/300%/400%/500%/1000%)</p> <p>Increases the clock speed used for the Super FX chip, which can reduce lag in Super FX games. This method of overclocking is more efficient for Super FX titles.</p> </li> <li> <p>Default power-on state for RAM [mesen-s_ramstate] (Random Values (Default)/All 0s/All 1s)</p> <p>On a console, the RAM\u2019s state at power on is undetermined and relatively random. This option lets you select Mesen-S\u2019 behavior when initializing RAM - set all bits to 0, set all bits to 1, or randomize the value of each bit.</p> </li> </ul>"},{"location":"library/mesen-s/#controllers","title":"Controllers","text":"<p>The Mesen-S core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/mesen-s/#user-1-device-types","title":"User 1 device types","text":"<ul> <li>None - Input disabled.</li> <li>RetroPad - Joypad</li> <li>SNES Controller - Joypad</li> <li>SNES Mouse - Mouse</li> </ul>"},{"location":"library/mesen-s/#user-2-device-types","title":"User 2 device types","text":"<ul> <li>None - Input disabled.</li> <li>RetroPad - Joypad - SNES Controller</li> <li>SNES Controller - Joypad</li> <li>SNES Mouse - Mouse</li> <li>Super Scope - Lightgun</li> <li>Multitap - Joypad - Allows for up to five players to play together in mulitap games.</li> </ul>"},{"location":"library/mesen-s/#user-3-5-device-types","title":"User 3 - 5 device types","text":"<ul> <li>None - Input disabled.</li> <li>RetroPad - Joypad</li> <li>SNES Controller - Joypad</li> </ul>"},{"location":"library/mesen-s/#multitap","title":"Multitap","text":"<p>Multitap support can be activated in the Mesen-S core by switching User 2's device type to Multitap.</p>"},{"location":"library/mesen-s/#controller-tables","title":"Controller tables","text":""},{"location":"library/mesen-s/#joypad","title":"Joypad","text":"User Remap descriptors for 'SNES Controller' device type RetroPad Inputs B Y Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A X L R"},{"location":"library/mesen-s/#mouse","title":"Mouse","text":"RetroMouse Inputs SNES Mouse  Mouse Cursor SNES Mouse Cursor  Mouse 1 SNES Mouse Left Button  Mouse 2 SNES Mouse Right Button"},{"location":"library/mesen-s/#pointer","title":"Pointer","text":"RetroPointer Inputs Super Scope  or  Pointer Position Crosshair  Mouse 1 Fire  Mouse 2 Cursor Button  Mouse 3 Turbo Toggle <p>Attention</p> <p>Currently there is no crosshair. Pressing the mouse grab binding twice in RetroArch (default F11) should make your system cursor visible.</p>"},{"location":"library/mesen-s/#compatibility","title":"Compatibility","text":"<p>The Mesen-S core fully emulates all SNES, GB, and GBC games that have ever been officially released.</p>"},{"location":"library/mesen-s/#external-links","title":"External Links","text":"<ul> <li>Official Mesen-S Website</li> <li>Official Mesen-S Documentation</li> <li>Libretro Mesen-S Core info file</li> <li>Official Mesen-S Github Repository</li> <li>Report Libretro Mesen-S Core Issues Here</li> </ul>"},{"location":"library/mesen-s/#see-also","title":"See also","text":""},{"location":"library/mesen-s/#nintendo-game-boy-color","title":"Nintendo - Game Boy (+ Color)","text":"<ul> <li>Nintendo - Game Boy / Color (Emux GB)</li> <li>Nintendo - Game Boy / Color (Gambatte)</li> <li>Nintendo - Game Boy / Color (Gearboy)</li> <li>Nintendo - Game Boy / Color (SameBoy)</li> <li>Nintendo - Game Boy / Color (TGB Dual)</li> <li>Nintendo - Game Boy Advance (mGBA)</li> <li>Nintendo - Game Boy Advance (VBA-M)</li> <li>Nintendo - SNES / Famicom (bsnes-jg)</li> <li>Nintendo - SNES / Famicom (higan Accuracy)</li> <li>Nintendo - SNES / Famicom (nSide Balanced)</li> </ul>"},{"location":"library/mesen-s/#snes","title":"SNES","text":"<ul> <li>Nintendo - SNES / Famicom (Beetle bsnes)</li> <li>Nintendo - SNES / Famicom (bsnes-jg)</li> <li>Nintendo - SNES / Famicom (bsnes-mercury Accuracy)</li> <li>Nintendo - SNES / Famicom (bsnes-mercury Balanced)</li> <li>Nintendo - SNES / Famicom (bsnes-mercury Performance)</li> <li>Nintendo - SNES / Famicom (bsnes Accuracy)</li> <li>Nintendo - SNES / Famicom (bsnes Balanced)</li> <li>Nintendo - SNES / Famicom (bsnes C++98 (v085))</li> <li>Nintendo - SNES / Famicom (bsnes Performance)</li> <li>Nintendo - SNES / Famicom (higan Accuracy)</li> <li>Nintendo - SNES / Famicom (nSide Balanced)</li> <li>Nintendo - SNES / Famicom (Snes9x)</li> <li>Nintendo - SNES / Famicom (Snes9x 2002)</li> <li>Nintendo - SNES / Famicom (Snes9x 2005 Plus)</li> <li>Nintendo - SNES / Famicom (Snes9x 2005)</li> <li>Nintendo - SNES / Famicom (Snes9x 2010)</li> </ul>"},{"location":"library/mesen/","title":"Nintendo - NES / Famicom (Mesen)","text":""},{"location":"library/mesen/#background","title":"Background","text":"<p>Mesen is a high-accuracy NES and Famicom emulator and NSF player for Windows and Linux.</p> <p>Features</p> <ul> <li>High Accuracy: A lot of effort has gone into making Mesen as accurate as possible.</li> <li>High Compatibility: Over 220 mappers supported (all licensed games supported)</li> <li>NES, Famicom, Famicom Disk System, Dendy, VS System, NSF and NSFe emulation is supported.</li> <li>General: Save States, Rewinding, Movie/Audio Recording, Overclocking, Cheat Codes.</li> <li>Video: Numerous video filters, customizable palettes/overscan, support for HDNes' HD packs.</li> <li>Audio: Stereo effects, per-channel volume and panning, equalizer, etc.</li> <li>Misc: Netplay, 7z/zip support, IPS/BPS patch support, automatic updates, and more!</li> </ul>"},{"location":"library/mesen/#authorlicense","title":"Author/License","text":"<p>The Mesen core has been authored by</p> <ul> <li>M. Bibaud (aka Sour)</li> </ul> <p>The Mesen core is licensed under</p> <ul> <li>GPLv3</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/mesen/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the Mesen core have the following file extensions:</p> <ul> <li>.nes</li> <li>.fds</li> <li>.unf</li> <li>.unif</li> </ul>"},{"location":"library/mesen/#databases","title":"Databases","text":"<p>RetroArch database(s) that are associated with the Mesen core:</p> <ul> <li>Nintendo - Nintendo Entertainment System</li> <li>Nintendo - Family Computer Disk System</li> </ul>"},{"location":"library/mesen/#bios","title":"BIOS","text":"<p>Required or optional firmware files go in the frontend's system directory.</p> Filename Description md5sum disksys.rom Family Computer Disk System BIOS - Required for Family Computer Disk System emulation ca30b50f880eb660a320674ed365ef7a"},{"location":"library/mesen/#features","title":"Features","text":"<p>Frontend-level settings or features that the Mesen core respects.</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 Memory Monitoring (achievements) \u2714 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/mesen/#directories","title":"Directories","text":"<p>The Mesen core's library name is 'Mesen'</p> <p>The Mesen core saves/loads to/from these directories.</p> <p>Frontend's Save directory</p> File Description *.srm Cartridge battery save <p>Frontend's State directory</p> File Description *.state# State <p>Frontend's System directory</p> File Description MesenPalette.pal Custom palette HdPacks/* HD Pack directory"},{"location":"library/mesen/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The Mesen core's core provided FPS is NTSC 60, PAL/Dendy 50</li> <li>The Mesen core's core provided sample rate is 48000 Hz</li> <li>The Mesen core's base width is 256</li> <li>The Mesen core's base height is 240</li> <li>The Mesen core's max width is 256 (higher when using HD Packs)</li> <li>The Mesen core's max height is 240 (higher when using HD Packs)</li> <li>The Mesen core's core provided aspect ratio is dependent on the 'Aspect Ratio' core option.</li> </ul>"},{"location":"library/mesen/#custom-palettes","title":"Custom Palettes","text":"<p>To use custom color palettes in the Mesen core, the 'Palette' core option must be set to Custom and the custom color palette file you want to use must be in RetroArch's system directory.</p> <p>Make sure the custom palette file is named 'MesenPalette.pal'</p> <p>Custom color palettes for the NES can be generated with either of these tools.</p> <ul> <li>Bisqwit's NTSC NES palette generator</li> <li>Drag's NTSC NES palette generator</li> </ul>"},{"location":"library/mesen/#hd-packs","title":"HD packs","text":"<p>Attention</p> <p>There is more HD pack documentation at the official Mesen documentation.</p> <p>To use HD packs, first make sure to turn on the Enable HD Packs core option</p> <p>First, create a folder named 'HdPacks' in RetroArch's System directory.</p> <p>Next, create a folder inside the HdPacks directory that has the same name as the content you're going to load.</p> <p>So, if the content you're loading is Mega Man (USA).nes, the folder should be named 'Mega Man (USA)'.</p> <p>Finally, extract the HD pack content files to the Mega Man (USA) folder.</p> <p>Here's an example of a working HD pack setup done with Mega Man 1 (NES) - 30<sup>th</sup> Anniversary 16-bit Graphic Pack.</p> <p>Pay attention to the file path.</p> <p></p>"},{"location":"library/mesen/#core-options","title":"Core options","text":"<p>The Mesen core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded.</p> <p>Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch.</p> <p>Attention</p> <p>These core option descriptions have been sourced from the official Mesen documentation. Please go there for more information.</p> <ul> <li> <p>NTSC filter [mesen_ntsc_filter] (Disabled/Composite (Blargg)/S-Video (Blargg)/RGB (Blargg)/Monochrome (Blargg)/Bisqwit 2x/Bisqwit 4x/Bisqwit 8x)</p> <p>Selects a filter to apply to the picture.</p> <p>Blargg filters are fast.</p> <p>Bisqwit filters are slower.</p> </li> <li> <p>Palette [mesen_palette] (Default/Composite Direct (by FirebrandX)/Nes Classic/Nestopia (RGB)/Original Hardware (by FirebrandX)/PVM Style (by FirebrandX)/Sony CXA2025AS/Unsaturated v6 (by FirebrandX)/YUV v3 (by FirebrandX)/Custom)</p> <p>Mesen comes with a number of built-in palette options - you can select them from here.</p> </li> <li> <p>Overclock [mesen_overclock] (None/Low/Medium/High/Very High)</p> <p>Use this to overclock or underclock the CPU.</p> </li> </ul> <p>Warning</p> <p>Overclocking can cause issues in some games.</p> <ul> <li> <p>Overclock Type [mesen_overclock_type] (Before NMI (Recommended)/After NMI)</p> <p>Before NMI: Increases the number of scanlines in the PPU, before the NMI signal is triggered at the end of the visible frame. This effectively gives more time for games to perform calculations, which can reduce slowdowns in games. This is the preferred option for overclocking.</p> <p>After NMI: Increases the number of scanlines in the PPU, after the NMI signal is triggered at the end of the visible frame. This effectively gives more time for games to perform calculations, which can reduce slowdowns in games. This option is less compatible and should only be used if the before NMI variation does not work as expected.</p> </li> <li> <p>Region [mesen_region] (Auto/NTSC/PAL/Dendy)</p> <p>When set to Auto, the emulator will try to detect the game\u2019s region (NTSC or PAL) - however, this is not always possible. When there is nothing to suggest a game is for the PAL region (Australia &amp; Europe), the NTSC region (North America &amp; Japan) will be used by default. Dendy is used to mimic a number of different NES clones, in particular, the Dendy, which was a popular clone in Russia.</p> </li> <li> <p>Vertical Overscan [mesen_overscan_vertical] (None/8px/16px)</p> <p>This overscan setting allow you to cut out pixels vertically on any edge of the screen. On a CRT TV, a few pixels on each side of the screen was usually invisible to the player. Because of this, games often have glitches or incorrect palette colors on the edges of the screen \u2013 this is normal and caused by the game itself. Setting a value of 8 or so on each side of the overscan configuration will usually hide most glitches.</p> </li> <li> <p>Horizontal Overscan [mesen_overscan_horizontal] (None/8px/16px)</p> <p>This overscan setting allow you to cut out pixels horizontally on any edge of the screen. On a CRT TV, a few pixels on each side of the screen was usually invisible to the player. Because of this, games often have glitches or incorrect palette colors on the edges of the screen \u2013 this is normal and caused by the game itself. Setting a value of 8 or so on each side of the overscan configuration will usually hide most glitches.</p> </li> <li> <p>Aspect Ratio [mesen_aspect_ratio] (Auto/No Stretching/NTSC/PAL/4:3/16:9)</p> <p>The NES\u2019 internal aspect ratio is almost square (Default (No Stretching)), but it used to be displayed on CRT TVs that had a rectangular picture. To simulate a CRT TV, you can use the Auto option - it will switch between NTSC and PAL aspect ratios depending on the game you are playing. Using anything other than the Default (No Stretching) option may cause pixels to have irregular sizes. You can reduce this effect by using a combination of video filters and the bilinear filtering option.</p> </li> <li> <p>Controller Turbo Speed [mesen_controllerturbospeed] (Fast/Very Fast/Disabled/Slow/Normal)</p> <p>Configure the controller's turbo buttons' speed.</p> </li> <li> <p>Enable HD Packs [mesen_hdpacks] (Off/On)</p> <p>Enables the use of HD packs. Look at the HD packs section for more information.</p> </li> <li> <p>Remove sprite limit [mesen_nospritelimit] (Off/On)</p> <p>The NES can normally only draw up to 8 sprites per line \u2013 this limitation is indirectly responsible for some of the flickering seen in games at times. When this option is enabled, the limit is disabled, allowing up to 64 sprites to be drawn on the same line.</p> </li> <li> <p>Enable fake stereo effect [mesen_fake_stereo] (Off/On)</p> <p>Self-explanatory.</p> </li> <li> <p>Reduce popping on Triangle channel [mesen_mute_triangle_ultrasonic] (Off/On)</p> <p>This option mutes the triangle channel under certain conditions, which prevents it from causing popping sounds.</p> </li> <li> <p>Reduce popping on DMC channel [mesen_reduce_dmc_popping] (Off/On)</p> <p>Similar to the previous option, but for the DMC channel \u2013 this option prevents games from changing the output of the DMC channel too abruptly, which often causes popping sounds.</p> </li> <li> <p>Swap Square channel duty cycles [mesen_swap_duty_cycle] (Off/On)</p> <p>This option is to mimic some older NES clones that had incorrect sound output for both of the square channels. It greatly alters the sound in some games, and shouldn\u2019t be enabled unless you want this behavior.</p> </li> <li> <p>Disable Noise channel mode flag [mesen_disable_noise_mode_flag] (Off/On)</p> <p>Very early Famicom models did not implement this feature, so this option is available to mimic early Famicom consoles. It changes the sound output of the noise channel in some games, and shouldn\u2019t be enabled unless you want this behavior.</p> </li> <li> <p>Screen Rotation [mesen_screenrotation] (None/90 degrees/180 degrees/270 degrees)</p> <p>Rotates the display by the specified angle. This is useful to play games (generally homebrew games) designed for a vertical display.</p> </li> <li> <p>Default power-on state for RAM [mesen_ramstate] (All 0s (Default)/All 1s/Random Values)</p> <p>On a console, the RAM\u2019s state at power on is undetermined and relatively random. This option lets you select Mesen\u2019s behavior when initializing RAM - set all bits to 0, set all bits to 1, or randomize the value of each bit.</p> </li> <li> <p>FDS: Automatically insert disks [mesen_fdsautoinsertdisk] (Off/On)</p> <p>By default, the FDS boots with no disk inserted in the drive. This option makes it so the player does not need to manually insert disk 1, side A manually.</p> </li> <li> <p>FDS: Fast forward while loading [mesen_fdsfastforwardload] (Off/On)</p> <p>FDS games contain a large number of load screens due to their data being stored on floppy drives. Mesen needs to emulate this floppy drive\u2019s speed to ensure accurate emulation. This option makes it so Mesen runs the emulation as fast as it can when a game is loading data from the disk, which greatly reduces the time spent on loading screens.</p> </li> </ul>"},{"location":"library/mesen/#controllers","title":"Controllers","text":"<p>The Mesen core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/mesen/#user-1-2-device-types","title":"User 1 - 2 device types","text":"<ul> <li>None - Input disabled.</li> <li>Auto - Joypad - Automatically selects an input device according to the data in the game database.</li> <li>Standard Controller - Joypad - Manually selects a standard game controller.</li> <li>Zapper - Pointer - Manually selects a Zapper light gun.</li> <li>Power Pad - Joypad - Manually selects a Power Pad peripheral.</li> <li>Arkanoid - Mouse - Manually selects an Arkanoid controller.</li> <li>SNES Controller - Joypad - Manually selects a SNES Controller.</li> <li>SNES Mouse - Mouse - Manually selects a SNES Mouse.</li> </ul>"},{"location":"library/mesen/#user-3-device-types","title":"User 3 device types","text":"<ul> <li>None - Input disabled.</li> <li>Auto - Joypad - Automatically selects an input device according to the data in the game database.</li> <li>Standard Controller - Joypad - Manually selects a standard game controller.</li> </ul>"},{"location":"library/mesen/#user-4-device-types","title":"User 4 device types","text":"<ul> <li>None - Input disabled.</li> <li>Auto - Joypad - Automatically selects an input device according to the data in the game database.</li> <li>Standard Controller - Joypad - Manually selects a standard game controller.</li> </ul>"},{"location":"library/mesen/#user-5-device-types","title":"User 5 device types","text":"<ul> <li>None - Input disabled.</li> <li>Auto - Joypad - Automatically selects an input device according to the data in the game database.</li> <li>Arkanoid - Mouse - Manually selects an Arkanoid controller.</li> <li>Ascii Turbo Fire - None - Manually selects an Ascii Turbo Fire device.</li> <li>Bandai Hypershot - Pointer - Manually selects a Bandai Hypershot light gun.</li> <li>Battle Box - None - Manually selects a Battle Box device.</li> <li>Exciting Boxing - Joypad - Manually selects an Exciting Boxing punching bag.</li> <li>Family Trainer - Joypad - Manually selects a Family Trainer peripheral.</li> <li>Four Player Adapter - None - Manually selects a Four Player Adapter device.</li> <li>Hori Track - Mouse - Manually selects a Hori Track trackball.</li> <li>Konami Hypershot - Joypad - Manually selects a Konami Hypershot controller.</li> <li>Pachinko - Joypad - Manually selects a Pachinko controller.</li> <li>Partytap - Joypad - Manually selects Partytap controllers.</li> </ul>"},{"location":"library/mesen/#other-controllers","title":"Other controllers","text":"<ul> <li>Oeka Kids Tablet - Pointer - The Mesen core will automatically select the Oeka Kids Tablet input device according to the data in the game database. It cannot be manually selected as a device type in RetroArch's controls menu.</li> </ul>"},{"location":"library/mesen/#multitap-support","title":"Multitap support","text":"<p>Multitap support can be activated in the Mesen core by switching User 5's device type to Four Player Adapter.</p>"},{"location":"library/mesen/#controller-tables","title":"Controller tables","text":""},{"location":"library/mesen/#joypad","title":"Joypad","text":"<p>Attention</p> <p>The (FDS) Insert Next Disk and (FDS) Switch Disk Side inputs will NOT do anything while the 'FDS: Automatically insert disks' core option is enabled.</p> <p></p> User Remap descriptors for 'Standard Controller' device type RetroPad Inputs A B Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right Turbo A Turbo B (FDS) Insert Next Disk (FDS) Switch Disk Side (VS) Insert Coin 1 (VS) Insert Coin 2 (Famicom) Microphone User Remap descriptors for 'SNES Controller' device type RetroPad Inputs B Y Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A X L R User Remap descriptors for 'Power Pad' and 'Family Trainer' device types RetroPad Inputs Powerpad B1 Powerpad B3 Powerpad B11 Powerpad B12 Powerpad B9 Powerpad B10 Powerpad B7 Powerpad B8 Powerpad B2 Powerpad B4 Powerpad B5 Powerpad B6 User Remap descriptors for 'Exciting Boxing' device type RetroPad Inputs Left Hook Left Jab Move Left Move Right Right Hook Right Jab Body Straight User Remap descriptors for 'Pachinko' device type RetroPad Inputs Release Trigger Press Trigger User Remap descriptors for 'Partytap' device type RetroPad Inputs Partytap P1 Partytap P3 Partytap P2 Partytap P4 Partytap P5 Partytap P6 RetroPad Inputs Konami Hypershot Jump Run Turbo Jump Turbo Run"},{"location":"library/mesen/#mouse","title":"Mouse","text":"RetroMouse Inputs Arkanoid SNES Mouse Hori Track  Mouse Cursor Arkanoid Movement SNES Mouse Cursor Hori Track Cursor  Mouse 1 Arkanoid Fire SNES Mouse Left Button Hori Track Left Button  Mouse 2 SNES Mouse Right Button Hori Track Right Button"},{"location":"library/mesen/#pointer","title":"Pointer","text":"RetroPointer Inputs Zapper Bandai Hypershot Oeka Kids Tablet  or  Pointer Position Zapper Crosshair Bandai Hypershot Crosshair Oeka Kids Tablet Stylus  Mouse 1 Zapper Fire Bandai Hypershot Fire Oeka Kids Tablet Click/Touch  Mouse 2 Zapper Offscreen Bandai Hypershot Offscreen"},{"location":"library/mesen/#compatibility","title":"Compatibility","text":"<ul> <li>Mesen Mapper Support List</li> </ul>"},{"location":"library/mesen/#external-links","title":"External Links","text":"<ul> <li>Official Mesen Website</li> <li>Official Mesen Documentation</li> <li>Official Mesen Downloads</li> <li>Official Mesen Changelog</li> <li>Libretro Mesen Core info file</li> <li>Official Mesen Github Repository</li> <li>Report Libretro Mesen Core Issues Here</li> <li>Gameplay Videos</li> </ul>"},{"location":"library/mesen/#see-also","title":"See also","text":""},{"location":"library/mesen/#nintendo-family-computer-disk-system","title":"Nintendo - Family Computer Disk System","text":"<ul> <li>Nintendo - NES / Famicom (FCEUmm)</li> <li>Nintendo - NES / Famicom (Nestopia)</li> </ul>"},{"location":"library/mesen/#nintendo-nintendo-entertainment-system","title":"Nintendo - Nintendo Entertainment System","text":"<ul> <li>Nintendo - NES / Famicom (bnes)</li> <li>Nintendo - NES / Famicom (Emux NES)</li> <li>Nintendo - NES / Famicom (FCEUmm)</li> <li>Nintendo - NES / Famicom (Nestopia)</li> <li>Nintendo - NES / Famicom (QuickNES)</li> </ul>"},{"location":"library/meteor/","title":"Nintendo - Game Boy Advance (Meteor)","text":""},{"location":"library/meteor/#background","title":"Background","text":"<p>Meteor is a Gameboy Advance emulator.</p> <p>The Meteor core has been authored by</p> <ul> <li>Philippe Daouadi</li> </ul> <p>The Meteor core is licensed under</p> <ul> <li>GPLv3</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/meteor/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the Meteor core have the following file extensions:</p> <ul> <li>.gba</li> </ul>"},{"location":"library/meteor/#databases","title":"Databases","text":"<p>RetroArch database(s) that are associated with the Meteor core:</p> <ul> <li>Nintendo - Game Boy Advance</li> </ul>"},{"location":"library/meteor/#features","title":"Features","text":"<p>Frontend-level settings or features that the Meteor core respects.</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2715 Core Options \u2714 Memory Monitoring (achievements) \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/meteor/#directories","title":"Directories","text":"<p>The Meteor core's internal core name is 'Meteor GBA'</p> <p>The Meteor core saves/loads to/from these directories.</p> <p>Frontend's Save directory</p> <ul> <li>'content-name'.srm (Cartridge battery save)</li> </ul> <p>Frontend's State directory</p> <ul> <li>'content-name'.state# (State)</li> </ul>"},{"location":"library/meteor/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The Meteor core's core provided FPS is 59.7275005696</li> <li>The Meteor core's core provided sample rate is 44100 Hz</li> <li>The Meteor core's core provided aspect ratio is 3/2</li> </ul>"},{"location":"library/meteor/#controllers","title":"Controllers","text":"<p>The Meteor core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/meteor/#user-1-device-types","title":"User 1 device types","text":"<ul> <li>None - Doesn't disable input. There's no reason to switch to this.</li> <li>RetroPad - Joypad - Stay on this.</li> <li>RetroPad w/Analog - Joypad - Same as RetroPad. There's no reason to switch to this.</li> </ul>"},{"location":"library/meteor/#controller-tables","title":"Controller tables","text":""},{"location":"library/meteor/#joypad","title":"Joypad","text":"User 1 Remap descriptors RetroPad Inputs B Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A L R"},{"location":"library/meteor/#compatibility","title":"Compatibility","text":"<p>Awaiting description.</p>"},{"location":"library/meteor/#external-links","title":"External Links","text":"<ul> <li>Official Meteor Github Repository</li> <li>Libretro Meteor Core info file</li> <li>Libretro Meteor Github Repository</li> <li>Report Libretro Meteor Core Issues Here</li> </ul>"},{"location":"library/meteor/#see-also","title":"See also","text":""},{"location":"library/meteor/#nintendo-game-boy-advance","title":"Nintendo - Game Boy Advance","text":"<ul> <li>Nintendo - Game Boy Advance (Beetle GBA)</li> <li>Nintendo - Game Boy Advance (gpSP)</li> <li>Nintendo - Game Boy Advance (mGBA)</li> <li>Nintendo - Game Boy Advance (TempGBA)</li> <li>Nintendo - Game Boy Advance (VBA-M)</li> <li>Nintendo - Game Boy Advance (VBA Next)</li> </ul>"},{"location":"library/mgba/","title":"Nintendo - Game Boy Advance (mGBA)","text":""},{"location":"library/mgba/#background","title":"Background","text":"<p>mGBA is an emulator for running Game Boy Advance games. It aims to be faster and more accurate than many existing Game Boy Advance emulators, as well as adding features that other emulators lack. It also supports Game Boy and Game Boy Color games.</p> <p>The mGBA core has been authored by</p> <ul> <li>endrift</li> </ul> <p>The mGBA core is licensed under</p> <ul> <li>MPLv2.0</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/mgba/#bios","title":"BIOS","text":"<p>Required or optional firmware files go in the frontend's system directory.</p> <p>Warning</p> <p>In order for the BIOS to be used, the 'Use BIOS file if found' core option must be set to On.</p> Filename Description md5sum gba_bios.bin Game Boy Advance BIOS - Optional a860e8c0b6d573d191e4ec7db1b1e4f6 gb_bios.bin Game Boy BIOS - Optional 32fbbd84168d3482956eb3c5051637f5 gbc_bios.bin Game Boy Color BIOS - Optional dbfce9db9deaa2567f6a84fde55f9680 sgb_bios.bin Super Game Boy BIOS - Optional d574d4f9c12f305074798f54c091a8b4"},{"location":"library/mgba/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the mGBA core have the following file extensions:</p> <ul> <li>.gb</li> <li>.gbc</li> <li>.gba</li> </ul> <p>RetroArch database(s) that are associated with the [Core name] core:</p> <ul> <li>Nintendo - Game Boy</li> <li>Nintendo - Game Boy Color</li> <li>Nintendo - Game Boy Advance</li> </ul>"},{"location":"library/mgba/#features","title":"Features","text":"<p>Frontend-level settings or features that the mGBA core respects.</p> Feature Supported Restart \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2715 Core Options \u2714 Memory Monitoring (achievements) \u2714 RetroArch Cheats \u2714 RetroArch SaveRAM Autosave Interval support \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2714 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/mgba/#directories","title":"Directories","text":"<p>The mGBA core's library name is 'mGBA'</p> <p>The mGBA core saves/loads to/from these directories.</p> <p>Frontend's Save directory</p> File Description *.srm Cartridge battery save <p>Frontend's State directory</p> File Description *.state# State"},{"location":"library/mgba/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The mGBA core's core provided FPS is [FPS]</li> <li>The mGBA core's core provided sample rate is 32768 Hz</li> <li>The mGBA core's base width is [Base width]</li> <li>The mGBA core's base height is [Base height]</li> <li>The mGBA core's max width is [Max width]</li> <li>The mGBA core's max height is [Max height]</li> <li>The mGBA core's core provided aspect ratio is [Aspect ratio]</li> </ul>"},{"location":"library/mgba/#core-options","title":"Core options","text":"<p>The mGBA core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded.</p> <p>Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch.</p> <ul> <li> <p>Solar sensor level [mgba_solar_sensor_level] (0|1|2|3|4|5|6|7|8|9|10)</p> <p>Can be used by games that employed the use of a solar sensor on their cartridges. E.g.: Boktai games.</p> </li> <li> <p>Allow opposing directional input [mgba_allow_opposing_directions] (OFF|ON)</p> <p>Allows opposing directional inputs. Up with Down. Right with Left.</p> </li> <li> <p>Game Boy model (requires restart) [mgba_gb_model] (Autodetect|Game Boy|Super Game Boy|Game Boy Color|Game Boy Advance)</p> <p>Runs loaded content with a specific Game Boy model.</p> <p>Autodetect will select the most appropriate model for the current game.</p> </li> <li> <p>Use BIOS file if found [mgba_use_bios] (ON|OFF)</p> <p>Uses BIOS present in RetroArch's system directory. Look at the BIOS section for more information.</p> </li> <li> <p>Skip BIOS intro [mgba_skip_bios] (OFF|ON)</p> <p>The 'Use BIOS file if found' core option must be set to On for proper operation.</p> <p>Skips the BIOS intro when a BIOS is present in RetroArch's system directory is used.</p> </li> </ul> Skip BIOS intro - Off <p></p> <ul> <li> <p>Use Super Game Boy borders (requires restart) [mgba_sgb_borders] (ON|OFF)</p> <p>Display Super Game Boy borders for Super Game Boy enhanced games.</p> </li> <li> <p>Idle loop removal [mgba_idle_optimization] (Remove Known|Detect and Remove|Don't Remove)</p> <p>Optimizes game performance by driving the GBA's CPU less hard.</p> <p>Use this on low-powered hardware if its struggling with game performance.</p> </li> <li> <p>Frameskip [mgba_frameskip] (0|1|2|3|4|5|6|7|8|9|10)</p> <p>Choose how much frames should be skipped to improve performance at the expense of visual smoothness.</p> </li> </ul>"},{"location":"library/mgba/#rumble","title":"Rumble","text":"<p>Rumble only works in the mGBA core when</p> <ul> <li>The content being ran has rumble support. (e.g. Cartridges with a Rumble Pak)</li> <li>The frontend being used has rumble support.</li> <li>The joypad device being used has rumble support.</li> </ul>"},{"location":"library/mgba/#joypad","title":"Joypad","text":"User 1 input descriptors RetroPad Inputs B Turbo B Select Start Up Down Left Right A Turbo A L R Turbo L Turbo R Darken Solar Sensor Brighten Solar Sensor"},{"location":"library/mgba/#compatibility","title":"Compatibility","text":"<p>Please file game bugs on the issue tracker here</p>"},{"location":"library/mgba/#external-links","title":"External Links","text":"<ul> <li>Official mGBA Website</li> <li>Official mGBA Github Repository</li> <li>Libretro mGBA Core info file</li> <li>Libretro mGBA Github Repository</li> <li>Report Libretro mGBA Core Issues Here</li> <li>Gameplay Videos</li> </ul>"},{"location":"library/mgba/#see-also","title":"See also","text":""},{"location":"library/mgba/#nintendo-game-boy-advance","title":"Nintendo - Game Boy Advance","text":"<ul> <li>Nintendo - Game Boy Advance (Beetle GBA)</li> <li>Nintendo - Game Boy Advance (gpSP)</li> <li>Nintendo - Game Boy Advance (Meteor)</li> <li>Nintendo - Game Boy Advance (VBA Next)</li> <li>Nintendo - Game Boy Advance (VBA-M)</li> </ul>"},{"location":"library/mgba/#nintendo-game-boy-color","title":"Nintendo - Game Boy (+ Color)","text":"<ul> <li>Nintendo - Game Boy / Color (Emux GB)</li> <li>Nintendo - Game Boy / Color (Gambatte)</li> <li>Nintendo - Game Boy / Color (Gearboy)</li> <li>Nintendo - Game Boy / Color (SameBoy)</li> <li>Nintendo - Game Boy / Color (TGB Dual)</li> <li>Nintendo - SNES / Famicom (higan Accuracy)</li> <li>Nintendo - SNES / Famicom (nSide Balanced)</li> <li>Nintendo - SNES / Famicom (Mesen-S)</li> </ul>"},{"location":"library/microw8/","title":"MicroW8","text":""},{"location":"library/microw8/#background","title":"Background","text":"<ul> <li>MicroW8 is a WebAssembly based fantasy console usable for size-coding or larger games.</li> </ul> <p>The MicroW8 core has been authored by</p> <ul> <li>Dennis Ranke</li> <li>Kivutar</li> </ul> <p>The MicroW8 core is licensed under</p> <ul> <li>Unlicense</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/microw8/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the MicroW8 core have the following file extensions:</p> <ul> <li>.uw8</li> <li>.wasm</li> </ul> <p>RetroArch database(s) that are associated with the MicroW8 core:</p> <ul> <li>MicroW8</li> </ul>"},{"location":"library/microw8/#features","title":"Features","text":"<p>Frontend-level settings or features that the MicroW8 core respects.</p> Feature Supported Restart \u2714 Saves \u2715 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2715 Memory Monitoring (achievements) \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/microw8/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The MicroW8 core's core provided FPS is 60.</li> <li>The MicroW8 core's core provided sample rate is 44100.</li> <li>The MicroW8 core's base width is 320.</li> <li>The MicroW8 core's base height is 240.</li> <li>The MicroW8 core's max width is 320.</li> <li>The MicroW8 core's max height is 240.</li> <li>The MicroW8 core's core provided aspect ratio is 4/3.</li> </ul>"},{"location":"library/microw8/#user-1-device-types","title":"User 1 device types","text":"<p>The MicroW8 core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p> <ul> <li>None - Doesn't disable input.</li> <li>RetroPad</li> </ul>"},{"location":"library/microw8/#joypad","title":"Joypad","text":"RetroPad Inputs MicroW8 inputs D-Pad Up D-Pad Down D-Pad Left D-Pad Right Button X Button Y Button A Button B"},{"location":"library/microw8/#external-links","title":"External Links","text":"<ul> <li>Official Website</li> <li>Libretro MicroW8 core info file</li> <li>Libretro MicroW8 repository</li> <li>Report Libretro MicroW8 core issues here</li> <li>MicroW8 games</li> </ul>"},{"location":"library/minivmac/","title":"Macintosh (minivmac)","text":""},{"location":"library/minivmac/#background","title":"Background","text":"<p>Minivmac is the build system for Mini vMac, a miniature Macintosh emulator.</p> <p>Further information may be found at \"https://www.gryphel.com/c/minivmac/\".</p>"},{"location":"library/minivmac/#authorlicense","title":"Author/License","text":"<p>The minivmac core has been authored by</p> <ul> <li>phcoder</li> <li>rtype</li> </ul> <p>The minivmac core is licensed under</p> <ul> <li></li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/minivmac/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the minivmac core have the following file extensions:</p> <ul> <li>.dsk</li> <li>.img</li> <li>.zip</li> <li>.hvf</li> <li>.cmd</li> </ul>"},{"location":"library/minivmac/#databases-wip","title":"Databases WIP","text":"<p>RetroArch database(s) that are associated with the minivmac core:</p>"},{"location":"library/minivmac/#bios","title":"BIOS","text":"<p>Required or optional firmware files go in the frontend's system directory.</p> Filename Description md5sum MacII.rom 66223BE1497460F1E60885EEB35E03CC"},{"location":"library/minivmac/#features","title":"Features","text":"<p>Frontend-level settings or features that the minivmac core respects.</p> Feature Supported Restart \u2715 Screenshots \u2714 Saves \u2715 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2714 Memory Monitoring (achievements) \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/minivmac/#directories","title":"Directories","text":"<p>The minivmac core's library name is 'minivmac'</p> <p>The minivmac core saves/loads to/from these directories.</p>"},{"location":"library/minivmac/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The minivmac core's core provided FPS is 13.63.</li> <li>The minivmac core's core provided sample rate is 22255 Hz.</li> <li>The minivmac core's base width is 1440.</li> <li>The minivmac core's base height is 1080.</li> <li>The minivmac core's core provided aspect ratio is 4/3.</li> </ul>"},{"location":"library/minivmac/#core-options","title":"Core options","text":"<p>The minivmac core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded.</p> <p>Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch.</p> <ul> <li> <p>Status Bar [minivmac_Statusbar] (ON|OFF)</p> </li> <li> <p>Keyboard Type [minivmac_kbdtype] (Callback|Poll)</p> </li> </ul>"},{"location":"library/minivmac/#controllers","title":"Controllers","text":"<p>The minivmac core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/minivmac/#user-1-device-types","title":"User 1 device types","text":"<ul> <li>None - Doesn't disable input. There's no reason to switch to this.</li> <li>RetroPad - Joypad</li> <li>Minivmac Joystick - Joypad - Awaiting description.</li> <li>Minivmac Keyboard - Keyboard inputs are always active. Has keymapper support.</li> </ul>"},{"location":"library/minivmac/#controller-tables","title":"Controller tables","text":""},{"location":"library/minivmac/#keyboard","title":"Keyboard","text":"RetroKeyboard Inputs RetroKeyboard Keyboard Backspace BACKSPACE Keyboard Tab TAB Keyboard Return RETURN Keyboard Pause PAUSE Keyboard Escape ESCAPE Keyboard Space SPACE Keyboard Quote ' COLON Keyboard Comma , COMMA Keyboard Minus - NEGATIVE Keyboard Period . PERIOD Keyboard Slash / DIVIDE Keyboard 0 0 Keyboard 1 1, Player 1 Coleco #0 Keyboard 2 2, Player 1 Coleco #9 Keyboard 3 3, Player 2 Coleco #0 Keyboard 4 4, Player 2 Coleco #9 Keyboard 5 5 Keyboard 6 6 Keyboard 7 7 Keyboard 8 8 Keyboard 9 9 Keyboard Semicolon ; SEMICOLON Keyboard Equals = CIRCUMFLEX Keyboard Left Bracket [ LEFT BRACKET Keyboard Backslash \\ BACKSLASH (YEN) Keyboard Right Bracket ] RIGHT BRACKET Keyboard Backquote ` AT Keyboard a A Keyboard b B Keyboard c C Keyboard d D Keyboard e E Keyboard f F Keyboard g G Keyboard h H Keyboard i I Keyboard j J Keyboard k K Keyboard l L Keyboard m M Keyboard n N Keyboard o O Keyboard p P Keyboard q Q Keyboard r R Keyboard s S Keyboard t T Keyboard u U Keyboard v V Keyboard w W Keyboard x X Keyboard y Y Keyboard z Z Keyboard Delete DELETE Keyboard Keypad 0 NUMPAD 0 Keyboard Keypad 1 NUMPAD 1 Keyboard Keypad 2 NUMPAD 2 Keyboard Keypad 3 NUMPAD 3 Keyboard Keypad 4 NUMPAD 4 Keyboard Keypad 5 NUMPAD 5 Keyboard Keypad 6 NUMPAD 6 Keyboard Keypad 7 NUMPAD 7 Keyboard Keypad 8 NUMPAD 8 Keyboard Keypad 9 NUMPAD 9 Keyboard Keypad Period . NUMPAD COMMA Keyboard Keypad Divide / NUMPAD DIVIDE Keyboard Keypad Multiply * NUMPAD MULTIPLY Keyboard Keypad Minus - NUMPAD SUBTRACTION Keyboard Keypad Plus + NUMPAD ADD Keyboard Keypad Enter NUMPAD PERIOD Keyboard Up UP Keyboard Down DOWN Keyboard Right RIGHT Keyboard Left LEFT Keyboard Insert INSERT Keyboard Home CLS Keyboard End STOP Keyboard Page Up SELECT Keyboard F1 F1 Keyboard F2 F2 Keyboard F3 F3 Keyboard F4 F4 Keyboard F5 F5 Keyboard Caps Lock CAPS Keyboard Right Shift RIGHT SHIFT Keyboard Left Shift LEFT SHIFT Keyboard Left Control CONTROL Keyboard Left Alt GRAPH Keyboard Print PRINT <p>Supported combinations</p>"},{"location":"library/minivmac/#external-links","title":"External Links","text":"<ul> <li>Official minivmac Website</li> <li>minivmac Repository</li> <li>Libretro minivmac Core info file</li> <li>Libretro minivmac Github Repository</li> <li>Report Libretro minivmac Core Issues Here</li> </ul>"},{"location":"library/mkxp-z/","title":"RPG Maker XP/VX/VX Ace (mkxp-z)","text":""},{"location":"library/mkxp-z/#background","title":"Background","text":"<p>Open-source cross-platform player for (some) RPG Maker XP / VX / VX Ace games. A very heavily modified fork of mkxp. RGSS on steroids with a stupid name.</p>"},{"location":"library/mkxp-z/#authorlicense","title":"Author/License","text":"<p>The mkxp-z core has been authored by:</p> <ul> <li>mkxp-z</li> </ul> <p>The mkxp-z core is licensed under:</p> <ul> <li>GPLv2</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/mkxp-z/#requirements","title":"Requirements","text":"<p>Currently, the mkxp-z core requires hardware that supports OpenGL 2.0 or later or OpenGL ES 2.0 or later.</p>"},{"location":"library/mkxp-z/#bios","title":"BIOS","text":"<p>Some RPG Maker games require RTPs (Run Time Packages), which are stock assets intended to be shared between games.</p> <p>There is one standard RTP for each RPG Maker version supported by the mkxp-z core (XP, VX, VX Ace), which can be downloaded from https://www.rpgmakerweb.com/run-time-package.</p> <p>The RTPs are distributed as Windows installers and need to be extracted before they can be used by the mkxp-z core. They can be extracted on many different operating systems using innoextract. The installers are also runnable in Wine, although innoextract is more convenient.</p> <p>Once extracted, the RTP files should consist of a directory which contains two subdirectories named \"Audio\" and \"Graphics\" and possibly other files and subdirectories. The directory that contains the \"Audio\" and \"Graphics\" subdirectories should be renamed to \"Standard\" (for RPG Maker XP), \"RPGVX\" (for RPG Maker VX) or \"RPGVXAce\" (for RPG Maker VX Ace) and placed into the \"mkxp-z/RTP\" subdirectory of the frontend's system directory. If done correctly, the directory structure should look like this:</p> <pre><code>[system directory]\n\u2514\u2500\u2500 mkxp-z\n    \u2514\u2500\u2500 RTP\n        \u251c\u2500\u2500 RPGVX\n        \u2502\u00a0\u00a0 \u251c\u2500\u2500 Audio\n        \u2502\u00a0\u00a0 \u251c\u2500\u2500 Fonts\n        \u2502\u00a0\u00a0 \u251c\u2500\u2500 Game.ico\n        \u2502\u00a0\u00a0 \u251c\u2500\u2500 Graphics\n        \u2502\u00a0\u00a0 \u251c\u2500\u2500 RGSS200J.dll\n        \u2502\u00a0\u00a0 \u251c\u2500\u2500 RGSS202E.dll\n        \u2502\u00a0\u00a0 \u2514\u2500\u2500 RGSS202J.dll\n        \u251c\u2500\u2500 RPGVXAce\n        \u2502\u00a0\u00a0 \u251c\u2500\u2500 Audio\n        \u2502\u00a0\u00a0 \u251c\u2500\u2500 Fonts\n        \u2502\u00a0\u00a0 \u251c\u2500\u2500 Game.ico\n        \u2502\u00a0\u00a0 \u2514\u2500\u2500 Graphics\n        \u2514\u2500\u2500 Standard\n            \u251c\u2500\u2500 Audio\n            \u251c\u2500\u2500 Game.ico\n            \u2514\u2500\u2500 Graphics\n</code></pre> <p>The three files named Game.ico and the .dll files listed in the above directory tree are not required by the mkxp-z core. Feel free to delete them if you want.</p>"},{"location":"library/mkxp-z/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the mkxp-z core have the following file extensions (see the Usage section for instructions on how to load games):</p> <ul> <li>.ini</li> <li>.json</li> <li>.rxproj</li> <li>.rvproj</li> <li>.rvproj2</li> <li>.mkxp</li> <li>.mkxpz</li> <li>.zip</li> <li>.7z</li> </ul> <p>RetroArch database(s) that are associated with the mkxp-z core:</p> <ul> <li>RPG Maker</li> <li>RPG Maker thumbnails</li> </ul>"},{"location":"library/mkxp-z/#features","title":"Features","text":"<p>Frontend-level settings or features that the mkxp-z core respects:</p> Feature Supported Restart \u2714 Saves \u2714 States \u2714 Rewind \u2714 * Netplay \u2714 * Core Options \u2714 Memory Monitoring (achievements) \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2714 Language \u2714 Crop Overscan \u2715 LEDs \u2715 <p>* Because RetroArch does not currently support rewind or netplay with cores that use threaded audio, rewind and netplay currently require disabling the \"Threaded Audio\" core option. This core option is enabled by default for better performance and for closer similarity to the original RPG Maker runtimes, which also use threaded audio.</p>"},{"location":"library/mkxp-z/#directories","title":"Directories","text":"<p>The mkxp-z core's library name is 'mkxp-z'</p> <p>The mkxp-z core saves/loads to/from these directories.</p> <p>Frontend's Save directory</p> Directory Description mkxp-z/Saves/[game title] This is the directory where the game's save files are saved to. The exact contents of the directory vary depending on the specific game being played. <p>Frontend's System directory</p> Directory Description mkxp-z/Fonts Any fonts that the game uses that are not found in the game files will be loaded from here as a fallback. Supported file extensions for fonts are .otf and .ttf. The names of the font files do not matter since the mkxp-z core matches fonts based on the font family name stored in the file. mkxp-z/RTP This is where RTPs are loaded from. See the BIOS section for more details."},{"location":"library/mkxp-z/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The mkxp-z core's core provided FPS is 40 (RPG Maker XP) or 60 (RPG Maker VX, RPG Maker VX Ace).</li> <li>The mkxp-z core's core provided sample rate is 44100 hertz.</li> <li>The mkxp-z core's base width is 640 (RPG Maker XP) or 544 (RPG Maker VX, RPG Maker VX Ace).</li> <li>The mkxp-z core's base height is 480 (RPG Maker XP) or 416 (RPG Maker VX, RPG Maker VX Ace).</li> <li>The mkxp-z core's max width is 640 (RPG Maker XP) or 544 (RPG Maker VX, RPG Maker VX Ace).</li> <li>The mkxp-z core's max height is 480 (RPG Maker XP) or 416 (RPG Maker VX, RPG Maker VX Ace).</li> <li>The mkxp-z core's core provided aspect ratio is 4:3 (RPG Maker XP) or 17:13 (RPG Maker VX, RPG Maker VX Ace).</li> </ul>"},{"location":"library/mkxp-z/#usage","title":"Usage","text":"<p>There are three ways to load games using the mkxp-z core:</p> <ul> <li>Load the Game.ini or mkxp.json.</li> <li>Create an empty file with the file extension .mkxp in the same directory as Game.ini and/or mkxp.json, and load that. This is intended to make it easier to deal with save states in RetroArch, since RetroArch's save states are named after the file you load as the game, so if you load Game.ini or mkxp.json, all the save states for every game will be named \"Game\" or \"mkxp\", which is really inconvenient.</li> <li>Put the game into a zip or 7z archive with file extension .mkxpz, .zip or .7z and load that. Please note that the files inside the zip or 7z archive should be uncompressed if possible, especially .rgssad/.rgss2a/.rgss3a and .otf/.ttf files inside the archive, or the game will lag quite a bit from trying to seek compressed files. The game will still run, though, just very slowly.</li> </ul> <p>There is currently no way to load preload scripts or postload scripts. Support for preload/postload scripts will be added in the future.</p>"},{"location":"library/mkxp-z/#core-options","title":"Core options","text":"<p>The mkxp-z core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded.</p> <p>Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch.</p> <ul> <li> <p>Runtime: RGSS Version (Restart) [mkxp-z_rgssVersion] (inherit|default|1|2|3)</p> <p>Specify the RGSS version to run under. By default, mkxp will try to guess the required version based on the game files. If this fails, the version defaults to 1. Changes will take effect after the core is reset.</p> </li> <li> <p>Runtime: Save State Size (Restart) [mkxp-z_saveStateSize] (64|66|68|70|72|74|76|78|80|82|84|86|88|90|92|94|96|98|100|102|104|106|108|110|112|114|116|118|120|122|124|126|128|132|136|140|144|148|152|156|160|164|168|172|176|180|184|188|192|196|200|204|208|212|216|220|224|228|232|236|240|244|248|252|256|264|272|280|288|296|304|312|320|328|336|344|352|360|368|376|384|392|400|408|416|424|432|440|448|456|464|472|480|488|496|504|512|528|544|560|576|592|608|624|640|656|672|688|704|720|736|752|768|784|800|816|832|848|864|880|896|912|928|944|960|976|992)</p> <p>Maximum size of each save state, in mebibytes. If the game uses more than this much memory, save state creation will fail. Changes to this setting will not take effect until the core is unloaded.</p> </li> <li> <p>Video: Subimage Fix [mkxp-z_subImageFix] (inherit|default|enabled|disabled)</p> <p>Work around buggy graphics drivers which don't properly synchronize texture access, most apparent when text doesn't show up or the map tileset doesn't render at all. (default: enabled for systems using OpenGL ES, disabled on other systems)</p> </li> <li> <p>Video: Framebuffer Blitting [mkxp-z_enableBlitting] (inherit|default|enabled|disabled)</p> <p>Enable framebuffer blitting if the driver is capable of it. Some drivers carry buggy implementations of this functionality, so disabling it can be used as a workaround. (default: disabled on Windows, enabled on other systems)</p> </li> <li> <p>Audio: Threaded Audio (Restart) [mkxp-z_threadedAudio] (enabled|disabled)</p> <p>Use a worker thread for rendering the audio instead of rendering in the main thread, if possible. Reduces audio crackling, especially on systems with slow file system access speed. Changes to this setting will not take effect until the game is closed.</p> </li> <li> <p>Audio: MIDI Chorus [mkxp-z_midiChorus] (inherit|enabled|disabled)</p> <p>Activate \"chorus\" effect for midi playback.</p> </li> <li> <p>Audio: MIDI Reverb [mkxp-z_midiReverb] (inherit|enabled|disabled)</p> <p>Activate \"reverb\" effect for midi playback.</p> </li> <li> <p>Audio: SE Source Count (Restart) [mkxp-z_SESourceCount] (6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|25|26|27|28|29|30|31|32|33|34|35|36|37|38|39|40|41|42|43|44|45|46|47|48|49|50|51|52|53|54|55|56|57|58|59|60|61|62|63|64)</p> <p>Number of OpenAL sources to allocate for SE playback. If there are a lot of sounds playing at the same time and audibly cutting each other off, try increasing this number. Changes will take effect after the core is reset. (if this value is also set in the game's mkxp.json, the maximum of the value set here and the value in mkxp.json will be used)</p> </li> </ul>"},{"location":"library/mkxp-z/#joypad","title":"Joypad","text":"RetroPad Inputs RGSS Inputs Input::C Input::B Input::A Input::X Input::UP Input::DOWN Input::LEFT Input::RIGHT Input::L Input::R Input::SHIFT Input::CTRL Input::Y Input::Z Input::ALT  X Input::LEFT and Input::RIGHT  Y Input::UP and Input::DOWN"},{"location":"library/mkxp-z/#mouse","title":"Mouse","text":"RetroMouse Inputs RGSS Inputs  Mouse Cursor Input.mouse_x and Input.mouse_y  Mouse 1 Input::MOUSELEFT  Mouse 2 Input::MOUSERIGHT  Mouse 3 Input::MOUSEMIDDLE Mouse 4 Input::MOUSEX1 Mouse 5 Input::MOUSEX2 Wheel Up Input.scroll_v Wheel Down Input.scroll_v"},{"location":"library/mkxp-z/#external-links","title":"External Links","text":"<ul> <li>mkxp-z GitHub Repository</li> <li>Libretro mkxp-z Core info file</li> <li>Report Libretro mkxp-z Core Issues Here</li> </ul>"},{"location":"library/mkxp-z/#related-cores","title":"(Related cores)","text":"<ul> <li>RPG Maker 2000/2003 (EasyRPG)</li> </ul>"},{"location":"library/mr_boom/","title":"Mr.Boom (Bomberman)","text":""},{"location":"library/mr_boom/#background","title":"Background","text":"<p>Mr.Boom is an up to 8 player Bomberman clone ported to the libretro API.</p> <p>The goal of the game is to bomb away your enemies and other players.</p> <p>The Mr.Boom core has been authored by</p> <ul> <li>Remdy Software</li> </ul> <p>The Mr.Boom core is licensed under</p> <ul> <li>MIT</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/mr_boom/#extensions","title":"Extensions","text":"<p>The Mr.Boom core does not feature extension use. Just load and start the core.</p>"},{"location":"library/mr_boom/#features","title":"Features","text":"Feature Supported Saves \u2715 States \u2714 Rewind \u2714 Netplay \u2714 Memory Monitoring (achievements) \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controllers \u2714 Remapping \u2715 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 <p>The Mr.Boom core's directory name is 'Mr.Boom'</p> <p>Save states are saved/loaded to and from where state files are stored.</p>"},{"location":"library/mr_boom/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The Mr. Boom core's core provided FPS is 60</li> <li>The Mr. Boom core's core provided sample rate is 48000 Hz</li> <li>The Mr. Boom core's core provided base width is 320</li> <li>The Mr. Boom core's core provided base height is 200</li> <li>The Mr. Boom core's core provided aspect ratio is 8/5 (native), 4/3 or 16/9</li> </ul>"},{"location":"library/mr_boom/#core-options","title":"Core options","text":"<p>The Mr.Boom core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded.</p> <ul> <li> <p>Team mode (Selfie/Color/Sex): Team mode color.</p> </li> <li> <p>Monsters (Off/On): Awaiting description. Enable or disable monsters.</p> </li> </ul> Monsters - On <p></p> Monsters - Off <p></p> <ul> <li>Drop bomb autofire (Off/On): Enables Drop bomb autofire mode. Holding down the Drop bomb button will repeatedly use the Drop bomb action. (Potentially useful when used in conjunction with certain powerups)</li> </ul>"},{"location":"library/mr_boom/#controllers","title":"Controllers","text":"<p>The Mr.Boom core supports the following controller setting(s), bolded controller settings are the default for the specified user(s):</p>"},{"location":"library/mr_boom/#user-1-16-device-types","title":"User 1 - 16 Device Type(s)","text":"<ul> <li> <p>RetroPad - Joypad with analog</p> </li> <li> <p>RetroPad w/Analog - There is no reason to switch to this.</p> </li> </ul>"},{"location":"library/mr_boom/#controllers-graph","title":"Controllers graph","text":"RetroPad Inputs Mr.Boom core inputs Drop Bomb/Join game Add a bomberman bot (while in the join game screen) Start game Up/Push bomb Down/Push bomb Left/Push bomb Right/Push bomb Detonate bomb (when you have the Remote control power)/Join game Jump (while riding a Kangaroo)/Join game)"},{"location":"library/mr_boom/#external-links","title":"External Links","text":"<ul> <li>Libretro Mr.Boom Core info file</li> <li>Libretro Mr.Boom Repository</li> <li>Report Core Issues Here</li> <li>Official Website</li> <li>Upstream Repository</li> </ul>"},{"location":"library/mu/","title":"Palm OS (Mu)","text":""},{"location":"library/mu/#background","title":"Background","text":"<p>Mu is the first Palm OS emulator capable of actually playing Palm games. It is currently capable of playing most 160\u00d7160 Palm OS 4 software perfectly. There are a few hardware abstraction glitches and sound FIFO inaccuracies but other than that the device works and the audio plays normally, with no hacks done to the OS.</p> <p>The Mu core has been authored by:</p> <ul> <li>guicrith / meepingsnesroms; Stephanie Gawroriski (Xer Shadow Tail)</li> </ul> <p>The Mu core is licensed under:</p> <ul> <li>CC BY-NC 3.0 US (Non-commercial)</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/mu/#bios","title":"BIOS","text":"<p>Required or optional firmware files go in the frontend's system directory:</p> Filename Description md5sum <code>palmos40-en-m500.rom</code> Palm OS 4.0 for m500 <code>f50e4d5e4d98dc831f2c34a9107651eb</code> <code>palmos41-en-m515.rom</code> Palm OS 4.1 for m515 <code>83cb1d1c76e568b916dc2e7c0bf669f6</code> <code>palmos52-en-t3.rom</code> Palm OS 5.2 for Tungsten T3 <code>de46ec84d9aabf655eabdf9b00a3845d</code> <code>bootloader-dbvz.rom</code> <code>9da101cd2317830649a31f8fa46debec</code> <p>The BIOS file corresponding to the selected model is required, default is the m515.</p>"},{"location":"library/mu/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the Mu core have the following file extensions:</p> <ul> <li><code>.prc</code>, <code>.pqa</code>, <code>.pdb</code></li> <li><code>.zip</code></li> <li><code>.img</code> - image file for the MMC card</li> </ul> <p>RetroArch database(s) that are associated with the Mu core: none yet.</p>"},{"location":"library/mu/#features","title":"Features","text":"<p>Frontend-level settings or features that the Mu core respects:</p> Feature Supported Restart \u2714 Saves \u2715 States \u2714 Rewind - Netplay - Core Options \u2714 Memory Monitoring (achievements) \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls - Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2714"},{"location":"library/mu/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The Mu core's core provided FPS is 60</li> <li>The Mu core's core provided sample rate is 48000</li> <li>The Mu core's base width is 160</li> <li>The Mu core's base height is 220</li> <li>The Mu core's max width is 320</li> <li>The Mu core's max height is 480</li> <li>The Mu core's core provided aspect ratio is 8:11</li> </ul>"},{"location":"library/mu/#core-options","title":"Core options","text":"<p>The Mu core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded.</p> <p>Core has to be closed for all settings to be applied on next launch.</p> <ul> <li>CPU Speed (1.0|1.5|2.0|2.5|3.0|0.5)</li> <li>Force Match System Clock (disabled|enabled)</li> <li>Ignore Invalid Behavior (disabled|enabled)</li> <li>Use Left Joystick As Mouse (disabled|enabled)</li> <li>Disable Graffiti Area (disabled|enabled)</li> <li>OS Version (Palm m515/Palm OS 4.1|Tungsten T3/Palm OS 5.2.1|Tungsten T3/Palm OS 6.0|Palm m500/Palm OS 4.0)</li> </ul>"},{"location":"library/mu/#joypad","title":"Joypad","text":"RetroPad Inputs Palm OS Inputs To Do List Date Book D-Pad Center Power D-Pad Up D-Pad Down D-Pad Left (OS5 only) D-Pad Right (OS5 only) Note Pad Address Book Touchscreen click/tap Touchscreen movement"},{"location":"library/mu/#pointer","title":"Pointer","text":"RetroPointer Inputs Palm OS Inputs  or  Pointer Position Touchscreen movement  or  Pointer Pressed Touchscreen click/tap"},{"location":"library/mu/#external-links","title":"External Links","text":"<ul> <li>Original Mu Website</li> <li>Original Mu Repository</li> <li>Libretro Mu Core info file</li> <li>Libretro Mu Repository</li> <li>Report Libretro Mu Core Issues Here</li> </ul>"},{"location":"library/mupen64plus/","title":"Nintendo 64 (Mupen64Plus-Next)","text":""},{"location":"library/mupen64plus/#background","title":"Background","text":"<p>Mupen64Plus-Next for libretro is an up-to-date port of Mupen64Plus, a Nintendo 64 emulator. Mupen64Plus-Next for libretro uses GLideN64 as its default graphic plugin, though Angrylion and ParaLLEl-RDP plugs are also available.</p> <p>For Android there are two versions of Mupen64Plus-Next. One is designed to work with GLES 2.0 and another one with GLES 3.0, and the GLES 2.0 version will have graphical issues on a GLES 3.0-compatible system.</p> <p>How is this different from Parallel-N64?</p> <p>Parallel-N64 was forked off from the standalone Mupen64Plus codebase a number of years ago, and it has diverged fairly significantly since then. Also, the graphic plugin GLideN64 is not available in Parallel-N64.</p> <p>This core has the latest upstream accuracy improvements, along with the latest and greatest HLE improvements in GLideN64 and the latest LLE developments in ParaLLEl-RDP/RSP. Outstanding support of Hires Textures.</p> <p>The Mupen64Plus-Next core has been authored by</p> <ul> <li>m4xw</li> <li>gillou</li> <li>gonetz</li> <li>Hacktarux</li> <li>Mupen64Plus Team</li> </ul> <p>The Mupen64Plus-Next core is licensed under</p> <ul> <li>GPLv3</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/mupen64plus/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the Mupen64plus-Next core have the following file extensions (*.gb via Transfer Pak emulation):</p> <ul> <li>.n64</li> <li>.v64</li> <li>.z64</li> <li>.bin</li> <li>.u1</li> <li>.ndd</li> <li>.gb</li> </ul>"},{"location":"library/mupen64plus/#databases","title":"Databases","text":"<p>RetroArch database(s) that are associated with the Mupen64plus-Next core:</p> <ul> <li>Nintendo - Nintendo 64</li> <li>Nintendo - Nintendo 64DD</li> </ul>"},{"location":"library/mupen64plus/#features","title":"Features","text":"<p>RetroArch-level settings or features that the Mupen64plus-Next core respects.</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2715 Core Options \u2714 Memory Monitoring (achievements) \u2714 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2714 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2714 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715"},{"location":"library/mupen64plus/#directories","title":"Directories","text":"<p>The Mupen64plus-Next core's directory name is 'Mupen64Plus-Next'</p> <p>The Mupen64plus-Next core saves/loads to/from these directories.</p> <p>RetroArch's Save directory</p> <ul> <li>'content-name'.srm (Cartridge backup save)</li> </ul> <p>RetroArch's State directory</p> <ul> <li>'content-name'.state# (State)</li> </ul> <p>RetroArch's System directory</p> <pre><code>- Mupen64plus/\n            - mupen64plus.ini\n            - shaders/\n</code></pre>"},{"location":"library/mupen64plus/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The Mupen64plus-Next core's internal FPS is (FPS)</li> <li>The Mupen64plus-Next core's internal sample rate is 44100 Hz</li> <li>The Mupen64plus-Next core's core provided aspect ratio is (Ratio)</li> </ul>"},{"location":"library/mupen64plus/#high-resolution-textures","title":"High-Resolution Textures","text":"<p>There are two primary ways to utilize high-resolution textures:</p> <ol> <li>By using pre-compiled high-resolution texture packs (in the <code>.htc</code> format) that are available for download.</li> <li>By compiling your own high-resolution texture packs from uncompressed Rice sources.</li> </ol>"},{"location":"library/mupen64plus/#use-pre-compiled-high-resolution-textures","title":"Use Pre-Compiled High-Resolution Textures","text":"<ul> <li>Place the <code>.htc</code> formatted textures into the <code>Mupen64plus/cache</code> directory.</li> <li>Ensure the <code>.htc</code> file name corresponds to the system name of the game as shown in the mupen64plus console.</li> <li>Pre-compiled high-resolution packs will work only if Retroarch core settings related to textures match those used during the pack's compilation. To avoid potential mismatches, you might prefer to compile your own texture packs.</li> </ul> <p>Recommended core options for widely used <code>.htc</code> texture packs (for example, those used by Djipi or Mollymutt):</p> <ul> <li><code>mupen64plus-EnableTextureCache = \"True\"</code></li> <li><code>mupen64plus-txHiresEnable = \"True\"</code></li> <li><code>mupen64plus-txCacheCompression = \"True\"</code></li> <li><code>mupen64plus-txHiresFullAlphaChannel = \"False\"</code></li> <li><code>mupen64plus-EnableEnhancedTextureStorage = \"False\"</code></li> <li><code>mupen64plus-EnableEnhancedHighResStorage = \"False\"</code></li> </ul>"},{"location":"library/mupen64plus/#compile-your-own-high-resolution-texture-packs","title":"Compile Your Own High-Resolution Texture Packs","text":"<ol> <li>Obtain the high-resolution textures in uncompressed Rice format.</li> <li>Name the folder to match the system name of the game in the mupen64plus console and place it in the <code>Mupen64plus/hires_texture</code> directory.</li> <li>When you first launch the game, the <code>.htc</code> texture pack will be created. This process can take some time.</li> <li>After the <code>.htc</code> file is successfully generated in the cache subdirectory, you can remove the uncompressed texture directory, as it becomes redundant.</li> </ol> <p>For custom compilations, enabling the additional options for Alpha Channel and Enhanced Storage will yield a high-resolution texture pack with an <code>*.hts</code> extension.</p> <p>If you're planning to use your custom texture pack on a different system, ensure that you activate the same core options for textures on the new system as those you set during the compilation.</p> <p>Note: Compilation on Windows can be more intricate than on Linux or iOS. Ensure Rice texture packs are converted to 32-bit PNG.</p>"},{"location":"library/mupen64plus/#using-the-transfer-pak","title":"Using the Transfer Pak","text":"<p>First you have to virtually plug the Transfer Pak, so start a N64 game, then Quick Menu &gt; Options &gt; Player 1 Pak &gt; transfer and close content, then there are 2 ways of loading:</p>"},{"location":"library/mupen64plus/#renaming-the-gb-save-and-the-gb-rom-to-match-the-n64-rom-filename-and-having-the-3-files-in-the-same-folder","title":"Renaming the GB save and the GB rom to match the N64 rom filename and having the 3 files in the same folder","text":"<p>So for example if you have Pokemon Stadium (USA).z64, in the same folder you'll have:</p> <ul> <li> <p>Pokemon Stadium (USA).z64 (the N64 rom).</p> </li> <li> <p>Pokemon Stadium (USA).z64.sav (the GB save, change the .srm extension to .sav if needed, it won't work with .srm).</p> </li> <li> <p>Pokemon Stadium (USA).z64.gb (the GB rom, if it's a GBC rom you'll need to rename .gbc to .gb).</p> </li> <li> <p>So it should look like this. If you're on Windows, make sure you don't have the extensions hidden</p> </li> <li> <p>And then just load the .z64 file with Mupen64 core :)</p> </li> </ul>"},{"location":"library/mupen64plus/#using-subsystems","title":"Using subsystems","text":"<ul> <li> <p>Go to retroarch/saves/, make a copy of your GB *.srm save file and rename it to *.sav (e.g. Pokemon Red.srm -&gt; Pokemon Red.sav).</p> </li> <li> <p>Now go to Main Menu &gt; Load Core and load Mupen64Plus-Next. It will load the core without content.</p> </li> <li> <p>Go to Main Menu &gt; Subsystems &gt; Load N64 Transferpak and load the .sav file.</p> </li> <li> <p>Now, go back to Subsystems menu and load the *.gb file this time.</p> </li> <li> <p>Go back to Subsystems menu again and this time load the N64 rom.</p> </li> <li> <p>Go to Subsystems AGAIN (last time!) and click Start N64 Transferpak. If done properly you should see the .sav, the .gb and the .z64 listed.</p> </li> </ul>"},{"location":"library/mupen64plus/#core-options","title":"Core options","text":"<p>The Mupen64plus-Next core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded.</p> <p>Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch.</p> <ul> <li> <p>CPU Core (dynamic_recompiler/cached_interpreter/pure_interpreter)</p> <p>Choose which kind of CPU emulation is going to be used. Dynamic recompiler is the fastest mode.</p> <p>Dynamic recompilier is not available on all platforms.</p> </li> <li> <p>RSP Mode (HLE/LLE)</p> <p>How the RSP is emulated, High Level Emulation or Low Level Emulation. Low level emulation should be more precise but it requires more computational power.</p> <p>LLE mode is not available on all platforms</p> </li> <li> <p>4:3 Resolution (320x240/640x480/960x720/1280x960/1600x1200/1920x1440/2240x1680/2560x1920/2880x2160/3200x2400/3520x2640/3840x2880)</p> <p>Select the internal rendering resolution for 4:3 Aspect Ratio mode. The 'Aspect Ratio' core option must be set to 4:3 for this to have an effect. Higher values require more computational power.</p> </li> <li> <p>16:9 Resolution (640x360/960x540/1280x720/1920x1080/2560x1440/3840x2160/7680x4320)</p> <p>Select the internal rendering resolution for 16:9 Aspect Ratio mode. The 'Aspect Ratio' core option must be set to 16:9 or 16:9 adjusted for this to have an effect. Higher values require more computational power.</p> </li> <li> <p>Aspect Ratio (4:3/16:9/16:9 adjusted)</p> <p>This setting adjusts the aspect ratio of the video output. All N64 games support 4:3. Some games support 16:9 within game settings.</p> </li> <li> <p>Bilinear filtering mode (standard/3point)</p> <p>Bilinear filtering: Textures will use standard PC-style bilinear filtering. 3 point: Textures will be filtered more like the N64. The result is less smooth but more accurate.</p> </li> <li> <p>MSAA level (0/2/4/8/16)</p> <p>Enable/Disable MultiSampling Anti-aliasing (0=off, 2,4,8,16=quality).</p> <p>This core option is not available on all platforms.</p> </li> <li> <p>Framebuffer Emulation (True/False)</p> <p>Enable the framebuffer emulation. Frame buffer emulation is a set of techniques used to emulate manipulations with color and depth buffer areas on the real console. Unchecking this option disables many effects including cropping, aspect ratio, N64 resolution factor and more. Do not uncheck this option unless you have performance issues.</p> </li> <li> <p>Color buffer to RDRAM (Async/Sync/Off)</p> <p>Used with the framebuffer emulation. Frame buffer copy is used for some effects (e.g. TV monitor effect where TV shows part of the displayed picture). In some games GLideN64 cannot detect when the game uses the frame buffer. With these options, you can have GLideN64 copy each frame of your video cards frame buffer to N64 memory. Off: Disable copying buffers from video card. Synchronous: Effects are detected for all games, but it can be slow. Use for games where Asynchronous does not work. Asynchronous: Effects are detected for most games (best choice).</p> <p>The default setting is dependent on your platform.</p> </li> <li> <p>Depth buffer to RDRAM (Software/FromMem/Off)</p> <p>Used with the framebuffer emulation. The depth buffer is used to emulate some effects (e.g. coronas). Off: Depth buffer is disabled. FromMem: Your video card\u2019s depth buffer is copied to N64 memory each frame, which can be slow on some games. Software: Generally faster than copying from VRAM, but the result can be imperfect.</p> </li> <li> <p>Hardware per-pixel lighting (False/True)</p> <p>In N64 games lighting is calculated per vertex. This option enables hardware per-pixel lighting calculation known as Phong shading, which provides smoother and more realistic lighting. Per-vertex lighting is instead calculated via software. HLE only.</p> </li> <li> <p>Continuous texrect coords (Off/Auto/Force)</p> <p>In some games the coordinates for parts of 2D elements are not aligned: there is a half-pixel split between adjacent elements. When rendering at the N64\u2019s original resolution it is not visible, but when the image is scaled up it results in black lines. This option attempts to connect these 2D elements.</p> </li> <li> <p>Native res. 2D texrects (False/True)     When checked, 2D elements are rendered at the N64s resolution before copying them to output.     This usually eliminates display issues with 2D elements, but it can be slow.     This option uses heuristics to detect adjacent 2D elements that does not work for every game.</p> </li> <li> <p>Less accurate blending mode (True/False)</p> <p>Do not use shaders to emulate N64 blending modes. Works faster on slow GPU. It can cause glitches. The default setting is dependent on your platform.</p> </li> <li> <p>GPU shader depth write (False/True)</p> <p>Enable writing of fragment depth. Some mobile GPUs do not support it, thus it made optional. The default setting is dependent on your platform.</p> </li> <li> <p>Cache GPU Shaders (True/False)</p> <p>When the option is enabled, plugin saves all new created shaders in a file. When user starts that game again, plugin loads all previously compiled shaders from that file and further gameplay goes smooth.</p> </li> <li> <p>Crop Mode (Auto/Off)</p> <p>Its purpose is to remove black borders, which many N64 games add around image. In auto mode plugins tries to detect empty space and remove it. It works only if frame buffer emulation is enabled, as all other post-processing filters.</p> </li> <li> <p>Texture filter (None/Smooth filtering 1/Smooth filtering 2/Smooth filtering 3/Smooth filtering 4/Sharp filtering 1/Sharp filtering 2)</p> <p>This filter smooths or sharpens textures. There are four smoothing filters and two sharpening filters. The higher the number, the stronger the effect. Performance may be affected depending on the game and/or your device.</p> </li> <li> <p>Texture Enhancement (None/As Is/X2/X2SAI/HQ2X/HQ2XS/LQ2X/LQ2XS/HQ4X/2xBRZ/3xBRZ/4xBRZ/5xBRZ/6xBRZ)</p> <p>Filter applied to textures. Depending on which filter, they may cause performance problems. When AS IS is selected, textures are saved to the cache as-is; this improves performance in games that load many textures; unset Filer background textures for the best performance.</p> </li> <li> <p>Filter background textures (True/False)</p> <p>This option skips texture enhancements for long, narrow textures that are usually used for backgrounds. This may save texture memory and improve performance. Set true unless Enhancement mode is set to AS IS.</p> </li> <li> <p>Use High-Res textures (False/True)</p> <p>Enable the high resolution textures. Usage of hires textures is explained above.</p> </li> <li> <p>Use High-Res Full Alpha Channel (False/True)</p> <p>When this option is selected, GlideN64 will check how the texture\u2019s alpha channel was designed and will select the most appropriate format. This gives texture pack designers freedom to use semi-transparent textures. Clear this option for older or poorly designed texture packs. Recommended for newer texture packs.</p> </li> <li> <p>Analog Deadzone (percent) (15/20/25/30/0/5/10)</p> <p>The minimum absolute value of SDL analog Joystick axis to move the N64 controller axis value</p> </li> <li> <p>Analog Sensitivity (percent) (100/95/90/85/80/105/110)</p> <p>The sensitivity of the analog Joystick.</p> </li> <li> <p>Right C Button (C1/C2/C3/C4)</p> <p>Awaiting description.</p> </li> <li> <p>Left C Button (C2/C3/C4/C1)</p> <p>Awaiting description.</p> </li> <li> <p>Down C Button (C3/C4/C1/C2)</p> <p>Awaiting description.</p> </li> <li> <p>Up C Button (C4/C1/C2/C3)</p> <p>Awaiting description,</p> </li> <li> <p>Player 1 Pak (memory/rumble/none)</p> <p>Choose what Pak has been inserted in the player 1 controller.</p> </li> <li> <p>Player 2 Pak (none/memory/rumble)</p> <p>Choose what Pak has been inserted in the player 2 controller.</p> </li> <li> <p>Player 3 Pak (none/memory/rumble)</p> <p>Choose what Pak has been inserted in the player 3 controller.</p> </li> <li> <p>Player 4 Pak (none/memory/rumble)</p> <p>Choose what Pak has been inserted in the player 4 controller.</p> </li> <li> <p>Count Per Op (0/\u00bd/3)</p> <p>Force the number of cycle per emulated instructions.</p> </li> </ul>"},{"location":"library/mupen64plus/#controllers","title":"Controllers","text":""},{"location":"library/mupen64plus/#device-types","title":"Device types","text":"<p>The Mupen64plus-Next core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/mupen64plus/#user-1-4-device-types","title":"User 1 - 4 device types","text":"<ul> <li>None - Input disabled.</li> <li>Controller - Joypad</li> </ul>"},{"location":"library/mupen64plus/#rumble-support","title":"Rumble support","text":"<p>Rumble only works in the Mupen64plus-Next core when</p> <ul> <li>The content being ran has rumble support.</li> <li>The joypad input driver being used has rumble support. (e.g. Xinput)</li> <li>The joypad device being used has rumble support.</li> <li>The 'Player # Pak' core options are set to rumble for the respective players.</li> </ul> <p>List of Nintendo 64 games with Rumble Pak support</p>"},{"location":"library/mupen64plus/#controller-tables","title":"Controller tables","text":""},{"location":"library/mupen64plus/#joypad-and-analog-device-type-table","title":"Joypad and analog device type table","text":"User 1 - 4 Remap descriptors RetroPad Inputs A Button (C3) B Button (C2) START Button Up (digital) Down (digital) Left (digital) Right (digital) (C1) (C4) L-Trigger R-Trigger Z-Trigger C Buttons Mode Control Stick X  X Control Stick Y  Y C Buttons X  X C Buttons Y  Y"},{"location":"library/mupen64plus/#compatibility","title":"Compatibility","text":"<p>Awaiting description.</p>"},{"location":"library/mupen64plus/#external-links","title":"External Links","text":"<ul> <li>Libretro Mupen64plus-Next Core info file</li> <li>Libretro Mupen64plus-Next Github Repository</li> <li>Report Libretro Mupen64plus-Next Core Issues Here</li> <li>Official Mupen64Plus Website</li> <li>Official Mupen64Plus Github Organization</li> <li>Gameplay Videos</li> </ul>"},{"location":"library/mupen64plus/#see-also","title":"See also","text":""},{"location":"library/neko_project_ii_kai/","title":"NEC - PC-98 (Neko Project II Kai)","text":""},{"location":"library/neko_project_ii_kai/#background","title":"Background","text":"<p>NP2kai is a PC-9801 series core. The NEC PC-9800, also known as the PC-98, were a family of computers made by NEC throughout 1982 to 2000. Despite using Intel x86 chips, MS-DOS and Windows OS, and many other superficial similarities, the series is not IBM compatible. Some PC-98 software may work on an IBM or vice versa, but this is very YMMV. In fact, the introduction of a native Japanese version of standard MS-DOS in the early 90s and subsequent entry of cheaper foreign IBM clones in the Japanese market was the nail in the coffin for the PC-98. They were not released or marketed outside of Japan (besides few attempts such as APC-III and PC-9801FC), but still useful for playing early visual novels and Touhou games.</p>"},{"location":"library/neko_project_ii_kai/#authorlicense","title":"Author/License","text":"<p>The Neko Project II Kai core has been authored by</p> <ul> <li>Neko Project II Team</li> <li>Tomohiro Yoshidomi</li> </ul> <p>The Neko Project II Kai core is licensed under</p> <ul> <li>MIT</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/neko_project_ii_kai/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the Neko Project II Kai core have the following file extensions:</p> <ul> <li>.d98</li> <li>.zip</li> <li>.98d</li> <li>.fdi</li> <li>.fdd</li> <li>.2hd</li> <li>.tfd</li> <li>.d88</li> <li>.88d</li> <li>.hdm</li> <li>.xdf</li> <li>.dup</li> <li>.cmd</li> <li>.hdi</li> <li>.thd</li> <li>.nhd</li> <li>.hdd</li> <li>.hdn</li> </ul>"},{"location":"library/neko_project_ii_kai/#bios","title":"BIOS","text":"<p>Required or optional firmware files go in the frontend's system directory.</p> <p>Attention</p> <p>These firmware files need to be in a directory named 'np2kai' in the frontend's system directory.</p> Filename Description md5sum np2kai/font.bmp Needed to display text - Required 7da1e5b7c482d4108d22a5b09631d967 np2kai/FONT.ROM Alt font file - Required 2af6179d7de4893ea0b705c00e9a98d6 np2kai/bios.rom - Required e246140dec5124c5e404869a84caefce np2kai/itf.rom - Required e9fc3890963b12cf15d0a2eea5815b72 np2kai/sound.rom - Required caf90f22197aed6f14c471c21e64658d np2kai/bios9821.rom - Optional np2kai/d8000.rom - Optional np2kai/2608_BD.WAV YM2608 RYTHM sample - Optional np2kai/2608_SD.WAV YM2608 RYTHM sample - Optional np2kai/2608_TOP.WAV YM2608 RYTHM sample - Optional np2kai/2608_HH.WAV YM2608 RYTHM sample - Optional np2kai/2608_TOM.WAV YM2608 RYTHM sample - Optional np2kai/2608_RIM.WAV YM2608 RYTHM sample - Optional"},{"location":"library/neko_project_ii_kai/#features","title":"Features","text":"<p>Frontend-level settings or features that the Neko Project II Kai core respects.</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2715 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 Memory Monitoring (achievements) \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2715 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2714 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/neko_project_ii_kai/#directories","title":"Directories","text":"<p>The Neko Project II Kai core's directory name is 'Neko Project II kai'</p> <p>The Neko Project II Kai core saves/loads to/from these directories.</p> <p>Frontend's Home directory</p> <ul> <li>.bmp (???)</li> </ul> <p>Frontend's State directory</p> <ul> <li>'content-name'.state# (State)</li> </ul> <p>Frontend's System directory</p> <ul> <li>np2/np2.cfg (Neko Project II Config file)</li> </ul>"},{"location":"library/neko_project_ii_kai/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The Neko Project II Kai core's core provided FPS is <code>56.4</code>.</li> <li>The Neko Project II Kai core's core provided sample rate is <code>44100Hz</code>.</li> <li>The Neko Project II Kai core's core provided aspect ratio is <code>8/5</code>.</li> </ul>"},{"location":"library/neko_project_ii_kai/#usage","title":"Usage","text":"<p>NP2 menu can FDD/HDD swap.</p> <p>Mouse is cuptured (hidden/show toggle) by F11 key.</p> <p>NP2 menu is opened when F12 key</p> <p>Keep 'end' key down when booting for machine options.</p> <p>How to set GDC 2.5MHz/5MHz?</p> <ol> <li>Press End key(assigned Help key) + reset</li> <li>Select '\u30c7\u30a3\u30c3\u30d7\u30b9\u30a4\u30c3\u30c1\uff12'(DIP switch 2)</li> </ol> <p>How to use CD drive with MS-DOS 6.2?</p> <p>Write follow to CONFIG.SYS.</p> <pre><code>    LASTDRIVE=Z\n    DEVICE=A:\uffe5DOS\uffe5NECCDD.SYS /D:CD_101\n</code></pre> <p>And write follow to AUTOEXEC.BAT.</p> <pre><code>    A:\uffe5DOS\uffe5MSCDEX.EXE /D:CD_101 /L:Q\n</code></pre> <p>Then, you'll can use CD drive as Q drive.</p>"},{"location":"library/neko_project_ii_kai/#core-options","title":"Core options","text":"<p>The Neko Project II Kai core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded.</p> <p>Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch.</p> <ul> <li> <p>PC Model (Restart) [np2kai_model] (PC-9801VX/PC-286/PC-9801VM)</p> <p>Awaiting description.</p> </li> <li> <p>CPU Base Clock (Restart) [np2kai_clk_base] (2.4576 MHz/1.9968 MHz)</p> <p>Awaiting description.</p> </li> <li> <p>CPU Clock Multiplier (Restart) [np2kai_clk_mult] (4/\u215a/8/10/12/16/20/24/30/36/40/42/\u00bd)</p> <p>Awaiting description.</p> </li> <li> <p>RAM Size (Restart)* [np2kai_ExMemory] (**3/7/11/13/16/32/64/120/230/1)</p> <p>Awaiting description.</p> </li> <li> <p>GDC [np2kai_gdc] (uPD7220/uPD72020)</p> <p>Awaiting description.</p> </li> <li> <p>Skipline Revisions [np2kai_skipline] (Full 255 lines/ON/OFF)</p> <p>Awaiting description.</p> </li> <li> <p>Real Palettes [np2kai_realpal] (OFF/ON)</p> <p>Awaiting description.</p> </li> <li> <p>LCD [np2kai_lcd ] (OFF/ON)</p> <p>Awaiting description.</p> </li> <li> <p>Sound Board (Restart) [np2kai_SNDboard] (PC9801-86/PC9801-26K + 86/PC9801-86 + Chibi-oto/PC9801-118/PC9801-86 + Mate-X PCM(B460)/Mate-X PCM(B460)/Chibi-oto/Speak Board/Spark Board/Sound Orchestra/Sound Orchestra-V/Sound Blaster 16/AMD-98/Otomi-chanx2/Otomi-chanx2 + 86/None/PC9801-14/PC9801-26K)</p> <p>26K: for old games. 86: for newer games.</p> </li> <li> <p>JastSound [np2kai_jast_snd] (OFF/ON)</p> <p>Awaiting description.</p> </li> <li> <p>Sound Generator [np2kai_usefmgen] (fmgen/Default)</p> <p>Awaiting description.</p> </li> <li> <p>Volume FM [np2kai_volume_F] (0 to 128 in increments of 4. 64 is default.)</p> <p>Awaiting description.</p> </li> <li> <p>Volume SSG [np2kai_volume_S] (0 to 128 in increments of 4. 64 is default.)</p> <p>Awaiting description.</p> </li> <li> <p>Volume ADPCM [np2kai_volume_A] (0 to 128 in increments of 4. 64 is default.)</p> <p>Awaiting description.</p> </li> <li> <p>Volume PCM [np2kai_volume_P] (0 to 128 in increments of 4. 64 is default.)</p> <p>Awaiting description.</p> </li> <li> <p>Volume RHYTHM [np2kai_volume_R] (0 to 128 in increments of 4. 64 is default.)</p> <p>Awaiting description.</p> </li> <li> <p>Volume CD-DA [np2kai_volume_C] (0 to 255 in increments of 8. 128 is default.)</p> <p>Awaiting description.</p> </li> <li> <p>Floppy Seek Sound [np2kai_Seek_Snd] (OFF/ON)</p> <p>Awaiting description.</p> </li> <li> <p>Volume Floppy Seek [np2kai_Seek_Vol] (0 to 128 in increments of 4. 80 is default.)</p> <p>Awaiting description.</p> </li> <li> <p>Volume Beep [np2kai_BEEP_vol] (3/0/\u00bd)</p> <p>Awaiting description.</p> </li> <li> <p>Joypad to Mouse Mapping [np2kai_joy2mouse] (OFF/ON)</p> <p>Awaiting description.</p> </li> <li> <p>Joypad to Keyboard Mapping [np2kai_joy2key] (OFF/Arrows/Keypad)</p> <p>Awaiting description.</p> </li> </ul>"},{"location":"library/neko_project_ii_kai/#controllers","title":"Controllers","text":"<p>The Neko Project II Kai core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/neko_project_ii_kai/#user-1-device-types","title":"User 1 device types","text":"<ul> <li>None - Doesn't disable input.</li> <li>RetroPad - Joypad</li> <li>RetroPad w/Analog - Joypad - There's no reason to switch to this.</li> </ul>"},{"location":"library/neko_project_ii_kai/#controller-tables","title":"Controller tables","text":""},{"location":"library/neko_project_ii_kai/#joypad","title":"Joypad","text":"<p>Attention</p> <p>The Joy2Key and Joy2Mouse modes can be activated with the 'Joypad to Mouse Mapping' and 'Joypad to Keyboard Mapping' core options.</p> RetroPad Inputs Joy2Key (Arrows) Joy2Key (Keypad) Joy2Mouse Z key Z key Mouse left button Left control key Left control key Escape key Escape key Return key Return key Up arrow key Keypad Up arrow key (8) Move mouse up Down arrow key Keypad down arrow key (2) Move mouse down Left arrow key Keypad left arrow key (4) Move mouse left Right arrow key Keypad right arrow key (6) Move mouse right X key X key Mouse right button Space key Space key Backspace key Backspace key Increase mouse speed Right shift key Right shift key NP2 menu key NP2 menu key NP2 menu key"},{"location":"library/neko_project_ii_kai/#keyboard","title":"Keyboard","text":"RetroKeyboard Inputs NP2 Keyboard Inputs Keyboard Backspace NKEY_BACKSPACE Keyboard Tab NKEY_TAB Keyboard Return NKEY_RETURN Keyboard Pause NKEY_STOP Keyboard Escape NKEY_ESC Keyboard Space NKEY_SPACE Keyboard Quote ' NKEY_COLON Keyboard Comma , NKEY_COMMA Keyboard Minus - NKEY_MINUS Keyboard Period . NKEY_DOT Keyboard Slash / NKEY_SLASH Keyboard 0 NKEY_0 Keyboard 1 NKEY_1 Keyboard 2 NKEY_2 Keyboard 3 NKEY_3 Keyboard 4 NKEY_4 Keyboard 5 NKEY_5 Keyboard 6 NKEY_6 Keyboard 7 NKEY_7 Keyboard 8 NKEY_8 Keyboard 9 NKEY_9 Keyboard Colon : NKEY_COLON Keyboard Semicolon ; NKEY_SEMICOLON Keyboard Equals = NKEY_CIRCUMFLEX Keyboard At @ NKEY_ATMARK Keyboard Left Bracket [ NKEY_LEFTSBRACKET Keyboard Backslash \\ NKEY_YEN Keyboard Right Bracket ] NKEY_RIGHTSBRACKET Keyboard Caret ^ NKEY_CIRCUMFLEX Keyboard Underscore _ NKEY_UNDERSCORE Keyboard Backquote ` NKEY_ATMARK Keyboard a NKEY_A Keyboard b NKEY_B Keyboard c NKEY_C Keyboard d NKEY_D Keyboard e NKEY_E Keyboard f NKEY_F Keyboard g NKEY_G Keyboard h NKEY_H Keyboard i NKEY_I Keyboard j NKEY_J Keyboard k NKEY_K Keyboard l NKEY_L Keyboard m NKEY_M Keyboard n NKEY_N Keyboard o NKEY_O Keyboard p NKEY_P Keyboard q NKEY_Q Keyboard r NKEY_R Keyboard s NKEY_S Keyboard t NKEY_T Keyboard u NKEY_U Keyboard v NKEY_V Keyboard w NKEY_W Keyboard x NKEY_X Keyboard y NKEY_Q Keyboard z NKEY_Z Keyboard Delete NKEY_DEL Keyboard Keypad 0 NKEY_KP_0 Keyboard Keypad 1 NKEY_KP_1 Keyboard Keypad 2 NKEY_KP_2 Keyboard Keypad 3 NKEY_KP_2 Keyboard Keypad 4 NKEY_KP_4 Keyboard Keypad 5 NKEY_KP_5 Keyboard Keypad 6 NKEY_KP_6 Keyboard Keypad 7 NKEY_KP_7 Keyboard Keypad 8 NKEY_KP_8 Keyboard Keypad 9 NKEY_KP_9 Keyboard Keypad Period . NKEY_KP_DOT Keyboard Keypad Divide / NKEY_KP_SLASH Keyboard Keypad Multiply * NKEY_KP_ASTERISK Keyboard Keypad Minus - NKEY_KP_MINUS Keyboard Keypad Plus + NKEY_KP_PLUS Keyboard Keypad Enter NKEY_RETURN Keyboard Keypad Equals = NKEY_KP_EQUAL Keyboard Up NKEY_UP Keyboard Down NKEY_DOWN Keyboard Right NKEY_RIGHT Keyboard Left NKEY_LEFT Keyboard Insert NKEY_INS Keyboard Home NKEY_HOMECLR Keyboard End NKEY_HELP Keyboard Page Up NKEY_ROLLUP Keyboard Page Down NKEY_ROLLDOWN Keyboard F1 NKEY_F1 Keyboard F2 NKEY_F2 Keyboard F3 NKEY_F3 Keyboard F4 NKEY_F4 Keyboard F5 NKEY_F5 Keyboard F6 NKEY_F6 Keyboard F7 NKEY_F7 Keyboard F8 NKEY_F8 Keyboard F9 NKEY_F9 Keyboard F10 NKEY_F10 Keyboard F11 Mouse capture (hidden/show toggle) Keyboard F12 NP2 menu key Keyboard Caps Lock NKEY_CAPS Keyboard Right Shift NKEY_SHIFT Keyboard Left Shift NKEY_SHIFT Keyboard Right Control NKEY_CTRL Keyboard Left Control NKEY_CTRL Keyboard Right Alt NKEY_KANA Keyboard Left Alt NKEY_KANA Keyboard Print NKEY_COPY <p>Supported combinations</p> <ul> <li>If you use 104 western keyboard, to input underscore(_), press Shift+right Ctrl.</li> </ul>"},{"location":"library/neko_project_ii_kai/#mouse","title":"Mouse","text":"RetroMouse Inputs NP2 Mouse Inputs  Mouse Cursor Mouse Cursor  Mouse 1 Mouse Left Button  Mouse 2 Mouse Right Button  Mouse 3 NP2 menu key"},{"location":"library/neko_project_ii_kai/#compatibility","title":"Compatibility","text":"<p>Awaiting description.</p>"},{"location":"library/neko_project_ii_kai/#external-links","title":"External Links","text":"<ul> <li>Official Neko Project II Kai Website</li> <li>Original Neko Project II Website</li> <li>Libretro Neko Project II Kai Core info file</li> <li>Libretro Neko Project II Kai Repository</li> <li>Report Libretro Neko Project II Kai Core Issues Here</li> </ul>"},{"location":"library/nestopia/","title":"Nintendo - NES / Famicom (Nestopia)","text":""},{"location":"library/nestopia/#background","title":"Background","text":"<p>Nestopia is a cycle accurate emulator for the NES/Famicom. This is the libretro port of the Nestopia emulator, based on the de facto upstream Nestopia JG fork. The libretro port contains an additional overclocking feature.</p>"},{"location":"library/nestopia/#authorlicense","title":"Author/License","text":"<p>The Nestopia core has been authored by</p> <ul> <li>Martin Freij</li> <li>R. Danbrook</li> <li>Rupert Carmichael (carmiker)</li> </ul> <p>The Nestopia core is licensed under</p> <ul> <li>GPLv2</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/nestopia/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the Nestopia core have the following file extensions:</p> <ul> <li>.nes</li> <li>.fds</li> <li>.unf</li> <li>.unif</li> </ul>"},{"location":"library/nestopia/#databases","title":"Databases","text":"<p>RetroArch database(s) that are associated with the Nestopia core:</p> <ul> <li>Nintendo - Nintendo Entertainment System</li> <li>Nintendo - Family Computer Disk System</li> </ul>"},{"location":"library/nestopia/#bios","title":"BIOS","text":"<p>Required or optional firmware files go in the frontend's system directory.</p> <p>Warning</p> <p>Prior to version 1.50, it required the NstDatabase.xml file for general proper emulation. In version 1.50 or higher, it's baked into the core.</p> Filename Description md5sum disksys.rom Family Computer Disk System BIOS - Required for Famicom Disk System emulation ca30b50f880eb660a320674ed365ef7a"},{"location":"library/nestopia/#features","title":"Features","text":"<p>Frontend-level settings or features that the Nestopia core respects.</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 Memory Monitoring (achievements) \u2715 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/nestopia/#directories","title":"Directories","text":"<p>The Nestopia core's internal core name is 'Nestopia'</p> <p>The Nestopia core saves/loads to/from these directories.</p> <p>Frontend's Save directory</p> <ul> <li>'content-name'.srm (Cartridge battery save)</li> </ul> <p>Frontend's State directory</p> <ul> <li>'content-name'.state# (State)</li> </ul> <p>Frontend's System directory</p> <ul> <li>custom.pal (Custom palette file)</li> </ul>"},{"location":"library/nestopia/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The Nestopia core's core provided FPS is (FPS)</li> <li>The Nestopia core's core provided sample rate is 44100 Hz</li> <li>The Nestopia core's core provided aspect ratio is dependent on the 'Preferred aspect ratio' core option.</li> </ul>"},{"location":"library/nestopia/#nstdatabasexml","title":"NstDatabase.xml","text":"<p>The Nestopia core relies on the internal database (built from the NstDatabase.xml file) for</p> <ul> <li>Games that support a custom mapper</li> <li>Games that support multitap accessories</li> <li>Games that support the Zapper</li> <li>ROM Hacks</li> <li>Famicom Disk System games</li> <li>General proper emulation of games</li> </ul>"},{"location":"library/nestopia/#custom-color-palettes","title":"Custom color palettes","text":"<p>To use custom color palettes in the Nestopia core, the custom color palette file you want to use must be in RetroArch's system directory.</p> <p>Make sure the custom palette file is named 'custom.pal'</p> <p>Also, the 'Palette' core option must be set to custom.</p> <p>Custom color palettes for the NES can be generated with either of these tools.</p> <ul> <li>Bisqwit's NTSC NES palette generator</li> <li>Drag's NTSC NES palette generator</li> </ul>"},{"location":"library/nestopia/#core-options","title":"Core options","text":"<p>The Nestopia core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded.</p> <p>Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch.</p> <ul> <li> <p>Blargg NTSC filter [nestopia_blargg_ntsc_filter] (disabled|composite|svideo|rgb|monochrome)</p> <p>Enable Blargg NTSC filters.</p> </li> </ul> <p>Disclaimer</p> <p>These 'Blargg NTSC filter' core option screenshots have been taken with the 'Palette' core option set to cxa2025as.</p> Blargg NTSC filter - Off <p></p> Blargg NTSC filter - composite <p></p> Blargg NTSC filter - svideo <p></p> Blargg NTSC filter - rgb <p></p> Blargg NTSC filter - monochrome <p></p> <ul> <li> <p>Palette [nestopia_palette] (cxa2025as|consumer|canonical|alternative|rgb|pal|composite-direct-fbx|pvm-style-d93-fbx|ntsc-hardware-fbx|nes-classic-fbx-fs|raw|custom)</p> <p>Choose which color palette is going to be used.</p> </li> </ul> <p>Disclaimer</p> <p>These 'Palette' core option screenshots have been taken with the 'Blargg NTSC filter' core option set to Off.</p> Palette - cxa2025as <p></p> Palette - consumer <p></p> Palette - canonical <p></p> Palette - alternative <p></p> Palette - rgb <p></p> Palette - pal <p></p> Palette - composite-direct-fbx <p></p> Palette - pvm-style-d93-fbx <p></p> Palette - ntsc-hardware-fbx <p></p> Palette - nes-classic-fbx-fs <p></p> Palette - raw <p></p> <ul> <li> <p>Remove Sprite Limit [nestopia_nospritelimit] (disabled|enabled)</p> <p>Remove 8-sprites-per-scanline hardware limit.</p> </li> <li> <p>CPU Speed (Overclock) [nestopia_overclock] (1x|2x)</p> <p>Overclock the emulated CPU.</p> </li> <li> <p>4 Player Adapter [nestopia_select_adapter] (auto|ntsc|famicom)</p> <p>Manually select a 4 Player Adapter if needed. Some games will not recognize the adapter correctly through the internal database, this option should help fix that.</p> </li> <li> <p>FDS Auto Insntert [nestopia_fds_auto_insert] (enabled|disabled)</p> <p>Automatically insert first FDS disk on reset.</p> </li> <li> <p>Mask Overscan (Vertical) [nestopia_overscan_v] (enabled|disabled)</p> <p>Mask out (vertically) the potentially random glitchy video output that would have been hidden by the bezel around the edge of a standard-definition television screen.</p> </li> </ul> Mask Overscan (Vertical) - On <p></p> Mask Overscan (Vertical) - Off <p></p> <ul> <li> <p>Mask Overscan (Horizontal) [nestopia_overscan_h] (disabled|enabled)</p> <p>Mask out (horizontally) the potentially random glitchy video output that would have been hidden by the bezel around the edge of a standard-definition television screen.</p> </li> </ul> Mask Overscan (Horizontal) - Off <p></p> Mask Overscan (Horizontal) - On <p></p> <ul> <li> <p>Preferred aspect ratio [nestopia_aspect] (auto|ntsc|pal|4:3)</p> <p>Choose the preferred aspect ratio. RetroArch's aspect ratio must be set to Core provided in the Video settings. 'auto' will use the internal database for aspect ratio autodetection.</p> </li> </ul> Preferred aspect ratio - ntsc <p></p> Preferred aspect ratio - pal <p></p> Preferred aspect ratio - 4:3 <p></p> <ul> <li> <p>Game Genie Sound Distortion [nestopia_genie_distortion] (disabled|enabled)</p> <p>The Game Genie cheat device could inadvertently introduce sound distortion in games. By enabling this, you can simulate the distortion it would add to a game's sound.</p> </li> <li> <p>System Region [nestopia_favored_system] (auto|ntsc|pal|famicom|dendy)</p> <p>Choose which region the system is from. 'auto' will use the internal database for region autodetection.</p> </li> <li> <p>RAM Power-on State [nestopia_ram_power_state] (0x00|0xFF|random)</p> <p>Awaiting description.</p> </li> <li> <p>Turbo Pulse Speed [nestopia_turbo_pulse] (2|3|4|5|6|7|8|9)</p> <p>Set the turbo pulse speed for the Turbo B and Turbo A buttons.</p> </li> </ul>"},{"location":"library/nestopia/#controllers","title":"Controllers","text":"<p>The Nestopia core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/nestopia/#user-1-4-device-types","title":"User 1 - 4 device types","text":"<ul> <li>None - Disables input.</li> <li>Auto - Automatically detects the device to use based on the internal database.</li> <li>Gamepad - Joypad</li> <li>Arkanoid - Arkanoid paddle -  This should be automatic from the internal database, but this can be changed to Gamepad if you'd prefer using a joypad rather than a paddle. (Port 2 only)</li> <li>Zapper - Lightgun - The Nestopia core can emulate Zapper inputs.  This is generally done automatically based off of the internal database, but can be manually selected as a device type. (Port 2 only)</li> </ul>"},{"location":"library/nestopia/#multitap-support","title":"Multitap support","text":"<p>The Nestopia core uses the internal database to detect which games have multitap support.</p>"},{"location":"library/nestopia/#controller-tables","title":"Controller tables","text":""},{"location":"library/nestopia/#joypad","title":"Joypad","text":"User 1 Remap descriptors RetroPad Inputs B Turbo B Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A Turbo A (FDS) Disk Side Change (FDS) Eject Disk (VSSystem) Coin 1 (VSSystem) Coin 2 (Famicom) Microphone User 2 - 4 Remap descriptors RetroPad Inputs B Turbo B Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A Turbo A (FDS) Disk Side Change (FDS) Eject Disk"},{"location":"library/nestopia/#lightgun","title":"Lightgun","text":"RetroLightgun Inputs Zapper  Gun Crosshair Zapper Crosshair Gun Trigger Zapper Trigger Gun Aux B Zapper Light On"},{"location":"library/nestopia/#compatibility","title":"Compatibility","text":"<p>The Nestopia core is compatible with 100% of officially released titles, and the vast majority of homebrew and hacks.</p>"},{"location":"library/nestopia/#external-links","title":"External Links","text":"<ul> <li>Upstream Nestopia JG Repository</li> <li>Libretro Nestopia Core info file</li> <li>Libretro Nestopia Github Repository</li> <li>Report Libretro Nestopia Core Issues Here</li> </ul>"},{"location":"library/nestopia/#see-also","title":"See also","text":""},{"location":"library/nestopia/#nintendo-family-computer-disk-system","title":"Nintendo - Family Computer Disk System","text":"<ul> <li>Nintendo - NES / Famicom (FCEUmm)</li> <li>Nintendo - NES / Famicom (Mesen)</li> </ul>"},{"location":"library/nestopia/#nintendo-nintendo-entertainment-system","title":"Nintendo - Nintendo Entertainment System","text":"<ul> <li>Nintendo - NES / Famicom (bnes)</li> <li>Nintendo - NES / Famicom (Emux NES)</li> <li>Nintendo - NES / Famicom (FCEUmm)</li> <li>Nintendo - NES / Famicom (Mesen)</li> <li>Nintendo - NES / Famicom (QuickNES)</li> </ul>"},{"location":"library/nestopia_ue/","title":"Nintendo - NES / Famicom (Nestopia)","text":"<p>Click on this link here to get redirected to the Nestopia page.</p>"},{"location":"library/nside_balanced/","title":"Nintendo - SNES / Famicom (nSide Balanced)","text":""},{"location":"library/nside_balanced/#background","title":"Background","text":"<p>A fork of higan v106 that reimplements the Balanced profile.</p>"},{"location":"library/nside_balanced/#authorlicense","title":"Author/License","text":"<p>The nSide Balanced core has been authored by</p> <ul> <li>hex-usr</li> </ul> <p>The nSide Balanced core is licensed under</p> <ul> <li>GPLv3</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/nside_balanced/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the nSide Balanced core have the following file extensions:</p> <ul> <li>.sfc</li> <li>.smc</li> <li>.gb</li> <li>.gbc</li> <li>.bml</li> <li>.rom</li> </ul>"},{"location":"library/nside_balanced/#databases","title":"Databases","text":"<p>RetroArch database(s) that are associated with the nSide Balanced core:</p> <ul> <li>Nintendo - Super Nintendo Entertainment System</li> <li>Nintendo - Super Nintendo Entertainment System Hacks</li> <li>Nintendo - Game Boy</li> <li>Nintendo - Game Boy Color</li> </ul>"},{"location":"library/nside_balanced/#bios","title":"BIOS","text":"<p>Required or optional firmware files go in the frontend's system directory.</p> <p>Attention</p> <p>nSide Balanced uses split ROMS for special chip games.</p> <p>Attention</p> <p>Firmware files for SGB emulation need to be in directories called SGB1.sfc and SGB2.sfc in RetroArch's system directory. Look at the Super GameBoy support section for more information.</p> <p>Notable DSP1.mdDSP1B Games:</p> <ul> <li>Super Mario Kart</li> <li>Pilotwings</li> </ul> <p>Notable DSP2 Games:</p> <ul> <li>Dungeon Master</li> </ul> <p>Notable DSP3 Games:</p> <ul> <li>SD Gundam GX</li> </ul> <p>Notable DSP4 Games:</p> <ul> <li>Top Gear 3000</li> </ul> <p>Notable Cx4 Games:</p> <ul> <li>Mega Man X2</li> <li>Mega Man X3</li> </ul> Filename Description md5sum dsp1.data.rom DSP1 co-processor firmware - Optional 3d81b45fa0c2aa8b852dfb1ece7c0971 dsp1.program.rom DSP1 co-processor firmware - Optional ae209fbe789fbf11a48aea5ab1197321 dsp1b.data.rom DSP1B co-processor firmware - Optional 1e3f568634a7d8284020dddc0ae905bc dsp1b.program.rom DSP1B co-processor firmware - Optional d10f446888e097cbf500f3f663cf4f6d dsp2.data.rom DSP2 co-processor firmware - Optional e9417e29223b139c3c4b635a2a3b8744 dsp2.program.rom DSP2 co-processor firmware - Optional aa6e5922a3ed5ded54f24247c11143c5 dsp3.data.rom DSP3 co-processor firmware - Optional 0a81210c0a940b997dd9843281008ee6 dsp3.program.rom DSP3 co-processor firmware - Optional d99ca4562818d49cee1f242705bba6f8 dsp4.data.rom DSP4 co-processor firmware - Optional ee4990879eb68e3cbca239c5bc20303d dsp4.program.rom DSP4 co-processor firmware - Optional a151023b948b90ffc23a5b594bb6fef2 cx4.data.rom CX4 co-processor firmware - Optional 037ac4296b6b6a5c47c440188d3c72e3 st010.data.rom ST010 co-processor firmware - Optional 254d70762b6f59f99c27c395aba7d07d st010.program.rom ST010 co-processor firmware - Optional 1d70019179a59a566a0bb5d3f2845544 st011.data.rom ST011 co-processor firmware - Optional 10bd3f4aa949737ab9836512c35bcc29 st011.program.rom ST011 co-processor firmware - Optional 95222ebf1c0c2990bcf25db43743f032 st018.data.rom ST018 co-processor firmware - Optional 49c898b60d0f15e90d0ba780dd12f366 st018.program.rom ST018 co-processor firmware - Optional dda40ccd57390c96e49d30a041f9a9e7 SGB1.sfc/sgb1.boot.rom Super Game Boy BIOS - Optional SGB1.sfc/program.rom Super Game Boy ROM - Optional SGB2.sfc/sgb2.boot.rom Super Game Boy 2 BIOS - Optional SGB2.sfc/program.rom Super Game Boy 2 ROM - Optional"},{"location":"library/nside_balanced/#features","title":"Features","text":"<p>Frontend-level settings or features that the nSide Balanced core respects.</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 Memory Monitoring (achievements) \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse - Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/nside_balanced/#directories","title":"Directories","text":"<p>The nSide Balanced core's internal core name is 'higan (Super Famicom Balanced)'</p> <p>The nSide Balanced core saves/loads to/from these directories.</p> <p>Frontend's Save directory</p> <ul> <li>'content-name'.srm (Cartridge battery save)</li> </ul> <p>Frontend's State directory</p> <ul> <li>'content-name'.state# (State)</li> </ul>"},{"location":"library/nside_balanced/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The nSide Balanced core's core provided FPS is (FPS)</li> <li>The nSide Balanced core's core provided sample rate is (Rate)</li> <li>The nSide Balanced core's core provided aspect ratio is (Ratio)</li> </ul>"},{"location":"library/nside_balanced/#super-gameboy-support","title":"Super Gameboy Support","text":"<p>The nSide Balanced core uses a simplified Super Game Boy routine that makes it much easier to access this feature than with the old v094-based cores.</p> <p>Instead of using the complex, CLI-based 'subsystem' launch commands, it looks for the necessary files in the system/BIOS directory whenever you feed the core a *.gb/c file.</p> <p>To get it working, you'll need one or more Super Game Boy ROMs and the sgb.boot.rom BIOS.</p> <p>Step 1</p> <p>Make 2 subdirectories in RetroArch's system directory, one named SGB1.sfc and the other named SGB2.sfc.</p> <p>Step 2</p> <p>Copy your original Super Game Boy ROM into the SGB1.sfc directory and then rename it to program.rom. Copy your Super Game Boy 2 ROM into the SGB2.sfc directory and then rename it program.rom, as well.</p> <p>Step 3</p> <p>Copy your sgb.boot.rom BIOS into each of your SGB1.sfc and SGB2.sfc directories, and rename them to sgb1.boot.rom and sgb2.boot.rom, respectively.</p> <p>The 'Preferred Super GameBoy BIOS' core option lets you choose which of the two SGB BIOSes to use.</p> <p>Step 4</p> <p>Load a SGB-supported GB.mdGBC rom.</p> <p>Done</p> <p></p> <p>Warning</p> <p>There may be graphical glitches when Rewind is set to On in RetroArch's settings.</p>"},{"location":"library/nside_balanced/#msu-1","title":"MSU-1","text":"<p>Attention</p> <p>MSU-1 support in this core is complex. Use the Snes9x core for simplified and easily accessible MSU-1 support.</p> <p>MSU-1 support can be used by loading a correct .bml file.</p> <p>There's documentation for loading MSU-1 games in standalone higan here.</p>"},{"location":"library/nside_balanced/#core-options","title":"Core options","text":"<p>The nSide Balanced core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded.</p> <p>Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch.</p> <ul> <li> <p>Internal resolution [higan_sfc_internal_resolution] (512x480|512x448|512x240|512x224|256x240|256x224)</p> <p>Self-explanatory.</p> </li> </ul> 512x480 <p></p> 512x448 <p></p> 512x240 <p></p> 512x224 <p></p> 256x240 <p></p> 256x224 <p></p> <ul> <li> <p>Color emulation [higan_sfc_color_emulation] (OFF|ON)</p> <p>Simulates the way a console\u2019s display device differs from modern computer monitor\u2019s colour reproduction. In particular, it simulates the slightly-different gamma correction used by the Super Famicom.</p> </li> </ul> Color emulation - Disabled <p></p> Color emulation - Enabled <p></p> <ul> <li> <p>Blur emulation [higan_sfc_blur_emulation] (OFF|ON)</p> <p>Simulates the limited horizontal resolution of standard-definition TVs by blurring together horizontally-adjacent pixels. Games like Jurassic Park for the Super Famicom depend on this to emulate a transparency effect.</p> </li> </ul> Blur emulation - Disabled <p></p> Blur emulation - Enabled <p></p> <ul> <li> <p>Scanline emulation [higan_sfc_scanline_emulation] (OFF|ON)</p> <p>Currently does not function properly.</p> </li> <li> <p>Preferred Super GameBoy BIOS (restart) [higan_sfc_sgb_bios] (SGB1.sfc/|SGB2.sfc/)</p> <p>Choose what Super GameBoy BIOS you want to use. Look at the Super GameBoy Support section for more information.</p> </li> </ul>"},{"location":"library/nside_balanced/#controllers","title":"Controllers","text":"<p>The nSide Balanced core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/nside_balanced/#user-1-device-types","title":"User 1 device types","text":"<ul> <li>None - Input disabled.</li> <li>SNES Joypad - Joypad</li> <li>SNES Mouse - Mouse</li> </ul>"},{"location":"library/nside_balanced/#user-2-device-types","title":"User 2 device types","text":"<ul> <li>None - Input disabled.</li> <li>SNES Joypad - Joypad</li> <li>SNES Mouse - Mouse</li> <li>Multitap - Joypad - Allows for up to five players to play together in multitap games.</li> <li>SuperScope - Lightgun - Inputs are not hooked up in this core.</li> <li>Justifier - Lightgun - Inputs are not hooked up in this core.</li> <li>Justifiers - Lightgun - Two Justifiers are plugged in, for two-player Justifier games. Inputs are not hooked up in this core.</li> </ul>"},{"location":"library/nside_balanced/#multitap-support","title":"Multitap support","text":"<p>Activating multitap support in compatible games can be configured by switching to the Multitap device type for User 2.</p>"},{"location":"library/nside_balanced/#controller-tables","title":"Controller tables","text":""},{"location":"library/nside_balanced/#joypad","title":"Joypad","text":"User 1 - 5 Remap descriptors RetroPad Inputs B Y Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A X L R"},{"location":"library/nside_balanced/#mouse","title":"Mouse","text":"RetroMouse Inputs SNES Mouse  Mouse Cursor SNES Mouse Cursor  Mouse 1 SNES Mouse Left Button  Mouse 2 SNES Mouse Right Button"},{"location":"library/nside_balanced/#compatibility","title":"Compatibility","text":"Game Issue A.S.P. Air Strike Patrol Black lines show up during gameplay. The shadow below the aircraft is missing. <p>Incompatible with ROM hacks made to take advantage of emulator quirks, much like real hardware.</p>"},{"location":"library/nside_balanced/#external-links","title":"External Links","text":"<ul> <li>Official higan Website</li> <li>Official higan Upstream Downloads</li> <li>Libretro nSide Balanced Core info file</li> <li>Libretro nSide Balanced Github Repository</li> <li>Report Libretro nSide Balanced Core Issues Here</li> </ul>"},{"location":"library/nside_balanced/#see-also","title":"See also","text":""},{"location":"library/nside_balanced/#nintendo-game-boy-color","title":"Nintendo - Game Boy (+ Color)","text":"<ul> <li>Nintendo - Game Boy / Color (Emux GB)</li> <li>Nintendo - Game Boy / Color (Gambatte)</li> <li>Nintendo - Game Boy / Color (Gearboy)</li> <li>Nintendo - Game Boy / Color (SameBoy)</li> <li>Nintendo - Game Boy / Color (TGB Dual)</li> <li>Nintendo - Game Boy Advance (mGBA)</li> <li>Nintendo - Game Boy Advance (VBA-M)</li> <li>Nintendo - SNES / Famicom (higan Accuracy)</li> <li>Nintendo - SNES / Famicom (Mesen-S)</li> </ul>"},{"location":"library/nside_balanced/#nintendo-super-nintendo-entertainment-system-hacks","title":"Nintendo - Super Nintendo Entertainment System (+ Hacks)","text":"<ul> <li>Nintendo - SNES / Famicom (Beetle bsnes)</li> <li>Nintendo - SNES / Famicom (bsnes-mercury Accuracy)</li> <li>Nintendo - SNES / Famicom (bsnes-mercury Balanced)</li> <li>Nintendo - SNES / Famicom (bsnes-mercury Performance)</li> <li>Nintendo - SNES / Famicom (bsnes Accuracy)</li> <li>Nintendo - SNES / Famicom (bsnes Balanced)</li> <li>Nintendo - SNES / Famicom (bsnes C++98 (v085))</li> <li>Nintendo - SNES / Famicom (bsnes Performance)</li> <li>Nintendo - SNES / Famicom (higan Accuracy)</li> <li>Nintendo - SNES / Famicom (Mesen-S)</li> <li>Nintendo - SNES / Famicom (Snes9x)</li> <li>Nintendo - SNES / Famicom (Snes9x 2002)</li> <li>Nintendo - SNES / Famicom (Snes9x 2005 Plus)</li> <li>Nintendo - SNES / Famicom (Snes9x 2005)</li> <li>Nintendo - SNES / Famicom (Snes9x 2010)</li> </ul>"},{"location":"library/numero/","title":"Texas Instruments TI-83 (Numero)","text":""},{"location":"library/numero/#background","title":"Background","text":"<p>Numero is a libretro core for emulating the TI-83 family of graphing calculators. It is based on the awesome Wabbitemu emulator. It allows you to play your TI-83 games like never before in fullscreen and using a gamepad! You can also control it with a mouse or keyboard, or you can just use the virtual mouse for pressing the calculator buttons.</p> <p>The Numero core has been authored by</p> <ul> <li>Neil Barkhina</li> </ul> <p>The Numero core is licensed under</p> <ul> <li>GPLv2</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/numero/#bios","title":"BIOS","text":"<p>It is required to have one of the bios files below in the frontend's system directory. ti83se.rom is the recommended BIOS as that will give you the largest memory capacity.</p> Filename Description md5sum ti83se.rom TI-83 Silver Edition c6ff8204c5c81b7be34614dbbd690c8b ti83plus.rom TI-83 Plus 8011181f810b5ec4e9d6a03f0e14257a ti83.rom TI-83 d4448d09bbfde687c04f9e3310e023ab"},{"location":"library/numero/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the Numero core have the following file extensions:</p> <ul> <li>.8xp</li> <li>.8xk</li> <li>.8xg</li> </ul>"},{"location":"library/numero/#features","title":"Features","text":"<p>Frontend-level settings or features that the Numero core respects.</p> Feature Supported Restart \u2714 Saves \u2714 States \u2714 Rewind \u2715 Netplay \u2715 Core Options \u2714 Memory Monitoring (achievements) \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/numero/#directories","title":"Directories","text":"<p>The Numero core saves/loads to/from the default frontend's save directory.</p> <p>Frontend's Save directory</p> File Description tisavestateprogressti83se.sav SE Progress Save tisavestateprogressti83plus.sav Plus Progress Save tisavestateprogressti83.sav TI-83 Progress Save tisavestatetemp.sav Temp file used during manual save states"},{"location":"library/numero/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The Numero core's core provided FPS is 60</li> <li>The Numero core's core provided sample rate is 0 (currently no sound)</li> <li>The Numero core's base width is 640</li> <li>The Numero core's base height is 480</li> <li>The Numero core's max width is 640</li> <li>The Numero core's max height is 480</li> <li>The Numero core's core provided aspect ratio is \u00be</li> </ul>"},{"location":"library/numero/#usage","title":"Usage","text":"<ul> <li>The Emulator will save your progress every 10 seconds</li> <li>this is done in the background since the calculator doesn't really have any \"long term storage\"</li> <li>everything was always just saved in RAM</li> <li>or if you just select \"Close Content\" in RetroArch that will also immediately save your progress</li> <li>You can run the core without any content by just selecting \"Start Core\"</li> <li>There are two control schemes</li> <li>Joypad which is the default</li> <li>And \"Gaming Buttons\" which is more suited towards gaming</li> <li>You can move the virtual mouse with the left stick<ul> <li>and by Pressing R2 to click</li> </ul> </li> <li>You can also use the D-Pad and A Button if using the Joypad scheme</li> <li>Change the virtual mouse speed in the core Options</li> <li>You can toggle between the calculator view and \"Big Mode\" with L2</li> <li>Hitting \"Restart\" in the RetroArch menu will clear the entire memory</li> <li>So be careful when doing this because you will lose all your data</li> <li>This is useful however sometimes when the emulator hangs for one reason or another </li> <li>Installing Apps</li> <li>You will probably need to install some \"loaders\" for most of the demanding apps</li> <li>Such as \"Ion\" or \"Mirage\"</li> <li>You can install \"Ion.8xg\" by going to Retroarch =&gt; Load Content</li> <li>After starting you will see a message in the bottom left corner if it imported successfully</li> <li>Then go to \"Close Content\"</li> <li>Then go again to \"Load Content\" and install the game you want to run inside of Ion such as \"Ztetris.8xp\"</li> <li>Then keep repeating the process to load all the apps you want (careful not to fill up the entire space)</li> <li>Essentially you have to load each piece one on top of another since there is a single common \"hard drive\" for the calculator</li> <li>Every time you load the emulator you will start from the last place you left off</li> <li>For the same reason mentioned above where it saves in the background</li> <li>Also keep this in mind for save states</li> <li>Save States</li> <li>You can create as many save states as you want using the different slots</li> <li>However they will be named internally based on how you started the emulator<ul> <li>From a rom or just the core itself</li> </ul> </li> <li>There will will be a common \"In Progress\" storage mechanism when loading different states<ul> <li>Save States will restore whatever the state was of the entire calculator</li> <li>Including all installed apps at the time of saving</li> </ul> </li> <li>Take lots of save states since you may run into problems where you will need to wipe the memory and try again</li> <li>If you have trouble installing one game or another</li> <li>Try moving things around between Memory and Archive</li> <li>Sometimes different launchers require things not be in Archive</li> <li>You can watch this awesome video by LGR where he talks about the phenomenon<ul> <li>https://www.youtube.com/watch?v=nduMTX86Zl0</li> </ul> </li> </ul>"},{"location":"library/numero/#core-options","title":"Core options","text":"<p>The Numero core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded.</p> <ul> <li>Speed of virtual mouse [mouse_speed] (1x|2x|3x|4x|5x)</li> </ul>"},{"location":"library/numero/#device-types","title":"device types","text":"<p>The Numero core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p> <ul> <li>None - Doesn't disable input.</li> <li>RetroPad - Joypad</li> <li>Gaming Buttons - Same as joypad but optimized mappings for playing games.</li> </ul> <p>Regardless of what you pick the core also supports using the Mouse/Touch to click the calculator buttons.</p>"},{"location":"library/numero/#joypad","title":"Joypad","text":"RetroPad Inputs User 1 input descriptors Button 2ND Button DOWN Button ALPHA Button ENTER Mouse Up Mouse Down Mouse Left Mouse Right Mouse Press Button UP Button LEFT Button RIGHT Toggle Big Mode Mouse Press"},{"location":"library/numero/#external-links","title":"External Links","text":"<ul> <li>Official Numero Github Repository</li> <li>Libretro Numero Core info file</li> <li>Report Numero Core Issues Here</li> </ul>"},{"location":"library/nxengine/","title":"Cave Story (NXEngine)","text":""},{"location":"library/nxengine/#background","title":"Background","text":"<p>NXEngine is a open source reproduction of the Cave Story game engine. The NXEngine core has been authored by</p> <ul> <li>Caitlin Shaw</li> </ul> <p>The NXEngine core is licensed under</p> <ul> <li>GPLv3</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/nxengine/#how-to-start-the-nxengine-core","title":"How to start the NXEngine core:","text":"<ul> <li>To start the NXEngine core, you need to obtain NXEngine's data files. You can do this by going to RetroArch's main menu screen and selecting 'Online Updater'. From there, select 'Content Downloader'.</li> </ul> <ul> <li>Select 'NXEngine'', then select 'Cave Story (En).zip'. This should download and extract this file to RetroArch's Downloads directory.</li> </ul> <ul> <li>Go back to RetroArch's main menu screen. Select 'Load Content', then 'Downloads'.</li> </ul> <ul> <li> <p>Select the 'Cave Story (en)' directory, then select 'Doukutsu.exe'.</p> </li> <li> <p>If you are asked which core to select, choose 'Cave Story (NXEngine)'.</p> </li> </ul> <p>The content should now start running!</p>"},{"location":"library/nxengine/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the NXEngine core have the following file extensions:</p> <ul> <li>.exe</li> </ul>"},{"location":"library/nxengine/#databases","title":"Databases","text":"<p>RetroArch database(s) that are associated with the NXEngine core:</p> <ul> <li>Cave Story</li> </ul>"},{"location":"library/nxengine/#features","title":"Features","text":"<p>Frontend-level settings or features that the NXEngine core respects.</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2715 Memory Monitoring (achievements) \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/nxengine/#directories","title":"Directories","text":"<p>The NXEngine core's directory name is 'NXEngine'</p> <p>The NXEngine core saves/loads to/from these directories.</p> <p>Frontend's Save directory</p> <ul> <li>profile#.dat (Save data profile)</li> </ul>"},{"location":"library/nxengine/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The NXEngine core's core provided FPS is 60</li> <li>The NXEngine core's core provided FPS is 22050 Hz</li> <li>The NXEngine core's core provided aspect ratio is 4/3</li> </ul>"},{"location":"library/nxengine/#controllers","title":"Controllers","text":"<p>The NXEngine core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/nxengine/#user-1-device-types","title":"User 1 device types","text":"<ul> <li>None - Doesn't disable input</li> <li>RetroPad - Joypad</li> <li>RetroPad w/Analog - Joypad - There is no reason to switch to this.</li> </ul>"},{"location":"library/nxengine/#controller-tables","title":"Controller tables","text":""},{"location":"library/nxengine/#joypad","title":"Joypad","text":"User 1 Remap descriptors RetroPad Inputs Jump Settings Inventory D-Pad Up D-Pad Down D-Pad Left D-Pad Right Fire Show/Hide Map Previous Weapon Next Weapon"},{"location":"library/nxengine/#external-links","title":"External Links","text":"<ul> <li>Official NXEngine Website</li> <li>Official NXEngine Github Repository</li> <li>Libretro NXEngine Core info file</li> <li>Libretro NXEngine Github Repository</li> <li>Report Libretro NXEngine Core Issues Here</li> </ul>"},{"location":"library/nxengine/#related-cores","title":"(Related cores)","text":"<ul> <li>doukutsu-rs</li> </ul>"},{"location":"library/o2em/","title":"Magnavox - Odyssey2 / Philips Videopac+ (O2EM)","text":""},{"location":"library/o2em/#background","title":"Background","text":"<p>O2EM is an open source multi-platform Odyssey2 / Videopac+ emulator. The Odyssey2 (Videopac/Jopac in Europe) was a video game console created in the late 70s.</p> <p>The O2EM core has been authored by</p> <ul> <li>Daniel Boris</li> <li>Andre de la Rocha</li> <li>Arlindo M. de Oliveira</li> </ul> <p>The O2EM core is licensed under</p> <ul> <li>Artistic License</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/o2em/#bios","title":"BIOS","text":"<p>Required or optional firmware files go in the frontend's system directory.</p> Filename Description md5sum o2rom.bin Odyssey2 BIOS - G7000 model - Required 562d5ebf9e030a40d6fabfc2f33139fd c52.bin Videopac+ French BIOS - G7000 model - Required f1071cdb0b6b10dde94d3bc8a6146387 g7400.bin Videopac+ European BIOS - G7400 model - Required c500ff71236068e0dc0d0603d265ae76 jopac.bin Videopac+ French BIOS - G7400 model - Required 279008e4a0db2dc5f1c048853b033828 <p>Currently the libretro core only works with the o2rom.bin. As a workaround for playing Videopac+ games, you can rename the g7400.bin firmware file into o2rom.bin, and the core plays it correctly as a Videopac+ game.</p>"},{"location":"library/o2em/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the O2EM core have the following file extensions:</p> <ul> <li>.bin</li> </ul> <p>RetroArch database(s) that are associated with the O2EM core:</p> <ul> <li>Magnavox - Odyssey2</li> <li>Philips - Videopac+</li> </ul>"},{"location":"library/o2em/#features","title":"Features","text":"<p>Frontend-level settings or features that the O2EM core respects.</p> Feature Supported Restart \u2714 Saves \u2715 States \u2714 Rewind \u2714 Netplay \u2715 Core Options \u2714 Memory Monitoring (achievements) \u2714 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/o2em/#directories","title":"Directories","text":"<p>The O2EM core's library name is 'O2EM'</p> <p>The O2EM core saves/loads to/from these directories.</p> <p>Frontend's State directory</p> File Description *.state# State"},{"location":"library/o2em/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The O2EM core's core provided FPS is 60 for NTSC games and 50 for PAL games</li> <li>The O2EM core's core provided sample rate is 44100 Hz</li> <li>The O2EM core's base width is 340</li> <li>The O2EM core's base height is 250</li> <li>The O2EM core's max width is 340</li> <li>The O2EM core's max height is 250</li> <li>The O2EM core's core provided aspect ratio is 4/3</li> </ul>"},{"location":"library/o2em/#core-options","title":"Core options","text":"<p>The O2EM core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded.</p> <ul> <li> <p>Emulated Hardware (Restart) [o2em_bios]  (o2rom.bin|Videopac G7000 (European)|Videopac+ G7400 (European)|Videopac+ G7400 (French))</p> <p>Specify which console hardware to emulate. Requires the corresponding bios file to be present in the frontend 'system' directory (o2rom.bin, c52.bin, g7400.bin, jopac.bin)</p> </li> <li> <p>Console Region (Restart) [o2em_region]  (Auto|NTSC|PAL)</p> <p>Specify which region the system is from. 'Auto' chooses the correct region based on emulated hardware. 'NTSC' is 60hz, 'PAL' is 50hz. Games may run abnormally if the wrong region is selected, and the setting my be overridden if the current content is incompatible.</p> </li> <li> <p>Swap Gamepads [o2em_swap_gamepads]  (disabled|enabled)</p> <p>Swap inputs from the two connected controllers of the emulated console. Required for games such as UFO and P.T. Barnum's Acrobats, which accept player 1 input from the second controller.</p> </li> <li> <p>Virtual keyboard transparency [o2em_vkb_transparency]  (0%|25%|50%|75%)</p> <p>Set transparency level of the virtual on-screen keyboard.</p> </li> </ul> Virtual keyboard transparency - 0% <p></p> Virtual keyboard transparency - 25% <p></p> Virtual keyboard transparency - 50% <p></p> Virtual keyboard transparency - 75% <p></p> <ul> <li> <p>Crop Overscan [o2em_crop_overscan]  (disabled|enabled)</p> <p>Remove the border around the edges of the screen, typically unused by games and hidden by the bezel of a standard-definition television.</p> </li> <li> <p>Interframe Blending [o2em_mix_frames]  (Simple|Ghosting (65%)|Ghosting (75%)|Ghosting (85%)|Ghosting (95%))</p> <p>Simulate CRT phosphor ghosting effects. 'Simple' performs a 50:50 mix of the current and previous frames. 'Ghosting' accumulates pixels from multiple successive frames. May be used to alleviate screen flicker.</p> </li> <li> <p>Audio Volume [o2em_audio_volume]  (50%|0%)|5%)|10%)|15%|20%|25%|30%|35%|40%|45%|50%|55%|60%|65%|70%|75%|80%|85%|90%|95%|100%)</p> <p>Set output audio volume level.</p> </li> <li> <p>Voice Volume [o2em_voice_volume]  (70%|0%)|5%)|10%)|15%|20%|25%|30%|35%|40%|45%|50%|55%|60%|65%|70%|75%|80%|85%|90%|95%|100%)</p> <p>Set output volume level of 'The Voice' speech samples. The voice sampleset WAV files must be placed in the frontend 'system/voice' directory.</p> </li> <li> <p>Audio Filter [o2em_low_pass_filter]  (disabled|enabled)</p> <p>Apply a low pass audio filter to soften the 'harsh' sound effects produced by most Odyssey2/Videopac+ games.</p> </li> <li> <p>Audio Filter Level [o2em_low_pass_range]  (60%|0%)|5%)|10%)|15%|20%|25%|30%|35%|40%|45%|50%|55%|60%|65%|70%|75%|80%|85%|90%|95%|100%)</p> <p>Specify the cut-off frequency of the low pass audio filter. A higher value increases the perceived 'strength' of the filter, since a wider range of the high frequency spectrum is attenuated.</p> </li> </ul>"},{"location":"library/o2em/#joypad","title":"Joypad","text":"RetroPad Inputs User 1 input descriptors Up Down Left Right Action / Press Key (Virtual Keyboard) Move Virtual Keyboard Up/Down Show/Hide Virtual Keyboard RetroPad Inputs User 2 input descriptors Up Down Left Right Action <p>In some games, for example UFO/Satellite Attack, the original had the joypads swapped so that Player 1 was on Joypad 2. If you only use one Joypad, a workaround is to provide identical assignments of both Retropads to one joystick and save it as Game Remap or Core Remap.</p>"},{"location":"library/o2em/#keyboard","title":"Keyboard","text":"RetroKeyboard Inputs O2EM Inputs Keyboard Return Enter Keyboard Space Space Keyboard Minus - - Keyboard Period . . Keyboard Slash / / Keyboard 0 0 Keyboard 1 1 Keyboard 2 2 Keyboard 3 3 Keyboard 4 4 Keyboard 5 5 Keyboard 6 6 Keyboard 7 7 Keyboard 8 8 Keyboard 9 9 Keyboard Equals = = Keyboard Question ? ? Keyboard a a Keyboard b b Keyboard c c Keyboard d d Keyboard e e Keyboard f f Keyboard g g Keyboard h h Keyboard i i Keyboard j j Keyboard k k Keyboard l l Keyboard m m Keyboard n n Keyboard o o Keyboard p p Keyboard q q Keyboard r r Keyboard s s Keyboard t t Keyboard u u Keyboard v v Keyboard w w Keyboard x x Keyboard y y Keyboard z z Keyboard End Clear"},{"location":"library/o2em/#external-links","title":"External Links","text":"<ul> <li>Official O2EM Website</li> <li>Official O2EM SourceForge Repository</li> <li>Libretro O2EM Core info file</li> <li>Libretro O2EM Github Repository</li> <li>Report Libretro O2EM Core Issues Here</li> <li>Gameplay Videos</li> </ul>"},{"location":"library/openlara/","title":"Tomb Raider (OpenLara)","text":"<p>First, make sure these steps are permissible in your locale. RetroArch and LibRetro do not share any copyrighted content.</p>"},{"location":"library/openlara/#background","title":"Background","text":"<p>A new work-in-progress Tomb Raider game engine ported to libretro.</p> <p>This game engine recreation seeks to allow you to play the original Tomb Raider engine games, from 1 all the way up to 5.</p> <p>OpenLara V1 Tomb Raider 1 is fully playable.</p> <p>The nice thing about OpenLara is that, while staying true to the original look and feel of the original, it also adds some enhancements to it that manages to make the boxy old-school Tomb Raider games look a bit less archaic. Some examples include :</p> <ul> <li>The framerate is no longer fixed to 30fps, and you can now run it at a smooth 60fps framerate. There are even more framerate options, allowing you to play at 90fps, 120fps or even 144fps.</li> <li>You can set the internal resolution of the game.</li> <li>New water effects which replaces the simple vertex manipulation of the water surface on the PSX. The Saturn version actually was the only version that tried to do something a bit more sophisticated with the water.</li> <li>Self-shadowing on all the player models (although this still has some visual anomalies at places).</li> <li>Improved lighting effects, including colored lighting (you can see the save crystals emanating a blue light for instance, something which definitely was not in any of the prior Tomb Raider versions).</li> <li>Shading effects \u2013 after Lara gets out of the water, her skin has a slightly wet shading effect.</li> <li>There is also a brand new local multiplayer mode. You toggle the game into splitscreen mode by pressing Start at any one time. From there, you can see a second Lara character, which is only distinguished from the main character by a slightly jerky animation update routine. Player 2 can now take control of this Lara and you can engage in \u2018jolly co-operation\u2019. At all times, Player 1 can beckon Player 2 back to his position by pressing the Start button, which resets player 2\u2019s position back to Player 1\u2019s so that Player 2 can always be brought back in case he/she is running too far astray.</li> <li>There is also a first person view that you can toggle into by pressing the Look button (L button) and then pressing the Action button (B button). This gives you a Mirror\u2019s Edge-esque first person view.</li> <li>The ability to target two enemies at the same time individually.</li> <li>The graphical enhancements can all be toggled on/off inside the game\u2019s inventory settings screen (toggleable by pressing the Select button).</li> </ul> <p>The OpenLara core has been authored by</p> <ul> <li>XProger</li> </ul> <p>The OpenLara core is licensed under</p> <ul> <li>2-clause BSD</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/openlara/#requirements","title":"Requirements","text":"<p>This core requires that you use OpenGL as the video driver. Go to Settings -&gt; Driver. If \u2018video driver\u2019 is set to \u2018vulkan\u2019, switch it back to \u2018gl\u2019, and then restart.</p> <p></p> <p>Attention</p> <p>There is currently no \u2018working\u2019 macOS version available due to the OpenGL requirement.</p>"},{"location":"library/openlara/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the OpenLara core have the following file extensions:</p> <ul> <li>.phd</li> <li>.psx</li> <li>.tr2</li> </ul> <p>RetroArch dat that is associated with the OpenLara core:</p> <ul> <li>Tomb Raider</li> </ul>"},{"location":"library/openlara/#setup","title":"Setup","text":"<p>TR1 is officially supported while 2 or 3 is not. You can still load the levels of 2 or 3 and play them with the proper file scheme. You can download the demo from Online Updater &gt; Content Downloader &gt; Tomb Raider and test Level 2. You can also experience the OpenLara's features in the demo. Apart from that, you can buy it here on GOG or here on Steam. Tomb Raider has differences between ports. The Steam and GOG version do not install the DATA and FMV folders directly into the directory. In Console versions, these files are in the image file.</p>"},{"location":"library/openlara/#files","title":"Files","text":"<ul> <li>DATA, with .phd and .pcx files inside. These are the level files and title screen textures.</li> <li>FMV, which contains a couple of .rpl files. These are the movies.</li> </ul> <p>Not all audio files are available in the Steam/GOG distribution. In this case, you cannot hear some audio streams. For example, in the GYM level, you cannot hear Lara's instructions, but you can hear the sounds of walking, jumping and taking damage.</p>"},{"location":"library/openlara/#getting-tomb-raider-files","title":"Getting Tomb Raider files","text":"<p>First, make sure these steps are permissible in your locale RetroArch or LibRetro do not share copyrighted content. </p>"},{"location":"library/openlara/#rip-tomb-raider-1-image-from-steamgog","title":"Rip Tomb Raider 1 Image from Steam/GOG","text":"<p>When you get Tomb Raider on digital platforms, you will see GAME.GOG(game file), GAME.DAT, dosbox.exe and configuration file of dosbox inside the folder.</p> Files inside Tomb Raider 1 from Steam <p></p> <p>GOG files store audio samples in Drumagog format. This format was developed by WaveMachine Labs for a software plugin that offers access to acoustic drums samples. GOG files are associated with VST technology and are compatible with any software that supports it. GOG format was originally developed in 1999 and is regularly updated. </p> <p>Open the dosbox.conf file with a text editing file. Scroll down to until [autoexec], lines in this section will be run at startup.</p> <pre><code>mount C .\n        imgmount d \".\\game.dat\" -t iso -fs iso\n        xcopy D:\\DATA\\ C:\\DATA\\\n        xcopy D:\\FMV\\ C:\\FMV\\\n</code></pre> <p>When you paste the code above, dosbox.exe will boot the image and copy the DATA and FMV files in it to the local machine each time it is opened. The computer version does not contain most audio files. For example, when you export existing audio files, you cannot hear Lara's instructions at the GYM level.</p> Folders from Tomb Raider 1 image <p></p> <p>You must convert the audio files in the main folder of TR1 to .ogg format. You can do this with the small FFmpeg script below. Apart from that, you can use console audio files with PC port.</p> Converting to OGG <p><pre><code>for f in ./*.mp3; do ffmpeg -i \"$f\" -c:a libvorbis -q:a 4 \"${f/%mp3/ogg}\"; done\n</code></pre> This will convert files from mp3 to ogg</p> <p>The PC Port also missing title and loading images, you can get them from the console version. Place the DELDATA folder from the Console port into the main TR1 directory.</p> Missing Title Screen / Title Screen from Console <p> </p>"},{"location":"library/openlara/#rip-tomb-raider-1-image-from-console","title":"Rip Tomb Raider 1 Image from Console","text":"<p>jPSXdec is a modern, cross-platform PlayStation 1 audio/video converter. Check their documentation to understand how to use it.</p>"},{"location":"library/openlara/#folder-setup","title":"Folder Setup","text":"<p>To achieve a continuous game that loads from one level to the next you can load directly from CD or preferably setup the content folder like this:</p> Folder File Type(s) Description audio/1/ track_XX.ogg or XXX.ogg X represents a number audio/2/ track_XX.ogg and MAIN.SFX Both tracks and MAIN.SFX are required audio/3/ track_XX.ogg and MAIN.SFX Both tracks and MAIN.SFX are required level/1/ *.PNG and *.PHD or *.PSX or *.SAT Load-screens and levels level/2/ *.PNG and *.TR2 or *.PSX Load-screens and levels level/3/ *.PNG and *.TR2 or *.PSX Load-screens and levels video/1/ *.RPL or *.FMV Video cut-scenes video/2/ *.RPL or *.FMV Video cut-scenes video/3/ *.RPL or *.FMV Video cut-scenes <p>Note</p> <p>if you load from CD you won't have soundtrack in TR1</p>"},{"location":"library/openlara/#features","title":"Features","text":"<p>Frontend-level settings or features that the OpenLara core respects.</p> Feature Supported Restart \u2715 Saves \u2714 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2714 Memory Monitoring (achievements) \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/openlara/#fps-mode","title":"FPS mode","text":"<p>With OpenLara, you can experience Tomb Raider like you've never played before. You can try it through the eyes of Lara Croft with the primary person camera, for this you can switch to this mode by pressing L1 + A and exit this mode with the same combination. FPS also available in 2-Player Mode.</p> FPS mode <p></p>"},{"location":"library/openlara/#2-player-mode","title":"2-Player Mode","text":"<p>You can include your friend with whom you want to pass TR levels together. Press Start from Second Controller in order to go 2-Payer Mode.</p> 2-Player Mode <p></p>"},{"location":"library/openlara/#directories","title":"Directories","text":"<p>The OpenLara core's library name is 'OpenLara'</p> <p>The OpenLara core saves/loads to/from these directories.</p> File Description system/openlara/*.xsh Shader files saves/openlara/savegame.dat Savegame saves/openlara/settings Settings"},{"location":"library/openlara/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The OpenLara core's core provided FPS is dependent on the 'Framerate' core option.</li> <li>The OpenLara core's core provided sample rate is 44100 Hz</li> <li>The OpenLara core's base width is 320</li> <li>The OpenLara core's base height is 240</li> <li>The OpenLara core's max width is dependent on the 'Internal resolution' core option</li> <li>The OpenLara core's max height is dependent on the 'Internal resolution' core option</li> <li>The OpenLara core's core provided aspect ratio is 4/3</li> </ul>"},{"location":"library/openlara/#core-options","title":"Core options","text":"<p>The OpenLara core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded.</p> <p>Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch.</p> <ul> <li> <p>Framerate (restart) [openlara_framerate] (60fps|70fps|72fps|75fps|90fps|100fps|119fps|120fps| 144fps|240fps|244fps|15fps|30fps)</p> <p>Modify framerate. Requires a restart.</p> </li> <li> <p>Internal resolution (restart) [openlara_resolution] (320x240|360x480|480x272|512x384|512x512|640x240| 640x448|640x480|720x576|800x600|960x720|1024x768| 1024x1024|1280x720|1280x960|1600x1200|1920x1080| 1920x1440|1920x1600|2048x2048|2560x1440| 3840x2160|7680x4320|15360x8640|16000x9000)</p> <p>Modify the internal resolution. Requires a restart.</p> </li> </ul> Internal resolution - 320x240 <p></p> Internal resolution - 1920x1080 <p></p>"},{"location":"library/openlara/#joypad","title":"Joypad","text":"RetroPad Inputs User 1 input descriptors Action (Shoot/grab) Jump Inventory Start Up Down Left Right Roll Draw weapon Walk (when holding) Duck/Crouch (TR3 and up) Dash (TR3 and up)"},{"location":"library/openlara/#external-links","title":"External Links","text":"<ul> <li>Official OpenLara Github Repository</li> <li>Official OpenLara Website</li> <li>Libretro OpenLara Core info file</li> <li>Libretro OpenLara Github Repository</li> <li>Report Libretro OpenLara Core Issues Here</li> </ul>"},{"location":"library/opera/","title":"The 3DO Company - 3DO (Opera)","text":""},{"location":"library/opera/#background","title":"Background","text":"<p>Opera is an open-source, low-level emulator for the 3DO Game Console. Opera is a fork of 4DO, originally a port of 4DO, itself a fork of FreeDO, to libretro. The fork/rename occurred due to the original 4DO project being dormant and to differentiate the project due to new development and focus.</p> <p>The Opera core has been authored by</p> <ul> <li>trapexit</li> <li>JohnnyDude</li> <li>FreeDO team</li> </ul> <p>The Opera core is licensed under</p> <ul> <li>Modified GNU LGPL / Non-commercial</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/opera/#bios","title":"BIOS","text":"<p>One of the following system BIOSes is required to run software. Place in the frontend's system directory.</p> Filename Description md5sum panafz1.bin Panasonic FZ-1 f47264dd47fe30f73ab3c010015c155b panafz10.bin Panasonic FZ-10 51f2f43ae2f3508a14d9f56597e2d3ce panafz10-norsa.bin Panasonic FZ-10 [RSA Patch] 1477bda80dc33731a65468c1f5bcbee9 panafz10e-anvil.bin Panasonic FZ-10-E [Anvil] a48e6746bd7edec0f40cff078f0bb19f panafz10e-anvil-norsa.bin Panasonic FZ-10-E [Anvil RSA Patch] cf11bbb5a16d7af9875cca9de9a15e09 panafz1j.bin Panasonic FZ-1J a496cfdded3da562759be3561317b605 panafz1j-norsa.bin Panasonic FZ-1J [RSA Patch] f6c71de7470d16abe4f71b1444883dc8 goldstar.bin Goldstar  GDO-101M 8639fd5e549bd6238cfee79e3e749114 sanyotry.bin Sanyo IMP-21J TRY 35fa1a1ebaaeea286dc5cd15487c13ea 3do_arcade_saot.bin Shootout At Old Tucson 8970fc987ab89a7f64da9f8a8c4333ff"},{"location":"library/opera/#font-rom","title":"FONT ROM","text":"<p>Required for some Japanese games. Optional otherwise.</p> Filename Description md5sum panafz1-kanji.bin Panasonic FZ-1 Kanji ROM b8dc97f778a6245c58e064b0312e8281 panafz10ja-anvil-kanji.bin Panasonic FZ-10JA Kanji ROM 428577250f43edc902ea239c50d2240d panafz1j-kanji.bin Panasonic FZ-1J Kanji ROM c23fb5d5e6bb1c240d02cf968972be37"},{"location":"library/opera/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the Opera core have the following file extensions:</p> <ul> <li>.iso</li> <li>.bin</li> <li>.chd</li> <li>.cue</li> </ul> <p>RetroArch database(s) that are associated with the Opera core:</p> <ul> <li>The 3DO Company - 3DO</li> </ul>"},{"location":"library/opera/#features","title":"Features","text":"<p>Frontend-level settings or features that the Opera core respects.</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 Memory Monitoring (achievements) \u2714 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/opera/#directories","title":"Directories","text":"<p>The Opera core's library name is 'Opera'</p> <p>The Opera core saves/loads to/from these directories.</p> <p>Frontend's Save directory</p> File Description *.srm Per game NVRAM 3DO.nvram Shared NVRAM 3DO.nvram.tmp Only used for atomic saves <p>Frontend's State directory</p> File Description *.state# State"},{"location":"library/opera/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The Opera core's core provided FPS is 60</li> <li>The Opera core's core provided sample rate is 44100 Hz</li> <li>The Opera core's base width is 320 when the 'High Resolution' core option is set to disabled.</li> <li>The Opera core's base height is 240 when the 'High Resolution' core option is set to disabled.</li> <li>The Opera core's max width is 320 when the 'High Resolution' core option is set to disabled.</li> <li>The Opera core's max height is 240 when the 'High Resolution' core option is set to disabled.</li> <li>The Opera core's base width is 640 when the 'High Resolution' core option is set to enabled.</li> <li>The Opera core's base height is 480 when the 'High Resolution' core option is set to enabled.</li> <li>The Opera core's max width is 640 when the 'High Resolution' core option is set to enabled.</li> <li>The Opera core's max height is 480 when the 'High Resolution' core option is set to enabled.</li> <li>The Opera core's core provided aspect ratio is 4/3</li> </ul>"},{"location":"library/opera/#core-options","title":"Core options","text":"<p>The Opera core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded.</p> <p>Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch.</p> <ul> <li> <p>CPU overclock [opera_cpu_overclock] (1.0x (12.50Mhz)|1.1x (13.75Mhz)|1.2x (15.00Mhz)|1.5x (18.75Mhz)|1.6x (20.00Mhz)|1.8x (22.50Mhz)|2.0x (25.00Mhz))</p> <p>The 3DO used a 12.5MHz ARM60 CPU as its central processor. We have implemented a CPU overclocking feature in the Opera core so that you can increase performance upto 2x.</p> <p>May not have an impact on all games.</p> <p>https://www.youtube.com/watch?v=7bT2ecwKdHQ</p> </li> <li> <p>High Resolution [opera_high_resolution] (disabled|enabled)</p> <p>The default internal resolution is 320x240, but the output resolution is 640x480. This feature makes the system behave as if it has a 640x480 framebuffer.</p> </li> </ul> High Resolution - disabled <p></p> High Resolution - enabled <p></p> <ul> <li> <p>NVRAM Storage [opera_nvram_storage] (per game|shared)</p> <p>Choose whether NVRAM saves are per game or NVRAM saves are shared between all games.</p> <p>Look at the Directories section for more information.</p> </li> <li> <p>Active Devices [opera_active_devices] (1|2|3|4|5|6|7|8|0)</p> <p>There is a bug (maybe in Opera but possibly in certain games) in which having more than 1 controller emulated causes the game not to respond to input. This allows working around the issue.</p> </li> <li> <p>Timing Hack 1 (Crash 'n Burn) [opera_hack_timing_1] (disabled|enabled)</p> <p>Enable this to fix Crash 'n Burn.</p> </li> <li> <p>Timing Hack 3 (Dinopark Tycoon) [opera_hack_timing_3] (disabled|enabled)</p> <p>Enable this to fix Dinopark Tycoon.</p> </li> <li> <p>Timing Hack 5 (Microcosm) [opera_hack_timing_5] (disabled|enabled)</p> <p>Enable this to fix Microcosm.</p> </li> <li> <p>Timing Hack 6 (Alone in the Dark) [opera_hack_timing_6] (disabled|enabled)</p> <p>Enable this to fix Alone in the Dark.</p> </li> <li> <p>Graphics Step Y Hack (Samurai Shodown) [opera_hack_graphics_step_y] (disabled|enabled)</p> <p>Enable this to fix Samurai Shodown's background rendering.</p> </li> </ul>"},{"location":"library/opera/#joypad","title":"Joypad","text":"User 1 - 2 Remap descriptors RetroPad Inputs B A X (Stop) P (Play/Pause) D-Pad Up D-Pad Down D-Pad Left D-Pad Right C L R"},{"location":"library/opera/#compatibility","title":"Compatibility","text":"<ul> <li>Opera Core Compatibility List</li> </ul>"},{"location":"library/opera/#external-links","title":"External Links","text":"<ul> <li>Official 4DO Website</li> <li>Official 4DO Wiki</li> <li>Official 4DO SourceForge Repository</li> <li>Libretro Opera Core info file</li> <li>Libretro Opera Github Repository</li> <li>Report Libretro Opera Core Issues Here</li> <li>Gameplay Videos</li> </ul>"},{"location":"library/pcsx2/","title":"Sony - PlayStation (LRPS2)","text":"<p>Click on this link here to get redirected to the LRPS2 page.</p>"},{"location":"library/pcsx_rearmed/","title":"Sony - PlayStation (PCSX ReARMed)","text":""},{"location":"library/pcsx_rearmed/#background","title":"Background","text":"<p>PCSX ReARMed is a fork of PCSX Reloaded. It differs from the latter in that it has special optimizations for systems that have an ARM architecture-based CPU.</p> <p>The PCSX ReARMed core has been authored by</p> <ul> <li>PCSX Team</li> <li>notaz</li> <li>Exophase</li> </ul> <p>The PCSX ReARMed core is licensed under</p> <ul> <li>GPLv2</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/pcsx_rearmed/#bios","title":"BIOS","text":"<p>Required or optional firmware files go in the frontend's <code>system</code> directory.</p> <p>If more than one BIOS file exists, the PCSX ReARMed core uses the BIOS above the table below.</p> <p>Attention</p> <p>In case the PCSX ReARMed core can find no BIOS files named like this in RetroArch's system directory, it will default to a High-Level Emulation BIOS. This decreases the level of compatibility of the emulator, so it is recommended that you always supply valid BIOS images inside the system directory.</p> Filename Description md5sum PSXONPSP660.bin Extracted from a PSP c53ca5908936d412331790f4426c6c33 scph101.bin Version 4.4 03/24/00 A 6E3735FF4C7DC899EE98981385F6F3D0 scph7001.bin Version 4.1 12/16/97 A 1e68c231d0896b7eadcad1d7d8e76129 scph5501.bin Version 3.0 11/18/96 A 490f666e1afb15b7362b406ed1cea246 scph1001.bin Version 2.0 05/07/95 A 924e392ed05558ffdb115408c263dccf <p>If none of the above is found, PCSX_ReARMed will search for filenames starting with \"scph\" and use that instead. It doesn't seem to matter whatever BIOS version is used and from what region, as long as it's from a retail PSX/PS one. If no compatible BIOS is found, PCSX_ReARMed will revert to use the HLE BIOS, which can have compatibility issues (e.g. memory card issues in Suikoden games, some games just going into black screens, ...).</p>"},{"location":"library/pcsx_rearmed/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the PCSX ReARMed core have the following file extensions:</p> <ul> <li>.bin</li> <li>.cue</li> <li>.img</li> <li>.mdf</li> <li>.pbp</li> <li>.toc</li> <li>.cbn</li> <li>.m3u</li> <li>.ccd</li> <li>.chd</li> <li>.iso</li> <li>.exe</li> </ul> <p>RetroArch database(s) that are associated with the PCSX ReARMed core:</p> <ul> <li>Sony - PlayStation</li> </ul>"},{"location":"library/pcsx_rearmed/#features","title":"Features","text":"<p>Frontend-level settings or features that the PCSX ReARMed core respects.</p> Feature Supported Restart \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2715 Core Options \u2714 Memory Monitoring (achievements) \u2714 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2714 Rumble \u2714 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2714 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/pcsx_rearmed/#directories","title":"Directories","text":"<p>The PCSX ReARMed core's library name is 'PCSX-ReARMed'</p> <p>The PCSX ReARMed core saves/loads to/from these directories.</p> <p>Frontend's Save directory</p> File Description *.srm Memory card slot 0 pcsx-card2.mcd Memory card slot 1 (if enabled, default to disabled) <p>Frontend's State directory</p> File Description *.state# State"},{"location":"library/pcsx_rearmed/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The PCSX ReARMed core's core provided FPS is 60 for NTSC games. 50 for PAL games.</li> <li>The PCSX ReARMed core's core provided sample rate is 44100 Hz</li> <li>The PCSX ReARMed core's base width is 320</li> <li>The PCSX ReARMed core's base height is 240</li> <li>The PCSX ReARMed core's max width is 1024</li> <li>The PCSX ReARMed core's max height is 512</li> <li>The PCSX ReARMed core's core provided aspect ratio is 4/3</li> </ul>"},{"location":"library/pcsx_rearmed/#loading-content","title":"Loading content","text":"<p>PCSX ReARMed needs a cue-sheet that points to an image file. A cue sheet, or cue file, is a metadata file which describes how the tracks of a CD or DVD are laid out.</p> <p>If you have e.g. <code>foo.bin</code>, you should create a text file and save it as <code>foo.cue</code>. Most PS1 games are single-track, so the cue file contents should look like this:</p> <p><code>foobin.cue</code> <pre><code> FILE \"foo.bin\" BINARY\n  TRACK 01 MODE1/2352\n   INDEX 01 00:00:00\n</code></pre></p> <p>After that, you can load the <code>foo.cue</code> file in RetroArch with the PCSX ReARMed core.</p> <p>Attention</p> <p>Certain PS1 games are multi-track, so their .cue files might be more complicated.</p>"},{"location":"library/pcsx_rearmed/#playing-pal-copy-protected-games","title":"Playing PAL copy protected games","text":"<p>PAL copy protected games need a SBI Subchannel file next to the bin/cue files in order to get past the copy protection.</p> <ul> <li>Ape Escape (Europe).bin</li> <li>Ape Escape (Europe).cue</li> <li>Ape Escape (Europe).sbi</li> </ul>"},{"location":"library/pcsx_rearmed/#multiple-disk-games","title":"Multiple-disk games","text":"<p>If foo is a multiple-disk game, you should have .cue files for each one, e.g. <code>foo (Disc 1).cue</code>, <code>foo (Disc 2).cue</code>, <code>foo (Disc 3).cue</code>.</p> <p>To take advantage of PCSX ReARMed's Disk Control feature for disk swapping, an index file (a m3u file) should be made.</p> <p>Create a text file and save it as <code>foo.m3u</code>. Then enter your game's .cue files on it. The m3u file contents should look something like this:</p> <p><code>foo.m3u</code> <pre><code>foo (Disc 1).cue\nfoo (Disc 2).cue\nfoo (Disc 3).cue\n</code></pre></p> <p>After that, you can load the <code>foo.m3u</code> file in RetroArch with the PCSX ReARMed core.</p> <p>Here's a m3u example done with Valkryie Profile</p> <p><code>Valkyrie Profile (USA).m3u</code> <pre><code>Valkyrie Profile (USA) (Disc 1).cue\nValkyrie Profile (USA) (Disc 2).cue\n</code></pre></p> <p></p> <p>Attention</p> <p>Adding multi-track games to a RetroArch playlist is recommended. (Manually add an entry a playlist that points to <code>foo.m3u</code>)</p>"},{"location":"library/pcsx_rearmed/#swapping-disks","title":"Swapping disks","text":"<p>Swapping disks follows this procedure</p> <ol> <li> <p>Open tray (Disk Cycle Tray Status)</p> </li> <li> <p>Change the Disk Index to the disk you want to swap to.</p> </li> <li> <p>Close tray (Disk Cycle Tray Status)</p> </li> <li> <p>Return to the game and wait a few seconds to let it take effect</p> </li> </ol>"},{"location":"library/pcsx_rearmed/#pbp","title":"PBP","text":"<p>Alternatively to using cue sheets with .bin/.iso files, you can convert your games to .pbp (Playstation Portable update file).</p> <p>A recommended .pbp convert tool is PSX2PSP.</p> <p>If converting a multiple-disk game, all disks should be added to the same .pbp file, rather than making a .m3u file for them.</p> <p>Most conversion tools will want a single .bin file for each disk. If your game uses multiple .bin files (tracks) per disk, you will have to mount the cue sheet to a virtual drive and re-burn the images onto a single track before conversion.</p> <p>Attention</p> <p>RetroArch does not currently have .pbp database due to variability in users' conversion methods. All .pbp games will have to be added to playlists manually.</p>"},{"location":"library/pcsx_rearmed/#saves","title":"Saves","text":"<p>For game savedata storage, the PSX console used memory cards. The PSX console had two slots for memory cards.</p> <p>The PCSX ReARMed core defaults to only support the first memory card slot. Second memory card slot can be enabled via the <code>pcsx_rearmed_memcard2</code> option.</p> <p>In this doc, the first memory card slot will be referred to as 'Memcard slot 0'. The second memory card slot will be referred to as 'Memcard slot 1'.</p> <p>For memory card functionality and usage, the PCSX ReARMed core will the Libretro savedata format.</p> <p> Libretro savedata format gamename.srm pcsx-card2.mcd <p></p> <p>By default, the filename of the Memcard slot 0 savedata will match the loaded cue or m3u or pbp filename, like this:</p> <p>By default, the filename of the Memcard slot 1 savedata (if enabled) will be <code>pcsx-card2.mcd</code>. This basically means that all games in the same folder share the same nemory card in slot 1.</p> <ul> <li> <p>Loaded content: Breath of Fire III (USA).cue</p> </li> <li> <p>Memcard slot 0: Breath of Fire III (USA).srm</p> </li> </ul> <p>or</p> <ul> <li> <p>Loaded content: Final Fantasy VII (USA).m3u</p> </li> <li> <p>Memcard slot 0: Final Fantasy VII (USA).srm</p> </li> </ul> <p>or</p> <ul> <li> <p>Loaded content: Wild Arms 2 (USA).pbp</p> </li> <li> <p>Memcard slot 0: `Wild Arms 2 (USA).srm</p> </li> </ul> <p>Attention</p> <p>To import your old memory cards from other emulators, you need to rename them to the Libretro savedata format.</p> <p>Warning</p> <p>Keep in mind that save states also include the state of the memory card; carelessly loading an old save state will OVEWRITE the memory card, potentially resulting in lost saved games. You can set the 'Don't overwrite SaveRAM on loading savestate' option in RetroArch's Saving settings to On to prevent this.</p>"},{"location":"library/pcsx_rearmed/#core-options","title":"Core options","text":"<p>The PCSX ReARMed core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded.</p> <p>Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch.</p> <ul> <li> <p>Frameskip [pcsx_rearmed_frameskip] (0|1|2|3)</p> <p>Choose how much frames should be skipped to improve performance at the expense of visual smoothness.</p> </li> <li> <p>Use BIOS [pcsx_rearmed_bios] (auto|HLE)</p> <p>Allows you to use real bios file (if available) or emulated bios (HLE).</p> <p>HLE - Forces core to use built-in bios emulation</p> <p>auto - Tries to search for compatible bios file, falls back to use HLE if none is found.</p> </li> <li> <p>Region [pcsx_rearmed_region] (auto|NTSC|PAL)</p> <p>Choose what region the system is from.</p> </li> <li> <p>Enable second memory card [pcsx_rearmed_memcard2] (disabled|enabled)</p> <p>Enables or disabled second memory card (Memcard 2 slot). When enabled, Memcard 2 slot's save data will be loaded and saved as <code>pcsx-card2.mcd</code> file in the saves directory. All games will share the same second memory card.</p> </li> <li> <p>Emulated Mouse Sensitivity [pcsx_rearmed_input_sensitivity] (1.00|0.05 - 2.00)</p> <p>Adjust movement responsiveness for the emulated mouse device.</p> </li> <li> <p>Multitap Mode (Restart) [pcsx_rearmed_multitap] (disabled|port 1 only|port 2 only|both)</p> <p>Sets the multitap device in either port 1 or port 2 allowing support of upto 5 players, or on both for 8 players.</p> </li> </ul> <p>Attention</p> <p>Multitap option works depending on the game. Setting any mode on a game that does not use multitap will make inputs not working. Leave mode at disabled unless supported by game and you really to play in multiplayer modes.</p> <ul> <li> <p>NegCon Twist Deadzone (percent) [pcsx_rearmed_negcon_deadzone] (0|5|10|15|20|25|30)</p> <p>Sets the deadzone of the RetroPad left analog stick when simulating the 'twist' action of emulated neGcon Controllers. Used to eliminate drift/unwanted input.</p> </li> </ul> <p>Attention</p> <p>Most (all?) negCon compatible titles provide in-game options for setting a 'twist' deadzone value. To avoid loss of precision, the in-game deadzone should always be set to zero. Any analog stick drift should instead be accounted for by configuring the 'NegCon Twist Deadzone' core option. This is particularly important when 'NegCon Twist Response' is set to 'quadratic' or 'cubic'.</p> <p>Xbox gamepads typically require a deadzone of 15-20%. Many Android-compatible bluetooth gamepads have an internal 'hardware' deadzone, allowing the deadzone value here to be set to 0%.</p> <p>For convenience, it is recommended to make use of the 'Options \u2192 Analog Setting 1P' menu of Gran Turismo when calibrating the 'NegCon Twist Deadzone'. This provides a clear and precise representation of 'real' controller input values.</p> <ul> <li> <p>NegCon Twist Response [pcsx_rearmed_negcon_response] (linear|quadratic|cubic)</p> <p>Specifies the analog response when using a RetroPad left analog stick to simulate the 'twist' action of emulated neGcon Controllers.</p> <p>'linear': Analog stick displacement is mapped linearly to negCon rotation angle. Recommended when using racing wheel peripherals.</p> <p>'quadratic': Analog stick displacement is mapped quadratically to negCon rotation angle. This allows for greater precision when making small movements with the analog stick. Optimal setting for gamepads.</p> <p>'cubic': Analog stick displacement is mapped cubically to negCon rotation angle. This allows for even greater precision when making small movements with the analog stick, but 'exaggerates' larger movements. Enables precise control but difficult to use.</p> </li> </ul> <p>Attention</p> <p>A linear response is not recommended when using standard gamepad devices. The negCon 'twist' mechanism is substantially different from conventional analog sticks; linear mapping over-amplifies small displacements of the stick, impairing fine control. A linear response is only appropriate when using racing wheel peripherals.</p> <p>In most cases, the 'quadratic' option should be selected. This provides effective compensation for the physical differences between real/emulated hardware, enabling smooth/precise analog input.</p> <ul> <li> <p>Analog axis bounds [pcsx_rearmed_analog_axis_modifier] (circle|square)</p> <p>Range bounds for analog axis. Square bounds help controllers with highly circular ranges that are unable to fully saturate the x and y axis at 45degree deflections.</p> </li> <li> <p>Guncon Adjust X [pcsx_rearmed_gunconadjustx] (0|-25 - 25)</p> </li> <li> <p>Guncon Adjust Y [pcsx_rearmed_gunconadjustx] (0|-25 - 25)</p> <p>When using Guncon mode, you can override aim in emulator if shots misaligned, this applies an increment on the x or y axis.</p> </li> <li> <p>Guncon Adjust Ratio X [pcsx_rearmed_gunconadjustratiox] (1|0.75 - 1.25)</p> </li> <li> <p>Guncon Adjust Ratio Y [pcsx_rearmed_gunconadjustratioy] (1|0.75 - 1.25)</p> <p>When using Guncon mode, you can override aim in emulator if shots misaligned, this applies a ratio on the x or y axis.</p> </li> <li> <p>Enable Vibration [pcsx_rearmed_vibration] (enabled|disabled)</p> <p>Enables Rumble. Look at the Rumble section for more information.</p> </li> <li> <p>Enable Dithering [pcsx_rearmed_dithering] (enabled|disabled)</p> <p>If Off, disables the dithering pattern the PSX applies to combat color banding.</p> </li> </ul> Enable Dithering - On <p></p> Enable Dithering - Off <p></p> <ul> <li> <p>Frame duping [pcsx_rearmed_duping_enable] (enabled|disabled)</p> <p>A speedup, redraws/reuses the last frame if there was no new data.</p> </li> <li> <p>Display Internal FPS [pcsx_rearmed_display_internal_fps] (disabled|enabled)</p> <p>Shows an on-screen frames per second counter.</p> </li> <li> <p>Threaded Rendering [pcsx_rearmed_gpu_thread_rendering] (disabled|sync|async)</p> <p>When enabled, runs GPU commands in a thread.</p> <p>'Sync' waits for drawing to finish before vsync.</p> <p>'Async' will not wait unless there's another frame behind it.</p> </li> <li> <p>Show Bios Bootlogo(Breaks some games) [pcsx_rearmed_show_bios_bootlogo] (disabled|enabled)</p> <p>Show the BIOS bootlogo.</p> </li> </ul> Skip BIOS - Off <p></p> <ul> <li> <p>Sound: Reverb [pcsx_rearmed_spu_reverb] (enabled|disabled)</p> <p>Enable sound reverb.</p> </li> <li> <p>Sound: Interpolation [pcsx_rearmed_spu_interpolation] (simple|gaussian|cubic|off)</p> <p>Modify sound interpolation.</p> </li> <li> <p>CD Access Method (Restart) [pcsx_rearmed_async_cd] (sync|sync|async|precache)</p> <p>Select method used to read data from content disk images.</p> <p>'Synchronous': Mimics original hardware.</p> <p>'Asynchronous': Reduce stuttering on devices with slow storage.</p> <p>'Precache': Loads disk image into memory for faster access (Note: CHD only).</p> </li> <li> <p>Advanced System Options</p> </li> <li> <p>XA Decoding [pcsx_rearmed_noxadecoding] (enabled|disabled)</p> <p>Disables XA sound, which can sometimes improve performance.</p> </li> <li> <p>CD Audio [pcsx_rearmed_nocdaudio] (enabled|disabled)</p> <p>Disables XA sound, which can sometimes improve performance.</p> </li> <li> <p>SPU IRQ Always Enabled [pcsx_rearmed_spuirq] (disabled|enabled)</p> <p>Compatibility tweak, should be left to off in most cases. This can be momentarily turned on at any point to try and fix some bugs.</p> <p>Few examples includes:</p> <p>'Alien Resurrection': bug where doors can remain closed until the option is turned on.</p> <p>'Legend of Mana': audio out-of-sync bug during FMV sequences can also be fixed by momentarily switching the option on, then off when sound is normal.</p> </li> <li> <p>Additional game fixes options</p> </li> <li> <p>Diablo Music Fix [pcsx_rearmed_idiablofix] (disabled|enabled)</p> <p>Fix for music randomly cuts out when pressing start or interact with somebody.</p> </li> <li> <p>Parasite Eve 2/Vandal Hearts \u00bd Fix [pcsx_rearmed_pe2_fix] (disabled|enabled)</p> <p>Enable this to fit Parasite Eve 2 and Vandal Hearts \u00bd</p> </li> <li> <p>InuYasha Sengoku Battle Fix [pcsx_rearmed_inuyasha_fix] (disabled|enabled)</p> <p>Enable this to fix InuYasha.</p> </li> <li> <p>Additional core options for DynaRec (ari64) builds:</p> </li> <li> <p>Dynamic recompiler [pcsx_rearmed_drc] (enabled|disabled)</p> <p>Enables core to use dynamic recompiler or interpreter (slower) cpu instructions.</p> <p>When enabled, dynarec can use either one below:</p> <p>Dynarec can either be ari64 for arm 32-bit devices while lightrec i used for 64-bit capable devices or platforms.</p> </li> <li> <p>PSX cpu clock [pcsx_rearmed_psxclock] (30 - 100, default 57)</p> <p>Overclock or underclock the PSX, default is 57.</p> <p>Lower value = less work for the emu, may be faster in some cases.</p> <p>Causes compatibility issues, so modify only for games that needs it, leave at default for most games.</p> </li> <li> <p>Additional core options for devices using NEON-compatible CPU:</p> </li> <li> <p>Enable interlacing mode(s) [pcsx_rearmed_neon_interlace_enable] (disabled|enabled)</p> <p>Enables fake scanlines effect.</p> </li> <li> <p>Enhanced resolution (slow) [pcsx_rearmed_neon_enhancement_enable] (disabled|enabled)</p> <p>Renders in double resolution at the cost of lower performance</p> <p>Not available for high resolution games.</p> </li> <li> <p>Enhanced resolution speed hack [pcsx_rearmed_neon_enhancement_no_main] (disabled|enabled)</p> <p>Speed hack for above option.</p> <p>Causes game glitches.</p> </li> <li> <p>Additional core options for devices using PEOPS GPU plugin (some options may or may not have effect or need core restart)</p> </li> <li> <p>(GPU) Odd/Even Bit Hack [pcsx_rearmed_gpu_peops_odd_even_bit] (disabled|enabled)</p> <p>Needed for Chrono Chross.</p> </li> <li> <p>(GPU) Expand Screen Width [pcsx_rearmed_gpu_peops_expand_screen_width] (disabled|enabled)</p> <p>Capcom fighting games.</p> </li> <li> <p>(GPU) Ignore Brightness Color [pcsx_rearmed_gpu_peops_ignore_brightness] (disabled|enabled)</p> <p>Black screens in Lunar.</p> </li> <li> <p>(GPU) Disable Coordinate Check [pcsx_rearmed_gpu_peops_disable_coord_check] (disabled|enabled)</p> <p>Enables compatibility mode.</p> </li> <li> <p>(GPU) Lazy Screen Update [pcsx_rearmed_gpu_peops_lazy_screen_update] (disabled|enabled)</p> <p>Pandemonium 2</p> </li> <li> <p>(GPU) Old Frame Skipping [pcsx_rearmed_gpu_peops_old_frame_skip] (enabled|disabled)</p> <p>Skips every second frame.</p> </li> <li> <p>(GPU) Repeated Flat Tex Triangles [pcsx_rearmed_gpu_peops_repeated_triangles] (disabled|enabled)</p> <p>Needed by Dark Forces.</p> </li> <li> <p>(GPU) Draw Quads with Triangles [pcsx_rearmed_gpu_peops_quads_with_triangles] (disabled|enabled)</p> <p>Better G-colors, worse textures.</p> </li> <li> <p>(GPU) Fake 'Gpu Busy' States [pcsx_rearmed_gpu_peops_fake_busy_state] (disabled|enabled)</p> <p>Toggle busy flag after drawing.</p> </li> <li> <p>Additional core options for devices using UNAI GPU plugin (some options may or may not have effect or need core restart)</p> </li> <li> <p>(GPU) Enable Blending [pcsx_rearmed_gpu_unai_blending] (enabled|disabled)</p> </li> <li> <p>(GPU) Enable Lighting [pcsx_rearmed_gpu_unai_lighting] (enabled|enabled)</p> </li> <li> <p>(GPU) Enable Fast Lighting [pcsx_rearmed_gpu_unai_fast_lighting] (disabled|enabled)</p> </li> <li> <p>(GPU) Enable Forced Interlace [pcsx_rearmed_gpu_unai_ilace_force] (disabled|enabled)</p> </li> <li> <p>(GPU) Enable Pixel Skip [pcsx_rearmed_gpu_unai_pixel_skip] (disabled|enabled)</p> </li> <li> <p>(GPU) Enable Hi-Res Downscaling [pcsx_rearmed_gpu_unai_scale_hires] (disabled|enabled)</p> <p>When enabled, will scale hi-res modes to 320x240, skipping unrendered pixels.</p> </li> </ul>"},{"location":"library/pcsx_rearmed/#rumble","title":"Rumble","text":"<p>Rumble only works in the PCSX ReARMed core when</p> <ul> <li>The content being ran has rumble support.</li> <li>The frontend being used has rumble support.</li> <li>The joypad device being used has rumble support.</li> <li>The 'Enable Vibration' core option is set to On</li> <li>The corresponding user's Pad Type is set to analog</li> </ul>"},{"location":"library/pcsx_rearmed/#multitap","title":"Multitap","text":"<p>Activating multitap support in compatible games can be configured by the 'Multitap 1' and 'Multitap 2' core options.</p> <ul> <li>When multitap1 and multitap2 are off, only User 1 and 2 input works and are assigned as player 1 and player 2 respectively.</li> </ul>"},{"location":"library/pcsx_rearmed/#joypad","title":"Joypad","text":"RetroPad Inputs User 1 - 8 input descriptors standard analog negcon Cross Cross Cross Analog Button I Square Square Square Analog Button II Select Select Select Start Start Start Start D-Pad Up D-Pad Up D-Pad Up D-Pad Up D-Pad Down D-Pad Down D-Pad Down D-Pad Down D-Pad Left D-Pad Left D-Pad Left D-Pad Left D-Pad Right D-Pad Right D-Pad Right D-Pad Right Circle Circle Circle A Triangle Triangle Triangle B L1 L1 L1 Left Shoulder Button (analog) R1 R1 R1 Right Shoulder Button (digital) L2 L2 L2 Analog Button II R2 R2 R2 Analog Button I L3 L3 R3 R3  X Left Analog X Left Analog X Twist  Y Left Analog Y Left Analog Y  X Right Analog X Right Analog X  Y Right Analog Y Right Analog Y Up: Analog Button I / Down: Analog Button II"},{"location":"library/pcsx_rearmed/#compatibility","title":"Compatibility","text":"Game Issue Jumping Flash 2 Graphics glitches. Geometry issues. Tobal 2 Graphics glitch. Garbled Dream Factory intro sequence. Kitty the Kool! No issues."},{"location":"library/pcsx_rearmed/#external-links","title":"External Links","text":"<ul> <li>Official PCSX ReARMed Website</li> <li>Official PCSX ReARMed Github Repository</li> <li>Libretro PCSX ReARMed Core info file</li> <li>Libretro PCSX ReARMed Github Repository</li> <li>Report Libretro PCSX ReARMed Core Issues Here</li> <li>Gameplay Videos</li> </ul>"},{"location":"library/pcsx_rearmed/#psx","title":"PSX","text":"<ul> <li>Sony - PlayStation (Beetle PSX)</li> <li>Sony - PlayStation (Beetle PSX HW)</li> </ul>"},{"location":"library/picodrive/","title":"Sega - MS/MD/CD/32X (PicoDrive)","text":""},{"location":"library/picodrive/#background","title":"Background","text":"<p>PicoDrive is an open-source Sega 8/16 bit and 32X emulator which was written having ARM-based handheld devices in mind.</p>"},{"location":"library/picodrive/#features","title":"Features","text":"<ul> <li>Supports 32x emulation.</li> <li>Designed to run on weak devices.</li> </ul> <p>The PicoDrive core has been authored by</p> <ul> <li>notaz</li> <li>fdave</li> </ul> <p>The PicoDrive core is licensed under</p> <ul> <li>Non-commercial</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/picodrive/#bios","title":"BIOS","text":"<p>Required or optional firmware files go in the frontend's system directory.</p> Filename Description md5sum bios_CD_E.bin MegaCD EU BIOS - Required e66fa1dc5820d254611fdcdba0662372 bios_CD_U.bin SegaCD US BIOS - Required 2efd74e3232ff260e371b99f84024f7f bios_CD_J.bin MegaCD JP BIOS - Required 278a9397d192149e84e820ac621a8edd"},{"location":"library/picodrive/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the PicoDrive core have the following file extensions:</p> <ul> <li>.bin</li> <li>.gen</li> <li>.smd</li> <li>.md</li> <li>.32x</li> <li>.cue</li> <li>.iso</li> <li>.sms</li> <li>.68k</li> <li>.chd</li> </ul> <p>RetroArch database(s) that are associated with the PicoDrive core:</p> <ul> <li>Sega - Master System - Mark III</li> <li>Sega - Mega-CD - Sega CD</li> <li>Sega - Mega Drive - Genesis</li> <li>Sega - PICO</li> <li>Sega - 32X</li> </ul>"},{"location":"library/picodrive/#features_1","title":"Features","text":"<p>Frontend-level settings or features that the PicoDrive core respects.</p> Feature Supported Restart \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 Memory Monitoring (achievements) \u2714 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2714 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/picodrive/#directories","title":"Directories","text":"<p>The PicoDrive core's library name is 'PicoDrive'</p> <p>The PicoDrive core saves/loads to/from these directories.</p> <p>Frontend's Save directory</p> File Description *.srm Cartridge backup save <p>Frontend's State directory</p> File Description *.state# State"},{"location":"library/picodrive/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The PicoDrive core's core provided FPS is 60 for NTSC games and 50 for PAL games.</li> <li>The PicoDrive core's core provided sample rate is 44100 Hz</li> <li>The PicoDrive core's base width is 320</li> <li>The PicoDrive core's base height is 224</li> <li>The PicoDrive core's max width is 320</li> <li>The PicoDrive core's max height is 240</li> <li>The PicoDrive core's core provided aspect ratio is 10/7 when the 'Core-provided aspect ratio' core option is set to PAR</li> <li>The PicoDrive core's core provided aspect ratio is 4/3 when the 'Core-provided aspect ratio' core option is set to 4/3</li> <li>The PicoDrive core's core provided aspect ratio is 5/4 when the 'Core-provided aspect ratio' core option is set to CRT</li> </ul>"},{"location":"library/picodrive/#loading-sega-cd-games","title":"Loading Sega CD games","text":"<p>When loading Sega CD games, PicoDrive needs a cue-sheet that points to an image file. A cue sheet, or cue file, is a metadata file which describes how the tracks of a CD or DVD are laid out.</p> <p>If you have e.g. <code>foo.bin</code>, you should create a text file and save it as <code>foo.cue</code>. If the Sega CD game is single-track, the cue file contents should look like this:</p> <pre><code> FILE \"foo.bin\" BINARY\n  TRACK 01 MODE1/2352\n   INDEX 01 00:00:00\n</code></pre> <p>After that, you can load the <code>foo.cue</code> file in RetroArch with the PicoDrive core.</p> <p>Certain Sega CD games are multi-track, so their .cue files might be more complicated.</p> <p>Here's a cue file example done with Lunar - Eternal Blue (USA)</p> <p></p>"},{"location":"library/picodrive/#core-options","title":"Core options","text":"<p>The PicoDrive core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded.</p> <p>Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch.</p> <ul> <li> <p>Input device 1 [picodrive_input1] (3 button pad/6 button pad/None)</p> <p>Choose which kind of controller is plugged in slot 1.</p> </li> <li> <p>\"Input device 2 [picodrive_input2] (3 button pad/6 button pad/None)</p> <p>Choose which kind of controller is plugged in slot 2.</p> </li> <li> <p>No sprite limit [picodrive_sprlim] (disabled/enabled)</p> <p>Enable this to remove the sprite limit.</p> </li> <li> <p>MegaCD RAM cart [picodrive_ramcart] (disabled/enabled)</p> <p>Emulate a MegaCD RAM cart.</p> </li> <li> <p>Region [picodrive_region] (Auto/Japan NTSC/Japan PAL/US/Europe)</p> <p>Force a specific region.</p> </li> <li> <p>Core-provided aspect ratio [picodrive_aspect] (PAR/4/3/CRT)</p> <p>Choose the core-provided aspect ratio. RetroArch's aspect ratio must be set to Core provided in the Video settings.</p> </li> </ul> Core-provided aspect ratio - PAR <p></p> Core-provided aspect ratio - 4/3 <p></p> Core-provided aspect ratio - CRT <p></p> <ul> <li> <p>Show Overscan [picodrive_overscan] (disabled/enabled)</p> <p>Crop out the potentially random glitchy video output that would have been hidden by the bezel around the edge of a standard-definition television screen.</p> </li> </ul> Show Overscan - Off <p></p> Show Overscan - On <p></p> <ul> <li> <p>68k overclock [picodrive_overclk68k] (disabled/+25%/+50%/+75%/+100%/+200%/+400%)</p> <p>Overclock the emulated 68k chip</p> </li> <li> <p>Dynamic recompilers [picodrive_drc] (enabled/disabled)</p> <p>Enable dynamic recompilers which help to improve performance. This core option is not available on all hardware.</p> </li> <li> <p>Audio filter [picodrive_audio_filter] (disabled|low-pass)</p> <p>Enable a low pass audio filter to better simulate the characteristic sound of a Model 1 Genesis.</p> </li> </ul> <p>Attention</p> <p>This option is ignored when running Master System and PICO titles. Only the Genesis and its add-on hardware (Sega CD, 32X) employed a physical low pass filter.</p> <ul> <li> <p>Low-pass filter % [picodrive_lowpass_range] (60|65|70|75|80|85|90|95|5|10|15|20|25|30|35|40|45|50|55)</p> <p>Specify the cut-off frequency of the audio low pass filter. A higher value increases the perceived 'strength' of the filter, since a wider range of the high frequency spectrum is attenuated.</p> </li> </ul>"},{"location":"library/picodrive/#user-1-2-device-types","title":"User 1 - 2 device types","text":"<p>The PicoDrive core supports the following device type(s).</p> <ul> <li>None - Input is disabled - Can be switched to using the Input device core options.</li> <li>3 button pad - Joypad - Can be switched to using the Input device core options.</li> <li>6 button pad - Joypad - Can be switched to using the Input device core options.</li> <li>SMS pad - Joypad - Is automatically switched to when a Sega Master System game is loaded.</li> </ul>"},{"location":"library/picodrive/#joypad","title":"Joypad","text":"RetroPad Inputs User 1 - 2 input descriptors 3 button pad 6 button pad B B B A A A Mode Mode Start Start Start D-Pad Up D-Pad Up D-Pad Up D-Pad Down D-Pad Down D-Pad Down D-Pad Left D-Pad Left D-Pad Left D-Pad Right D-Pad Right D-Pad Right C C C Y Y X X Z Z RetroPad Inputs User 1 - 2 input descriptors SMS pad Button 1 Start Button 1 Start Button Pause Button Pause D-Pad Up D-Pad Up D-Pad Down D-Pad Down D-Pad Left D-Pad Left D-Pad Right D-Pad Right Button 2 Button 2"},{"location":"library/picodrive/#compatibility","title":"Compatibility","text":"32x games Issue Brutal Unleashed \u2013 Above the Claw Softlocks after the first fight. FIFA Soccer \u201996 Glitched main menu text. Knuckles\u2019 Chaotix Glitched graphics on the Player Select screen. NBA Jam Tournament Edition Framerate issues. NFL Quarterback Club Some menu graphics are missing. Virtua Racing Deluxe Blinking line during the SEGA logo screen. World Series Baseball Starring Deion Sanders Crashes when starting a match. WWF Raw Various graphics are missing."},{"location":"library/picodrive/#external-links","title":"External Links","text":"<ul> <li>Official PicoDrive Website</li> <li>Official PicoDrive Github Repository</li> <li>Libretro PicoDrive Core info file</li> <li>Libretro PicoDrive Github Repository</li> <li>Report Libretro PicoDrive Core Issues Here</li> <li>Gameplay Videos</li> </ul>"},{"location":"library/picodrive/#sega-16-bit","title":"Sega 16-bit","text":"<ul> <li>Sega - Master System (Emux SMS)</li> <li>Sega - MS/GG/MD/CD (Genesis Plus GX)</li> <li>Sega - MS/GG/SG-1000 (Gearsystem)</li> <li>MSX/SVI/ColecoVision/SG-1000 (blueMSX)</li> </ul>"},{"location":"library/play/","title":"Sony - PlayStation 2 (Play!)","text":""},{"location":"library/play/#background","title":"Background","text":"<p>A PS2 emulator for Android, iOS, Windows, MacOS and Linux, written in C++.</p> <p>The Play! core supports OpenGL rendering.</p> <p>The Play! core has been authored by</p> <ul> <li>Zer0xFF</li> <li>jpd002</li> </ul> <p>The Play! core is licensed under</p> <ul> <li>MIT</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/play/#requirements","title":"Requirements","text":"<ul> <li>OpenGL 3.0 or Open GL ES 3.2 or higher for the OpenGL renderer.</li> </ul>"},{"location":"library/play/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the Play! core have the following file extensions:</p> <ul> <li>.chd</li> <li>.cso</li> <li>.cue</li> <li>.elf</li> <li>.iso</li> <li>.isz</li> </ul> <p>RetroArch database(s) that are associated with the Play! core:</p> <ul> <li>Sony - PlayStation 2</li> </ul>"},{"location":"library/play/#features","title":"Features","text":"<p>Frontend-level settings or features that the Play! core respects.</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2715 Netplay \u2715 Core Options \u2714 Memory Monitoring (achievements) \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/play/#core-options","title":"Core options","text":"<p>The Play! core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded.</p> <p>Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch.</p> <ul> <li> <p>Resolution Multiplier [play_res_multi] (1x|2x|4x|8x)</p> <p>Controls the internal resolution of the graphics, significant performance impact if your GPU is not powerful enough for certain resolutions.</p> </li> <li> <p>Presentation Mode [play_presentation_mode] (Fit Screen|Fill Screen|Original Size)</p> <p>Change layout to Fit Screen, Fill Screen or Original Size.</p> </li> <li> <p>Force Bilinear Filtering [play_bilinear_filtering] (enabled|disabled)</p> <p>Enable bilinear filtering.</p> </li> </ul>"},{"location":"library/play/#joypad","title":"Joypad","text":"User 1 - 8 input descriptors RetroPad Inputs PlayStation Controller Inputs DualShock Inputs Analog Controller Inputs Analog Joystick Inputs neGcon Inputs Cross Analog button I Square Analog button II Select Start Start D-Pad Up D-Pad Up D-Pad Down D-Pad Down D-Pad Left D-Pad Left D-Pad Right D-Pad Right Circle A Triangle B L1 Left shoulder button (analog) R1 Right shoulder button (digital) L2 Analog button II R2 Analog button I L3 R3 Left Analog X  X Left Joystick X Twist Left Analog Y  Y Left Joystick Y Right Analog X  X Right Joystick X Right Analog Y  Y Right Joystick Y"},{"location":"library/play/#compatibility","title":"Compatibility","text":"<p>Play! core is still experimental but promising. Some games are already playable.</p>"},{"location":"library/play/#external-links","title":"External Links","text":"<ul> <li>Official Play! Website</li> <li>Official Play! Github Repository</li> <li>Libretro Play! Core info file</li> <li>Gameplay Videos</li> </ul>"},{"location":"library/play/#libretro-ps2-cores","title":"Libretro PS2 cores","text":"<ul> <li>PlayStation 2 (LRPS2)</li> </ul>"},{"location":"library/pocketcdg/","title":"PocketCDG","text":"<p>You have to provide both .cdg and .mp3 file. RetroArch and LibRetro do not share any copyrighted content.</p>"},{"location":"library/pocketcdg/#background","title":"Background","text":"<p>A MP3 karaoke music player.</p>"},{"location":"library/pocketcdg/#authorlicense","title":"Author/License","text":"<p>The PocketCDG core has been authored by</p> <ul> <li>RedBug</li> </ul> <p>The PocketCDG core is licensed under</p> <ul> <li>MIT</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/pocketcdg/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the PocketCDG core have the following file extensions:</p> <ul> <li>.cdg</li> </ul>"},{"location":"library/pocketcdg/#features","title":"Features","text":"<p>Frontend-level settings or features that the PocketCDG core respects.</p> Feature Supported Restart \u2715 Screenshots \u2714 Saves \u2715 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2715 Memory Monitoring (achievements) \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/pocketcdg/#directories","title":"Directories","text":"<p>The PocketCDG core's internal core name is 'pocketcdg'</p>"},{"location":"library/pocketcdg/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The PocketCDG core's core provided FPS is 50</li> <li>The PocketCDG core's core provided sample rate is 44100 Hz</li> <li>The PocketCDG core's core provided aspect ratio is 1</li> </ul>"},{"location":"library/pocketcdg/#setup","title":"Setup","text":"<p>Create a folder or put files with both .mp3 and .cdg extensions in the existing folder. The PocketCDG core can load any MP3+CDG file combination. It will then show the lyrics onscreen and on-cue like a true karaoke player, and it will also highlight the text which should be currently sung.</p>"},{"location":"library/pocketcdg/#controllers","title":"Controllers","text":"<p>The PocketCDG core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/pocketcdg/#user-1-device-types","title":"User 1 device types","text":"<ul> <li>None - Doesn't disable input. There's no reason to switch to this.</li> <li>RetroPad - Joypad - Stay on this.</li> <li>RetroKeyboard - Keyboard - Has keymapper support but isn't hooked up to any core inputs. There's no reason to switch to this.</li> </ul>"},{"location":"library/pocketcdg/#controller-tables","title":"Controller tables","text":""},{"location":"library/pocketcdg/#joypad","title":"Joypad","text":"User 1 Remap descriptors RetroPad Inputs Pause Start Up Down Left Right Shutdown"},{"location":"library/pocketcdg/#external-links","title":"External Links","text":"<ul> <li>Libretro PocketCDG Core info file</li> <li>Libretro PocketCDG Github Repository</li> <li>Report Libretro PocketCDG Core Issues Here</li> </ul>"},{"location":"library/pocketcdg/#see-also","title":"See also","text":""},{"location":"library/pocketcdg/#media","title":"Media","text":"<ul> <li>FFmpeg</li> <li>Game Music Emu</li> <li>Imageviewer</li> </ul>"},{"location":"library/pokemini/","title":"Nintendo - Pok\u00e9mon Mini (PokeMini)","text":""},{"location":"library/pokemini/#background","title":"Background","text":"<p>PokeMini is an emulator for the Pok\u00e9mon Mini handheld console.</p> <p>The PokeMini core has been authored by</p> <ul> <li>JustBurn</li> </ul> <p>The PokeMini core is licensed under</p> <ul> <li>GPLv3</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/pokemini/#bios","title":"BIOS","text":"<p>Required or optional firmware files go in the frontend's system directory.</p> Filename Description md5sum bios.min Pok\u00e9mon Mini BIOS - Optional 1e4fb124a3a886865acb574f388c803d"},{"location":"library/pokemini/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the PokeMini core have the following file extensions:</p> <ul> <li>.min</li> </ul> <p>RetroArch database(s) that are associated with the PokeMini core:</p> <ul> <li>Nintendo - Pokemon Mini</li> </ul>"},{"location":"library/pokemini/#features","title":"Features","text":"<p>Frontend-level settings or features that the PokeMini core respects.</p> Feature Supported Restart \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2715 Core Options \u2714 Memory Monitoring (achievements) \u2714 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2714 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/pokemini/#directories","title":"Directories","text":"<p>The PokeMini core's library name is 'PokeMini'</p> <p>The PokeMini core saves/loads to/from these directories.</p> <p>Frontend's Save directory</p> File Description *.eep EEPROM save <p>Frontend's State directory</p> File Description *.state# State"},{"location":"library/pokemini/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The PokeMini core's core provided FPS is 72</li> <li>The PokeMini core's core provided sample rate is 44100 Hz</li> <li>The PokeMini core's base width is 96</li> <li>The PokeMini core's base height is 64</li> <li>The PokeMini core's max width is 576</li> <li>The PokeMini core's max height is 384</li> <li>The PokeMini core's core provided aspect ratio is 3/2</li> </ul>"},{"location":"library/pokemini/#core-options","title":"Core options","text":"<p>The PokeMini core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded.</p> <p>Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch.</p> <ul> <li> <p>Video Scale (Restart) [pokemini_video_scale] (4x|5x|6x|1x|2x|3x)</p> <p>Sets internal video scale factor. Increasing the scale factor improves the appearance of the internal 'dotmatrix' LCD filter. Scale should normally be set to '1x' for correct operation when using an external GPU shader.</p> </li> </ul> 'dotmatrix' LCD filter - Video Scale - 2x <p></p> 'dotmatrix' LCD filter - Video Scale - 4x <p></p> 'dotmatrix' LCD filter - Video Scale - 6x <p></p> <ul> <li> <p>LCD Filter [pokemini_lcdfilter] (dotmatrix|scanline|none)</p> <p>Specifies which internal screen filter should be applied to the display. 'dotmatrix' produces a clean LCD effect, and is the recommended option. LCD filters are disabled when 'Video Scale' is set to '1x'.</p> </li> </ul> LCD Filter - dotmatrix <p></p> LCD Filter - scanline <p></p> LCD Filter - none <p></p> <ul> <li> <p>LCD Mode [pokemini_lcdmode] (analog|3shades|2shades)</p> <p>Specifies the greyscale 'colour' reproduction characteristics of the emulated liquid crystal display.</p> <p>'analog' attempts to simulate the Pok\u00e9mon Mini hardware by allowing smooth time-dependent transitions between 'colour' values. This option is recommended since most games exploited the analog nature of the Pok\u00e9mon Mini screen to show different shades of 'colour' on a nominally monochrome display.</p> <p>'3shades' reduces the analog greyscale levels to three specific shades and removes all ghosting effects. It is adequate for most games.</p> <p>'2shades' causes the screen to behave as a purely digital monochrome display, either full light or full dark. WARNING: This will cause severe flickering in most games.</p> </li> <li> <p>LCD Contrast [pokemini_lcdcontrast] (64|0|16|32|48|80|96)</p> <p>Sets contrast level of emulated liquid crystal display.</p> </li> <li> <p>LCD Brightness [pokemini_lcdbright] (0|-80|-60|-40|-20|20|40|60|80)</p> <p>Sets brightness offset of emulated liquid crystal display.</p> </li> <li> <p>Palette [pokemini_palette] (Default|Old|Monochrome|Green|Green Vector|Red|Red Vector|Blue LCD|LEDBacklight|Girl Power|Blue|Blue Vector|Sepia|Monochrome Vector)</p> <p>Specifies palette used to 'colourise' the emulated liquid crystal display. 'Default' provides a close approximation of the natural screen tint of the original Pok\u00e9mon Mini hardware. Palettes with a 'Vector' suffix correspond to inverted colours.</p> </li> </ul> Palette - Default <p></p> Palette - Old <p></p> Palette - Monochrome <p></p> Palette - Green <p></p> Palette - Green Vector <p></p> Palette - Red <p></p> Palette - Red Vector <p></p> Palette - Blue LCD <p></p> Palette - LEDBacklight <p></p> Palette - Girl Power <p></p> Palette - Blue <p></p> Palette - Blue Vector <p></p> Palette - Sepia <p></p> Palette - Monochrome Vector <p></p> <ul> <li> <p>Piezo Filter [pokemini_piezofilter] (ON|OFF)</p> <p>Enables an audio filter to more accurately simulate the characteristics of the Pok\u00e9mon Mini's piezoelectric speaker.</p> </li> <li> <p>Rumble Level (Screen + Controller) [pokemini_rumblelvl] (3|2|1|0)</p> <p>Specifies the magnitude of the force feedback effect, both virtual ('screen shake') and physical ('controller rumble').</p> </li> <li> <p>Controller Rumble [pokemini_controller_rumble] (ON|OFF)</p> <p>Enables physical force feedback effect via controller rumble.</p> </li> <li> <p>Screen Shake [pokemini_screen_shake] (ON|OFF)</p> <p>Enables virtual force feedback effect by 'shaking' the screen. This is helpful when using a controller without physical rumble support, since a number of games rely on force feedback to prompt user action.</p> </li> </ul>"},{"location":"library/pokemini/#rumble","title":"Rumble","text":"<p>Rumble only works in the PokeMini core when</p> <ul> <li>The content being ran has rumble support.</li> <li>The frontend being used has rumble support.</li> <li>The joypad device being used has rumble support.</li> <li>The core option 'Rumble Level' is set to any value other than '0'.</li> <li>The core option 'Controller Rumble' is set to 'ON'.</li> </ul> <p>Attention</p> <p>If physical rumble is not supported, it is recommended to set the core option 'Screen Shake' to 'ON'.</p>"},{"location":"library/pokemini/#joypad","title":"Joypad","text":"RetroPad Inputs User 1 input descriptors B Power D-Pad Up D-Pad Down D-Pad Left D-Pad Right A Shake C"},{"location":"library/pokemini/#compatibility","title":"Compatibility","text":"Game Issue Pokemon Pinball Mini EEPROM saves do not function correctly - use save states instead Pokemon Race Mini EEPROM saves do not function correctly - use save states instead"},{"location":"library/pokemini/#external-links","title":"External Links","text":"<ul> <li>Official PokeMini SourceForge Repository</li> <li>Libretro PokeMini Core info file</li> <li>Libretro PokeMini Github Repository</li> <li>Report Libretro PokeMini Core Issues Here</li> <li>Gameplay Videos</li> </ul>"},{"location":"library/ppsspp/","title":"Sony - PlayStation Portable (PPSSPP)","text":""},{"location":"library/ppsspp/#background","title":"Background","text":"<p>A PSP emulator for Android, Windows, Mac and Linux, written in C++.</p> <p>The PPSSPP core supports OpenGL, Vulkan, and Direct3D 11 rendering.</p> <p>The PPSSPP core has been authored by</p> <ul> <li>Henrik Hrydgard</li> </ul> <p>The PPSSPP core is licensed under</p> <ul> <li>GPLv2</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/ppsspp/#requirements","title":"Requirements","text":"<ul> <li>OpenGL/Open GL ES 2.0 or higher for the OpenGL renderer.</li> <li>Vulkan for the Vulkan renderer.</li> <li>Direct3D 11 for the Direct3D 11 renderer.</li> </ul>"},{"location":"library/ppsspp/#bios","title":"BIOS","text":"<p>The PPSSPP core requires assets files to be fully functional.</p> <p>Assets such as fonts and backgrounds that are required for memory card screens.</p> <p>In order to acquire PPSSPP's assets files and install them succcessfully, follow these steps.</p> <p>Info</p> <p>Lakka users do not need to follow these steps. Lakka image ships with the assets already included. Those assets are compatible with the version of the core provided in the Lakka image. Using not compatible assets may lead to unexpected results.</p>"},{"location":"library/ppsspp/#installing-from-the-core-system-files-downloader","title":"Installing from the 'Core System Files Downloader'","text":"<p>If your frontend version has <code>Main Menu &gt; Online Updater &gt; Core System Files Downloader</code> then that's the easiest solution, just download 'PPSSPP.zip' from that menu and you're all done!</p>"},{"location":"library/ppsspp/#installing-from-the-github-repo","title":"Installing from the GitHub repo","text":"<p>1 . Create a directory named PPSSPP in RetroArch's System directory.</p> <pre><code>RetroArch/\n         \u2514\u2500\u2500 system/\n                   \u2514\u2500\u2500 PPSSPP/\n</code></pre> <p>Here's an example of what it should look like.</p> <p></p> <p>2 . Visit https://github.com/hrydgard/ppsspp and download the repository.</p> <p></p> <p>3 . Extract ppsspp-master.zip</p> <p>4 . Copy the contents of <code>ppsspp-master/assets</code> into 'system/PPSSPP'</p> <p>The end result should look like this.</p> <p></p> <p>Attention</p> <p>Don't like PPSSPP's replacement fonts? You can place the original PSP fonts in 'system/PPSSPP/flash0/font'</p>"},{"location":"library/ppsspp/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the PPSSPP core have the following file extensions:</p> <ul> <li>.elf</li> <li>.iso</li> <li>.cso</li> <li>.prx</li> <li>.pbp</li> </ul> <p>RetroArch database(s) that are associated with the PPSSPP core:</p> <ul> <li>Sony - PlayStation Portable</li> </ul>"},{"location":"library/ppsspp/#features","title":"Features","text":"<p>Frontend-level settings or features that the PPSSPP core respects.</p> Feature Supported Restart \u2714 Saves \u2714 States \u2714 Rewind \u2715 Netplay \u2715 Core Options \u2714 Memory Monitoring (achievements) \u2714 RetroArch Cheats \u2715 Native Cheats \u2714 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2714 Language \u2714 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/ppsspp/#directories","title":"Directories","text":"<p>The PPSSPP core's library name is 'PPSSPP'</p> <p>The PPSSPP core saves/loads to/from these directories.</p> <p>Frontend's Save directory</p> <pre><code>.\n\u2514\u2500\u2500 PSP/\n       \u251c\u2500\u2500 PPSSPP_STATE/ (Used to be the state directory, no longer used)\n       \u251c\u2500\u2500 SAVEDATA/ (In-game saves)\n       \u251c\u2500\u2500 flash0/ (Font override for real fonts dumped from PSP system)\n       \u251c\u2500\u2500 Cheats/ (Internal Cheats directory, disabled by default)\n       \u251c\u2500\u2500 GAME/ (DLC directory)\n       \u2514\u2500\u2500 SYSTEM/\n                 \u2514\u2500\u2500 CACHE/ (Shader cache)\n</code></pre> <p>Frontend's State directory</p> File Description *.state# State"},{"location":"library/ppsspp/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The PPSSPP core's core provided FPS is 60</li> <li>The PPSSPP core's core provided sample rate is 44100 Hz</li> <li>The PPSSPP core's base width is dependent on the 'Internal Resolution' core option</li> <li>The PPSSPP core's base height is dependent on the 'Internal Resolution' core option</li> <li>The PPSSPP core's max width is dependent on the 'Internal Resolution' core option</li> <li>The PPSSPP core's max height is dependent on the 'Internal Resolution' core option</li> <li>The PPSSPP core's core provided aspect ratio is 16/9</li> </ul>"},{"location":"library/ppsspp/#language","title":"Language","text":"<p>When the 'Language' core option is set to automatic, the default PPSSPP language setting will be pulled from RetroArch's Language setting.</p>"},{"location":"library/ppsspp/#nickname","title":"Nickname","text":"<p>PPSSPP's default nickname setting is pulled from RetroArch's nickname setting.</p>"},{"location":"library/ppsspp/#internal-cheats","title":"Internal Cheats","text":"<p>Disabled by default.</p> <p>To enable and allow the use of ini cheat files in save\\PSP\\Cheats, set the 'Internal Cheats Support' core option to enabled.</p> <p>Cheats can be used to unlock 60fps in several 30fps games.</p> <p>Each code can be activated or disabled in the ini directly with _C1 in place of _C0 on the title line.</p> <p>PPSSPP forums thread</p>"},{"location":"library/ppsspp/#dlc","title":"DLC","text":"<p>DLCs need to be installed in the GAME directory. Create the GAME directory in the PSP directory and it should look like this.</p> <p>RetroArch\\saves\\PPSSPP\\PSP\\GAME\\</p>"},{"location":"library/ppsspp/#opengl","title":"OpenGL","text":"<p>PPSSPP's OpenGL renderer can be used by setting RetroArch's video driver to gl.</p> <p>The common option for all operating systems is OpenGL, requiring hardware that supports OpenGL/Open GL ES 2.0 or higher. It is an older, pre-Vulkan API, slower than Vulkan but with better compatibility. If you encounter problems with other APIs, try this one.</p>"},{"location":"library/ppsspp/#vulkan","title":"Vulkan","text":"<p>PPSSPP's Vulkan renderer can be used by setting RetroArch's video driver to vulkan.</p> <p>This is the latest and fastest API currently. It is most recommended for demanding less of your CPU, thus being the fastest.</p>"},{"location":"library/ppsspp/#d3d11","title":"D3D11","text":"<p>PPSSPP's Direct3D 11 renderer can be used by setting RetroArch's video driver to d3d11.</p> <p>In some cases Direct3D 11 may offer better performance than OpenGL, especially on integrated Intel graphics.</p>"},{"location":"library/ppsspp/#core-options","title":"Core options","text":"<p>The PPSSPP core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded.</p> <p>Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch.</p> <ul> <li> <p>CPU Core [ppsspp_cpu_core] (jit|IR jit|interpreter)</p> <p>The jit setting enables the Dynamic Recomplier (Dynarec) for CPU emulation. The Dynarec is much faster than the interpreter setting and is the default, recommended mode for supported architectures.</p> <p>The interpreter setting enables the Interpreter for CPU emulation. The Interpreter is a very slow type of emulation and mostly useful for debug, but should work anywhere.</p> <p>The IR jit setting might be worth trying against games which are broken in the other two settings.</p> </li> <li> <p>Locked CPU Speed [ppsspp_locked_cpu_speed] (off|222MHz|266MHz|333MHz)</p> <p>Allows you to lock the internal CPU clock of the emulator (of the emulated CPU).</p> <p>Larger clocks can ensure a more stable performance in certain games that present problems even on a real PSP, but it requires more powerful hardware.</p> <p>Lower clocks can help weak hardware have more comfortable gameplay, limiting FPS to a lower rate.</p> <p>Changing this option opens the door to several bugs that may compromise some games.</p> <p>In case of doubt, keep this on off.</p> </li> <li> <p>Language [ppsspp_language] (automatic|english|japanese|french|spanish|german|italian|dutch|portuguese|russian|korean|chinese_traditional|chinese_simplified)</p> <p>Configure the PPSSPP's system language.</p> <p>When set to automatic, the default PPSSPP language setting will be pulled from RetroArch's Language setting.</p> </li> <li> <p>Rendering Mode [ppsspp_rendering_mode] (buffered|nonbuffered)</p> <p>Buffered mode renders graphics close to what is in the actual PSP, with all the effects and with the least possible bugs.</p> <p>Nonbuffered mode skips most heavier graphics effects like blur, bloom, reflections, shadows, and more. It can be used as a speed hack if it is underperforming because of a weak GPU.</p> </li> <li> <p>True Color Depth [ppsspp_true_color] (enabled|disabled)</p> <p>Enhance the colors compared to the older models of PSPs which have lower quality screens.</p> <p>It's best to keep this enabled.</p> </li> <li> <p>Auto Frameskip [ppsspp_auto_frameskip] (disabled|enabled)</p> <p>This option only selects the optimal number of frames to skip to not to compromise both gameplay. The max frames to be skipped can be limited in the Frameskip option.</p> </li> <li> <p>Frameskip [ppsspp_frameskip] (0|1|2|3|4|5|6|7|8|9)</p> <p>This option skips image frames to increase the emulation speed. They can be skipped between 1 and 8 frames every second. Using this option can give the impression of the game running faster but with stuttering, and this increases the amount of frames to be skipped you select. This option is only effective when your processor is powerful enough.</p> </li> <li> <p>Force Max FPS [ppsspp_force_max_fps] (disabled|enabled)</p> <p>Prevents FPS form exceeding 60.</p> <p>This option was created in order to help God of War games that used to have a performance problem because the FPS were higher than normal. This option locks the FPS to 60 to avoid this problem.</p> </li> <li> <p>Audio latency [ppsspp_audio_latency] (low|medium|high)</p> <p>Configure the audio latency.</p> </li> <li> <p>Internal Resolution [ppsspp_internal_resolution] (480x272|960x544|1440x816|1920x1088|2400x1360|2880x1632|3360x1904|3840x2176|4320x2448|4800x2720)</p> <p>The 'Rendering Mode' core option must be set to buffered for this to have any effect.</p> <p>Controls the internal resolution of the graphics, significant performance impact if your GPU is not powerful enough for certain resolutions.</p> </li> <li> <p>Confirmation Button [ppsspp_button_preference] (cross|circle)</p> <p>Select whether the cross input or the circle input is the confirmation button.</p> </li> <li> <p>Fast Memory (Speedhack) [ppsspp_fast_memory] (enabled|disabled)</p> <p>This option avoids some memory accesses by caching information, however a few games may have problems when this option is enabled, most run with no problem.</p> </li> <li> <p>Block Transfer GPU [ppsspp_block_transfer_gpu] (enabled|disabled)</p> <p>This option simulates support for rendering effects not supported by current hardware, but supported by PSP hardware. Fixes multiple graphics problems in a number of games, but decreases performance on weaker GPUs (on smartphones). Disabling can greatly impact performance, and can be a great help in games that do not need this option enabled.</p> </li> <li> <p>Texture Scaling Level [ppsspp_texture_scaling_level] (1|2|3|4|5|0)</p> <p>With this option, you can make modifications to the texture scale level, which improves the visual at high resolutions.</p> <p>All the scaling is made by CPU and results in a great performance impact. Use carefully.</p> </li> <li> <p>Texture Scaling Type [ppsspp_texture_scaling_type] (xbrz|hybrid|bicubic|hybrid_bicubic)</p> <p>Choose the Texture Upscale Type.</p> <p>xBRZ is overall the best option while Hybrid is a slower version of xBRZ and doesn't offers much difference, Hybrid + Bicubic is the slowest one using two effects.</p> </li> <li> <p>Texture Filtering [ppsspp_texture_filtering] (auto|nearest|linear|linear(FMV))</p> <p>Apply texture filtering.</p> <p>Stick to auto in case of doubt.</p> </li> <li> <p>Anisotropic Filtering [ppsspp_texture_anisotropic_filtering] (off|1x|2x|4x|8x|16x)</p> <p>Modify the Anisotropic Filtering, which fixes the textures on the horizon that are drawn at angles resulting in a better look.</p> </li> <li> <p>Texture Deposterize [ppsspp_texture_deposterize] (disabled|enabled)</p> <p>Deposterize fixes small in-texture glitches that may happen when the texture is upscaled.</p> </li> <li> <p>GPU Hardware T&amp;L [ppsspp_gpu_hardware_transform] (enabled|disabled)</p> <p>Uses the hardware to generate lighting and shading effects. With this option disabled performance may drop a lot on weak GPUs. Bugs are rare, but if found, can be disabled for testing.</p> </li> <li> <p>Vertex Cache (Speedhack) [ppsspp_vertex_cache] (enabled|disabled)</p> <p>Uses vertex cache to improve performance in few games, in rare cases can cause glitches in geometry. Some games have reduced performance with this option enabled. This option mostly benefits OpenGL API, doesn't need to be enabled to other backends.</p> </li> <li> <p>IO Threading [ppsspp_separate_io_thread] (disabled|enabled)</p> <p>Uses separate CPU thread for input/output of files (read data).</p> </li> <li> <p>Unsafe FuncReplacements [ppsspp_unsafe_func_replacements] (enabled|disabled)</p> <p>Enable unsafe CPU function replacements.</p> <p>May make games playable.</p> </li> <li> <p>Sound Speedhack [ppsspp_sound_speedhack] (disabled|enabled)</p> <p>It helps in some games, like Dead or Alive, with problems in sound speed.</p> </li> <li> <p>Internal Cheats Support [ppsspp_cheats] (disabled|enabled)</p> <p>Enables internal cheats. Look at the Internal Cheats section for more information.</p> </li> </ul>"},{"location":"library/ppsspp/#joypad","title":"Joypad","text":"RetroPad Inputs User 1 input descriptors Cross Square Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right Circle Triangle L R  X Analog X  Y Analog Y"},{"location":"library/ppsspp/#compatibility","title":"Compatibility","text":"<ul> <li>PPSSPP Compatibility List</li> </ul>"},{"location":"library/ppsspp/#external-links","title":"External Links","text":"<ul> <li>Official PPSSPP Website</li> <li>Official PPSSPP Github Repository</li> <li>Libretro PPSSPP Core info file</li> <li>Report Libretro PPSSPP Core Issues Here</li> <li>Gameplay Videos</li> </ul>"},{"location":"library/prboom/","title":"Doom (PrBoom)","text":""},{"location":"library/prboom/#background","title":"Background","text":"<p>Port of prboom to libretro - plays Doom, Doom II, Final Doom and other Doom IWAD mods.</p> <p>The PrBoom core has been authored by</p> <ul> <li>Florian Schulze</li> </ul> <p>The PrBoom core is licensed under</p> <ul> <li>GPLv2</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/prboom/#bios","title":"BIOS","text":"<p>Required or optional firmware files go in the frontend's system directory.</p> Filename Description prboom.wad PrBoom requires data ROM 'prboom.wad' inside the SYSTEM directory."},{"location":"library/prboom/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the PrBoom core have the following file extensions:</p> <ul> <li>.wad</li> <li>.iwad</li> <li>.pwad</li> </ul> <p>RetroArch database(s) that are associated with the PrBoom core:</p> <ul> <li>DOOM</li> </ul>"},{"location":"library/prboom/#features","title":"Features","text":"<p>Frontend-level settings or features that the PrBoom core respects.</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2714 Memory Monitoring (achievements) \u2715 RetroArch Cheats \u2714 Native Cheats \u2714 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/prboom/#directories","title":"Directories","text":"<p>The PrBoom core's library name is 'PrBoom'</p> <p>The PrBoom core saves/loads to/from these directories.</p> <p>Frontend's Save directory</p> File Description (content name)/*.dsg Save (content name)/prboom.cfg DOOM Config"},{"location":"library/prboom/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The PrBoom core's core provided FPS (by default) is 60</li> <li>The PrBoom core's core provided sample rate is 44100 Hz</li> <li>The PrBoom core's base width is dependent on the Internal resolution core option.</li> <li>The PrBoom core's base height is dependent on the Internal resolution core option.</li> <li>The PrBoom core's max width is dependent on the Internal resolution core option.</li> <li>The PrBoom core's max height is dependent on the Internal resolution core option.</li> <li>The PrBoom core's core provided aspect ratio is 4/3</li> </ul>"},{"location":"library/prboom/#loading-doom","title":"Loading DOOM","text":"<p>PrBoom can load wad, iwad, and pwad files. The PrBoom core requires data ROM 'prboom.wad' inside the loaded content's or system directory.</p> <p>Tip</p> <p>If you start the games by loading prboom.wad they will all share the same content name (\"prboom\" in this case), so the core will put the saves for every game in a single retroarch/saves/prboom/ folder and when playing Doom 2 for example you'll see Doom 1 saves, etc. which will cause confusion for the user. The games will also share the same game overrides/options files/remaps/etc. History tab will also lists each game as \"prboom\".  </p> <p>An example folder structure would be like so:</p> <pre><code>\u2514\u2500\u2500 contents/\n    \u2514\u2500\u2500 dooms/\n        \u251c\u2500\u2500 doom/\n        \u2502   \u251c\u2500\u2500 doom.wad\n        \u2502   \u2514\u2500\u2500 [music_files].mp3\n        \u2514\u2500\u2500 doom2/\n            \u251c\u2500\u2500 doom2.wad\n            \u2514\u2500\u2500 [music_files].mp3\n</code></pre> <pre><code>\u2514\u2500\u2500 retroarch/\n    \u2514\u2500\u2500 system\n     \u2514\u2500\u2500 prboom.wad\n</code></pre> <p>Game saves and internal configuration files will be created in the frontend-defined save directory, organised in folders matching the filenames of loaded content - for example:</p> <pre><code>\u2514\u2500\u2500 saves/\n    \u2514\u2500\u2500 PrBoom/\n        \u251c\u2500\u2500 doom/\n        \u2502   \u251c\u2500\u2500 prbmsav0.dsg\n        \u2502   \u251c\u2500\u2500 prbmsav1.dsg\n        \u2502   \u2514\u2500\u2500 prboom.cfg\n        \u2514\u2500\u2500 doom2/\n            \u251c\u2500\u2500 prbmsav0.dsg\n            \u251c\u2500\u2500 prbmsav1.dsg\n            \u2514\u2500\u2500 prboom.cfg\n</code></pre> <p>Game saves are numbered from 'prbmsav0.dsg' to 'prbmsav7.dsg'.</p>"},{"location":"library/prboom/#sigil","title":"SIGIL","text":"<p>Sigil (stylized as SIGIL) is the unofficial fifth episode of the 1993 video game Doom. Published by Romero Games on May 31, 2019, the Megawad was created by an original co-creator of Doom, John Romero, independently of the main game's then-current owner, Bethesda Softworks. It has nine missions, each with a deathmatch version, and a new soundtrack created by James Paddock and Buckethead.</p> <p>You can get SIGIL here</p> <p>Turn off 'Look on parent folders for IWADs' inside Quick Menu - Options. This is usually enabled by default, so disable it.</p> <p>Make sure that you place the SIGIL wad files inside the same directory as your Doom/Ultimate Doom WAD file. You can name this either doomu.wad or doom.wad. Make sure there are NO doom2.wad files inside this same directory, or Sigil might not work properly.</p> <p>An example folder structure would be like so:</p> <pre><code>\u2514\u2500\u2500 contents/\n    \u2514\u2500\u2500 dooms/\n        \u2514\u2500\u2500 doom/\n            \u251c\u2500\u2500 doom.wad\n            \u251c\u2500\u2500 SIGIL.WAD\n            \u2514\u2500\u2500 [music_files].mp3\n</code></pre> <pre><code>\u2514\u2500\u2500 retroarch/\n    \u2514\u2500\u2500 system/\n     \u2514\u2500\u2500 prboom.wad\n</code></pre>"},{"location":"library/prboom/#music","title":"Music","text":"<p>If mp3 files are detected in the game folder, PrBoom will play these tracks instead of the internal MIDI musics, see below for the required filenames for each game.</p>"},{"location":"library/prboom/#doom","title":"Doom","text":"<p>Note</p> <p>Episode 4 doesn't have exclusive musics, it uses tracks from the previous episodes.</p> Filename Description bunny.mp3 Endgame Music e1m1.mp3 E1M1 e1m2.mp3 E1M2 e1m3.mp3 E1M3 e1m4.mp3 E1M4 e1m5.mp3 E1M5 e1m6.mp3 E1M6 e1m7.mp3 E1M7 e1m8.mp3 E1M8 e1m9.mp3 E1M9 e2m1.mp3 E2M1 e2m2.mp3 E2M2 e2m3.mp3 E2M3 e2m4.mp3 E2M4 e2m5.mp3 E2M5 e2m6.mp3 E2M6 e2m7.mp3 E2M7 e2m8.mp3 E2M8 e2m9.mp3 E2M9 e3m1.mp3 E3M1 e3m2.mp3 E3M2 e3m3.mp3 E3M3 e3m4.mp3 E3M4 e3m5.mp3 E3M5 e3m6.mp3 E3M6 e3m7.mp3 E3M7 e3m8.mp3 E3M8 e3m9.mp3 E3M9 inter.mp3 Intermission Music intro.mp3 Title Music victor.mp3 Victory Music"},{"location":"library/prboom/#doom-ii-plutonia-tnt","title":"Doom II, Plutonia, TNT","text":"<p>Note</p> <p>These 3 games share the same music filenames but the musics are actually different, for this reason it is recommended to have the games in separated folders.</p> Filename Description adrian.mp3 MAP25 ampie.mp3 MAP23 betwee.mp3 MAP04 count2.mp3 MAP21 countd.mp3 MAP03 ddtbl2.mp3 MAP14 ddtbl3.mp3 MAP22 ddtblu.mp3 MAP08 dead.mp3 MAP10 dead2.mp3 MAP16 dm2int.mp3 Intermission Music dm2ttl.mp3 Title Music doom.mp3 MAP05 doom2.mp3 MAP13 evil.mp3 MAP31 in_cit.mp3 MAP09 messag.mp3 MAP20 messg2.mp3 MAP26 openin.mp3 MAP30 read_m.mp3 Endgame Music romer2.mp3 MAP27 romero.mp3 MAP18 runni2.mp3 MAP15 runnin.mp3 MAP01 shawn.mp3 MAP07 shawn2.mp3 MAP19 shawn3.mp3 MAP29 stalks.mp3 MAP02 stlks2.mp3 MAP11 stlks3.mp3 MAP17 tense.mp3 MAP28 theda2.mp3 MAP12 theda3.mp3 MAP24 the_da.mp3 MAP06 ultima.mp3 MAP32"},{"location":"library/prboom/#sigil_1","title":"SIGIL","text":"Filename Description e5m1.mp3 E5M1 e5m2.mp3 E5M2 e5m3.mp3 E5M3 e5m4.mp3 E5M4 e5m5.mp3 E5M5 e5m6.mp3 E5M6 e5m7.mp3 E5M7 e5m8.mp3 E5M8 e5m9.mp3 E5M9 inter.mp3 Intermission Music intro.mp3 Title Music"},{"location":"library/prboom/#config","title":"Config","text":"<p>PrBoom's internal game settings can be found in the 'prboom.cfg' file inside each game's save directory.</p> <p>Many of these settings may be changed from the in-game menu. A few notable options are as follows:</p> <ul> <li> <p>Options \u2192 General (page 1) \u2192 Framerate (35fps|40fps|50fps|60fps|70fps|72fps|75fps|90fps|100fps| 119fps|120fps|140fps|144fps|240fps|244fps)</p> <p>Vanilla Doom has a native framerate of 35fps. This should be considered the 'correct' value, but it can lead to an irregular 'stuttering' effect on 60Hz LCD displays.</p> <p>All framerates should maintain the proper game speed.</p> </li> <li> <p>Options \u2192 General (page 1) \u2192 Gamma Correction (Off|Lv. 1|Lv. 2|Lv. 3|Lv. 4)</p> <p>Sets display brightness.</p> </li> <li> <p>Options \u2192 Screen Size (Low|High)</p> <p>When set to 'Low', the HUD is shown at the bottom of the screen.</p> <p>When set to 'High', the gameplay area fills the screen and no HUD is shown.</p> </li> <li> <p>Options \u2192 Mouse Sensitivity</p> <p>The 'horizontal' slider sets the movement speed when looking left/right with either the mouse or the gamepad right analog stick.</p> </li> </ul>"},{"location":"library/prboom/#core-options","title":"Core options","text":"<p>The PrBoom core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded.</p> <p>Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch.</p> <ul> <li> <p>Internal resolution (restart) [prboom-resolution] (320x200|640x400|960x600|1280x800|1600x1000|1920x1200)</p> <p>Configure the resolution. Requires a restart.</p> </li> </ul> Internal resolution - 320x200 <p></p> Internal resolution - 1920x1200 <p></p> <ul> <li> <p>Mouse active when using Gamepad [prboom-mouse_on] (disabled|enabled)</p> <p>Allows you to use mouse inputs even when User 1's device type isn't set to 'RetroKeyboard/Mouse'.</p> </li> <li> <p>Look on parent folders for IWADs [prboom-find_recursive_on] (enabled|disabled)</p> <p>Scans parent folders for IWADs. NOTE: You need to disable this if you want to run SIGIL.</p> </li> <li> <p>Analog Deadzone (percent) [prboom-analog_deadzone] (15|20|25|30|0|5|10)</p> <p>Sets the deadzone of the Gamepad analog sticks when the input device type is set to 'Gamepad Modern'.</p> </li> </ul>"},{"location":"library/prboom/#user-1-device-types","title":"User 1 device types","text":"<p>The PrBoom core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p> <ul> <li>None - Input disabled.</li> <li>Gamepad Classic - Joypad</li> <li>Gamepad Modern - Joypad</li> <li>RetroKeyboard/Mouse - Keyboard and Mouse - Switch to this for keyboard and mouse input. Has keymapper support.</li> </ul>"},{"location":"library/prboom/#joypad","title":"Joypad","text":"User 1 input descriptors for 'Gamepad Classic' device type RetroPad Inputs PrBoom inputs Use Use Run Run Show/Hide Map Show/Hide Map Show/Hide Menu Show/Hide Menu D-Pad Up D-Pad Up D-Pad Down D-Pad Down D-Pad Left D-Pad Left D-Pad Right D-Pad Right Fire Fire Strafe Strafe Strafe Left Strafe Left Strafe Right Strafe Right Previous Weapon Previous Weapon Next Weapon Next Weapon User 1 input descriptors for 'Gamepad Modern' device type RetroPad Inputs PrBoom inputs Menu Cancel Menu Cancel Quick Save Quick Save Show/Hide Map Show/Hide Map Show/Hide Menu Show/Hide Menu D-Pad Up D-Pad Up D-Pad Down D-Pad Down D-Pad Left D-Pad Left D-Pad Right D-Pad Right Menu Select Menu Select Quick Load Quick Load Previous Weapon Previous Weapon Next Weapon Next Weapon Use Use Fire Fire Toggle Run Toggle Run 180 Turn 180 Turn  X Strafe Left/Right  Y Move Forwards/Backwards  X Look Left/Right"},{"location":"library/prboom/#keyboard-and-mouse","title":"Keyboard and Mouse","text":"RetroKeyboard/Mouse inputs Weapons Keyboard 1 Fist Keyboard 2 Pistol Keyboard 3 Shotgun Keyboard 4 Chaingun Keyboard 5 Rocket Keyboard 8 Chainsaw Keyboard 0 Best Keyboard Left Control Fire Keyboard Right Control Fire Wheel Up Next Weapon Wheel Down Previous Weapon  Mouse 1 Fire RetroKeyboard/Mouse inputs Movement Keyboard Up Forward Keyboard Down Backward Keyboard Left Turn Left Keyboard Right Turn Right Keyboard Left Shift Run Keyboard Right Shift Run Keyboard Less than &lt; Strafe Left Keyboard Greater than &gt; Strafe Right Keyboard Left Alt Strafe Keyboard Right Alt Strafe Keyboard Caps Lock Autorun Keyboard Slash / 180 Turn Keyboard Space Use  Mouse Cursor Turn Left/Right  Mouse 2 Strafe  Mouse 3 Use  Mouse 3 Forward RetroKeyboard/Mouse inputs Game Keyboard F2 Save Keyboard F3 Load Keyboard F6 Quicksave Keyboard F7 Endgame Keyboard F9 Quickload Keyboard F10 Quit RetroKeyboard/Mouse inputs Screen Keyboard F1 Help Keyboard Escape Menu Keyboard Home Setup Keyboard Pause Pause Keyboard Tab Automap Keyboard F4 Sound Volume Keyboard F5 HUD Keyboard F8 Messages Keyboard F11 Gamma Fix Keyboard F12 Spy Keyboard Minus - Smaller View Keyboard Plus + Larger View RetroKeyboard/Mouse inputs Automap Keyboard f Follow Mode Keyboard Minus - Zoom in Keyboard Plus + Zoom out Keyboard m Mark Place Keyboard c Clear Marks Keyboard o Full/Zoom Keyboard g Grid"},{"location":"library/prboom/#external-links","title":"External Links","text":"<ul> <li>Official PrBoom Website</li> <li>Official PrBoom SourceForge Repository</li> <li>Libretro PrBoom Core info file</li> <li>Libretro PrBoom Github Repository</li> <li>Report Libretro PrBoom Core Issues Here</li> </ul>"},{"location":"library/prboom/#id-software","title":"id Software","text":"<ul> <li>Quake 1 (TyrQuake)</li> </ul>"},{"location":"library/prosystem/","title":"Atari - 7800 (ProSystem)","text":""},{"location":"library/prosystem/#background","title":"Background","text":"<p>ProSystem is an Atari 7800 emulator.</p>"},{"location":"library/prosystem/#authorlicense","title":"Author/License","text":"<p>The ProSystem core has been authored by</p> <ul> <li>Greg Stanton</li> <li>Brian Berlin</li> <li>Leonis</li> <li>Greg DeMent</li> </ul> <p>The ProSystem core is licensed under</p> <ul> <li>GPLv2</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/prosystem/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the ProSystem core have the following file extensions:</p> <ul> <li>.a78</li> <li>.bin</li> </ul>"},{"location":"library/prosystem/#databases","title":"Databases","text":"<p>RetroArch database(s) that are associated with the ProSystem core:</p> <ul> <li>Atari - 7800</li> </ul>"},{"location":"library/prosystem/#bios","title":"BIOS","text":"<p>Required or optional firmware files go in the frontend's system directory.</p> Filename Description md5sum 7800 BIOS (U).rom 7800 BIOS - Optional 0763f1ffb006ddbe32e52d497ee848ae"},{"location":"library/prosystem/#features","title":"Features","text":"<p>Frontend-level settings or features that the ProSystem core respects.</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2715 States \u2714 Rewind \u2714 Netplay \u2715 Core Options \u2715 Memory Monitoring (achievements) \u2714 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/prosystem/#directories","title":"Directories","text":"<p>The ProSystem core's internal core name is 'ProSystem'</p> <p>The ProSystem core saves/loads to/from these directories.</p> <p>Frontend's State directory</p> <ul> <li>'content-name'.state# (State)</li> </ul>"},{"location":"library/prosystem/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The ProSystem core's core provided FPS is 60 for NTSC games and 50 for PAL games.</li> <li>The ProSystem core's core provided sample rate is 32640 Hz for NTSC games and 31200 Hz for PAL games</li> <li>The ProSystem core's core provided base width is 320</li> <li>The ProSystem core's core provided base height is 223 for NTSC games and 272 for PAL games</li> <li>The ProSystem core's core provided max width is 320</li> <li>The ProSystem core's core provided max height is 292</li> <li>The ProSystem core's core provided aspect ratio is 4/3</li> </ul>"},{"location":"library/prosystem/#controllers","title":"Controllers","text":"<p>The ProSystem core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/prosystem/#user-1-2-device-types","title":"User 1 - 2 device types","text":"<ul> <li>None - Doesn't disable input. There's no reason to switch to this.</li> <li>RetroPad - Joypad - Stay on this.</li> <li>RetroPad w/Analog - Joypad - Same as RetroPad. There's no reaosn to switch to this.</li> </ul>"},{"location":"library/prosystem/#controller-tables","title":"Controller tables","text":""},{"location":"library/prosystem/#joypad","title":"Joypad","text":"User 1 Remap descriptors RetroPad Inputs B Console Select Console Pause Up Down Left Right 2 Console Reset Left Difficulty Right Difficulty User 2 Remap descriptors RetroPad Inputs 1 Up Down Left Right 2"},{"location":"library/prosystem/#external-links","title":"External Links","text":"<ul> <li>Official ProSystem Website</li> <li>Official ProSystem Github Repository</li> <li>Libretro ProSystem Core info file</li> <li>Libretro ProSystem Github Repository</li> <li>Report Libretro ProSystem Core Issues Here</li> </ul>"},{"location":"library/puae/","title":"PUAE","text":""},{"location":"library/puae/#background","title":"Background","text":"<p>PUAE tries to continue where E-UAE left off. PUAE versioning is based on the merged WinUAE version.</p> <p>The PUAE core have been authored by</p> <ul> <li>UAE Team</li> </ul> <p>The PUAE core is licensed under</p> <ul> <li>GPLv2</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/puae/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the PUAE core have the following file extensions:</p>"},{"location":"library/puae/#floppies","title":"Floppies","text":"<ul> <li>.adf</li> <li>.adz</li> <li>.dms</li> <li>.fdi</li> <li>.ipf</li> <li>.raw</li> </ul>"},{"location":"library/puae/#hard-drives","title":"Hard drives","text":"<ul> <li>.hdf</li> <li>.hdz</li> <li>directory</li> </ul>"},{"location":"library/puae/#whdload","title":"WHDLoad","text":"<ul> <li>.lha</li> <li>.slave</li> <li>.info</li> </ul>"},{"location":"library/puae/#compact-discs","title":"Compact discs","text":"<ul> <li>.cue</li> <li>.ccd</li> <li>.chd</li> <li>.nrg</li> <li>.mds</li> <li>.iso</li> </ul>"},{"location":"library/puae/#other","title":"Other","text":"<ul> <li>.uae</li> <li>.m3u</li> <li>.zip</li> <li>.7z</li> </ul>"},{"location":"library/puae/#databases","title":"Databases","text":"<p>RetroArch database(s) that are associated with the PUAE core:</p> <ul> <li>Commodore - Amiga</li> </ul>"},{"location":"library/puae/#bios","title":"BIOS","text":"<p>Required or optional firmware files go in the frontend's system directory.</p> <p>The core has a somewhat compatible built-in AROS Kickstart, which is used as a fallback when the proper Kickstart is not found.</p> <p>Amiga Forever and TOSEC filenames are also accepted.</p> Filename Amiga Forever Description md5sum kick33180.A500 amiga-os-120.rom Kickstart v1.2 rev 33.180 85ad74194e87c08904327de1a9443b7a kick34005.A500 amiga-os-130.rom Kickstart v1.3 rev 34.005 82a21c1890cae844b3df741f2762d48d kick37175.A500 amiga-os-204.rom Kickstart v2.04 rev 37.175 dc10d7bdd1b6f450773dfb558477c230 kick37350.A600 amiga-os-205-a600.rom Kickstart v2.05 rev 37.350 465646c9b6729f77eea5314d1f057951 kick40063.A600 amiga-os-310-a600.rom Kickstart v3.1 rev 40.063 e40a5dfb3d017ba8779faba30cbd1c8e kick39106.A1200 amiga-os-300-a1200.rom Kickstart v3.0 rev 39.106 b7cc148386aa631136f510cd29e42fc3 kick40068.A1200 amiga-os-310-a1200.rom Kickstart v3.1 rev 40.068 646773759326fbac3b2311fd8c8793ee kick39106.A4000 amiga-os-300-a4000.rom Kickstart v3.0 rev 39.106 9b8bdd5a3fd32c2a5a6f5b1aefc799a5 kick40068.A4000 amiga-os-310-a4000.rom Kickstart v3.1 rev 40.068 9bdedde6a4f33555b4a270c8ca53297d kick34005.CDTV amiga-os-130-cdtv-ext.rom CDTV extended ROM v1.00 89da1838a24460e4b93f4f0c5d92d48d kick40060.CD32 amiga-os-310-cd32.rom CD32 Kickstart v3.1 rev 40.060 5f8924d013dd57a89cf349f4cdedc6b1 kick40060.CD32.ext amiga-os-310-cd32-ext.rom CD32 extended ROM rev 40.060 bb72565701b1b6faece07d68ea5da639 kick40060.CD32 CD32 KS + extended v3.1 rev 40.060 f2f241bf094168cfb9e7805dc2856433"},{"location":"library/puae/#features","title":"Features","text":"<p>Frontend-level settings or features that the PUAE core respect.</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2715 Core Options \u2714 Memory Monitoring (achievements) \u2714 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2714 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2714 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2714"},{"location":"library/puae/#directories","title":"Directories","text":"<p>The PUAE core's internal core name is 'puae'.</p> <p>The PUAE core saves/loads to/from these directories.</p> <p>Frontend's Save directory</p> <ul> <li>'content-name'.nvr (CD32/CDTV NVRAM)</li> <li><code>BootHD</code>/<code>puae_libretro.hdf</code> (Optional global boot hard drive image directory/file)</li> <li><code>WHDLoad</code>/<code>WHDLoad.hdf</code> (WHDLoad helper image directory/file)</li> <li><code>WHDSaves</code>/<code>WHDSaves.hdf</code> (WHDLoad save image directory/file)</li> </ul> <p>Frontend's State directory</p> <ul> <li>'content-name'.state# (State)</li> </ul>"},{"location":"library/puae/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The PUAE core's core provided FPS is dynamic, but initially by default 50 for PAL and 59.94 for NTSC</li> <li>The PUAE core's core provided sample rate is 44100 Hz</li> <li>The PUAE core's base width is 360 in LoRes, 720 in HiRes 1440 in SuperHires</li> <li>The PUAE core's base height is 288 for PAL single line, 576 for PAL double line, 240 for NTSC single line, 480 for NTSC double line</li> <li>The PUAE core's max width is 1440</li> <li>The PUAE core's max height is 576</li> <li>The PUAE core's core provided aspect ratio is automatically set based on core options</li> </ul>"},{"location":"library/puae/#m3u-and-disk-control","title":"M3U and Disk control","text":"<p>When you have a multi disk game, you can use a M3U playlist file to be able to change disks via RetroArch Disc Control interface.</p> <p>A M3U file is a simple text file with one disk per line (Wikipedia).</p> <p>Example:</p> <p><code>Simpsons, The - Bart vs. The Space Mutants.m3u</code> <pre><code>Simpsons, The - Bart vs. The Space Mutants_Disk1.adf\nSimpsons, The - Bart vs. The Space Mutants_Disk2.adf\n</code></pre> Path can be absolute or relative to the location of the M3U file.</p> <p>When the game asks for it, you can change the current disk in the RetroArch \"Disc Control\" menu:</p> <ul> <li>Eject the current disk with \"Eject Disc\"</li> <li>Select the right disk index with \"Current Disc Index\"</li> <li>Insert the new disk with \"Insert Disc\"</li> </ul> <p>For games that support multiple disk drives, append \"(MD)\" as in \"MultiDrive\" to the M3U filename to insert each disk in different drives. Only possible with maximum 4 disks!</p> <p>MultiDrive option is enabled by default, so the tag is not necessary, but some games require disabling it, because they can't handle multiple disk drives.</p> <p>For games that require a dedicated save disk, one may be generated automatically by entering the following line in an M3U file: <code>#SAVEDISK:VolumeName</code>. <code>VolumeName</code> is optional and may be omitted. For example, this will create a blank, unlabelled disk image at disk index 5:</p> <p><code>Secret of Monkey Island.m3u</code> <pre><code>Secret of Monkey Island_Disk 1.adf\nSecret of Monkey Island_Disk 2.adf\nSecret of Monkey Island_Disk 3.adf\nSecret of Monkey Island_Disk 4.adf\n#SAVEDISK:\n</code></pre></p> <p>Some games require save disks to have a specific label - for example, <code>It Came from the Desert</code> will only save to a disk named <code>DSAVE</code>:</p> <p><code>It Came from the Desert.m3u</code> <pre><code>It Came from the Desert_Disk 1.adf\nIt Came from the Desert_Disk 2.adf\nIt Came from the Desert_Disk 3.adf\n#SAVEDISK:DSAVE\n</code></pre></p> <p>Although one save disk is normally sufficient, an arbitrary number of <code>#SAVEDISK:VolumeName</code> lines may be included. Save disks are located in the frontend's save directory, with the following name: <code>[M3U_FILE_NAME].save[DISK_INDEX].adf</code>.</p> <p>By default, RetroArch will display the filename (without extension) of each M3U entry when selecting a disk via the <code>Current Disc Index</code> drop-down menu. Custom display labels may be set for each disk using the syntax: <code>DISK_FILE|DISK_LABEL</code>. For example, the following M3U file:</p> <p><code>Valhalla &amp; the Fortress of Eve.m3u</code> <pre><code>Valhalla &amp; the Fortress of Eve_Disk1.adf|Game Disk\nValhalla &amp; the Fortress of Eve_Disk2.adf|Data Disk\nValhalla &amp; the Fortress of Eve_Disk3.adf|Level 1 Disk\nValhalla &amp; the Fortress of Eve_Disk4.adf|Level 2 Disk\nValhalla &amp; the Fortress of Eve_Disk5.adf|Level 3 Disk\nValhalla &amp; the Fortress of Eve_Disk6.adf|Level 4 Disk\n</code></pre></p> <p>...will be shown in RetroArch's disk selection menu as:</p> <pre><code>1: Game Disk\n2: Data Disk\n3: Level 1 Disk\n4: Level 2 Disk\n5: Level 3 Disk\n6: Level 4 Disk\n</code></pre> <p>If <code>DISK_LABEL</code> is intentionally left blank (i.e. <code>DISK_FILE|</code>) then only the disk index will be displayed.</p> <p>Save disks generated by the <code>#SAVEDISK:</code> keyword are automatically assigned the label: <code>Save Disk [SAVE_DISK_INDEX]</code>.</p>"},{"location":"library/puae/#extra-m3u-features","title":"Extra M3U features","text":"<ul> <li><code>#SAVEDISK:&lt;label&gt;</code><ul> <li>Create a save disk in <code>saves</code></li> </ul> </li> <li><code>&lt;disk&gt;.adf|&lt;label&gt;</code><ul> <li>Set a friendly name (shown in \"Disc Control\")</li> </ul> </li> <li><code>&lt;disks&gt;.zip#&lt;disk&gt;.adf</code><ul> <li>Specify a disk inside a ZIP with multiple disks (not needed with single file ZIPs)</li> </ul> </li> </ul> <p>M3U playlist supports floppy disks, hard drives (all images are mounted at once) and compact discs.</p>"},{"location":"library/puae/#zip-support","title":"ZIP support","text":"<p>ZIPs are extracted to a temporary directory in <code>saves</code>, bypassing the default frontend extraction. The temporary directory is emptied but not removed on exit. ZIP is not repacked, which means saves and highscores are lost.</p> <p>This allows:</p> <ul> <li>Automatic M3U playlist generation of all files</li> <li>The use of zipped images in M3Us</li> <li>If no compatible images are found, the ZIP will be treated as a directory</li> </ul>"},{"location":"library/puae/#floppy-drive-sounds","title":"Floppy drive sounds","text":"<p>The core has embedded internal floppy drive samples. External sound samples have to be copied from https://github.com/libretro/libretro-uae/tree/master/sources/uae_data into a directory named <code>uae_data</code> or <code>uae</code> in RetroArch <code>system</code> directory.</p>"},{"location":"library/puae/#ipf-support","title":"IPF support","text":"<p>Most full-price commercial Amiga games had some form of custom disk format and/or copy protection. For this reason, most commercial Amiga games cannot be stored in ADF files unaltered, but there is an alternative called Interchangeable Preservation Format (IPF) which was specifically designed for this purpose.</p> <p>IPF support is done through CAPSIMG library. To enable it you have to put the dynamic library called <code>capsimg.dll</code> (Windows) or <code>capsimg.so</code> (Linux, macOS) in RetroArch <code>system</code> or executable directory.</p> <p>Compatible CAPSIMG libraries for Windows, macOS and Linux can be found at http://www.softpres.org/download and https://fs-uae.net/download#plugins</p> <p>Compatible CAPSIMG libraries for Android can be found at https://github.com/rsn8887/capsimg/releases/latest</p> <p>Please be aware that there are 32-bits and 64-bits versions of the library. Choose the one corresponding to your RetroArch executable.</p>"},{"location":"library/puae/#usage","title":"Usage","text":""},{"location":"library/puae/#default-controls","title":"Default controls","text":"RetroPad button Action D-Pad Joystick Left Analog Mouse Right Analog Mouse B Fire button 1 / Red A Fire button 2 / Blue X Space L2 Left mouse button R2 Right mouse button Select (Short) Toggle virtual keyboard Select (Long) Toggle statusbar Select (Hold) Fast-Forward Keyboard key Action F12 Toggle statusbar RControl Switch between joystick/mouse"},{"location":"library/puae/#virtual-keyboard","title":"Virtual keyboard","text":"<p>The PUAE core has a virtual keyboard that can be accessed by default through RetroPad Select.</p> <p>The virtual keyboard can be controlled with:</p> <ul> <li> <p>RetroPad</p> Button Action D-Pad Move B Keypress A Toggle transparency Y Toggle CapsLock Y (Long) Quick map button Y (Very long) Quick clear button X Press Space Start Press Return </li> <li> <p>Keyboard</p> Key Action Cursors Move Enter Keypress CapsLock Toggle CapsLock </li> <li> <p>Mouse</p> </li> <li>Touch screen</li> </ul> <p>The virtual keyboard has these additional actions:</p> <ul> <li><code>J/M</code>  = Switch between joystick/mouse</li> <li> <p><code>TRBF</code> = Toggle turbo fire</p> </li> <li> <p>CapsLock off:</p> <ul> <li><code>ASPR</code> = Toggle aspect ratio</li> <li><code>STBR</code> = Toggle statusbar</li> </ul> </li> <li> <p>CapsLock on:</p> <ul> <li><code>CROP</code> = Toggle crop mode</li> <li><code>SVDS</code> = Create/Insert &amp; remove save disk</li> </ul> </li> <li> <p>Reset (long press = soft reset, shifted = WHDLoad QuitKey)</p> </li> <li>Mouse controls (Left+right button, up, down, left, right)</li> <li>Numpad key (Toggles numbers, arrows, Return etc. to numpad variants)</li> </ul> <p>Long press for sticky keys. Stickying the third key will replace the second.</p>"},{"location":"library/puae/#joyport-control","title":"Joyport control","text":"<p>Some games use mouse instead of joystick. D-Pad can be switched between joystick and mouse control in several ways:</p> <ul> <li>Use the core option: <code>Quick Menu -&gt; Options -&gt; RetroPad Joystick/Mouse</code></li> <li>Bring up the virtual keyboard with <code>Select</code> button, and press the key labeled <code>J/M</code></li> <li>Press the default keyboard shortcut <code>Right Control</code></li> <li>Assign <code>Switch Joystick/Mouse</code> to any RetroPad button under <code>Quick Menu -&gt; Options</code></li> </ul>"},{"location":"library/puae/#model-overriding","title":"Model overriding","text":"<p>You can force a specific model if a game needs one (AGA games for instance) either by the \"Model\" core option or by file path tags.</p> <p>The \"Model\" core option at \"Automatic\" will default to A500 when booting floppy disks, A1200 when booting hard drives, and CD32 when booting CD images.</p> <p>The whole path (filename and directory) will be searched for the following tags if the model is \"Automatic\":</p> Floppy HD/LHA CD String Result x x (A500OG), (512K), (512KB) Amiga 500 (0.5MB Chip RAM) x x (A500), OCS Amiga 500 (0.5MB Chip RAM + 0.5MB Slow RAM) x x (A500+), (A500PLUS) Amiga 500+ (1MB Chip RAM) x x (A600), ECS Amiga 600 (2MB Chip RAM + 8MB Fast RAM) x x (A1200OG), (A1200NF) Amiga 1200 (2MB Chip RAM) x x (A1200), AGA, CD32, AmigaCD Amiga 1200 (2MB Chip RAM + 8MB Fast RAM) x x (A4030), (030) Amiga 4000/030 (2MB Chip RAM + 8MB Fast RAM) x x (A4040), (040) Amiga 4000/040 (2MB Chip RAM + 8MB Fast RAM) x CDTV Amiga CDTV (1MB Chip RAM) x (CD32), (CD32NF) Amiga CD32 (2MB Chip RAM) x (CD32FR), FastRAM Amiga CD32 (2MB Chip RAM + 8MB Fast RAM) x x x NTSC, (USA) NTSC 60Hz x x x PAL, (Europe) (!) PAL 50Hz x (MD) (!!) Insert each disk in different drives x x x (CE) Force CPU Cycle-exact <ul> <li>(!) Additional tags: (Denmark), (Finland), (France), (Germany), (Italy), (Spain), (Sweden)</li> <li>(!!) Maximum 4 disks</li> </ul> <p>Example: When launching \"Alien Breed 2 AGA.hdf\" or \"AGA/Alien Breed 2.hdf\" the model will be Amiga 1200.</p> <p>Note: CD32 and AmigaCD are a bit misleading, since they have nothing to do with actual CDs. They are for automatically selecting the appropriate model with certain WHDLoad slaves and AmigaCD-to-HDF conversions.</p>"},{"location":"library/puae/#whdload_1","title":"WHDLoad","text":"<p>Pre-installed WHDLoad LHA archives can be launched directly without any kind of manual preparing and downloading.</p> <ul> <li>WHDLoad helper files (Directory or HDF) will be generated to <code>saves</code>, <code>WHDLoad.prefs</code> will be generated to <code>system</code></li> <li><code>WHDLoad.prefs</code> &amp; <code>WHDLoad.key</code> will be copied from <code>system</code> to the helper image</li> <li>Kickstarts will be copied automatically to the helper image</li> <li>To update <code>WHDLoad:</code> simply delete the directory or the HDF</li> </ul>"},{"location":"library/puae/#overrides-at-startup","title":"Overrides at startup","text":"<ul> <li>(Red) Hold fire button for launch selector<ul> <li>For alternate <code>.info</code> launching</li> </ul> </li> <li>(Red+Blue) Hold fire + 2<sup>nd</sup> fire for <code>ReadMe</code> + <code>MkCustom</code><ul> <li>For creating default <code>CUSTOM</code> parameters</li> </ul> </li> </ul>"},{"location":"library/puae/#whdload-splash-screen-core-option-overrides","title":"'WHDLoad Splash Screen' core option overrides","text":"<ul> <li>(Blue) Hold 2<sup>nd</sup> fire for WHDLoad Config<ul> <li>Waits for user input if the slave supports splash screen configurations</li> </ul> </li> <li>(LMB) Hold left mouse button for WHDLoad Splash<ul> <li>Briefly shows the splash screen while preloading (default WHDLoad behavior)</li> </ul> </li> <li>(RMB) Hold right mouse button for WHDLoad Config+Splash<ul> <li>Always waits for user input at the splash screen</li> </ul> </li> </ul> <p>For more detailed history of WHDLoad support visit the Github repository.</p>"},{"location":"library/puae/#using-configuration-files","title":"Using configuration files","text":"<p>You can pass <code>.uae</code> configuration files and they will be appended to the core option configuration.</p> <p>If <code>puae_libretro_[model].uae</code> exists in RetroArch <code>saves</code> it will be appended to the model preset section.</p> <p>If <code>puae_libretro_global.uae</code> exists in RetroArch <code>saves</code> it will be appended to the configuration.</p> <p>If <code>[content].uae</code> exists in RetroArch <code>saves</code> it will be appended to the configuration.</p> <p>The final generated configuration output is available in debug level log.</p> <p>Note that the use of configuration files is no longer encouraged or necessary. The core has been modified to always use the core options as a base, so that all custom configurations will be appended to the created configuration, effectively overriding the core options. The problem with this is that changing any core option while the core is running will reset all duplicate configurations. Therefore only add configurations which will require a restart or do not exist in the core options, if you must use a custom uae. If there is an option missing that is a must have, please make an issue about it.</p> <p>Example 1: You want to mount four non-RDB HDF files. You have one bootable 1000 MB file called <code>System.hdf</code> created with <code>surfaces=1</code>, and three non-bootable 2000 MB files called <code>WHDGamesA.hdf</code>, <code>WHDGamesB.hdf</code>, <code>WHDGamesC.hdf</code> created with <code>surfaces=2</code>. Your HDF files are located in the folder with absolute path <code>/emuroms/amiga/hdf/</code>. For that scenario, you should create a .uae text file with the following content: <pre><code>hardfile=read-write,32,1,2,512,/emuroms/amiga/hdf/System.hdf\nhardfile=read-write,32,2,2,512,/emuroms/amiga/hdf/WHDGamesA.hdf\nhardfile=read-write,32,2,2,512,/emuroms/amiga/hdf/WHDGamesB.hdf\nhardfile=read-write,32,2,2,512,/emuroms/amiga/hdf/WHDGamesC.hdf\n</code></pre></p> <p>Example 2: You want to mount a directory full of extracted data as a hard drive: <pre><code>filesystem2=rw,DH0:data:/emuroms/amiga/,0\n</code></pre></p> <p>Windows tip:</p> <ul> <li>If paths are enclosed with quotes, Windows needs double backslashes: <code>filesystem2=rw,DH0:data:\"c:\\\\emuroms\\\\amiga\",0</code>.</li> </ul> <p>Linux tip:</p> <ul> <li>Leave the ending slash to the path to make sure UAE sees it as a directory.</li> </ul> <p>If you are using RDB HDF files, please use <code>0,0,0,512</code> instead of geometry numbers like <code>32,1,2,512</code>. The geometry will then be read from the file. This only works for RDB HDF files.</p>"},{"location":"library/puae/#core-options","title":"Core options","text":"<p>The PUAE core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded.</p> <p>Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch.</p> <ul> <li> <p>Model [puae_model] (auto|A500OG|A500|A500PLUS|A600|A1200OG|A1200|A2000OG|A2000|A4030|A4040|CDTV|CD32|CD32FR)</p> <p>'Automatic' switches region per file path tags.</p> Value Label A500OG A500 (v1.2, 0.5M Chip) A500 A500 (v1.3, 0.5M Chip + 0.5M Slow) A500PLUS A500+ (v2.04, 1M Chip) A600 A600 (v3.1, 2M Chip + 8M Fast) A1200OG A1200 (v3.1, 2M Chip) A1200 A1200 (v3.1, 2M Chip + 8M Fast) A2000OG A2000 (v1.2, 0.5M Chip + 0.5M Slow) A2000 A2000 (v3.1, 1M Chip) A4030 A4000/030 (v3.1, 2M Chip + 8M Fast) A4040 A4000/040 (v3.1, 2M Chip + 8M Fast) CDTV CDTV (1M Chip) CD32 CD32 (2M Chip) CD32FR CD32 (2M Chip + 8M Fast) </li> <li> <p>Show Automatic Model Options [puae_model_options_display] (disabled|enabled)</p> <p>Show/hide default model options (Floppy/HD/CD) for 'Automatic' model. Page refresh by menu toggle required!</p> </li> <li> <p>Automatic Floppy [puae_model_fd] (A500OG|A500|A500PLUS|A600|A1200OG|A1200|A2000OG|A2000|A4030|A4040)</p> <p>Default model when floppies are launched with 'Automatic' model. Core restart required.</p> </li> <li> <p>Automatic HD [puae_model_hd] (A600|A1200OG|A1200|A2000|A4030|A4040)</p> <p>Default model when HD interface is used with 'Automatic' model. Affects WHDLoad installs and other hard drive images. Core restart required.</p> </li> <li> <p>Automatic CD [puae_model_cd] (CDTV|CD32|CD32FR)</p> <p>Default model when compact discs are launched with 'Automatic' model. Core restart required.</p> </li> <li> <p>Kickstart ROM [puae_kickstart] (auto|aros|kick33180.A500|kick34005.A500|kick37175.A500|kick37350.A600|kick40063.A600|kick39106.A1200|kick40068.A1200|kick39106.A4000|kick40068.A4000)</p> <p>'Automatic' defaults to the most compatible version for the model. 'AROS' is a built-in replacement with fair compatibility. Core restart required.</p> </li> <li> <p>Chip RAM [puae_chipmem_size] (auto|1|2|3|4)</p> <p>'Automatic' defaults to the current preset model. Core restart required.</p> Value Label auto Automatic 1 0.5M 2 1M 3 1.5M 4 2M </li> <li> <p>Slow RAM [puae_bogomem_size] (auto|0|2|4|6|7)</p> <p>'Automatic' defaults to the current preset model. Core restart required.</p> Value Label auto Automatic 0 None 2 0.5M 4 1M 6 1.5M 7 1.8M </li> <li> <p>Z2 Fast RAM [puae_fastmem_size] (auto|0|1|2|4|8)</p> <p>'Automatic' defaults to the current preset model. Core restart required.</p> Value Label auto Automatic 0 None 1 1M 2 2M 4 4M 8 8M </li> <li> <p>Z3 Fast RAM [puae_z3mem_size] (auto|0|1|2|4|8|16|32|64|128|256|512)</p> <p>'Automatic' defaults to the current preset model. Core restart required.</p> Value Label auto Automatic 0 None 1 1M 2 2M 4 4M 8 8M 16 16M 32 32M 64 64M 128 128M 256 256M 512 512M </li> <li> <p>CPU Model [puae_cpu_model] (auto|68000|68010|68020|68030|68040|68060)</p> <p>'Automatic' defaults to the current preset model. Core restart required.</p> </li> <li> <p>FPU Model [puae_fpu_model] (auto|0|68881|68882|cpu)</p> <p>'Automatic' defaults to the current preset model. Core restart required.</p> </li> <li> <p>CPU Speed [puae_cpu_throttle] (-900.0|0.0|10000.0)</p> <p>Ignored with 'Cycle-exact'.</p> </li> <li> <p>CPU Cycle-exact Speed [puae_cpu_multiplier] (0|1|2|4|8|10|12|16)</p> <p>Applies only with 'Cycle-exact'.</p> Value Label 0 Default 1 3.546895 MHz 2 7.093790 MHz (A500) 4 14.187580 MHz (A1200) 8 28.375160 MHz 10 35.468950 MHz 12 42.562740 MHz 16 56.750320 MHz </li> <li> <p>CPU Compatibility [puae_cpu_compatibility] (normal|compatible|memory|exact)</p> <p>Some games have graphic and/or speed issues without 'Cycle-exact'. 'Cycle-exact' can be forced with '(CE)' file path tag.</p> <p>(x86_64 defaults to memory, others to normal. 2021 core does not have 'memory' option and defaults to 'exact' instead.)</p> </li> </ul>"},{"location":"library/puae/#media-options","title":"Media options","text":"<ul> <li> <p>Automatic Load Fast-Forward [puae_autoloadfastforward] (disabled|enabled|fd|hd|cd)</p> <p>Toggle frontend fast-forward during media access if there is no audio output. Mutes 'Floppy Sound Emulation'.</p> </li> <li> <p>Floppy Speed [puae_floppy_speed] (100|200|400|800|0)</p> <p>'Turbo' removes disk rotation emulation.</p> Value Label 100 Default (300RPM) 200 2x (600RPM) 400 4x (1200RPM) 800 8x (2400RPM) 0 Turbo </li> <li> <p>Floppy MultiDrive [puae_floppy_multidrive] (disabled|enabled)</p> <p>Insert each disk in different drives. Can be forced with '(MD)' file path tag. Maximum is 4 disks due to external drive limit! Not all games support external drives! Core restart required.</p> </li> <li> <p>Floppy Write Protection [puae_floppy_write_protection] (disabled|enabled)</p> <p>Set all drives read only. Changing this while emulation is running ejects and reinserts all disks. IPF images are always read only!</p> </li> <li> <p>Floppy Write Redirect [puae_floppy_write_redirect] (disabled|enabled)</p> <p>Writes to a substitute disk under 'saves' instead of original disks. Works also with IPF images.</p> </li> <li> <p>CD Speed [puae_cd_speed] (100|0)</p> <p>Transfer rate in CD32 is 300KB/s (double-speed), CDTV is 150KB/s (single-speed). 'Turbo' removes seek delay emulation.\"</p> Value Label 100 Default 0 Turbo </li> <li> <p>CD Startup Delayed Insert [puae_cd_startup_delayed_insert] (disabled|enabled)</p> <p>Some games fail to load if CD32/CDTV is powered on with CD inserted. 'ON' inserts CD during boot animation.</p> </li> <li> <p>CD32/CDTV Shared NVRAM [puae_shared_nvram] (disabled|enabled)</p> <p>'OFF' saves separate files per content. Starting without content uses the shared file. CD32 and CDTV use separate shared files. Core restart required.</p> </li> <li> <p>WHDLoad Support [puae_use_whdload] (disabled|files|hdfs)</p> <p>Enable launching pre-installed WHDLoad installs. Creates a helper image for loading content and an empty image for saving. Core restart required. - 'Files' creates the data in directories - 'HDFs' contains the data in images</p> </li> <li> <p>WHDLoad Theme [puae_use_whdload_theme] (default|native)</p> <p>AmigaOS 'system-configuration' color prefs in WHDLoad helper image. Available only with 'Files' mode. Core restart required - 'Default' = Black/White/DarkGray/LightGray - 'Native'  = Gray/Black/White/LightBlue</p> </li> <li> <p>WHDLoad Splash Screen [puae_use_whdload_prefs] (disabled|config|splash|both)</p> <p>Space/Enter/Fire work as the WHDLoad Start-button. Core restart required. </p> <p>Override with buttons while booting: - 'Config': Hold 2<sup>nd</sup> fire / Blue - 'Splash': Hold LMB - 'Config + Splash': Hold RMB - ReadMe + MkCustom: Hold Red+Blue</p> Value Label config Config (Show only if available) splash Splash (Show briefly) both Config + Splash (Wait for user input) </li> <li> <p>WHDLoad NoWriteCache [puae_use_whdload_nowritecache] (disabled|enabled)</p> <p>Write cache requires running the core a few frames after closing content to trigger WHDLoad quit and flush cache to disk.  QuitKey = '$2b' = '#' = 'LCtrl + Backslash'. Core restart required.</p> </li> <li> <p>Global Boot HD [puae_use_boot_hd] (disabled|files|hdf20|hdf40|hdf80|hdf128|hdf256|hdf512)</p> <p>Attach a hard disk meant for Workbench usage, not for WHDLoad! Enabling forces a model with HD interface. Changing HDF size will not replace or edit the existing HDF. Core restart required.</p> </li> <li> <p>Cartridge [puae_cartridge] (disabled)</p> <p>Cartridge images go in 'system/uae/' or 'system/uae_data/'. Core restart required.</p> </li> </ul>"},{"location":"library/puae/#video-options","title":"Video options","text":"<ul> <li> <p>Show Video Options [puae_video_options_display] (disabled|enabled)</p> <p>Page refresh by menu toggle required!</p> </li> <li> <p>Allow PAL/NTSC Hz Change [puae_video_allow_hz_change] (disabled|enabled|locked)</p> <p>Let Amiga decide the exact refresh rate when interlace mode or PAL/NTSC changes.</p> <p>'Locked' changes only when video standard changes.</p> </li> <li> <p>Standard [puae_video_standard] (PAL auto|NTSC auto|PAL|NTSC)</p> <p>'Automatic' switches region per file path tags.</p> <p>Output Hz &amp; height: - 'PAL': 50Hz - 288px / 576px - 'NTSC': 60Hz - 240px / 480px</p> </li> <li> <p>Pixel Aspect Ratio [puae_video_aspect] (auto|PAL|NTSC|1:1)</p> <p>Hotkey toggling disables this option until core restart.</p> <ul> <li>'PAL': 26/25 = 1.04</li> <li>'NTSC': 43/50 = 0.86</li> </ul> </li> <li> <p>Resolution [puae_video_resolution] (auto|auto-lores|auto-superhires|lores|hires|superhires)</p> <p>'Automatic' uses 'High' at minimum. 'Automatic (Low)' allows 'Low'. 'Automatic (Super-High)' sets max size already at startup.</p> Value Label auto Automatic auto-lores Automatic (Low) auto-superhires Automatic (Super-High) lores Low 360px hires High 720px superhires Super-High 1440px </li> <li> <p>Line Mode [puae_video_vresolution] (auto|single|double)</p> <p>'Automatic' defaults to 'Single Line' and switches to 'Double Line' on interlaced screens.</p> </li> <li> <p>Crop [puae_crop] (disabled|minimum|smaller|small|medium|large|larger|maximum|auto)</p> <p>Remove borders according to 'Crop Mode'.</p> </li> <li> <p>Crop Mode [puae_crop_mode] (both|horizontal|vertical|16:9|16:10|4:3|5:4)</p> <p>'Horizontal + Vertical' &amp; 'Automatic' removes borders completely.</p> </li> <li> <p>Vertical Position [puae_vertical_pos] (auto|0|-20...70)</p> <p>'Automatic' keeps only cropped screens centered. Positive values move upward and negative values move downward.</p> </li> <li> <p>Horizontal Position [puae_horizontal_pos] (auto|0|-40...40)</p> <p>'Automatic' keeps screen centered. Positive values move right and negative values move left.</p> </li> <li> <p>Immediate/Waiting Blits [puae_immediate_blits] (false|immediate|waiting)</p> <p>'Immediate Blitter' is ignored with 'Cycle-exact'.</p> </li> <li> <p>Collision Level [puae_collision_level] (none|sprites|playfields|full)</p> <p>'Sprites and Playfields' is recommended.</p> </li> <li> <p>Remove Interlace Artifacts [puae_gfx_flickerfixer] (disabled|enabled)</p> <p>Best suited for still screens, Workbench etc.</p> </li> <li> <p>Frameskip [puae_gfx_framerate] (disabled|1|2)</p> <p>Not compatible with 'Cycle-exact'.</p> </li> <li> <p>Color Gamma [puae_gfx_gamma] (-500|0|500)</p> <p>Adjust color gamma.</p> </li> <li> <p>Color Depth [puae_gfx_colors] (16bit|24bit)</p> </li> </ul>"},{"location":"library/puae/#on-screen-display-options","title":"On-Screen Display options","text":"<ul> <li> <p>Virtual KBD Theme [puae_vkbd_theme] (auto|auto_outline|beige|beige_outline|cd32|cd32_outline|light|light_outline|dark|dark_outline)</p> <p>The keyboard comes up with RetroPad Select by default.</p> </li> <li> <p>Virtual KBD Transparency [puae_vkbd_transparency] (0%|25%|50%|75%|100%)</p> <p>Keyboard transparency can be toggled with RetroPad A.</p> </li> <li> <p>Virtual KBD Dimming [puae_vkbd_dimming] (0%|25%|50%|75%|100%)</p> <p>Dimming level of the surrounding area.</p> </li> <li> <p>Statusbar Mode [puae_statusbar] (bottom|bottom_minimal|bottom_basic|bottom_basic_minimal|top|top_minimal|top_basic|top_basic_minimal)</p> <ul> <li>'Full': Joyports + Current image + LEDs</li> <li>'Basic': Current image + LEDs</li> <li>'Minimal': Track number + FPS hidden</li> </ul> </li> <li> <p>Statusbar Startup [puae_statusbar_startup] (disabled|enabled)</p> <p>Show statusbar on startup.</p> </li> <li> <p>Statusbar Messages [puae_statusbar_messages] (disabled|enabled)</p> <p>Show messages when statusbar is hidden.</p> </li> <li> <p>Light Pen/Gun Pointer Color [puae_joyport_pointer_color] (disabled|black|white|red|green|blue|yellow|purple)</p> <p>Crosshair color for light pens and guns.</p> </li> </ul>"},{"location":"library/puae/#audio-options","title":"Audio options","text":"<ul> <li> <p>Show Audio Options [puae_audio_options_display] (disabled|enabled)</p> <p>Page refresh by menu toggle required!</p> </li> <li> <p>Stereo Separation [puae_sound_stereo_separation] (0%|10%|20%|30%|40%|50%|60%|70%|80%|90%|100%)</p> <p>Paula sound chip channel panning. Does not affect CD audio.</p> </li> <li> <p>Interpolation [puae_sound_interpol] (none|anti|sinc|rh|crux)</p> <p>Paula sound chip interpolation type.</p> </li> <li> <p>Filter [puae_sound_filter] (emulated|off|on)</p> <p>'Emulated' allows states between ON/OFF.</p> </li> <li> <p>Filter Type [puae_sound_filter_type] (auto|standard|enhanced)</p> <p>'Automatic' picks the filter type for the hardware.</p> Value Label auto Automatic standard A500 enhanced A1200 </li> <li> <p>Floppy Sound Emulation [puae_floppy_sound] (100|95|90|85|80|75|70|65|60|55|50|45|40|35|30|25|20|15|10|5|0)</p> <p>Values are inverted, '80' = '20% volume'</p> </li> <li> <p>Floppy Sound Mute Ejected [puae_floppy_sound_empty_mute] (disabled|enabled)</p> <p>Mute drive head clicking when floppy is not inserted.</p> </li> <li> <p>Floppy Sound Type [puae_floppy_sound_type] (internal|A500|LOUD)</p> <p>External files go in <code>system/uae_data/</code> or <code>system/uae/</code>.</p> </li> <li> <p>CD Audio Volume [puae_sound_volume_cd] (0%|5%|10%|15%|20%|25%|30%|35%|40%|45%|50%|55%|60%|65%|70%|75%|80%|85%|90%|95%|100%)</p> <p>CD volume in percent.</p> </li> </ul>"},{"location":"library/puae/#input-options","title":"Input options","text":"<ul> <li> <p>Analog Stick Mouse [puae_analogmouse] (disabled|left|right|both)</p> <p>Default mouse control stick when remappings are empty.</p> </li> <li> <p>Analog Stick Mouse Deadzone [puae_analogmouse_deadzone] (0|5|10|15|20|25|30|35|40|45|50)</p> <p>Required distance from stick center to register input.</p> </li> <li> <p>Left Analog Stick Mouse Speed [puae_analogmouse_speed] (0.1|0.2|0.3|0.4|0.5|0.6|0.7|0.8|0.9|1.0|1.1|1.2|1.3|1.4|1.5|1.6|1.7|1.8|1.9|2.0|2.1|2.2|2.3|2.4|2.5|2.6|2.7|2.8|2.9|3.0)</p> <p>Mouse speed for left analog stick.</p> </li> <li> <p>Right Analog Stick Mouse Speed [puae_analogmouse_speed_right] (0.1|0.2|0.3|0.4|0.5|0.6|0.7|0.8|0.9|1.0|1.1|1.2|1.3|1.4|1.5|1.6|1.7|1.8|1.9|2.0|2.1|2.2|2.3|2.4|2.5|2.6|2.7|2.8|2.9|3.0)</p> <p>Mouse speed for right analog stick.</p> </li> <li> <p>D-Pad Mouse Speed [puae_dpadmouse_speed] (0|1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18)</p> <p>Mouse speed for directional pad.</p> </li> <li> <p>Mouse Speed [puae_mouse_speed] (10|20|30|40|50|60|70|80|90|100|110|120|130|140|150|160|170|180|190|200|210|220|230|240|250|260|270|280|290|300)</p> <p>Global mouse speed.</p> </li> <li> <p>Physical Mouse [puae_physicalmouse] (disabled|enabled|double)</p> <p>'Double' requirements: raw/udev input driver and proper mouse index per port. Does not affect RetroPad emulated mice.</p> </li> <li> <p>Keyboard Pass-through [puae_physical_keyboard_pass_through] (disabled|enabled)</p> <p>'ON' passes all physical keyboard events to the core. 'OFF' prevents RetroPad keys from generating keyboard events.</p> </li> <li> <p>Keyrah Keypad Mappings [puae_keyrah_keypad_mappings] (disabled|enabled)</p> <p>Hardcoded keypad to joyport mappings for Keyrah hardware.</p> </li> <li> <p>Turbo Fire [puae_turbo_fire] (disabled|enabled)</p> <p>Hotkey toggling disables this option until core restart.</p> </li> <li> <p>Turbo Button [puae_turbo_fire_button] (B|A|Y|X|L|R|L2|R2)</p> <p>Replace the mapped button with turbo fire button.</p> </li> <li> <p>Turbo Pulse [puae_turbo_pulse] (2|4|6|8|10|12)</p> <p>Frames in a button cycle.</p> </li> <li> <p>Joystick/Mouse [puae_joyport] (joystick|mouse)</p> <p>Change D-Pad control between joyports. Hotkey toggling disables this option until core restart.</p> </li> <li> <p>Joystick Port Order [puae_joyport_order] (1234|2143|3412|4321)</p> <p>Plug RetroPads in different ports. Useful for Arcadia system and games that use the 4-player adapter.</p> </li> <li> <p>RetroPad Face Button Options [puae_retropad_options] (disabled|jump|rotate|rotate_jump)</p> <p>Rotate face buttons clockwise and/or make 2<sup>nd</sup> fire press up.</p> Value Label disabled B = Fire, A = 2<sup>nd</sup> fire jump B = Fire, A = Up rotate Y = Fire, B = 2<sup>nd</sup> fire rotate_jump Y = Fire, B = Up </li> <li> <p>CD32 Pad Face Button Options [puae_cd32pad_options] (disabled|jump|rotate|rotate_jump)</p> <p>Rotate face buttons clockwise and/or make blue button press up.</p> Value Label disabled B = Red, A = Blue jump B = Red, A = Up rotate Y = Red, B = Blue rotate_jump Y = Red, B = Up </li> <li> <p>Show Mapping Options [puae_mapping_options_display] (disabled|enabled)</p> <p>Page refresh by menu toggle required!</p> </li> <li> <p>Toggle Virtual Keyboard [puae_mapper_vkbd] (---)</p> </li> <li> <p>Toggle Statusbar [puae_mapper_statusbar] (RETROK_F12)</p> </li> <li> <p>Switch Joystick/Mouse [puae_mapper_mouse_toggle] (RETROK_RCTRL)</p> </li> <li> <p>Toggle Turbo Fire [puae_mapper_turbo_fire_toggle] (---)</p> </li> <li> <p>Toggle Save Disk [puae_mapper_save_disk_toggle] (---)</p> </li> <li> <p>Toggle Aspect Ratio [puae_mapper_aspect_ratio_toggle] (---)</p> </li> <li> <p>Toggle Crop [puae_mapper_crop_toggle] (---)</p> </li> <li> <p>Reset [puae_mapper_reset] (---)</p> </li> <li> <p>RetroPad Up [puae_mapper_up] (---)</p> </li> <li> <p>RetroPad Down [puae_mapper_down] (---)</p> </li> <li> <p>RetroPad Left [puae_mapper_left] (---)</p> </li> <li> <p>RetroPad Right [puae_mapper_right] (---)</p> </li> <li> <p>RetroPad A [puae_mapper_a] (---)</p> </li> <li> <p>RetroPad B [puae_mapper_b] (---)</p> </li> <li> <p>RetroPad X [puae_mapper_x] (RETROK_SPACE)</p> </li> <li> <p>RetroPad Y [puae_mapper_y] (---)</p> </li> <li> <p>RetroPad Select [puae_mapper_select] (TOGGLE_VKBD)</p> </li> <li> <p>RetroPad Start [puae_mapper_start] (---)</p> </li> <li> <p>RetroPad L [puae_mapper_l] (---)</p> </li> <li> <p>RetroPad R [puae_mapper_r] (---)</p> </li> <li> <p>RetroPad L2 [puae_mapper_l2] (MOUSE_LEFT_BUTTON)</p> </li> <li> <p>RetroPad R2 [puae_mapper_r2] (MOUSE_RIGHT_BUTTON)</p> </li> <li> <p>RetroPad L3 [puae_mapper_l3] (---)</p> </li> <li> <p>RetroPad R3 [puae_mapper_r3] (---)</p> </li> <li> <p>RetroPad Left Analog Up [puae_mapper_lu] (---)</p> </li> <li> <p>RetroPad Left Analog Down [puae_mapper_ld] (---)</p> </li> <li> <p>RetroPad Left Analog Left [puae_mapper_ll] (---)</p> </li> <li> <p>RetroPad Left Analog Right [puae_mapper_lr] (---)</p> </li> <li> <p>RetroPad Right Analog Up [puae_mapper_ru] (---)</p> </li> <li> <p>RetroPad Right Analog Down [puae_mapper_rd] (---)</p> </li> <li> <p>RetroPad Right Analog Left [puae_mapper_rl] (---)</p> </li> <li> <p>RetroPad Right Analog Right [puae_mapper_rr] (---)</p> </li> </ul>"},{"location":"library/puae/#controllers","title":"Controllers","text":"<p>The PUAE core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/puae/#user-1-2-device-types","title":"User 1 - 2 device types","text":"<ul> <li>None - Input disabled.</li> <li>Automatic - Joypad - Uses RetroPad by default and switches to CD32 Pad with CD32 content.</li> <li>RetroPad - Joypad - Standard one or two fire button joystick + customizable buttons with keyboard keys and hotkeys.</li> <li>CD32 Pad - Joypad - Standard CD32 controller with unused buttons available for RetroPad extra mappings.</li> <li>Analog Joystick - Joypad - Standard Analog joystick with unused buttons available for RetroPad extra mappings.</li> <li>Arcadia - Joypad - Arcadia cabinet joystick + keyboard arcade controls.</li> <li>Trojan Phazer Lightgun - Lightgun - Trojan Phazer Lightgun.</li> <li>Lightpen - Lightgun - Standard lightpen.</li> <li>Joystick - Joypad - Standard one or two fire button joystick.</li> <li>Keyboard - Keyboard - Keyboard input is always active. Has keymapper support.</li> </ul>"},{"location":"library/puae/#user-3-4-device-types","title":"User 3 - 4 device types","text":"<ul> <li>None - Input disabled.</li> <li>RetroPad - Joypad - Standard one or two fire button joystick + customizable buttons with keyboard keys and hotkeys.</li> <li>Joystick - Joypad - Standard one or two fire button joystick.</li> <li>Keyboard - Keyboard - Keyboard input is always active. Has keymapper support.</li> </ul>"},{"location":"library/puae/#other-controllers","title":"Other controllers","text":"<ul> <li>Mouse - Enabled by default.</li> </ul>"},{"location":"library/puae/#controller-tables","title":"Controller tables","text":""},{"location":"library/puae/#joypad","title":"Joypad","text":"Input descriptors for Retropad RetroPad Inputs D-Pad Up D-Pad Down D-Pad Left D-Pad Right B / Fire A / 2<sup>nd</sup> fire Y X Select Start L R L2 R2 L3 R3 Left Analog X  X Left Analog Y  Y Right Analog X  X Right Analog Y  Y Input descriptors for CD32 pad RetroPad Inputs D-Pad Up D-Pad Down D-Pad Left D-Pad Right Red Blue Green Yellow (Select) Play Rewind Forward (L2) (R2) (L3) (R3) (Left Analog X)  X (Left Analog Y)  Y (Right Analog X)  X (Right Analog Y)  Y Input descriptors for Joystick RetroPad Inputs D-Pad Up D-Pad Down D-Pad Left D-Pad Right B / Fire A / 2<sup>nd</sup> Fire Input descriptors for Analog Joystick RetroPad Inputs Left Analog X  X Left Analog Y  Y Fire 1 Fire 2 Fire 3 Fire 4"},{"location":"library/puae/#keyboard","title":"Keyboard","text":"<p>English layout</p> RetroKeyboard Special Inputs Commodore Keyboard Left Meta/Super Left Amiga Keyboard Right Meta/Super Right Amiga Keyboard Page Up Left Amiga Keyboard Page Down Right Amiga Keyboard Right Control Right Amiga Keyboard Insert Help Keyboard Home [ Keyboard End ]"},{"location":"library/puae/#external-links","title":"External Links","text":"<ul> <li>Libretro PUAE Github repository</li> <li>Report Libretro PUAE core issues here</li> <li>Gameplay Videos</li> </ul>"},{"location":"library/px68k/","title":"Sharp - X68000 (PX68k)","text":""},{"location":"library/px68k/#background","title":"Background","text":"<p>The X68000 (\u30a8\u30c3\u30af\u30b9\u308d\u304f\u307e\u3093\u306f\u3063\u305b\u3093 Ekkusu Rokuman Hassen) is a home computer created by Sharp, first released in March, 1987, sold only in Japan. The X68000 to SUPER models had a Hitachi HD68HC000 CPU at 10 MHz. The XVI to Compact models had a Motorola 68000 at 16 MHz. The X68030 has a Motorola MC68EC030 CPU at 25 MHz. They had 1-4MB of RAM and 1MB of VRAM. It had a Sharp-Hudson Custom Chipset as its GPU. This libretro branch was forked, starting on May 3, 2017, from hissorii's old build (Last updated on August 2014), backported 'c68k' core from kenyahiro's 'px68k' branch (fork of hissorii's 'px68k' branch using recent c68k yabause core to support X64 build). The Pandora version (An open-source handheld PC) by ptitSeb was forked from hissorii's 'px68k' branch and encapsulates the latest code from px68k-libretro (A spin-off of hissorii's branch).</p>"},{"location":"library/px68k/#authorlicense","title":"Author/License","text":"<p>The PX68k core has been authored by</p> <ul> <li>hissorii</li> <li>kenyahiro</li> </ul> <p>The PX68k core is licensed under</p> <ul> <li>kero_src</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/px68k/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the PX68k core have the following file extensions:</p> <ul> <li>.dim</li> <li>.img</li> <li>.d88</li> <li>.88d</li> <li>.hdm</li> <li>.dup</li> <li>.2hd</li> <li>.xdf</li> <li>.hdf</li> <li>.cmd</li> <li>.m3u</li> </ul> <p>IMPORTANT NOTICE BEFORE YOU START PLAYING:</p> <p>Saves are directly written to the disks being used. It is recommended to make sure to have a backup of roms before using them. This will make it easier to restore the original files incase the roms get corrupted.</p>"},{"location":"library/px68k/#databases","title":"Databases","text":"<p>RetroArch database(s) that are associated with the PX68k core:</p> <ul> <li>Sharp - X68000</li> </ul>"},{"location":"library/px68k/#bios","title":"BIOS","text":"<p>Required or optional firmware files go in the frontend's system directory.</p> <p>Attention</p> <p>The firmware files need to be in a directory named 'keropi' in RetroArch's system directory.</p> Filename Description md5sum keropi/iplrom.dat X68000 BIOS - Required 7fd4caabac1d9169e289f0f7bbf71d8e keropi/cgrom.dat Font file - Required cb0a5cfcf7247a7eab74bb2716260269 keropi/iplrom30.dat X68000 BIOS 2 - Optional keropi/iplromco.dat X68000 BIOS 3 - Optional keropi/iplromxv.dat X68000 BIOS 4 - Optional"},{"location":"library/px68k/#features","title":"Features","text":"<p>Frontend-level settings or features that the PX68k core respects.</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2715 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2714 Memory Monitoring (achievements) \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2714 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/px68k/#directories","title":"Directories","text":"<p>The PX68k core's library name is 'PX68K'</p> <p>The PX68k core saves/loads to/from these directories.</p> <p>Frontend's System directory</p> File Description keropi/config Config keropi/sram.dat SRAM <p>NOTE:</p> <p>If your game suddenly does not boot up, try deleting keropi/sram.dat. In some cases, you may also need to delete keropi/config."},{"location":"library/px68k/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The PX68k core's core provided FPS is <code>55.45</code> or <code>59.94</code>.</li> <li>The PX68k core's core provided sample rate is <code>44100Hz</code>.</li> <li>The PX68k core's base width is <code>800</code>.</li> <li>The PX68k core's base height is <code>600</code>.</li> <li>The PX68k core's max width is <code>800</code>.</li> <li>The PX68k core's max height is <code>600</code>.</li> <li>The PX68k core's core provided aspect ratio is <code>4/3</code></li> </ul>"},{"location":"library/px68k/#usage","title":"Usage","text":"<p>You can launch px68k to run a supported game. You can also use px68k without any content by using Load Core and then Run Core. This will directly bring you to the px68k menu.</p> <p>L2 button or F12 key brings up the original px68k menu where you can change the inserted disks. Disks or games have to be unzipped to be accessible from this menu but can be zipped/archived when launching directly from RetroArch.</p> <p>After the first boot a \u201cconfig\u201d file will be generated in the \u201ckeropi\u201d folder. You can enter your rom folder into the \u201cStartDir\u201d line to make it accessible from the PX68k-libretro core\u2019s in-game menu.</p> <p>Define your disks path in system/keropi/config StartDir line. e.g.</p> <pre><code>`retroarch/system/keropi/config`\n```\n[WinX68k]\nStartDir=/emulator/x68000/\n```\n</code></pre> <p>You can launch content with:</p> <ul> <li> <p>retroarch -L px68k_libretro.so ./content.hdf</p> </li> <li> <p>retroarch -L px68k_libretro.so ./content.xdf</p> </li> <li> <p>retroarch -L px68k_libretro.so ./content.cmd (cmdfile is a text file contening cmd like \"px68k /somewhere/software/x68000/content1.dim /somewhere/software/x68000/content2.dim\")</p> </li> <li> <p>retroarch -L sdlpx68k_libretro.so \"px68k /somewhere/software/x68000/content1.dim /somewhere/software/x68000/content2.dim\"</p> </li> <li> <p>retroarch -L px68k_libretro.so ./content.m3u (m3u files are useful for launching multi-disk games, see section below for more details on the format)</p> </li> <li> <p>load retroarch , then load core and content from RA menu.</p> </li> </ul>"},{"location":"library/px68k/#multiple-disk-games","title":"Multiple-disk games","text":"<p>If foo is a multiple-disk game, you should have .dim files for each one, e.g. foo (Disk 1).dim, foo (Disk 2).dim, foo (Disk 3).dim.</p> <p>PX68k has a few methods to support loading and swapping multi-disk games.</p>"},{"location":"library/px68k/#loading-multiple-disks-at-startup","title":"Loading multiple disks at startup","text":"<ul> <li> <p>Use an M3U playlist file</p> <p>Create a text file and save it as foo.m3u. Then enter your game's .dim files on it, one per line. The m3u file contents should look something like this:</p> <p><code>foo.m3u</code> <pre><code>foo (Disk 1).dim\nfoo (Disk 2).dim\nfoo (Disk 3).dim\n</code></pre> After that, you can load the foo.m3u file in RetroArch with the PX68k core either using the frontend or from the command line.</p> <p>The first 2 disks listed in this file are loaded into disk drives FDD0 and FDD1 on the core, respectively. To swap disks for games that use more than 2 disks, use the disk swapping option either from within RetroArch's menu or using the native PX68k menu explained below.</p> </li> <li> <p>Use a CMD file</p> <p>This method is similar to the m3u playlist and allows loading up to 2 disks at launch. Create a text file and save it as foo.cmd. The format of this file should have all the games on one line and begins with px68k as in the example below.</p> <p>\"px68k /somewhere/software/x68000/content1.dim /somewhere/software/x68000/content2.dim\"</p> <p>To swap disks for games that use more than 2 disks, use the native PX68k menu explained below.</p> </li> <li> <p>From the command line</p> <p>As shown in the usage section, you can use the following format to launch multi-disk games directly from the command line:</p> <p>retroarch -L sdlpx68k_libretro.so \"px68k /somewhere/software/x68000/content1.dim /somewhere/software/x68000/content2.dim\"</p> <p>To swap disks for games that use more than 2 disks, use the native PX68k menu explained below.</p> </li> </ul>"},{"location":"library/px68k/#swapping-disks","title":"Swapping Disks","text":"<p>Games that have more than 2 disks will often require swapping disks at some point during gameplay. There are 2 supported methods to swap disks in this core.</p> <ul> <li> <p>Use the disk swapping option from RetroArch GUI.</p> <p>Open the RetroArch gui, select Quick Menu -&gt;Disk Control to access the disk controls. Eject the disk using the Disk Cycle Tray Status command, then set the new disk index and load the new disk by selecting Disk Cycle Tray Status again.</p> <p>The default disk drive that is swapped is FDD1. If you need to swap the disk loaded in FDD0, change the Core Option \"Swap Disks on Drive\" first before loading the new disk in this menu.</p> </li> <li> <p>Use the native PX68k menu</p> <p>Press L2 on the controller or F12 on the keyboard to access the PX68k menu, then select the disk slot and choose the file from here.</p> <p>The starting directory for loading disks is determined by the setting StartDir in the system/keropi/config file.</p> </li> </ul>"},{"location":"library/px68k/#midi","title":"MIDI","text":"<p>MIDI support is provided through RetroArch &gt; Settings &gt; Audio &gt; MIDI. Change the Output to the MIDI synthesizer installed or configured in your system. Currently the API supports Linux and Windows.</p> <p>A few example of software synthesizers are the following (you need to install them separately as px68k or RetroArch do not support synthesizer emulation):</p> <p><pre><code>Windows\n- Microsoft GS Synth (should be available in any windows system)\n- Nuke SC-55 (you need to use loopMIDI with it)\n- Munt\n</code></pre> <pre><code>Linux\n- Timidity\n- FluidSynth\n- Nuke SC-55\n- Munt (MT-32/CM-32L)\n</code></pre></p>"},{"location":"library/px68k/#core-options","title":"Core options","text":"<p>The PX68k core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded.</p> <p>Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch.</p> <ul> <li> <p>Menu Font Size [px68k_menufontsize] (normal|large)</p> <p>Sets the size of the menu (F12).</p> </li> <li> <p>CPU Speed [px68k_cpuspeed] (10Mhz|16Mhz|25Mhz|33Mhz (OC)|66Mhz (OC)|100Mhz (OC)|150Mhz (OC)|200Mhz (OC))</p> <p>Configure the CPU speed. Can be used to slow down games that run too fast or to speed up floppy loading times.</p> </li> <li> <p>RAM Size (Restart) [px68k_ramsize] (2MB|3MB|4MB|5MB|6MB|7MB|8MB|9MB|10MB|11MB|12MB|1MB)</p> <p>Amount of RAM used.</p> </li> <li> <p>Use Analog [px68k_analog] (OFF|ON)</p> <p>(reserved)</p> </li> <li> <p>P1 Joypad Type [px68k_joytype1] (Default (2 Buttons)|CPSF-MD (8 Buttons)|CPSF-SFC (8 Buttons))</p> <p>Sets the joypad type for player 1's port.</p> </li> <li> <p>P2 Joypad Type [px68k_joytype2] (Default (2 Buttons)|CPSF-MD (8 Buttons)|CPSF-SFC (8 Buttons))</p> <p>Sets the joypad type for player 2's port.</p> </li> <li> <p>P1 Joystick Select Mapping [px68k_joy1_select] (Default|XF1|XF2|XF3|XF4|XF5|OPT1|OPT2|F1|F2)</p> <p>Assigns a keyboard key to joypad's SELECT button since some games use these keys as the Start or Insert Coin buttons.</p> </li> <li> <p>MIDI Output (Restart) [px68k_midi_output] (disabled|enabled)</p> <p>Enables the software MIDI. If disabled, it will use internal OPM for music, otherwise it will try use use midi software synthesizers configured. Due to missing bus-error handling in the CPU cores, its not recommended to disable this option.</p> </li> <li> <p>MIDI Output Type (Restart) [px68k_midi_output_type] (LA|GM|GS|XG)</p> <p>Sets the MIDI output type. Depending on the MIDI device attached, may initialize it on reset in different modes.</p> </li> <li> <p>ADPCM Volume [px68k_adpcm_vol] (15|0|1|2|3|4|5|6|7|8|9|10|11|12|13|14)</p> <p>Controls the volume levels for the ADPCM channel.</p> </li> <li> <p>OPM Volume [px68k_opm_vol] (12|13|14|15|0|1|2|3|4|5|6|7|8|9|10|11)</p> <p>Controls the volume levels for the OPM channel.</p> </li> <li> <p>Swap Disks on Drive [px68k_disk_drive] (FDD1|FDD0)</p> <p>By default using the native Disk Swap interface within RetroArch's menu will swap the disk in drive FDD1. Change this option to swap disks in drive FDD0.</p> </li> <li> <p>Save Disk Paths [px68k_disk_path] (disabled|enabled)</p> <p>When enabled, saves the paths of the last loaded disks in drives and auto-loads them on startup. When disabled, FDD and HDD starts empty.</p> </li> <li> <p>Joy/Mouse [px68k_joy_mouse] (Mouse|Joystick)</p> <p>Select Mouse or Joypad to controls in-game virtual pointer.</p> </li> <li> <p>VBtn Swap [px68k_vbtn_swap] (TRIG1 TRIG2|TRIG2 TRIG1)</p> <p>When set to enabled, swaps TRIG1 and TRIG2 buttons when a 2-button gamepad is used.</p> </li> <li> <p>No Wait Mode [px68k_no_wait_mode] (disabled|enabled)</p> <p>When set to enabled, core runs as fast as possible. Can cause audio dysnc but useful if using fast-forward.</p> <p>Leaving it disabled is recommended.</p> </li> <li> <p>Frame Skip [px68k_frameskip] (Full Frame|\u00bd Frame|\u2153 Frame|\u00bc Frame|\u2155 Frame|\u2159 Frame|\u215b Frame1/16 Frame|1/32 Frame|1/60 Frame|Auto Frame Skip)</p> <p>Choose how much frames should be skipped to improve performance at the expense of visual smoothness.</p> </li> <li> <p>Push Video before Audio [px68k_push_video_before_audio] (disabled|enabled)</p> <p>Prioritize reducing video latency over audio latency and/or stuttering.</p> </li> <li> <p>Adjust Frame Rates [px68k_adjust_frame_rates] (disabled|enabled)</p> <p>For compatibility with modern displays, slightly adjust frame rates reported to frontend in order to reduce the chances of audio stuttering.  Disable to use actual frame rates.</p> </li> <li> <p>Audio Desync Hack [px68k_audio_desync_hack] (disabled|enabled)</p> <p>Prevents audio from desynchronizing by simply discarding any audio samples generated past the requested amount per frame slice.  Forces 'No Wait Mode' to [enabled], use appropriate frontend settings to properly throttle content.</p> </li> </ul>"},{"location":"library/px68k/#controllers","title":"Controllers","text":"<p>The PX68k core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/px68k/#user-1-device-types","title":"User 1 device types","text":"<ul> <li>None - Input disabled.</li> <li>RetroPad - Joypad</li> <li>RetroKeyboard - Keyboard - Keyboard inputs are always active. Has keymapper support.</li> </ul>"},{"location":"library/px68k/#user-2-device-types","title":"User 2 device types","text":"<ul> <li>None - Input disabled.</li> <li>RetroPad - Joypad</li> <li>RetroKeyboard - Keyboard - Keyboard inputs are always active.</li> </ul>"},{"location":"library/px68k/#other-controllers","title":"Other controllers","text":"<ul> <li>Mouse - The PX68k core can emulate mouse inputs but this is done automatically and cannot be manually selected as a device type.</li> </ul>"},{"location":"library/px68k/#controller-tables","title":"Controller tables","text":""},{"location":"library/px68k/#joypad","title":"Joypad","text":"User 1 - 2 Remap descriptors RetroPad Inputs 2 Button CPSF-MD (8 Buttons) CPSF-SFC (8 Buttons) B JOY_TRG2 JOY_TRG2 JOY_TRG1 Y JOY_TRG1 JOY_TRG3 JOY_TRG4 Select JOY_LEFT JOY_TRG7 JOY_TRG7 Start JOY_RIGHT JOY_TRG6 JOY_TRG6 Up JOY_UP JOY_UP JOY_UP Down JOY_DOWN JOY_DOWN JOY_DOWN Left JOY_LEFT JOY_LEFT JOY_LEFT Right JOY_RIGHT JOY_RIGHT JOY_RIGHT A JOY_TRG1 JOY_TRG1 JOY_TRG2 X JOY_TRG2 JOY_TRG4 JOY_TRG3 L JOY_TRG1 JOY_TRG5 JOY_TRG8 R JOY_TRG2 JOY_TRG8 JOY_TRG5 L2 - Menu Menu Menu Menu R2 L3 R3  X  Y  X  Y"},{"location":"library/px68k/#keyboard","title":"Keyboard","text":"RetroKeyboard Inputs PX68k inputs Keyboard Backspace - Keyboard Tab - Keyboard Clear - Keyboard Return - Keyboard Pause - Keyboard Escape - Keyboard Space - Keyboard Exclaim ! - Keyboard Double Quote \" - Keyboard Hash # - Keyboard Dollar $ - Keyboard Ampersand &amp; - Keyboard Quote ' - Keyboard Left Parenthesis ( - Keyboard Right Parenthesis ) - Keyboard Asterisk * - Keyboard Plus + - Keyboard Comma , - Keyboard Minus - - Keyboard Period . - Keyboard Slash / - Keyboard 0 - Keyboard 1 - Keyboard 2 - Keyboard 3 - Keyboard 4 - Keyboard 5 - Keyboard 6 - Keyboard 7 - Keyboard 8 - Keyboard 9 - Keyboard Colon : - Keyboard Semicolon ; - Keyboard Less than &lt; - Keyboard Equals = - Keyboard Greater than &gt; - Keyboard Question ? - Keyboard At @ - Keyboard Left Bracket [ - Keyboard Backslash \\ - Keyboard Right Bracket ] - Keyboard Caret ^ - Keyboard Underscore _ - Keyboard Backquote ` - Keyboard a - Keyboard b - Keyboard c - Keyboard d - Keyboard e - Keyboard f - Keyboard g - Keyboard h - Keyboard i - Keyboard j - Keyboard k - Keyboard l - Keyboard m - Keyboard n - Keyboard o - Keyboard p - Keyboard q - Keyboard r - Keyboard s - Keyboard t - Keyboard u - Keyboard v - Keyboard w - Keyboard x - Keyboard y - Keyboard z - Keyboard Delete - Keyboard Keypad 0 - Keyboard Keypad 1 - Keyboard Keypad 2 - Keyboard Keypad 3 - Keyboard Keypad 4 - Keyboard Keypad 5 - Keyboard Keypad 6 - Keyboard Keypad 7 - Keyboard Keypad 8 - Keyboard Keypad 9 - Keyboard Keypad Period . - Keyboard Keypad Divide / - Keyboard Keypad Multiply * - Keyboard Keypad Minus - - Keyboard Keypad Plus + - Keyboard Keypad Enter - Keyboard Keypad Equals = - Keyboard Up - Keyboard Down - Keyboard Right - Keyboard Left - Keyboard Insert - Keyboard Home - Keyboard End - Keyboard Page Up - Keyboard Page Down - Keyboard F1 - Keyboard F2 - Keyboard F3 - Keyboard F4 - Keyboard F5 - Keyboard F6 - Keyboard F7 - Keyboard F8 - Keyboard F9 - Keyboard F10 - Keyboard F11 - Keyboard F12 - Keyboard F13 - Keyboard F14 - Keyboard F15 - Keyboard Num Lock - Keyboard Caps Lock - Keyboard Scroll Lock - Keyboard Right Shift - Keyboard Left Shift - Keyboard Right Control - Keyboard Left Control - Keyboard Right Alt - Keyboard Left Alt - Keyboard Right Meta - Keyboard Left Meta - Keyboard Right Super - Keyboard Left Super - Keyboard Mode - Keyboard Compose - Keyboard Help - Keyboard Print - Keyboard Sys Req - Keyboard Break - Keyboard Menu - Keyboard Power - Keyboard \u20ac - Keyboard Undo - Keyboard Unmapped - Keyboard Unknown -"},{"location":"library/px68k/#mouse","title":"Mouse","text":"RetroMouse Inputs PX68k inputs  Mouse Cursor Mouse Cursor  Mouse 1 Mouse Left Button  Mouse 2 mouse Right Button"},{"location":"library/px68k/#external-links","title":"External Links","text":"<ul> <li>Game-Notes---Video-Audio-modes-and-extra-functionality</li> <li>Official PX68k Website</li> <li>Official PX68k Github Repository</li> <li>Libretro PX68k Core info file</li> <li>Libretro PX68k Github Repository</li> <li>Report Libretro PX68k Core Issues Here</li> <li>Gameplay Videos</li> </ul>"},{"location":"library/quasi88/","title":"NEC PC-8000 / PC-8800 series (QUASI88)","text":""},{"location":"library/quasi88/#background","title":"Background","text":"<p>QUASI88 is an emulator by Showzoh Fukunaga licensed under the BSD 3-Clause license. This libretro port is distributed in the same way.</p> <p>The sound processing portion of QUASI88 uses source code from MAME and XMAME. The copyright to this source code belongs to its corresponding authors.</p> <p>The sound processing portion of QUASI88 also uses source code from the FM audio generator \"fmgen\". The copyright to this source code belongs to cisc.</p> <p>The QUASI88 core is licensed under</p> <ul> <li>BSD 3-Clause</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/quasi88/#bios","title":"BIOS","text":""},{"location":"library/quasi88/#real-bios-recommended","title":"Real BIOS (recommended)","text":"<p>Required or optional firmware files go in the frontend's system directory. They can also be placed in a \"quasi88\" subfolder.</p> Filename Description md5sum n88.rom Required. 4f984e04a99d56c4cfe36115415d6eb8 n88n.rom Required for PC-8000 series emulation. (N BASIC mode) 2ff07b8769367321128e03924af668a0 disk.rom Required for loading disk images. 793f86784e5608352a5d7f03f03e0858 n88knj1.rom Required for viewing kanji. d81c6d5d7ad1a4bbbd6ae22a01257603 n88_0.rom Required. d675a2ca186c6efcd6277b835de4c7e5 n88_1.rom e844534dfe5744b381444dbe61ef1b66 n88_2.rom 6548fa45061274dee1ea8ae1e9e93910 n88_3.rom fc4b76a402ba501e6ba6de4b3e8b4273"},{"location":"library/quasi88/#pseudo-bios","title":"Pseudo BIOS","text":"<p>The core will fall back on pseudo BIOS if required files are missing. In this mode, only PC-8800 series software will be playable and there may be compatibility issues, so providing real BIOS is recommended.</p>"},{"location":"library/quasi88/#font","title":"Font","text":"<p>The files font.rom, font2.rom, and font3.rom can also be loaded from the system directory to specify a font. If these are not found, the core will fall back on a built-in recreation.</p>"},{"location":"library/quasi88/#loading-content","title":"Loading Content","text":"<p>QUASI88 can start using between 0 and 6 disks as content. To start software that requires only one disk, you can load content in any fashion.</p>"},{"location":"library/quasi88/#no-disks","title":"No disks","text":"<p>First, load the QUASI88 core. The option \"Start Core\" will appear on the main menu, which you can use to start the core with no disks inserted.</p>"},{"location":"library/quasi88/#multiple-disks-subsystem-interface","title":"Multiple disks (subsystem interface)","text":"<p>First, load the QUASI88 core. Options for starting software with between 2 to 6 disks will appear on the main menu.</p> <p></p> <p>Choose the appropriate option and then select the disks you wish to load. Once all the disks have been selected, choose the option labelled \"Start X-Disk Game\"</p>"},{"location":"library/quasi88/#multiple-disks-m3u-playlist","title":"Multiple disks (M3U playlist)","text":"<p>You can create an M3U playlist to easily start the core with multiple disks preloaded instead of using the subsystem interface. Create a text file with the extension \".m3u\" and write the filename of each disk on a new line like in the example below.</p> <pre><code># Ys II (Falcom)\nYs II (Program disk).d88\nYs II (Disk A).d88\nYs II (Disk B).d88\nYs II (User disk).d88\n</code></pre>"},{"location":"library/quasi88/#cycling-between-disks","title":"Cycling between disks","text":"<p>If you've loaded multiple disks, you can hold one of the trigger buttons and use the D-Pad to change the disk that's loaded in each drive. Use L for Drive 1 and R for Drive 2. When the shoulder button is released, the chosen disk will be inserted.</p>"},{"location":"library/quasi88/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the QUASI88 core have the following file extensions:</p> <ul> <li>.d88 (PC-8000 / PC-8800 series disk image)</li> <li>.u88 (User disk, same functionality as .d88)</li> <li>.m3u (Playlist file)</li> </ul>"},{"location":"library/quasi88/#features","title":"Features","text":"<p>Frontend-level settings or features that the QUASI88 core respects.</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 Memory Monitoring (achievements) \u2714 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2714 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2714 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/quasi88/#directories","title":"Directories","text":"<p>The QUASI88 core's library name is 'QUASI88'</p> <p>The QUASI88 core saves/loads to/from these directories.</p> <p>Frontend's Save directory</p> File Description *.srm Differential of changes to loaded disc image (by default, see Core Options below) <p>Frontend's State directory</p> File Description *.state# State"},{"location":"library/quasi88/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The QUASI88 core's core provided FPS is 60.</li> <li>The QUASI88 core's core provided sample rate is 44100 Hz.</li> <li>The QUASI88 core's base width is 640.</li> <li>The QUASI88 core's base height is 400.</li> <li>The QUASI88 core's max width is 640.</li> <li>The QUASI88 core's max height is 400.</li> <li>The QUASI88 core's core provided aspect ratio is 8/5.</li> </ul>"},{"location":"library/quasi88/#core-options","title":"Core Options","text":"<p>The QUASI88 core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded.</p> <ul> <li> <p>Basic mode [q88_basic_mode] (N88 V2|N88 V1H|N88 V1S|N)</p> <p>This option selects the PC model being emulated. Some games may refuse to boot or behave incorrectly if an inappropriate model is chosen (missing colors, fast game speed).</p> <p>Using N BASIC mode for PC-8000 series software requires the n88n.rom BIOS.</p> </li> <li> <p>CPU clock [q88_cpu_clock] (4 MHz|8 MHz|16 MHz (overclock)|32 MHz (overclock)|64 MHz (overclock)|1 MHz (underclock)|2 MHz (underclock))</p> <p>This option sets the CPU clock speed of the emulated PC. Overclocking options will make most software run faster than normal, though some will instead load faster and exhibit less slowdown (Ys series).</p> </li> <li> <p>Sound board [q88_sound_board] (OPN|OPNA)</p> <p>This option changes the Yamaha sound board on the emulated PC. OPN is the default option. OPNA sound supports more FM channels and PCM samples.</p> </li> <li> <p>Use FDC-Wait [q88_use_fdc_wait] (enabled|disabled)</p> <p>This option enables more accurate IO timing for the floppy disk controller. Some software will not work properly with this disabled.</p> </li> <li> <p>Use PCG-8100 [q88_pcg-8100] (disabled|enabled)</p> <p>This option selects whether or not to emulate the PCG-8100. This option may be required for some PC-8000 series software.</p> </li> <li> <p>Save to disk image [q88_save_to_disk_image] (disabled|enabled)</p> <p>This option changes the core's saving behavior. By default, if a disk is rewritten to, the differences will be stored to a \".srm\" file in the frontend save directory. If this option is enabled, the changes will be written directly to the loaded disk and flushed on exit.</p> </li> <li> <p>Rumble on disk access [q88_rumble] (enabled|disabled)</p> <p>This option allows the controller's rumble feature to imitate the read sounds on the floppy disk controller.</p> </li> </ul>"},{"location":"library/quasi88/#joypad","title":"Joypad","text":"<p>The default RetroPad inputs are based on the keys often used for simple games playable via QUASI88. For full remapping, change the input type from \"Retro Joypad\" to \"Retro Keyboard.\"</p> <p>When using software that requires full keyboard input, it's recommended to use game focus mode as well.</p>"},{"location":"library/quasi88/#player-1","title":"Player 1","text":"User 1 input descriptors RetroPad Inputs Z Key Space Key I Key Return Key Keypad 8 (Up) Keypad 2 (Down) Keypad 4 (Left) Keypad 6 (Right) X Key Change loaded disk in drive 1 Change loaded disk in drive 2"},{"location":"library/quasi88/#player-2","title":"Player 2","text":"User 2 input descriptors RetroPad Inputs Q Key R Key F Key D Key G Key Tab Key"},{"location":"library/quasi88/#external-links","title":"External Links","text":"<ul> <li>Libretro core Github Repository</li> <li>Pseudo BIOS, provided by cisc</li> </ul>"},{"location":"library/quicknes/","title":"Nintendo - NES / Famicom (QuickNES)","text":""},{"location":"library/quicknes/#background","title":"Background","text":"<p>Nes_Emu, the core NES emulator library used by QuickNES, began as a very simple NES emulator sometime in 2004. It was based on the 6502 CPU core and APU sound core used in the Game_Music_Emu sound engine.</p> <p>The QuickNES core has been authored by</p> <ul> <li>blargg</li> <li>kode54</li> </ul> <p>The QuickNES core is licensed under</p> <ul> <li>GPLv2</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/quicknes/#compatibility","title":"Compatibility","text":"Game Issue Burai Fighter Softlocks when entering a level. Confirmed issue. MMC3 incompatible. Family Circuit '91 Crashes on start. Unsupported Mapper 210. Huge Insect No enemies spawn. Mapper 3 confirmed issue. Unemulated bus conflict handling. Skull &amp; Crossbones Crashes on start. Unsupported Mapper."},{"location":"library/quicknes/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the QuickNES core have the following file extensions:</p> <ul> <li>.nes</li> </ul> <p>RetroArch database(s) that are associated with the QuickNES core:</p> <ul> <li>Nintendo - Nintendo Entertainment System</li> </ul>"},{"location":"library/quicknes/#features","title":"Features","text":"<p>Frontend-level settings or features that the QuickNES core respects.</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 Memory Monitoring (achievements) \u2714 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/quicknes/#directories","title":"Directories","text":"<p>The QuickNES core's library name is 'QuickNES'</p> <p>The QuickNES core saves/loads to/from these directories.</p> <p>Frontend's Save directory</p> File Description *.srm Cartridge battery save <p>Frontend's State directory</p> File Description *.state# State"},{"location":"library/quicknes/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The QuickNES core's core provided FPS is 60</li> <li>The QuickNES core's core provided sample rate is 44100 Hz</li> <li>The QuickNES core's base width is 256</li> <li>The QuickNES core's base height is 240</li> <li>The QuickNES core's max width is 256</li> <li>The QuickNES core's max height is 240</li> <li>The QuickNES core's core provided aspect ratio is 4/3 when the 'Aspect Ratio' core option is set to 4/3</li> <li>The QuickNES core's core provided aspect ratio is 8/7 when the 'Aspect Ratio' core option is set to 8/7</li> </ul>"},{"location":"library/quicknes/#core-options","title":"Core options","text":"<p>The QuickNES core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded.</p> <p>Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch.</p> <ul> <li> <p>Allow Opposing Directions [quicknes_up_down_allowed] (disabled|enabled)</p> <p>Enabling this will allow pressing / quickly alternating / holding both left and right (or up and down in some games) directions at the same time.</p> <p>This may cause movement based glitches to occur in certain games.</p> <p>It's best to keep this core option disabled.</p> </li> <li> <p>Aspect ratio [quicknes_aspect_ratio_par] (PAR|4:3)</p> <p>Configure QuickNES's core provided aspect ratio.</p> </li> <li> <p>Show horizontal overscan [quicknes_use_overscan_h] (enabled|disabled)</p> <p>Set this to disabled to crop out (horizontally) the potentially random glitchy video output that would have been hidden by the bezel around the edge of a standard-definition television screen.</p> </li> <li> <p>Show vertical overscan [quicknes_use_overscan_v] (disabled|enabled)</p> <p>Set this to disabled to crop out (vertically) the potentially random glitchy video output that would have been hidden by the bezel around the edge of a standard-definition television screen.</p> </li> <li> <p>No sprite limit [quicknes_no_sprite_limit] (enabled|disabled)</p> <pre><code>Removes the 8-per-scanline hardware limit. This reduces sprite flickering but can cause some games to glitch since some use this for effects.\n</code></pre> </li> <li> <p>Audio mode [quicknes_audio_nonlinear] (nonlinear|linear|stereo panning)</p> <p>Configure audio mode.</p> <p>Stereo panning simulates stereo by using a panning method and some reverb effects to add some depth.</p> </li> <li> <p>Audio equalizer preset [quicknes_audio_eq] (default|famicom|tv|flat|crisp|tinny)</p> <p>Applies a preset to the audio equalizer.</p> </li> <li> <p>Color Palette [quicknes_palette] (default|asqrealc|nintendo-vc|rgb|yuv-v3|unsaturated-final|sony-cxa2025as-us|pal|bmf-final2|bmf-final3|smooth-fbx|composite-direct-fbx|pvm-style-d93-fbx|ntsc-hardware-fbx|nes-classic-fbx-fs|nescap|wavebeam)</p> <p>Specifies which color palette to use when decoding the NTSC video signal output by the NES.</p> </li> </ul> Color Palette: default <p></p> Color Palette: asqrealc <p></p> Color Palette: nintendo-vc <p></p> Color Palette: rgb <p></p> Color Palette: yuv-v3 <p></p> Color Palette: unsaturated-final <p></p> Color Palette: sony-cxa2025as-us <p></p> Color Palette: pal <p></p> Color Palette: bmf-final2 <p></p> Color Palette: bmf-final3 <p></p> Color Palette: smooth-fbx <p></p> Color Palette: composite-direct-fbx <p></p> Color Palette: pvm-style-d93-fbx <p></p> Color Palette: ntsc-hardware-fbx <p></p> Color Palette: nes-classic-fbx-fs <p></p> Color Palette: nescap <p></p> Color Palette: wavebeam <p></p> <ul> <li> <p>Turbo enable [quicknes_turbo_enable] (none|player 1|player 2|both)</p> <p>Enables the use of the Turbo A and Turbo B buttons.</p> </li> <li> <p>Turbo pulse width (in frames) [quicknes_turbo_pulse_width] (3|5|10|15|30|60|1|2)</p> <p>Specifies both the width and spacing (in frames) of input 'pulses' when the Turbo A and Turbo B buttons are held down. For example, the default setting of '3' corresponds to a (60/(3+3)) = 10 Hz turbo frequency (10 presses per second).</p> </li> </ul>"},{"location":"library/quicknes/#joypad","title":"Joypad","text":"User 1 - 2 input descriptors RetroPad Inputs B Turbo B Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A Turbo A"},{"location":"library/quicknes/#external-links","title":"External Links","text":"<ul> <li>Official QuickNES Github Repository</li> <li>Libretro QuickNES Core info file</li> <li>Libretro QuickNES Github Repository</li> <li>Report Libretro QuickNES Core Issues Here</li> </ul>"},{"location":"library/quicknes/#nintendo-nintendo-entertainment-system","title":"Nintendo - Nintendo Entertainment System","text":"<ul> <li>Nintendo - NES / Famicom (bnes)</li> <li>Nintendo - NES / Famicom (Emux NES)</li> <li>Nintendo - NES / Famicom (FCEUmm)</li> <li>Nintendo - NES / Famicom (Mesen)</li> <li>Nintendo - NES / Famicom (Nestopia)</li> </ul>"},{"location":"library/race/","title":"SNK - Neo Geo Pocket / Color (RACE)","text":""},{"location":"library/race/#background","title":"Background","text":"<p>RACE is a Neo Geo Pocket (NGP) and Neo Geo Pocket Color (NGPC) emulator for multiple platforms.</p>"},{"location":"library/race/#authorlicense","title":"Author/License","text":"<p>The RACE core has been authored by</p> <ul> <li>Judge_</li> <li>Flavor</li> <li>Akop Karapetyan</li> <li>theelf</li> <li>frangarcj</li> <li>negativeExponent</li> </ul> <p>The RACE core is licensed under</p> <ul> <li>GPLv2</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/race/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the RACE core have the following file extensions:</p> <ul> <li>.ngp</li> <li>.ngc</li> </ul>"},{"location":"library/race/#databases","title":"Databases","text":"<p>RetroArch database(s) that are associated with the RACE core:</p> <ul> <li>SNK - Neo Geo Pocket</li> <li>SNK - Neo Geo Pocket Color</li> </ul>"},{"location":"library/race/#features","title":"Features","text":"<p>Frontend-level settings or features that the RACE! core respects.</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 (not link-cable emulation) Core Options \u2714 Memory Monitoring (achievements) \u2714 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/race/#directories","title":"Directories","text":"<p>The RACE core's internal core name is 'RACE'</p> <p>The RACE core saves/loads to/from these directories.</p> <p>Frontend's Save directory</p> <ul> <li>'content-name'.ngf (Cartrtidge battery save)</li> </ul> <p>Frontend's State directory</p> <ul> <li>'content-name'.state# (State)</li> </ul>"},{"location":"library/race/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The RACE core's core provided FPS is 60</li> <li>The RACE core's core provided sample rate is 44100 Hz</li> <li>The RACE core's core provided aspect ratio is 20/19</li> </ul>"},{"location":"library/race/#core-options","title":"Core options","text":"<p>The RACE core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded.</p> <p>Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch.</p> <ul> <li> <p>Language (restart) [race_language] (english/japanese)</p> <p>Choose the system language of the BIOS.</p> </li> </ul>"},{"location":"library/race/#controllers","title":"Controllers","text":"<p>The RACE core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/race/#user-1-device-types","title":"User 1 device types","text":"<ul> <li>None - Doesn't disable input.</li> <li>RetroPad - Joypad</li> <li>RetroPad w/Analog - Joypad - There's no reason to switch to this.</li> </ul>"},{"location":"library/race/#controller-tables","title":"Controller tables","text":""},{"location":"library/race/#joypad","title":"Joypad","text":"User 1 Remap descriptors RetroPad Inputs A Option D-Pad Up D-Pad Down D-Pad Left D-Pad Right B"},{"location":"library/race/#external-links","title":"External Links","text":"<ul> <li>Libretro RACE Core info file</li> <li>Libretro RACE Github Repository</li> <li>Report Libretro RACE Core Issues Here</li> </ul>"},{"location":"library/redream/","title":"Sega - Dreamcast (Redream)","text":""},{"location":"library/redream/#background","title":"Background","text":"<p>Redream is a work-in-progress SEGA Dreamcast emulator written in C for Mac, Linux and Windows.</p> <p>The Redream core has been authored by</p> <ul> <li>inolen</li> </ul> <p>The Redream core (libretro fork only) is licensed under</p> <ul> <li>GPLv3</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/redream/#requirements","title":"Requirements","text":"<p>This core requires OpenGL 3.3 or higher in order to work.</p> <p>RetroArch's video driver must be set to OpenGL. Go to Settings -&gt; Driver. If the \u2018video driver\u2019 is set to something else or than 'gl', switch to \u2018gl\u2019, and then restart.</p> <p>Attention</p> <p>There is currently no \u2018working\u2019 macOS version available. This is because this core requires OpenGL core 3.3 context, and RetroArch on macOS currently does not support this.</p>"},{"location":"library/redream/#bios","title":"BIOS","text":"<p>Attention</p> <p>The firmware files need to be in a directory named 'dc' in RetroArch's system directory.</p> Filename Description md5sum dc/boot.bin boot.bin (Dreamcast BIOS) - Required e10c53c2f8b90bab96ead2d368858623 dc/flash.bin flash.bin (Date/Time/Language) - Required 0a93f7940c455905bea6e392dfde92a4"},{"location":"library/redream/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the Redream core have the following file extensions:</p> <ul> <li>.gdi</li> <li>.chd</li> <li>.cdi</li> </ul> <p>RetroArch database(s) that are associated with the Redream core:</p> <ul> <li>Sega - Dreamcast</li> </ul>"},{"location":"library/redream/#features","title":"Features","text":"<p>Frontend-level settings or features that the Redream core respects.</p> Feature Supported Restart \u2715 Screenshots \u2714 Saves \u2714 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2715 Memory Monitoring (achievements) \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/redream/#directories","title":"Directories","text":"<p>The Redream core's library name is 'redream'</p> <p>The Redream core saves/loads to/from these directories.</p> <p>Frontend's Save directory</p> File Description vmu0.bin VMU Slot 1 Save vmu1.bin VMU Slot 2 Save vmu2.bin VMU Slot 3 Save vmu3.bin VMU Slot 4 Save"},{"location":"library/redream/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The Redream core's core provided FPS is 60</li> <li>The Redream core's core provided sample rate is 44100 Hz</li> <li>The Redream core's base width is 640</li> <li>The Redream core's base height is 480</li> <li>The Redream core's max width is 640</li> <li>The Redream core's max height is 480</li> <li>The Redream core's core provided aspect ratio is 4/3</li> </ul>"},{"location":"library/redream/#joypad","title":"Joypad","text":"User 1 - 4 input descriptors RetroPad Inputs A X Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right B Y L R Analog X Analog Y  X"},{"location":"library/redream/#compatibility","title":"Compatibility","text":"<p>Since Redream is a work-in-progress Dreamcast emulator, expect sound issues, general compatibility issues, and a general rough experience.</p>"},{"location":"library/redream/#external-links","title":"External Links","text":"<ul> <li>Official Redream Website</li> <li>Libretro Redream Core info file</li> <li>Libretro Redream Github Repository</li> <li>Report Libretro Redream Core Issues Here</li> </ul>"},{"location":"library/redream/#sega-dreamcast","title":"Sega - Dreamcast","text":"<ul> <li>Sega - Dreamcast (Flycast)</li> </ul>"},{"location":"library/reminiscence/","title":"Flashback (REminiscence)","text":"<p>First, make sure these steps are permissible in your locale. RetroArch and LibRetro do not share any copyrighted content.</p>"},{"location":"library/reminiscence/#background","title":"Background","text":"<p>Stuart Carnie has ported REminiscence ,Gregory Montoir\u2019s Flashback emulator, over to libretro! REminiscence is a game engine recreation of the 1992/1993 action adventure game Flashback. It is the spiritual successor of Another World/Out Of This World and it distinguishes itself with rotoscoped graphics, polygonal cutscenes, and a Prince of Persia-style gameplay system.</p> <p>This port is still a work in progress, however it is in a working state. Currently, it jumps directly into the game, skipping the main menu.</p> <p>We have also added modplug support to the core for improved music playback.</p> <p>The REminiscence core has been authored by</p> <ul> <li>Gregory Montoir</li> <li>Stuart Carnie</li> </ul> <p>The REminiscence core is licensed under</p> <ul> <li>GPLv3</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/reminiscence/#setup","title":"Setup","text":"<p>REminiscence is a rewrite of the engine used in the game Flashback from Delphine Software. This program is designed as a cross-platform replacement for the original executable. The game data files (DOS, PC-CD, Amiga, Macintosh) are required. Apart from that, you can buy it here on GOG or here on Steam. Create a folder with proper naming. Then follow the <code>Flashback_Data\\StreamingAssets\\data</code> folder to access the data of the Flashback you have. Copy all of the files in the data folder to the folder you just created.</p> <p>A visual demonstration of setup REminiscence core can be found here.</p>"},{"location":"library/reminiscence/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the REminiscence core have the following file extensions:</p> <ul> <li>.map (DOS Map Data)</li> <li>.aba (DOS (Demo) Map Data)</li> <li>.seq (DOS CD Map Data)</li> <li>.lev (Amiga Map Data)</li> </ul> <p>RetroArch database(s) that are associated with the REminiscence core:</p> <ul> <li>Flashback</li> </ul>"},{"location":"library/reminiscence/#features","title":"Features","text":"<p>Frontend-level settings or features that the REminiscence core respects.</p> Feature Supported Restart \u2715 Saves - States \u2714 Rewind \u2714 Netplay \u2715 Core Options \u2715 Memory Monitoring (achievements) \u2715 RetroArch Cheats \u2715 Native Cheats - Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/reminiscence/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The REminiscence core's core provided FPS is 50.0</li> <li>The REminiscence core's core provided sample rate is 44100 Hz</li> <li>The REminiscence core's base width is 256</li> <li>The REminiscence core's base height is 224</li> <li>The REminiscence core's max width is 1024</li> <li>The REminiscence core's max height is 768</li> <li>The REminiscence core's core provided aspect ratio is 8/7</li> </ul>"},{"location":"library/reminiscence/#joypad","title":"Joypad","text":"RetroPad Inputs User 1 input descriptors Draw / Holster Inventory / Skip Up Down Left Right Use Action"},{"location":"library/reminiscence/#external-links","title":"External Links","text":"<ul> <li>Official REminiscence Website</li> <li>Libretro REminiscence Core info file</li> <li>Libretro REminiscence Github Repository</li> <li>Report Libretro REminiscence Core Issues Here</li> <li>You can buy a copy of Flashback from GOG</li> <li>You can buy a copy of Flashback from Steam</li> </ul>"},{"location":"library/remote_retropad/","title":"Remote RetroPad","text":""},{"location":"library/remote_retropad/#background","title":"Background","text":"<p>Remote RetroPad is a built-in core for 2 purposes: controlling another instance of RetroArch over the network, and testing input methods (retropad and keyboard).</p>"},{"location":"library/remote_retropad/#how-to-use-the-remote-retropad-core","title":"How to use the Remote RetroPad core:","text":"<p>This core is present in all RetroArch builds that have networking enabled. To start the Remote RetroPad core, go to RetroArch's main menu screen. Select 'Load Core', then 'Remote RetroPad'.</p> <p>The screen should now display a RetroPad, and buttons will react to controller activity. Digital inputs will be highlighted in one shade of red, analog inputs will be highlighted in a gradual manner. Any input that has been activated at least once, will turn green.</p> <p>To switch to the keyboard test screen, pass keyboard focus to the core (default hotkey Scroll Lock), and press keyboard keys A and B simultaneously. This screen includes a standard 102-key PC keyboard + extra blocks for all RETROK_ values present in the code. Screen adapted from DOSBox-Pure onscreen keyboard with permission. Keyboard test screen shows pressed keys, including special and multimedia keys, however some keys may be capture by the operating system and cannot be detected by RetroArch. Keyboard inputs are not set up for remote transmission, only for local test.</p>"},{"location":"library/remote_retropad/#setting-up-the-retroarch-instance-to-be-controlled","title":"Setting up the RetroArch instance to be controlled","text":"<p>To allow a RetroArch instance to be controlled by Remote RetroPad, enable \"Network retropad\" under Settings / Network, and enable the remote control for the desired user(s).</p>"},{"location":"library/remote_retropad/#authorlicense","title":"Author/License","text":"<p>The Remote RetroPad core has been authored by</p> <ul> <li>The RetroArch Team</li> </ul> <p>The Remote RetroPad core is licensed under</p> <ul> <li>MIT</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/remote_retropad/#features","title":"Features","text":"<p>Frontend-level settings or features that the Remote RetroPad core respects.</p> Feature Supported Restart \u2715 Screenshots \u2714 Saves \u2715 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2714 Memory Monitoring (achievements) \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2715 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/remote_retropad/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The Remote RetroPad core's core provided FPS is 60.0</li> <li>The Remote RetroPad core's resolution is 320x240</li> <li>The Remote RetroPad core's core provided sample rate is 30000.0 Hz</li> <li>The Remote RetroPad core's core provided aspect ratio is 4.0 / 3.0</li> </ul>"},{"location":"library/remote_retropad/#core-options","title":"Core options","text":"<p>The Remote RetroPad core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded.</p> <p>Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch.</p> <ul> <li> <p>Port (55400 to 55420 in increments of 1, default 55400.)</p> <p>UDP port for the connection on the target machine. One port is for one user only, if you wish to control e.g. user 2, add one to the base port.</p> </li> <li> <p>IP address part 1 (0 to 255 in increments of 1, default 0.)</p> <p>First octet of the target machine's IP address (e.g. 192.168.0.33)</p> </li> <li> <p>IP address part 2 (0 to 255 in increments of 1, default 0.)</p> <p>Second octet of the target machine's IP address (e.g. 192.168.0.33)</p> </li> <li> <p>IP address part 3 (0 to 255 in increments of 1, default 0.)</p> <p>Third octet of the target machine's IP address (e.g. 192.168.0.33)</p> </li> <li> <p>IP address part 4 (0 to 255 in increments of 1, default 0.)</p> <p>Fourth octet of the target machine's IP address (e.g. 192.168.0.33)</p> </li> <li> <p>Start screen (Retropad / Keyboard tester)</p> </li> </ul> <p>Initial screen when starting Remote Retropad.</p> <ul> <li>Hide mismatching analog inputs (Yes / No)</li> </ul> <p>Certain input methods (like using the keyboard to simulate controller buttons) do not send the analog value. Remote Retropad indicates this by leaving the center of the button white, if this option is turned off.</p>"},{"location":"library/remote_retropad/#controllers","title":"Controllers","text":"<p>The Remote RetroPad core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/remote_retropad/#user-1-device-types","title":"User 1 device types","text":"<ul> <li>None - Doesn't disable input.</li> <li>RetroPad - Joypad - Stay on this.</li> <li>RetroPad w/Analog - Joypad - There's no reason to switch to this.</li> </ul>"},{"location":"library/remote_retropad/#controller-tables","title":"Controller tables","text":""},{"location":"library/remote_retropad/#joypad","title":"Joypad","text":"<p>Remote RetroPad supports all standard RetroPad buttons. Analog values are supported for analog sticks. Analog button values are shown for L1/R1/L2/R2, A/B/X/Y buttons, but not transferred.</p>"},{"location":"library/remote_retropad/#usage-for-automated-tests","title":"Usage for automated tests","text":"<p>It is possible to supply an expected input file, and show instructions on which button to press. For details, see PR #16357.</p>"},{"location":"library/remote_retropad/#external-links","title":"External Links","text":"<ul> <li>Libretro Remote RetroPad Github Repository</li> <li>Report Libretro Remote RetroPad Core Issues Here</li> </ul>"},{"location":"library/rvvm/","title":"RVVM","text":""},{"location":"library/rvvm/#background","title":"Background","text":"<p>RVVM is a RISC-V CPU &amp; System software implementation written in \u0421, it features</p> <ul> <li>Passes RISC-V compliance/torture tests for both RV64 &amp; RV32</li> <li>OpenSBI, U-Boot, custom firmwares boot and execute properly</li> <li>Working Linux, FreeBSD, OpenBSD, Haiku OS &amp; other cool OSes</li> <li>Tracing JIT, multicore support</li> <li>Framebuffer display, mouse &amp; keyboard, UART shell</li> <li>NVMe storage drives</li> <li>Networking</li> </ul> <p>The RVVM core has been authored by</p> <ul> <li>LekKit</li> </ul> <p>The RVVM core is licensed under</p> <ul> <li>GPLv3</li> <li>MPLv2.0</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/rvvm/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the RVVM core have the following file extensions:</p> <ul> <li>.rvvm</li> </ul> <p>See the Usage section for an explanation regarding its format.</p>"},{"location":"library/rvvm/#features","title":"Features","text":"<p>Frontend-level settings or features that the RVVM core respects.</p> Feature Supported Restart - Saves \u2715 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2715 Memory Monitoring (achievements) \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping - Multi-Mouse - Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/rvvm/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The RVVM core's core provided FPS is 60.</li> <li>The RVVM core's core provided sample rate is 44100.</li> <li>The RVVM core's base width is 640.</li> <li>The RVVM core's base height is 480.</li> <li>The RVVM core's max width is 640.</li> <li>The RVVM core's max height is 480.</li> <li>The RVVM core's core provided aspect ratio is 4/3.</li> </ul>"},{"location":"library/rvvm/#usage","title":"Usage","text":"<p>The RVVM core reads its machine options from a plaintext <code>.rvvm</code> file, each line should be a supported option, for example a <code>linux.rvvm</code> file:</p> <pre><code>rv64\nbootrom=opensbi.img\nkernel=linux.img\nnvme=disk1.img\nnvme=disk2.img\n</code></pre> <p>Will run Linux on a 64-bit RISC-V machine, firmware image files will be loaded from the same directory of the rvvm file.</p> <p>And following options are supported:</p> <ul> <li><code>rv64</code>: Enable 64-bit RISC-V, which is the default.</li> <li><code>rv32</code>: Enable 32-bit RISC-V.</li> <li><code>mem=N</code>: Set memory to N MiB, N is an integer like <code>512</code>, default to <code>256</code>.</li> <li><code>smp=N</code>: Set amount of CPU cores to N, default to <code>1</code>.</li> <li><code>bootrom=FILE</code>: Load M-mode firmware (eg: OpenSBI) from FILE.</li> <li><code>kernel=FILE</code>: Load S-mode kernel (eg: Linux, U-Boot, etc.) from FILE.</li> <li><code>nvme=FILE</code>: Attach NVMe storage image (RAW format) from FILE, can be repeated at most 4 times (the first one will be /dev/nvme0, the last one will be /dev/nvme3).</li> <li><code>cmdline=ARGS</code>: Set kernel command line to ARGS, default to <code>root=/dev/nvme0n1 rootflags=discard rw console=tty0</code>.</li> </ul>"},{"location":"library/rvvm/#device-types","title":"Device types","text":"<p>The RVVM core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p> <ul> <li>Keyboard</li> <li>Mouse</li> </ul>"},{"location":"library/rvvm/#external-links","title":"External Links","text":"<ul> <li>RVVM Repository</li> <li>RVVM Issues Here</li> </ul>"},{"location":"library/same_cdi/","title":"Arcade (SAME_CDI) WIP","text":""},{"location":"library/same_cdi/#background","title":"Background","text":"<p>SAME CDi is a S(ingle) A(rcade) M(achine) E(mulator) for libretro, forked from MAME libretro, which is in turn a fork of MAME. It includes only the Philips CD-i driver, and simplifies the loading of CD content to provide a 'plug and play' experience.</p> <p>The SAME_CDI core has been authored by</p> <ul> <li>zach-morris</li> </ul> <p>The SAME_CDI core is licensed under</p> <ul> <li>GPLv2</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/same_cdi/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the SAME_CDI core have the following file extensions:</p> <ul> <li>.chd</li> <li>.iso</li> </ul>"},{"location":"library/same_cdi/#databases","title":"Databases","text":"<p>RetroArch database(s) that are associated with the SAME_CDI core:</p> <ul> <li>SAME_CDI</li> </ul>"},{"location":"library/same_cdi/#bios","title":"BIOS","text":"<p>SAME_CDI does require BIOS (bootrom) files to work. You'll need to have following directory under retroarch system folder and put bios files: <code>../same_cdi/bios/</code></p> Filename Description cdibios.zip cdi200.rom, cdi220b.rom and zx405042p__cdi_slave_2.0__b43t__zzmk9213.mc68hc705c8a_withtestrom.7206 cdimono1.zip cdi200.rom, cdi220.rom, cdi220b.rom, zx405037p__cdi_servo_2.1__b43t__llek9215.mc68hc705c8a_withtestrom.7201 and zx405042p__cdi_slave_2.0__b43t__zzmk9213.mc68hc705c8a_withtestrom.7206 cdimono2 philips__cdi-220_ph3_r1.2__mb834200b-15__02f_aa__9402_z04.tc574200-le._1.7211, zc405351p__servo_cdi_4.1__0d67p__lluk9404.mc68hc705c8a.7490 and zc405352p__slave_cdi_4.1__0d67p__lltr9403.mc68hc705c8a.7206"},{"location":"library/same_cdi/#features","title":"Features","text":"Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2714 Memory Monitoring (achievements) \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Crop Overscan (in RetroArch's Video settings) \u2715"},{"location":"library/same_cdi/#directories","title":"Directories","text":"<p>The SAME_CDI core's doesn't create any directory.</p>"},{"location":"library/same_cdi/#geometry-and-timing","title":"Geometry and timing","text":"<p>SAME_CDI's core provided aspect ratio is 1/1.</p>"},{"location":"library/same_cdi/#core-options-wip","title":"Core options WIP","text":""},{"location":"library/same_cdi/#controllers-wip","title":"Controllers WIP","text":""},{"location":"library/same_cdi/#device-types","title":"Device types","text":"<p>The SAME_CDI core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/same_cdi/#user-1-1-device-types","title":"User 1 - 1 device types","text":"<ul> <li>None - Input disabled.</li> <li>RetroPad - Joypad</li> <li>RetroPad w/Analog - Joypad - There is no reason to switch to this.</li> </ul>"},{"location":"library/same_cdi/#controller-tables","title":"Controller tables","text":""},{"location":"library/same_cdi/#joypad-and-analog-device-type-table","title":"Joypad and analog device type table","text":"RetroPad Inputs User 1 - 5 input descriptors Z X S A D-Pad Up D-Pad Down D-Pad Left D-Pad Right"},{"location":"library/same_cdi/#external-links","title":"External Links","text":"<ul> <li>Libretro SAME_CDI Core info file</li> <li>Libretro SAME_CDI Github Repository</li> <li>Report SAME_CDI Core Issues Here</li> </ul>"},{"location":"library/same_cdi/#see-also","title":"See also","text":"<ul> <li>MAME 2003</li> <li>MAME 2003 Plus</li> <li>MAME 2010</li> </ul>"},{"location":"library/sameboy/","title":"Nintendo - Game Boy / Color (SameBoy)","text":""},{"location":"library/sameboy/#background","title":"Background","text":"<p>SameBoy is an extremely accurate open source Gameboy (DMG) and Gameboy Color (CGB) emulator, written in portable C.</p> <ul> <li>Supports GameBoy (DMG) and GameBoy Color (CGB) emulation</li> <li>Battery save support</li> <li>Save states</li> <li>Includes open source DMG and CGB boot ROMs</li> <li>Real time clock emulation</li> <li>Extremely high accuracy</li> <li>Link-cable emulation</li> </ul>"},{"location":"library/sameboy/#authorlicense","title":"Author/License","text":"<p>The SameBoy core has been authored by</p> <ul> <li>LIJI32</li> </ul> <p>The SameBoy core is licensed under</p> <ul> <li>MIT</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/sameboy/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the SameBoy core have the following file extensions:</p> <ul> <li>.gb</li> <li>.gbc</li> </ul>"},{"location":"library/sameboy/#databases","title":"Databases","text":"<p>RetroArch database(s) that are associated with the SameBoy core:</p> <ul> <li>Nintendo - Game Boy</li> <li>Nintendo - Game Boy Color</li> </ul>"},{"location":"library/sameboy/#bios","title":"BIOS","text":"<p>Required or optional firmware files go in the frontend's system directory.</p> <p>Attention</p> <p>The SameBoy core has reverse engineered Game Boy/Game Boy Color boot ROMs baked into the core itself so real BIOS files aren't required. If you\u2019d like to override this, you can place the following BIOS files in RetroArch's system directory.</p> Filename Description md5sum dmg_boot.bin Game Boy boot ROM - Optional 32fbbd84168d3482956eb3c5051637f5 cgb_boot.bin Game Boy Color boot ROM - Optional dbfce9db9deaa2567f6a84fde55f9680"},{"location":"library/sameboy/#features","title":"Features","text":"<p>Frontend-level settings or features that the SameBoy core respects.</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 Memory Monitoring (achievements) \u2714 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2714 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2714 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/sameboy/#directories","title":"Directories","text":"<p>The SameBoy core's internal core name is 'SameBoy'</p> <p>The SameBoy core saves/loads to/from these directories.</p> <p>Frontend's Save directory</p> <ul> <li>'content-name'.srm (Cartridge backup save)</li> <li>'content-name'.rtc (Real time clock save)</li> </ul> <p>Frontend's State directory</p> <ul> <li>'content-name'.state# (State)</li> </ul>"},{"location":"library/sameboy/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The SameBoy core's core provided FPS is 59.7275 FPS</li> <li>The SameBoy core's core provided sample rate is 48000 Hz</li> <li>The SameBoy core's core provided aspect ratio is 10:9 in single mode, varies in dual mode</li> </ul>"},{"location":"library/sameboy/#link","title":"Link","text":"<p>Link cable emulation is supported in single-cart mode and in dual-cart mode. To use it in single-cart mode enable the Single cart dual mode option under options and reload the content</p> <p>Note</p> <p>The savefile for the second slot in this mode will be named 'gamename.srm.2'</p> <p>To use it in dual-cart mode you have to load content via the Subsystem API which you can achieve via the GUI or via CLI</p> <p>Load content via Subsystem API from GUI</p> <p>First, we load the first GameBoy ROM through '2 Player Game Boy Link' in RetroArch's Main Menu.</p> <p></p> <p></p> <p>Next, we load our Super GameBoy ROM through 'Load Super GameBoy' in RetroArch's Menu Menu.</p> <p></p> <p></p> <p>Then, we start the content by selecting 'Start GameBoy' In RetroArch's Menu Menu.</p> <p>Warning</p> <p>You have to load any game in the core for the '2 Player Game Boy Link' entries to show up, this is a RetroArch limitation, not a core limitation</p> <p>!!! warning While loading the same game in this mode should work some users reported issues while linking them, you should use single cart mode for that scenario</p> <p>Load Content via Subsystem API from CLI</p> <pre><code>retroarch -L {path to sameboy core} {path to first GameBoy ROM} --subsystem gb_link_2p {path to second GameBoy ROM}\n</code></pre>"},{"location":"library/sameboy/#core-options","title":"Core options","text":"<p>The SameBoy core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded.</p> <p>Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch.</p>"},{"location":"library/sameboy/#regular-options","title":"Regular Options","text":"<ul> <li> <p>Single cart dual mode (reload) [sameboy_dual] (disabled|enabled)</p> <p>Emulate two Game Boy games at the same time.</p> </li> <li> <p>Color correction [sameboy_color_correction_mode] (off|correct curves|emulate hardware|preserve brightness)</p> <p>Only for Gameboy Color games.</p> <p>Select color correction.</p> </li> </ul> Color Correction - off <p></p> Color Correction - correct curves <p></p> Color Correction - emulate hardware <p></p> Color Correction - preserve brightness <p></p> <ul> <li> <p>High-pass filter [sameboy_high_pass_filter_mode] (off|accurate|remove dc offset)</p> <p>Awaiting description.</p> </li> <li> <p>Emulated model [sameboy_model] (Game Boy Color|Game Boy Advance|Auto|Game Boy)</p> <p>Select what console/model the content is being ran on. May activate special in-game content.</p> </li> </ul>"},{"location":"library/sameboy/#dual-mode-options","title":"Dual Mode Options","text":"<ul> <li> <p>Single cart dual mode (reload) [sameboy_dual] (disabled|enabled)</p> <p>Emulate two Game Boy games at the same time.</p> <p>This core option is enabled by default and is hidden from view when the 2 Player Game Boy Link Subsystem API is used.</p> </li> <li> <p>Link cable emulation [sameboy_link] (enabled|disabled)</p> <p>Enable in-game Game Boy link cable functions.</p> </li> <li> <p>Screen layout [sameboy_screen_layout] (top-down|left-right)</p> <p>Configure the layout of the two emulated Game Boys.</p> </li> <li> <p>Audio output [sameboy_audio_output] (Game Boy #1|Game Boy #2)</p> <p>Select which Game Boy will output audio.</p> </li> <li> <p>Emulated model for Game Boy #1 [sameboy_model_1] (Game Boy Color|Game Boy Advance|Auto|Game Boy)</p> <p>Select what console/model the content is being ran on for Game Boy #1.</p> <p>May activate special in-game content.</p> </li> <li> <p>Emulated model for Game Boy #2 [sameboy_model_2] (Game Boy Color|Game Boy Advance|Auto|Game Boy)</p> <p>Select what console/model the content is being ran on for Game Boy #2.</p> <p>May activate special in-game content.</p> </li> <li> <p>Color correction for Game Boy #1 [sameboy_color_correction_mode_1] (off|correct curves|emulate hardware|preserve brightness)</p> <p>Only for Gameboy Color games.</p> <p>Select color correction for Game Boy #1.</p> </li> <li> <p>Color correction for Game Boy #2 [sameboy_color_correction_mode_2] (off|correct curves|emulate hardware|preserve brightness)</p> <p>Only for Gameboy Color games.</p> <p>Select color correction for Game Boy #2.</p> </li> <li> <p>High-pass filter for Game Boy #1 [sameboy_high_pass_filter_mode_1] (off|accurate|remove dc offset)</p> <p>Awaiting description.</p> </li> <li> <p>High-pass filter for Game Boy #2 [sameboy_high_pass_filter_mode_2] (off|accurate|remove dc offset)</p> <p>Awaiting description.</p> </li> </ul>"},{"location":"library/sameboy/#controllers","title":"Controllers","text":"<p>The SameBoy core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/sameboy/#user-1-2-device-types","title":"User 1 - 2 device types","text":"<ul> <li>None - Doesn't disable input. There's no reason to switch to this.</li> <li>RetroPad - Joypad - Stay on this.</li> <li>Nintendo Game Boy - Joypad - Same as RetroPad. There's no reason to switch to this.</li> </ul>"},{"location":"library/sameboy/#rumble-support","title":"Rumble support","text":"<p>Rumble only works in the SameBoy core when</p> <ul> <li>The content being ran has rumble support.</li> <li>The frontend being used has rumble support.</li> <li>The joypad device being used has rumble support.</li> </ul>"},{"location":"library/sameboy/#controller-tables","title":"Controller tables","text":""},{"location":"library/sameboy/#joypad","title":"Joypad","text":"User 1 - 2 Remap descriptors RetroPad Inputs B Select Start Up Down Left Right A"},{"location":"library/sameboy/#compatibility","title":"Compatibility","text":"<p>SameBoy automation results</p>"},{"location":"library/sameboy/#external-links","title":"External Links","text":"<ul> <li>Official SameBoy Website</li> <li>Official SameBoy Github Repository</li> <li>Libretro SameBoy Core info file</li> <li>Libretro SameBoy Github Repository</li> <li>Report Libretro SameBoy Core Issues Here</li> </ul>"},{"location":"library/sameboy/#see-also","title":"See also","text":""},{"location":"library/sameboy/#nintendo-game-boy-color","title":"Nintendo - Game Boy (+ Color)","text":"<ul> <li>Nintendo - Game Boy / Color (Emux GB)</li> <li>Nintendo - Game Boy / Color (Gambatte)</li> <li>Nintendo - Game Boy / Color (Gearboy)</li> <li>Nintendo - Game Boy / Color (TGB Dual)</li> <li>Nintendo - Game Boy Advance (mGBA)</li> <li>Nintendo - Game Boy Advance (VBA-M)</li> <li>Nintendo - SNES / Famicom (higan Accuracy)</li> <li>Nintendo - SNES / Famicom (nSide Balanced)</li> <li>Nintendo - SNES / Famicom (Mesen-S)</li> </ul>"},{"location":"library/sameduck/","title":"Mega Duck / Cougar Boy (SameDuck)","text":""},{"location":"library/sameduck/#background","title":"Background","text":"<p>An adaptation of SameDuck to play Mega Duck games.</p>"},{"location":"library/sameduck/#authorlicense","title":"Author/License","text":"<p>The SameDuck core has been authored by</p> <ul> <li>LIJI32</li> </ul> <p>The SameDuck core is licensed under</p> <ul> <li>MIT</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/sameduck/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the SameDuck core have the following file extensions:</p> <ul> <li>.bin</li> </ul>"},{"location":"library/sameduck/#databases-wip","title":"Databases WIP","text":"<p>RetroArch database(s) that are associated with the SameDuck core:</p> <ul> <li>Mega Duck / Cougar Boy </li> </ul>"},{"location":"library/sameduck/#bios","title":"BIOS","text":"<p>SameDuck does not require BIOS (bootrom) files to work.</p>"},{"location":"library/sameduck/#features","title":"Features","text":"<p>Frontend-level settings or features that the SameDuck core respects.</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2715 Core Options \u2714 Memory Monitoring (achievements) \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2714 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2714 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/sameduck/#directories","title":"Directories","text":"<p>The SameDuck core's internal core name is 'SameDuck'</p> <p>Frontend's State directory</p> <ul> <li>'content-name'.state# (State)</li> </ul>"},{"location":"library/sameduck/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The SameDuck core's core provided FPS is 59.7275 FPS</li> <li>The SameDuck core's core provided sample rate is 384000.00 Hz</li> <li>The SameDuck core's core provided aspect ratio is 10:9</li> </ul>"},{"location":"library/sameduck/#link","title":"Link","text":"<p>Link cable emulation is supported in single-cart mode and in dual-cart mode. To use it in single-cart mode enable the Single cart dual mode option under options and reload the content</p>"},{"location":"library/sameduck/#core-options","title":"Core options","text":"<p>The SameDuck core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded.</p> <p>Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch.</p> <ul> <li> <p>Color correction [SameDuck_color_correction_mode] (off|correct curves|emulate hardware|preserve brightness|reduce contrast)</p> </li> <li> <p>High-pass filter [SameDuck_high_pass_filter_mode] (off|accurate|remove dc offset)</p> </li> <li> <p>Enable Rumble (All Games|never)</p> </li> </ul>"},{"location":"library/sameduck/#controllers","title":"Controllers","text":"<p>The SameDuck core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/sameduck/#user-1-2-device-types","title":"User 1 - 2 device types","text":"<ul> <li>None - Doesn't disable input. There's no reason to switch to this.</li> <li>RetroPad - Joypad - Stay on this.</li> <li>Nintendo Game Boy - Joypad - Same as RetroPad. There's no reason to switch to this.</li> </ul>"},{"location":"library/sameduck/#rumble-support","title":"Rumble support","text":"<p>Rumble only works in the SameDuck core when</p> <ul> <li>The content being ran has rumble support.</li> <li>The frontend being used has rumble support.</li> <li>The joypad device being used has rumble support.</li> </ul>"},{"location":"library/sameduck/#controller-tables","title":"Controller tables","text":""},{"location":"library/sameduck/#joypad","title":"Joypad","text":"User 1 - 2 Remap descriptors RetroPad Inputs B Select Start Up Down Left Right A"},{"location":"library/sameduck/#external-links","title":"External Links","text":"<ul> <li>Official SameDuck Github Repository</li> <li>Libretro SameDuck Core info file</li> </ul>"},{"location":"library/scummvm/","title":"ScummVM","text":""},{"location":"library/scummvm/#background","title":"Background","text":"<p>ScummVM is an interpreter program which allows you to run certain classic graphical point-and-click adventure games, provided you already have their data files. The clever part about this: ScummVM just replaces the executables shipped with the games, allowing you to play them on systems for which they were never designed.</p> <p>The ScummVM core has been authored by</p> <ul> <li>ScummVM Team</li> </ul> <p>The ScummVM core is licensed under</p> <ul> <li>GPLv2</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/scummvm/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the ScummVM core have the following file extensions:</p> <ul> <li>.scummvm</li> </ul> <p>RetroArch database(s) that are associated with the ScummVM core:</p> <ul> <li>ScummVM</li> </ul>"},{"location":"library/scummvm/#features","title":"Features","text":"<p>Frontend-level settings or features that the ScummVM core respects.</p> Feature Supported Restart \u2714 Saves \u2714 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2714 Memory Monitoring (achievements) \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/scummvm/#directories","title":"Directories","text":"<p>The ScummVM core's library name is 'scummvm'</p> <p>The ScummVM core saves/loads to/from these directories.</p> <p>Frontend's Save directory</p> <ul> <li>Game saves</li> </ul> <p>Frontend's System directory</p> File Description scummvm.ini ScummVM Config File"},{"location":"library/scummvm/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The ScummVM core's core provided FPS is 60</li> <li>The ScummVM core's core provided sample rate is 44100 Hz</li> <li>The ScummVM core's base width is 640</li> <li>The ScummVM core's base height is 480</li> <li>The ScummVM core's max width is 640</li> <li>The ScummVM core's max height is 480.</li> <li>The ScummVM core's core provided aspect ratio is 4/3</li> </ul>"},{"location":"library/scummvm/#usage","title":"Usage","text":""},{"location":"library/scummvm/#initial-configuration","title":"Initial Configuration","text":"<p>Before attempting to run a game with the ScummVM core, certain preparations are required to ensure correct operation:</p> <ul> <li> <p>Donwload from the Online Updater &gt; Core System Files Downloader &gt; Scummvm.zip or download and extract the file from ScummVM.zip.</p> </li> <li> <p>Place the resultant <code>scummvm</code> folder inside the RetroArch <code>system</code> directory.</p> </li> <li> <p>Run the ScummVM core without content:</p> <ul> <li> <p>Go to RetroArch's main menu screen.</p> </li> <li> <p>Select 'Load Core', then 'ScummVM'.</p> </li> <li> <p>Select 'Start Core'.</p> </li> <li> <p>The main ScummVM user interface will open:</p> </li> </ul> </li> </ul> <p> </p> <ul> <li> <p>Press the 'Options...' button, then select the 'Paths' tab.</p> </li> <li> <p>Press the 'Theme Path:' button and navigate to the RetroArch <code>system</code> directory. Enter the <code>scummvm/theme/</code> folder and press the 'Choose' button.</p> </li> <li> <p>Press the 'Extra Path:' button and navigate to the RetroArch <code>system</code> directory. Enter the <code>scummvm/extra/</code> folder and press the 'Choose' button.</p> </li> <li> <p>Press the 'Apply' button.</p> </li> </ul> <p> </p> <ul> <li> <p>Select the 'Misc' tab, then press the 'Theme:' button.</p> </li> <li> <p>Select 'ScummVM Modern Theme' and press the 'Choose' button.</p> </li> <li> <p>Press the 'Apply' button, then continue to the 'Enable Enhanced MIDI Emulation' section below.</p> </li> </ul> <p> </p>"},{"location":"library/scummvm/#enable-enhanced-midi-emulation","title":"Enable Enhanced MIDI Emulation","text":"<p>Some games only contain music in the form of MIDI data. By default, ScummVM will emulate MIDI mode using AdLib. Higher quality audio may be achieved for MIDI-enabled games by using FluidSynth MIDI emulation with an appropriate soundfont. This is the recommended mode of operation under RetroArch.</p> <ul> <li> <p>Select the 'MIDI' tab, then under 'GM Device:' select 'FluidSynth'.</p> </li> <li> <p>Press the 'SoundFont:' button and navigate to the RetroArch <code>system</code> directory. Enter the <code>scummvm/extra/</code> folder. (NB: If the steps of this guide have been followed in order, the <code>scummvm/extra/</code> folder will be selected automatically upon pressing the 'SoundFont:' button)</p> </li> <li> <p>Select the file <code>Roland_SC-55.sf2</code> and press the 'Choose' button. Another good soundfont is the FatBoy SoundFont, you can download that and place it in the same folder (<code>scummvm/extra/</code>) to be able to select it.</p> </li> <li> <p>Tick the 'Mixed AdLib/MIDI mode' checkbox.</p> </li> <li> <p>Press the 'Apply' button, then continue to the 'Enable MT-32 Emulation' section below.</p> </li> </ul> <p> </p> <p>Many games benefit greatly from FluidSynth MIDI emulation. Some particularly notable examples are:</p> <ul> <li> <p>Sam &amp; Max Hit the Road</p> </li> <li> <p>Day of the Tentacle</p> </li> <li> <p>Discworld</p> </li> </ul> <p>Attention</p> <p>FluidSynth MIDI emulation slightly increases the CPU requirements of the ScummVM core. On the vast majority of platforms this should not be an issue. If crackling sound is observed on very low power devices, FluidSynth MIDI emulation should be disabled by setting 'GM Device:' to the default \"Don't use General MIDI music\" option.</p>"},{"location":"library/scummvm/#enable-mt-32-emulation-optional","title":"Enable MT-32 Emulation (Optional)","text":"<p>Some games which contain MIDI music data also have improved tracks designed for the MT-32 sound module. ScummVM can emulate this device, vastly increasing the audio quality of these games. Enabling MT-32 emulation is therefore highly recommended, but should be considered optional since it requires original MT-32 ROMs which must be provided by the user.</p> <p>The names and checksums of the two required ROM files are:</p> Filename md5sum MT32_PCM.ROM 89e42e386e82e0cacb4a2704a03706ca MT32_CONTROL.ROM 5626206284b22c2734f3e9efefcd2675 <p>These files must be placed inside the <code>scummvm/extra/</code> folder within the RetroArch <code>system</code> directory. MT-32 emulation may then be enabled via the main ScummVM user interface as follows:</p> <ul> <li> <p>Select the 'MT-32' tab.</p> </li> <li> <p>Under 'MT-32 Device:' select 'MT-32 Emulator'.</p> </li> <li> <p>Press the 'Apply' button, then the 'OK' button to close the options menu.</p> </li> </ul> <p> </p> <p>Some notable examples of games that sound exquisite with MT-32 emulation are:</p> <ul> <li> <p>Monkey Island 2: LeChuck's Revenge</p> </li> <li> <p>Indiana Jones and the Fate of Atlantis</p> </li> <li> <p>Simon the Sorcerer</p> </li> </ul> <p>Experiencing Monkey Island 2 without MT-32 emulation is like listening to Beethoven played on a kazoo.</p> <p>Attention</p> <p>MT-32 emulation substantially increases the CPU requirements of the ScummVM core, and this can vary on a per-game basis. On most desktop systems this should not be an issue, but some devices may struggle to maintain full speed with all games. For example, 'Monkey Island 2' and 'Indiana Jones and the Fate of Atlantis' will run on very low power Android chipsets, but 'Simon the Sorcerer' will overwhelm mid-to-high-end mobile CPUs. If crackling sound is observed, the user should either (a) disable MT-32 emulation by setting 'MT-32 Device:' to the default \"Don't use Roland MT-32 music\" or (b) force the use of the 'FluidSynth' audio device via an internal ScummVM game settings override (this is described in a following section).</p> <p>This concludes 'Initial Configuration'. The core may be shut down either by pressing the 'Quit' button, or via 'Close Content' from the Quick Menu.</p>"},{"location":"library/scummvm/#game-management","title":"Game Management","text":"<p>Before a game can be run via the ScummVM core, it should first be added to the internal launcher. Failure to do so will prevent game-specific configuration options from being saved (e.g. volume levels, subtitle speed, internal game settings overrides).</p>"},{"location":"library/scummvm/#adding-a-game-to-the-scummvm-launcher","title":"Adding a Game to the ScummVM Launcher","text":"<p>The data files for each game must be copied to a uniquely-named directory on local storage (i.e. one directory per game). A list of the specific files required for any particular game may be found on the ScummVM Datafiles page.</p> <p>A suggested directory layout for 'Flight of the Amazon Queen' is presented as the simplest possible example:</p> <pre><code>\u2514\u2500\u2500 ROMs/\n    \u2514\u2500\u2500 ScummVM/\n        \u2514\u2500\u2500 Flight of the Amazon Queen (CD DOS)/\n            \u2514\u2500\u2500 queen.1\n</code></pre> <p>Once all files are in place, each game may be added as follows:</p> <ul> <li> <p>Run the ScummVM core without content:</p> <ul> <li> <p>Go to RetroArch's main menu screen.</p> </li> <li> <p>Select 'Load Core', then 'ScummVM'.</p> </li> <li> <p>Select 'Start Core'.</p> </li> </ul> </li> <li> <p>In the main ScummVM user interface, press the 'Add Game...' button.</p> </li> <li> <p>Navigate to the game directory. Double click the game directory itself to enter it, then press the 'Choose' button.</p> </li> </ul> <p> </p> <ul> <li>If the game is detected correctly (i.e. if the data files are correct), a settings dialog box will open.</li> </ul> <p> </p> <ul> <li> <p>In general, the automatically generated configuration settings can be accepted...</p> </li> <li> <p>However: For simplicity, and compatibility with existing <code>.scummvm</code> files (discussed in the following section), the 'ID:' entry should be set to the so-called 'short name' of the game. All 'short names' are listed on the ScummVM Compatibility Page.</p> <ul> <li> <p>In most cases, the automatically generated 'ID:' is equal to the 'short name'.</p> </li> <li> <p>In some cases, the automatically generated 'ID:' will be the 'short name' with an additional identifying suffix. This suffix should be deleted. If using a gamepad, this may be achieved by clicking at the end of the 'ID:' entry line and using the 'L2' button/trigger to delete unwanted characters.</p> </li> </ul> </li> <li> <p>Once the 'ID:' has been adjusted (if required), press the 'OK' button to 'register' the game.</p> </li> </ul> <p> </p> <p>Attention</p> <p>Once a game has been registered, it may be run by selecting it in the ScummVM Launcher game list and pressing the 'Start' button. However: Employing the ScummVM Launcher in this manner is not recommended, since it prevents the use of RetroArch per-game configuration overrides, input remaps and shader overrides. The ScummVM Launcher should only be used to add games and change settings.</p>"},{"location":"library/scummvm/#running-a-game","title":"Running a Game","text":"<p>Running a ScummVM game via the RetroArch frontend can be done using the appropriate <code>.scummvm</code> file to the game directory. For each game listed in the ScummVM Launcher, the following procedure should be followed:</p> <ul> <li> <p>Note the specific game 'ID:' that was submitted when adding the game to the ScummVM Launcher. If this guide has been followed, the game ID will be equal to the 'short name' found on the ScummVM Compatibility Page.</p> </li> <li> <p>Enter the directory containing the game data.</p> </li> <li> <p>Create a new text file named after the game, with a <code>.scummvm</code> extension.</p> <p>(The name of the <code>.scummvm</code> file will be used to select which RetroArch configuration/remap override should be loaded when a game is launched. The chosen name does not have to be the same as the game directory name or the ScummVM 'short name', although either would be appropriate. The only requirement is that each <code>.scummvm</code> file should have a unique name.)</p> </li> <li> <p>Open the <code>.scummvm</code> file in a text editor and enter the game ID on a single line. Save and close the file.</p> </li> </ul> <p>Again, 'Flight of the Amazon Queen' is presented as a simple example:</p> <pre><code>\u2514\u2500\u2500 ROMs/\n    \u2514\u2500\u2500 ScummVM/\n        \u2514\u2500\u2500 Flight of the Amazon Queen (CD DOS)/\n            \u251c\u2500\u2500 Flight of the Amazon Queen.scummvm\n            \u2514\u2500\u2500 queen.1\n</code></pre> <p>...where <code>Flight of the Amazon Queen.scummvm</code> has the following content:</p> <pre><code>queen\n</code></pre> <p>Games can then be launched as follows:</p> <ul> <li> <p>Go to RetroArch's main menu screen.</p> </li> <li> <p>Select 'Load Content'.</p> </li> <li> <p>Navigate to the game directory.</p> </li> <li> <p>Select the <code>.scummvm</code> file.</p> </li> <li> <p>The game will load.</p> </li> </ul> <p> </p> <p>For users who do not wish to create their own <code>.scummvm</code> files, a pre-prepared collection is available in the libretro-database-scummvm repository. Simply download the appropriate file for a particular game and copy it to the game directory.</p> <p>Attention</p> <p>When using third-party <code>.scummvm</code> files, it is important to verify that the file contents matches the specific game ID that was submitted when adding the game to the ScummVM Launcher. Do not assume that third-party <code>.scummvm</code> files are automagically 'correct'.</p>"},{"location":"library/scummvm/#playlistscanning-support","title":"Playlist/Scanning Support","text":"<p>To launch games efficiently via the RetroArch frontend, it is recommended to add them to a playlist. RetroArch supports automated scanning/playlist generation for ScummVM content:</p> <ul> <li> <p>From RetroArch's main menu screen, navigate to the 'Import content' tab.</p> </li> <li> <p>Select 'Scan Directory'.</p> </li> <li> <p>Navigate to the folder containing the ScummVM game directories.</p> </li> <li> <p>Select <code>&lt;Scan This Directory&gt;</code>.</p> </li> </ul> <p>All recognised games will be added to a <code>ScummVM.lpl</code> file in the RetroArch <code>playlist</code> directory, and be made available via a new 'ScummVM' tab in the frontend menu.</p> <p>(Alternatively, each game directory may be scanned in turn - useful if game directories are present in multiple locations)</p> <p>An example playlist entry for 'Flight of the Amazon Queen' is as follows:</p> <pre><code>/storage/ROMs/ScummVM/Flight of the Amazon Queen (CD DOS)/Flight of the Amazon Queen.scummvm\nFlight of the Amazon Queen\nDETECT\nDETECT\n19C1B1B5|crc\nScummVM.lpl\n</code></pre> <p>Attention</p> <p>Not all games/configurations are present in the current database. If a particular game is not detected, an entry in the <code>ScummVM.lpl</code> playlist file can be added by hand. It should have the format:</p> <pre><code>/path/to/game_directory/game_name.scummvm\ngame_name\nDETECT\nDETECT\n0|crc\nScummVM.lpl\n</code></pre>"},{"location":"library/scummvm/#additional-configuration-notes","title":"Additional Configuration Notes","text":"<p>Both ScummVM and RetroArch itself allow a vast number of options to be configured on a per-game basis. Here we present three additional configuration topics that will likely be of relevance for typical users:</p>"},{"location":"library/scummvm/#volume-levels","title":"Volume Levels","text":"<p>ScummVM games exhibit a spectacular variance in audio volume levels. For comfort, it is almost mandatory to adjust specific volumes on a per-game basis. Fortunately this is trivial:</p> <ul> <li> <p>While a game is running, press the RetroPad 'start' button to open the ScummVM GUI.</p> </li> <li> <p>Using the cursor, press the 'Options' button.</p> </li> <li> <p>Adjust the 'Music volume:', 'SFX volume:' and 'Speech volume:' sliders to the desired levels.</p> </li> </ul> <p> </p> <ul> <li>Press the 'OK' button, then the 'Resume' button.</li> </ul> <p>Provided that the game has been correctly added to the ScummVM Launcher, the adjusted levels will be preserved between play sessions.</p> <p>Attention</p> <p>If the game has not been added to the ScummVM Launcher, or if the game ID in the <code>.scummvm</code> file does not match the ScummVM Launcher ID, all settings will be lost when the game is closed.</p>"},{"location":"library/scummvm/#manual-music-device-selection","title":"Manual Music Device Selection","text":"<p>By default, ScummVM will automatically select the most appropriate music playback option for each game (i.e. MT-32 emulation, FluidSynth MIDI emulation or AdLib emulation). In the majority of cases this will yield the best possible sound quality, and no user intervention is required. There are, however, circumstances and games where a manual override is beneficial. This is something that should be determined by the user on a per-game basis, but here are some practical examples:</p> <ul> <li> <p>Simon the Sorcerer sounds best with the default selection of MT-32 emulation, but this is too CPU-intensive for most Android devices. An acceptable compromise between performance and sound quality can be achieved by forcing the game to use FluidSynth MIDI emulation.</p> </li> <li> <p>Simon the Sorcerer 2 will use FluidSynth MIDI emulation by default. Far better quality music can be achieved by forcing the game to use MT-32 emulation. (And since this game has even higher CPU requirements than the first in the series, smooth playback on Android devices generally requires the use of AdLib emulation)</p> </li> <li> <p>Beneath a Steel Sky defaults to MT-32 emulation, which should be best... but forcing the use of FluidSynth MIDI emulation tends to produce 'richer' sounding music, which some users may prefer.</p> </li> <li> <p>Flight of the Amazon Queen is another game that defaults to MT-32 emulation but which (arguably) sounds far better with FluidSynth MIDI emulation.</p> </li> </ul> <p>A per-game music device override may be set as follows:</p> <ul> <li> <p>Run the ScummVM core without content:</p> <ul> <li> <p>Go to RetroArch's main menu screen.</p> </li> <li> <p>Select 'Load Core', then 'ScummVM'.</p> </li> <li> <p>Select 'Start Core'.</p> </li> </ul> </li> <li> <p>In the main ScummVM user interface, select the appropriate entry in the Launcher game list and press the 'Edit Game...' button.</p> </li> </ul> <p> </p> <ul> <li> <p>In the dialog that opens, select the 'Audio' tab.</p> </li> <li> <p>Tick the 'Override global audio settings' checkbox.</p> </li> <li> <p>Under 'Music Device:', select the desired option (i.e. 'FluidSynth', 'MT-32 Emulator' or 'AdLib Emulator').</p> </li> <li> <p>Press the 'OK' button.</p> </li> </ul> <p> </p>"},{"location":"library/scummvm/#aspect-ratio-correction","title":"Aspect Ratio Correction","text":"<p>ScummVM's core provided aspect ratio is 4:3. For most games this is correct, particularly for newer games, and those that targeted the PC as their primary platform. It is widely known that DOS games typically ran at 320x200, with non-square pixels stretched to fill a 4:3 display.</p> <p>It is not so widely known that a number of popular games targeted the European Amiga market, where (due to various PAL/NTSC considerations) 320x200 content was often shown in a letterboxed rectangle at a display resolution of 320x256. It is sometimes difficult to determine the original intent of the artists, but many of these games were actually made in a quasi-widescreen format. Some notable examples are:</p> <ul> <li> <p>Beneath a Steel Sky</p> </li> <li> <p>Flight of the Amazon Queen</p> </li> <li> <p>Simon the Sorcerer 1 + 2</p> </li> </ul> <p>(The full list of affected games should be determined at the user's discretion)</p> <p>The actual 'correct' aspect ratio in these cases is somewhat fuzzy, but good results are achieved by using the pixel aspect ratio of 16:10.</p> <p>To demonstrate the issue, here is an example screenshot from Beneath a Steel Sky at the default 4:3 ratio:</p> <p> </p> <p>Note the distorted fan vents. Here is the same image at a 16:10 ratio:</p> <p> </p> <p>The fan vents are the correct shape, and the character proportions are more natural.</p> <p>To automate correct aspect ratio selection for games such as these, a RetroArch configuration override should be used. This can be set up as follows:</p> <ul> <li> <p>Enter the RetroArch <code>config</code> directory.</p> </li> <li> <p>Create a new directory called <code>scummvm</code> (if it does not already exist).</p> </li> <li> <p>Create a new text file with the exact same name as the <code>.scummvm</code> file for the game to be overridden, but with a <code>.cfg</code> extension.</p> <p>An example layout for 'Flight of the Amazon Queen' is shown:</p> </li> </ul> <pre><code>\u2514\u2500\u2500 config/\n    \u2514\u2500\u2500 scummvm/\n        \u2514\u2500\u2500 Flight of the Amazon Queen.cfg\n</code></pre> <ul> <li>Open the <code>.cfg</code> file in a text editor and paste the following on a single line:</li> </ul> <pre><code>aspect_ratio_index = \"2\"\n</code></pre> <ul> <li>Save and close the file.</li> </ul> <p>Now whenever the game is launched, it will be displayed at the 'correct' 16:10 ratio. This will not affect any other game.</p>"},{"location":"library/scummvm/#core-options","title":"Core options","text":"<p>The ScummVM core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded.</p> <p>Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch.</p> <ul> <li> <p>Gamepad Cursor Speed [scummvm_gamepad_cursor_speed] (1.0|1.5|2.0|2.5|3.0|0.25|0.5|0.75)</p> <p>Sets the mouse cursor speed multiplier when moving the cursor with the RetroPad left analog stick or D-Pad.</p> </li> </ul> <p>Attention</p> <p>The default value of '1.0' is optimised for games that have a native resolution of '320x200' or '320x240'. When running 'high definition' games with a native resolution of '640x400' or '640x480', it is recommended to set the Gamepad Cursor Speed to '2.0'.</p> <ul> <li> <p>Analog Cursor Response [scummvm_analog_response] (linear|cubic)</p> <p>Determines how the speed of the cursor varies when tilting the RetroPad left analog stick.</p> <p>'linear': Cursor speed increases linearly with analog stick movement. This is standard behaviour with which most users will be familiar.</p> <p>'cubic': Cursor speed increases quadratically with analog stick movement. This allows for greater precision when making small movements with the analog stick, without sacrificing maximum speed at full analog stick range. This mode may require practice for effective use.</p> </li> <li> <p>Analog Deadzone (percent) [scummvm_analog_deadzone] (15|20|25|30|0|5|10)</p> <p>Sets the deadzone of the RetroPad analog sticks. Used to eliminate cursor drift/unwanted input.</p> </li> </ul> <p>Attention</p> <p>The deadzone setting can have a significant effect on the 'feel' of analog cursor movement. The value should be set as low as possible for best results - i.e. reduce the value until cursor drift is evident, then increment to the next highest setting. Xbox gamepads typically require a deadzone of 15-20%. Many Android-compatible bluetooth gamepads have an internal 'hardware' deadzone, allowing the deadzone value here to be set to 0%.</p> <ul> <li> <p>Mouse Speed [scummvm_mouse_speed] (1.0|1.25|1.5|1.75|2.0|2.5|3.0|0.05|0.1|0.15|0.2|0.25|0.3|0.35|0.4|0.45|0.5|0.6|0.7|0.8|0.9)</p> <p>Sets the mouse cursor speed multiplier when moving the cursor with the RetroMouse.</p> </li> <li> <p>Speed Hack (Restart) [scummvm_speed_hack] (disabled|enabled)</p> <p>Enables an optional speed hack that significantly reduces the CPU requirements of the core by allowing subtle timing inaccuracies.</p> </li> </ul> <p>Attention</p> <p>This hack is considered 'safe' - games should run correctly when it is enabled, and most inaccuracies are imperceptible other than in a few edge cases. It remains a hack, though, and it is strongly recommended that users of desktop class machines keep it disabled.</p> <p>However: For users of low power hardware (Android devices, single board computers), this hack is essentially mandatory for full speed operation of the core. For Android users in particular, the guides in the 'Usage' section of this document assume that the speed hack is enabled.</p>"},{"location":"library/scummvm/#joypad","title":"Joypad","text":"RetroPad Inputs User 1 input descriptors ScummVM Inputs Right Mouse Button Right Mouse Button . . (period) F1 F1 ScummVM GUI ScummVM GUI Mouse Cursor Up Mouse Cursor Up Mouse Cursor Down Mouse Cursor Down Mouse Cursor Left Mouse Cursor Left Mouse Cursor Right Mouse Cursor Right Left Mouse Button Left Mouse Button Esc Esc Enter Enter Numpad 5 Numpad 5 Backspace Backspace Cursor Fine Control Cursor Fine Control F10 F10 Numpad 0 Numpad 0  X Mouse Cursor Left/Right  Y Mouse Cursor Up/Down Virtual Numpad <p>Additional Notes:</p> <ul> <li> <p>Depressing the 'Cursor Fine Control' button reduces cursor speed to \u2153 of the value set by the 'Gamepad Cursor Speed' core option.</p> </li> <li> <p>The RetroPad right analog stick is mapped to an 8-way 'Virtual Numpad' with the following layout:</p> </li> </ul> <pre><code>[7][8][9]\n[4]   [6]\n[1][2][3]\n</code></pre> <p>Additional 'ScummVM Input' Descriptions:</p> <ul> <li> <p>Esc:</p> <ul> <li> <p>Skips cutscenes.</p> </li> <li> <p>Opens/closes menus in some games.</p> </li> </ul> </li> <li> <p>Virtual Numpad + Numpad 5 + Numpad 0:</p> <ul> <li> <p>Enables control during fight sequences in the 'Indiana Jones' series of games.</p> </li> <li> <p>Enables bypass of Monkey Island 2 copy protection.</p> </li> <li> <p>Enables saving in games that require text entry when naming a save slot.</p> </li> <li> <p>Enables menu navigation in some games (Numpad 8 == up, Numpad 2 == down).</p> </li> </ul> </li> <li> <p>Enter + Backspace:</p> <ul> <li> <p>Enables saving in games that require text entry when naming a save slot.</p> </li> <li> <p>'Enter' may be used to attack in 'Full Throttle' fight sequences.</p> </li> <li> <p>'Enter' enables menu item selection in some games.</p> </li> </ul> </li> <li> <p>. (period): Skips lines of dialogue in SCUMM engine games.</p> </li> <li> <p>F1:</p> <ul> <li> <p>Shows in-game menu in some games.</p> </li> <li> <p>Enables saving in some games.</p> </li> </ul> </li> <li> <p>F10: Shows hotspots in Simon the Sorcerer 1 + 2.</p> </li> </ul>"},{"location":"library/scummvm/#mouse","title":"Mouse","text":"RetroMouse Inputs ScummVM Inputs  Mouse Cursor Mouse Cursor  Mouse 1 Left Mouse Button  Mouse 2 Right Mouse Button <p>Attention</p> <p>To ensure correct operation when using a RetroMouse, it is recommended that the RetroArch 'Grab Mouse' option be enabled while running content with the ScummVM core. By default, 'Grab Mouse' may be toggled on/off by pressing F11 on the keyboard.</p> <p>The 'Grab Mouse' option is not required when using a RetroPad to move the cursor.</p>"},{"location":"library/scummvm/#pointer","title":"Pointer","text":"<ul> <li>The Wii U build of the ScummVM core uses the libretro pointer API for mouse emulation.</li> </ul> RetroPointer Inputs ScummVM Inputs  or  Pointer Position Mouse Cursor  or  Pointer Pressed Left Mouse Button"},{"location":"library/scummvm/#compatibility","title":"Compatibility","text":"<p>Compatibility listings for the standalone version of ScummVM may be found on the official ScummVM Compatibility Page.</p> <p>The Libretro ScummVM core currently has issues with a handful of games that function correctly when using the standalone version. An evolving RetroArch-specific compatibility list is being maintained in this Google Spreadsheet.</p>"},{"location":"library/scummvm/#legend-of-kyrandia-lands-of-lore-eye-of-the-beholder","title":"Legend of Kyrandia, Lands of Lore, Eye of the Beholder","text":"<p>To run these Westwood games, you need a special file called, <code>kyra.dat</code>. To obtain this file, note the ScummVM version you are using, which is displayed in the bottom left corner of RetroArch while you have the core running. Then:</p> <ul> <li>Navigate to ScummVM's GitHub page for kyra.dat</li> <li>On the button that says \"master\" at the top left, select the branch that matches your version number:</li> </ul> <p></p> <ul> <li>Download that kyra.dat file and place it in the <code>scummvm/extra/</code> folder.</li> </ul>"},{"location":"library/scummvm/#external-links","title":"External Links","text":"<ul> <li>Official ScummVM Website</li> <li>Official ScummVM Github Repository</li> <li>Libretro ScummVM Core info file</li> <li>Libretro ScummVM Github Repository</li> <li>ScummVM wiki entry about kyra.dat</li> <li>Report Libretro ScummVM Core Issues Here</li> </ul>"},{"location":"library/smsplus/","title":"Sega - MS/GG (SMS Plus GX)","text":""},{"location":"library/smsplus/#background","title":"Background","text":"<p>SMS Plus is an open-source Sega Master System and Game Gear emulator written by Charles MacDonald. SMS Plus GX is an enhanced version which includes improved accuracy, bug fixes with most games and others.</p>"},{"location":"library/smsplus/#added-support-for-coleco-system-experimental","title":"Added support for coleco system (experimental).","text":""},{"location":"library/smsplus/#authorlicense","title":"Author/License","text":"<p>The SMS Plus GX core has been authored by</p> <ul> <li>Charles Mcdonald</li> <li>Eke-Eke (GX)</li> </ul> <p>The SMS Plus GX core is licensed under</p> <ul> <li>GPLv2</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/smsplus/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the SMS Plus GX core have the following file extensions:</p> <ul> <li>.sms</li> <li>.bin</li> <li>.rom</li> <li>.gg</li> <li>.col</li> </ul>"},{"location":"library/smsplus/#databases","title":"Databases","text":"<p>RetroArch database(s) that are associated with the SMS Plus GX core:</p> <ul> <li>Sega - Game Gear</li> <li>Sega - Master System - Mark III</li> <li>Coleco - ColecoVision</li> </ul>"},{"location":"library/smsplus/#bios","title":"BIOS","text":"<p>Required or optional firmware files go in the frontend's system directory.</p> Filename Description md5sum bios.sms Master System BIOS - Optional 840481177270d5642a14ca71ee72844c BIOS.col Coleco BIOS - Required 2c66f5911e5b42b8ebe113403548eee7"},{"location":"library/smsplus/#features","title":"Features","text":"<p>Frontend-level settings or features that the SMS Plus GX core respects.</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2715 Core Options \u2714 Memory Monitoring (achievements) \u2714 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/smsplus/#directories","title":"Directories","text":"<p>The SMS Plus GX core's internal core name is 'SMS Plus GX'</p> <p>Frontend's Save directory</p> File Description *.srm Cartridge battery save <p>Frontend's State directory</p> File Description *.state# State"},{"location":"library/smsplus/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The SMS Plus GX core's core provided FPS is 60 for NTSC games and 50 for PAL games</li> <li>The SMS Plus GX core's core provided sample rate is 44100 Hz</li> <li>The SMS Plus GX core's base width is dependent on loaded content and when using ntsc filter</li> <li>The SMS Plus GX core's base height can be 192/224/240 for Master System/Coleco and 144 for Game Gear games</li> <li>The SMS Plus GX core's max width is 602</li> <li>The SMS Plus GX core's max height is 240</li> <li>The SMS Plus GX core's core provided aspect ratio is 4:3</li> </ul>"},{"location":"library/smsplus/#core-options","title":"Core options","text":"<p>The SMS Plus GX core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded.</p> <p>Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch.</p> <ul> <li> <p>Hardware (Restart) [smsplus_hardware] (auto/master system/master system II/game gear/game gear (sms compatibility)/coleco)</p> <p>Emulates which system hardware to use.</p> </li> <li> <p>Region (Restart) [smsplus_region] (auto/ntsc-u/pal/ntsc-j)</p> <p>Runs console at a specific video timing based on region</p> </li> <li> <p>Remove Border [smsplus_remove_left_border] (disabled/enabled)</p> <p>Removes the black border on the left of some games. (SMS Only)</p> </li> <li> <p>Blargg NTSC Filter [smsplus_ntsc_filter] (disabled/monochrome/composite/svideo/rgb)</p> <p>Replicates the analog signal effects such as color bleeding and pixel artifacts to match the images a TV would show.</p> </li> </ul>"},{"location":"library/smsplus/#controllers","title":"Controllers","text":"<p>The SMS Plus GX core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/smsplus/#user-1-device-types","title":"User 1 device types","text":"<ul> <li>None - Doesn't diable input. There's no reason to switch to this.</li> <li>RetroPad - Joypad - Stay on this.</li> <li>RetroPad w/Analog - Joypad - There's no reason to switch to this.</li> </ul>"},{"location":"library/smsplus/#controller-tables","title":"Controller tables","text":""},{"location":"library/smsplus/#joypad","title":"Joypad","text":"RetroPad Inputs SMS Plus GX core Inputs 1 Pause D-Pad Up D-Pad Down D-Pad Left D-Pad Right 2"},{"location":"library/smsplus/#keyboard","title":"Keyboard","text":"RetroKeyboard Inputs RetroKeyboard Keyboard 1 1 Keyboard 2 2 Keyboard 3 3 Keyboard 4 4 Keyboard 5 5 Keyboard 6 6 Keyboard 7 7 Keyboard 8 8 Keyboard 9 9 Keyboard Dollar $ Keyboard Asterisk *"},{"location":"library/smsplus/#external-links","title":"External Links","text":"<ul> <li>Libretro SMS Plus GX Github Repository</li> <li>Libretro SMS Plus GX Core info file</li> <li>Report Libretro SMS Plus GX Core Issues Here</li> <li>Gameplay Videos</li> </ul>"},{"location":"library/smsplus/#see-also","title":"See also","text":"<ul> <li>Sega - Master System (Emux SMS)</li> <li>Sega - MS/GG/MD/CD (Genesis Plus GX)</li> <li>Sega - MS/MD/CD/32X (PicoDrive)</li> <li>Sega - MS/GG/SG-1000 (Gearsystem)</li> <li>MSX/SVI/ColecoVision/SG-1000 (blueMSX)</li> <li>Coleco - ColecoVision (Gearcoleco)</li> </ul>"},{"location":"library/snes9x/","title":"Nintendo - SNES / Famicom (Snes9x)","text":""},{"location":"library/snes9x/#background","title":"Background","text":"<p>Port of upstream mainline up-to-date Snes9x, a portable Super Nintendo Entertainment System emulator to libretro.</p> <p>The Snes9x core has been authored by</p> <ul> <li>Snes9x Team</li> </ul> <p>The Snes9x core is licensed under</p> <ul> <li>Non-commercial</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/snes9x/#features","title":"Features","text":"<ul> <li>Most up-to-date libretro Snes9x core available.</li> <li>Highly accurate SNES emulation.</li> <li>Simplified and easily accessible MSU-1 expansion chip support.</li> <li>Recommended for netplay</li> </ul>"},{"location":"library/snes9x/#bios","title":"BIOS","text":"<p>Required or optional firmware files go in the frontend's system directory.</p> Filename Description md5sum BS-X.bin BS-X - Sore wa Namae o Nusumareta Machi no Monogatari (Japan) (Rev 1) - Optional fed4d8242cfbed61343d53d48432aced STBIOS.bin Sufami Turbo (Japan) - Optional d3a44ba7d42a74d3ac58cb9c14c6a5ca"},{"location":"library/snes9x/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the Snes9x core have the following file extensions:</p> <ul> <li>.smc</li> <li>.sfc</li> <li>.swc</li> <li>.fig</li> <li>.bs</li> <li>.st</li> </ul> <p>RetroArch database(s) that are associated with the Snes9x core:</p> <ul> <li>Nintendo - Super Nintendo Entertainment System</li> <li>Nintendo - Sufami Turbo</li> <li>Nintendo - Satellaview</li> </ul>"},{"location":"library/snes9x/#features_1","title":"Features","text":"<p>Frontend-level settings or features that the Snes9x core respects.</p> Feature Supported Restart \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 Memory Monitoring (achievements) \u2714 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2714 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2714 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/snes9x/#directories","title":"Directories","text":"<p>The Snes9x core's library name is 'Snes9x'</p> <p>The Snes9x core saves/loads to/from these directories.</p> <p>Frontend's Save directory</p> File Description *.srm Cartridge battery save <p>Frontend's State directory</p> File Description *.state# State"},{"location":"library/snes9x/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The Snes9x core's core provided FPS is 60.0988118623 for NTSC games and 50.0069789082 for PAL games.</li> <li>The Snes9x core's core provided sample rate is 32040 Hz</li> <li>The Snes9x core's base width is 256</li> <li>The Snes9x core's base height is 224 when the Crop Overscan core option is set to enabled. 239 when it's set to disabled.</li> <li>The Snes9x core's max width is 512</li> <li>The Snes9x core's max height is 478</li> <li>The Snes9x core's core provided aspect ratio is dependent on the 'Preferred aspect ratio' core option.</li> </ul>"},{"location":"library/snes9x/#msu-1-support","title":"MSU-1 support","text":"<p>MSU-1 support in the Snes9x core follows the SD2SNES.mdSnes9x naming format, i.e.</p> <pre><code>gamename.sfc\ngamename.msu\ngamename-#.pcm\n</code></pre> <p>Loading a manifest.bml file or having a xml file isn't necessary. Just load gamename.sfc.</p> <p>Here's an example of a working MSU-1 setup done with Secret of Mana MSU-1. Please note that som_msu1.sfc is being softpatched in this example.</p> <p></p>"},{"location":"library/snes9x/#bs-x-and-sufami-turbo","title":"BS-X and Sufami Turbo","text":"<p>In order to load BS-X and Sufami Turbo games, you'll need BS-X.bin and STBIOS.bin in the frontend's system directory.</p> <p>To load multi-cart games specifically, a more complex procedure needs to be followed.</p> <ul> <li>First, load the base game first by using the \"Load Content\" option in RetroArch's Main Menu.</li> <li>Second, go back to RetroArch's Main Menu and select the \"Load Multi-Cart Link\" option.</li> <li>Third, load the base game while in the \"Load Multi-Cart Link\" screen.</li> <li>Fourth, go back to RetroArch's Main Menu and select the \"Load Multi-Cart Link\" option.</li> <li>Fifth, load the add-on game while in the \"Load Multi-Cart Link\" screen.</li> <li>Sixth, go back to RetroArch's Main Menu for the final time and select the \"Start Multi-Cart Link\" option.</li> </ul> <p>Please note that for multi-cart Sufami Turbo games, you must first run each game individually to create sram files for them. Then the multi-link will function correctly.</p>"},{"location":"library/snes9x/#core-options","title":"Core options","text":"<p>The Snes9x core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded.</p> <p>Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch.</p> <ul> <li> <p>Allow Opposing Directions [snes9x_up_down_allowed] (disabled|enabled)</p> <p>Enabling this will allow pressing / quickly alternating / holding both left and right (or up and down in some games) directions at the same time.</p> <p>This may cause movement based glitches to occur in certain games.</p> <p>It's best to keep this core option disabled.</p> </li> <li> <p>SuperFX Frequency [snes9x_overclock] (50% to 500%. 100% is default.)</p> <p>Overclock the SuperFX chip.</p> <p>Example video here</p> </li> <li> <p>Reduce Slowdown (Hack, Unsafe) [snes9x_overclock_cycles] (disabled|light|compatible|max)</p> <p>Many games for the SNES suffered from slowdown due to the weak main CPU. This option helps allievate that at the cost of possible bugs.</p> <p>Example video here</p> <p>light: Slightly reduces slowdown, more compatible than the \"compatible\" option.</p> <p>compatible: Reduce slowdown but keep as much game compatibility as much as possible.</p> <p>max: Reduce slowdown as much as possible but will break more games.</p> </li> <li> <p>Reduce Flickering (Hack, Unsafe) [snes9x_reduce_sprite_flicker] (disabled|enabled)</p> <p>Raises sprite limit to reduce flickering in games.</p> </li> <li> <p>Randomize Memory (Unsafe) [snes9x_randomize_memory] (disabled|enabled)</p> <p>Randomizes the system RAM upon startup.</p> <p>Some games such as Super Off Road use system RAM as a random number generator for item placement and AI behavior to make gameplay more unpredictable.</p> <p>It's best to keep this core option disabled.</p> </li> <li> <p>Hires Blending [snes9x_hires_blend] (disabled|merge|blur)</p> <p>Awaiting description.</p> </li> <li> <p>Audio Interpolation [snes9x_audio_interpolation] (gaussian|cubic|sinc|none|linear)</p> <p>Awaiting description.</p> </li> <li> <p>Blargg NTSC filter [snes9x_blargg] (disabled|monochrome|rf|composite|s-video|rgb)</p> <p>Self-explanatory.</p> </li> <li> <p>Show layer 1 [snes9x_layer_1] (enabled|disabled)</p> <p>Show graphical layer 1.</p> <p>It's best to keep this core option enabled.</p> </li> <li> <p>Show layer 2 [snes9x_layer_2] (enabled|disabled)</p> <p>Show graphical layer 2.</p> <p>It's best to keep this core option enabled.</p> </li> <li> <p>Show layer 3 [snes9x_layer_3] (enabled|disabled)</p> <p>Show graphical layer 3.</p> <p>It's best to keep this core option enabled.</p> </li> <li> <p>Show layer 4 [snes9x_layer_4] (enabled|disabled)</p> <p>Show graphical layer 4.</p> <p>It's best to keep this core option enabled.</p> </li> <li> <p>Show sprite layer [snes9x_layer_5] (enabled|disabled)</p> <p>Show sprite layer.</p> <p>It's best to keep this core option enabled.</p> </li> <li> <p>Enable graphic clip windows [snes9x_gfx_clip] (enabled|disabled)</p> <p>Show graphic clip windows.</p> <p>It's best to keep this core option enabled.</p> </li> <li> <p>Enable transparency effects [snes9x_gfx_transp] (enabled|disabled)</p> <p>Show transparency effects.</p> <p>It's best to keep this core option enabled.</p> </li> <li> <p>Enable hires mode [snes9x_gfx_hires] (enabled|disabled)</p> <p>Enable hires mode.</p> <p>It's best to keep this core option enabled.</p> </li> <li> <p>Enable sound channel 1 [snes9x_sndchan_1] (enabled|disabled)</p> <p>Enabled sound channel 1.</p> <p>It's best to keep this core option enabled.</p> </li> <li> <p>Enable sound channel 2 [snes9x_sndchan_2] (enabled|disabled)</p> <p>Enabled sound channel 2.</p> <p>It's best to keep this core option enabled.</p> </li> <li> <p>Enable sound channel 3 [snes9x_sndchan_3] (enabled|disabled)</p> <p>Enabled sound channel 3.</p> <p>It's best to keep this core option enabled.</p> </li> <li> <p>Enable sound channel 4 [snes9x_sndchan_4] (enabled|disabled)</p> <p>Enabled sound channel 4.</p> <p>It's best to keep this core option enabled.</p> </li> <li> <p>Enable sound channel 5 [snes9x_sndchan_5] (enabled|disabled)</p> <p>Enabled sound channel 5.</p> <p>It's best to keep this core option enabled.</p> </li> <li> <p>Enable sound channel 6 [snes9x_sndchan_6] (enabled|disabled)</p> <p>Enabled sound channel 6.</p> <p>It's best to keep this core option enabled.</p> </li> <li> <p>Enable sound channel 7 [snes9x_sndchan_7] (enabled|disabled)</p> <p>Enabled sound channel 7.</p> <p>It's best to keep this core option enabled.</p> </li> <li> <p>Enable sound channel 8 [snes9x_sndchan_8] (enabled|disabled)</p> <p>Enabled sound channel 8.</p> <p>It's best to keep this core option enabled.</p> </li> <li> <p>Crop overscan [snes9x_overscan] (enabled|disabled|auto)</p> <p>Crop out the potentially random glitchy video output that would have been hidden by the bezel around the edge of a standard-definition television screen.</p> </li> </ul> Crop overscan - On <p></p> Crop overscan - Off <p></p> <ul> <li> <p>Preferred aspect ratio [snes9x_aspect] (4:3|uncorrected|auto|ntsc|pal)</p> <p>Choose the preferred aspect ratio. RetroArch's aspect ratio must be set to Core provided in the Video settings.</p> </li> </ul> Preferred aspect ratio - ntsc <p></p> Preferred aspect ratio - pal <p></p> Preferred aspect ratio - 4:3 <p></p> <ul> <li> <p>Console region (Reload core) [snes9x_region] (auto|ntsc|pal)</p> <p>Select what region the system is from.</p> </li> <li> <p>Super Scope crosshair [snes9x_superscope_crosshair] (0 to 16 in increments of 1. 2 is default.)</p> <p>Configure the crosshair size for the \"SuperScope\" device type.</p> </li> <li> <p>Super Scope color [snes9x_superscope_color] (White|White (blend)|Red|Red (blend)|Orange|Orange (blend)|Yellow|Yellow (blend)|Green|Green (blend)|Cyan|Cyan (blend)|Sky|Sky (blend)|Blue|Blue (blend)|Violet|Violet (blend)|Pink|Pink (blend)|Purple|Purple (blend)|Black|Black (blend)|25% Grey|25% Grey (blend)|50% Grey|50% Grey (blend)|75% Grey|75% Grey (blend))</p> <p>Configure the crosshair color for the \"SuperScope\" device type.</p> </li> <li> <p>Justifier 1 crosshair [snes9x_justifier1_crosshair] (0 to 16 in increments of 1. 4 is default.)</p> <p>Configure the crosshair size for the \"Justifier\" device type.</p> </li> <li> <p>Justifier 1 color [snes9x_justifier1_color] (Blue|Blue (blend)|Violet|Violet (blend)|Pink|Pink (blend)|Purple|Purple (blend)|Black|Black (blend)|25% Grey|25% Grey (blend)|50% Grey|50% Grey (blend)|75% Grey|75% Grey (blend)|White|White (blend)|Red|Red (blend)|Orange|Orange (blend)|Yellow|Yellow (blend)|Green|Green (blend)|Cyan|Cyan (blend)|Sky|Sky (blend))</p> <p>Configure the crosshair color for the \"Justifier\" device type.</p> </li> <li> <p>Justifier 2 crosshair [snes9x_justifier2_crosshair] (0 to 16 in increments of 1. 4 is default.)</p> <p>Configure the crosshair size for the \"Justifier (2P)\" device type.</p> </li> <li> <p>Justifier 2 color [snes9x_justifier2_color] (Pink|Pink (blend)|Purple|Purple (blend)|Black|Black (blend)|25% Grey|25% Grey (blend)|50% Grey|50% Grey (blend)|75% Grey|75% Grey (blend)|White|White (blend)|Red|Red (blend)|Orange|Orange (blend)|Yellow|Yellow (blend)|Green|Green (blend)|Cyan|Cyan (blend)|Sky|Sky (blend)|Blue|Blue (blend)|Violet|Violet (blend))</p> <p>Configure the crosshair color for the \"Justifier (2P)\" device type.</p> </li> <li> <p>M.A.C.S. rifle crosshair [snes9x_rifle_crosshair] (0 to 16 in increments of 1. 2 is default.)</p> <p>Configure the crosshair size for the \"M.A.C.S. Rifle\" device type.</p> </li> <li> <p>M.A.C.S. rifle color [snes9x_rifle_color] (White|White (blend)|Red|Red (blend)|Orange|Orange (blend)|Yellow|Yellow (blend)|Green|Green (blend)|Cyan|Cyan (blend)|Sky|Sky (blend)|Blue|Blue (blend)|Violet|Violet (blend)|Pink|Pink (blend)|Purple|Purple (blend)|Black|Black (blend)|25% Grey|25% Grey (blend)|50% Grey|50% Grey (blend)|75% Grey|75% Grey (blend))</p> <p>Configure the crosshair color for the \"M.A.C.S. Rifle\" device type.</p> </li> <li> <p>Block Invalid VRAM Access [snes9x_block_invalid_vram_access] (enabled|disabled)</p> <p>Awaiting description.</p> </li> <li> <p>Echo Buffer Hack (Unsafe, only enable for old addmusic hacks) [snes9x_echo_buffer_hack] (disabled|enabled)</p> <p>Awaiting description.</p> </li> </ul>"},{"location":"library/snes9x/#user-1-device-types","title":"User 1 device types","text":"<p>The Snes9x core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p> <ul> <li>None - Doesn't disable input.</li> <li>SNES Joypad - Joypad</li> <li>SNES Mouse - Mouse</li> <li>Multitap - Joypad - Allows for up to five players to play together in multitap games.</li> </ul>"},{"location":"library/snes9x/#user-2-device-types","title":"User 2 device types","text":"<ul> <li>None - Doesn't disable input.</li> <li>SNES Joypad - Joypad</li> <li>SNES Mouse - Mouse</li> <li>Multitap - Joypad - Allows for up to five players to play together in mulitap games.</li> <li>SuperScope - Lightgun</li> <li>Justifier - Lightgun</li> <li>M.A.C.S. Rifle - Lightgun</li> </ul>"},{"location":"library/snes9x/#user-3-device-types","title":"User 3 device types","text":"<ul> <li>None - Doesn't disable input.</li> <li>SNES Joypad - Joypad</li> <li>Justifier (2P) - Lightgun</li> </ul>"},{"location":"library/snes9x/#user-4-8-device-types","title":"User 4 - 8 device types","text":"<ul> <li>None - Doesn't disable input.</li> <li>SNES Joypad - Joypad</li> </ul>"},{"location":"library/snes9x/#multitap","title":"Multitap","text":"<p>Activating multitap support in compatible games can be configured by switching to the 'Multitap' device type for the corresponding users.</p>"},{"location":"library/snes9x/#joypad","title":"Joypad","text":"RetroPad Inputs User 1 - 5 input descriptors B Y Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A X L R"},{"location":"library/snes9x/#mouse","title":"Mouse","text":"RetroMouse Inputs SNES Mouse  Mouse Cursor SNES Mouse Cursor  Mouse 1 SNES Mouse Left Button  Mouse 2 SNES Mouse Right Button"},{"location":"library/snes9x/#lightgun","title":"Lightgun","text":"RetroLightgun Inputs SuperScope Justifier M.A.C.S. Rifle  Gun Crosshair SuperScope Crosshair Justifier Crosshair M.A.C.S. Rifle Crosshair Gun Trigger SuperScope Trigger Justifier Trigger M.A.C.S. Rifle Trigger Gun Aux A SuperScope Cursor Gun Aux B SuperScope Turbo Justifier Offscreen Gun Start SuperScope Pause Justifier Start"},{"location":"library/snes9x/#compatibility","title":"Compatibility","text":"Game Issue A.S.P. Air Strike Patrol The shadow below the aircraft is missing. Glitched graphics on the briefing screens. BS-Zelda MottZilla Patch Only shows a black screen. Doom Colored dots appear during gameplay. Funaki Masakatsu Hybrid Wrestler \u2013 Tougi Denshou Corrupted graphics on the Pancrase logo screen. Hayazashi Nidan Morita Shougi 2 Matches won\u2019t start. Mecarobot Golf The ground \"wobbles\" during gameplay. Secret of Evermore (PAL versions) Randomly freezes when the background music changes."},{"location":"library/snes9x/#external-links","title":"External Links","text":"<ul> <li>Official Snes9x Website (no longer updated)</li> <li>Official Snes9x Github Repository</li> <li>Official Upstream Snes9x Downloads</li> <li>Alternate Official Upstream Snes9x Downloads</li> <li>Libretro Snes9x Core info file</li> <li>Libretro Snes9x Github Repository</li> <li>Report Libretro Snes9x Core Issues Here</li> </ul>"},{"location":"library/snes9x/#snes","title":"SNES","text":"<ul> <li>Nintendo - SNES / Famicom (Beetle bsnes)</li> <li>Nintendo - SNES / Famicom (bsnes-jg)</li> <li>Nintendo - SNES / Famicom (bsnes-mercury Accuracy)</li> <li>Nintendo - SNES / Famicom (bsnes-mercury Balanced)</li> <li>Nintendo - SNES / Famicom (bsnes-mercury Performance)</li> <li>Nintendo - SNES / Famicom (bsnes Accuracy)</li> <li>Nintendo - SNES / Famicom (bsnes Balanced)</li> <li>Nintendo - SNES / Famicom (bsnes C++98 (v085))</li> <li>Nintendo - SNES / Famicom (bsnes Performance)</li> <li>Nintendo - SNES / Famicom (higan Accuracy)</li> <li>Nintendo - SNES / Famicom (nSide Balanced)</li> <li>Nintendo - SNES / Famicom (Mesen-S)</li> <li>Nintendo - SNES / Famicom (Snes9x 2002)</li> <li>Nintendo - SNES / Famicom (Snes9x 2005 Plus)</li> <li>Nintendo - SNES / Famicom (Snes9x 2005)</li> <li>Nintendo - SNES / Famicom (Snes9x 2010)</li> </ul>"},{"location":"library/snes9x_2002/","title":"Nintendo - SNES / Famicom (Snes9x 2002)","text":""},{"location":"library/snes9x_2002/#background","title":"Background","text":"<p>Port of SNES9x 1.39 for libretro (was previously called PocketSNES). Heavily optimized for ARM.</p> <p>Provides more favorable performance thresholds at the cost of accuracy. DO NOT use this core unless you have underpowered hardware and the mainline Snes9x core and the bsnes/higan/bsnes-mercury cores aren't fast enough</p> <p>This core is part of a group of Snes9x cores that are snapshots from the year their code is based on. (Snes9x 2002, Snes9x 2005, Snes9x 2005 Plus, Snes9x 2010)</p>"},{"location":"library/snes9x_2002/#authorlicense","title":"Author/License","text":"<p>The Snes9x 2002 core has been authored by</p> <ul> <li>Snes9x Team</li> <li>PocketSNES Team</li> <li>Toadking</li> </ul> <p>The Snes9x 2002 core is licensed under</p> <ul> <li>Non-commercial</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/snes9x_2002/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the Snes9x 2002 core have the following file extensions:</p> <ul> <li>.smc</li> <li>.fig</li> <li>.sfc</li> <li>.gd3</li> <li>.gd7</li> <li>.dx2</li> <li>.bsx</li> <li>.swc</li> </ul>"},{"location":"library/snes9x_2002/#databases","title":"Databases","text":"<p>RetroArch database(s) that are associated with the Snes9x 2002 core:</p> <ul> <li>Nintendo - Super Nintendo Entertainment System</li> <li>Nintendo - Super Nintendo Entertainment System Hacks</li> <li>Nintendo - Sufami Turbo</li> </ul>"},{"location":"library/snes9x_2002/#features","title":"Features","text":"<p>Frontend-level settings or features that the Snes9x 2002 core respects.</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 Memory Monitoring (achievements) \u2714 RetroArch Cheats \u2714 Native Cheats \u2714 Controls \u2714 Remapping \u2715 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2714 LEDs \u2715"},{"location":"library/snes9x_2002/#directories","title":"Directories","text":"<p>The Snes9x 2002 core's internal core name is 'Snes9x 2002'</p> <p>The Snes9x 2002 core saves/loads to/from these directories.</p> <p>Frontend's Save directory</p> <ul> <li>'content-name'.srm (Cartridge battery save)</li> </ul> <p>Frontend's State directory</p> <ul> <li>'content-name'.state# (State)</li> </ul>"},{"location":"library/snes9x_2002/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The Snes9x 2002 core's core provided FPS is 59.9227434043 for NTSC games and 50.3197396536 for PAL games.</li> <li>The Snes9x 2002 core's core provided sample rate is 32040 Hz</li> <li>The Snes9x 2002 core's core provided base width is 256</li> <li>The Snes9x 2002 core's core provided base height is 224</li> <li>The Snes9x 2002 core's core provided max width is 512</li> <li>The Snes9x 2002 core's core provided max height is 512</li> <li>The Snes9x 2002 core's core provided aspect ratio is 4/3</li> </ul>"},{"location":"library/snes9x_2002/#core-options","title":"Core options","text":"<p>The Snes9x 2002 core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded.</p> <p>Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch.</p> <ul> <li> <p>Reduce Slowdown (Hack, Unsafe, Restart) [snes9x2002_overclock_cycles] (disabled|compatible|max)</p> <p>Many games for the SNES suffered from slowdown due to the weak main CPU. This option helps allievate that at the cost of possible bugs.</p> <p>Example video here</p> <p>compatible: Reduce slowdown but keep as much game compatibility as much as possible.</p> <p>max: Reduce slowdown as much as possible but will break more games.</p> </li> </ul>"},{"location":"library/snes9x_2002/#controllers","title":"Controllers","text":"<p>The Snes9x 2002 core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/snes9x_2002/#user-1-2-device-types","title":"User 1 - 2 device types","text":"<ul> <li>None - Doesn't disable input. There's no reason to switch to this.</li> <li>**RetroPad - Joypad - Stay on this.</li> <li>RetroPad w/Analog - Joypad - Same as RetroPad. There's no reason to switch to this.</li> </ul>"},{"location":"library/snes9x_2002/#controller-tables","title":"Controller tables","text":""},{"location":"library/snes9x_2002/#joypad","title":"Joypad","text":"RetroPad Inputs Snes9x 2002 core Inputs B Y Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A X L R"},{"location":"library/snes9x_2002/#compatibility","title":"Compatibility","text":"<p>Awaiting description.</p>"},{"location":"library/snes9x_2002/#external-links","title":"External Links","text":"<ul> <li>Official Snes9x 2002 Website</li> <li>Libretro Snes9x 2002 Core info file</li> <li>Libretro Snes9x 2002 Github Repository</li> <li>Report Libretro Snes9x 2002 Core Issues Here</li> </ul>"},{"location":"library/snes9x_2002/#see-also","title":"See also","text":""},{"location":"library/snes9x_2002/#nintendo-sufami-turbo","title":"Nintendo - Sufami Turbo","text":"<ul> <li>Nintendo - SNES / Famicom (Beetle bsnes)</li> <li>Nintendo - SNES / Famicom (bsnes-jg)</li> <li>Nintendo - SNES / Famicom (bsnes-mercury Accuracy)</li> <li>Nintendo - SNES / Famicom (bsnes-mercury Balanced)</li> <li>Nintendo - SNES / Famicom (bsnes-mercury Performance)</li> <li>Nintendo - SNES / Famicom (bsnes Accuracy)</li> <li>Nintendo - SNES / Famicom (bsnes Balanced)</li> <li>Nintendo - SNES / Famicom (bsnes C++98 (v085))</li> <li>Nintendo - SNES / Famicom (bsnes Performance)</li> <li>Nintendo - SNES / Famicom (Snes9x)</li> <li>Nintendo - SNES / Famicom (Snes9x 2005 Plus)</li> <li>Nintendo - SNES / Famicom (Snes9x 2005)</li> <li>Nintendo - SNES / Famicom (Snes9x 2010)</li> </ul>"},{"location":"library/snes9x_2002/#nintendo-super-nintendo-entertainment-system-hacks","title":"Nintendo - Super Nintendo Entertainment System (+ Hacks)","text":"<ul> <li>Nintendo - SNES / Famicom (Beetle bsnes)</li> <li>Nintendo - SNES / Famicom (bsnes-jg)</li> <li>Nintendo - SNES / Famicom (bsnes-mercury Accuracy)</li> <li>Nintendo - SNES / Famicom (bsnes-mercury Balanced)</li> <li>Nintendo - SNES / Famicom (bsnes-mercury Performance)</li> <li>Nintendo - SNES / Famicom (bsnes Accuracy)</li> <li>Nintendo - SNES / Famicom (bsnes Balanced)</li> <li>Nintendo - SNES / Famicom (bsnes C++98 (v085))</li> <li>Nintendo - SNES / Famicom (bsnes Performance)</li> <li>Nintendo - SNES / Famicom (higan Accuracy)</li> <li>Nintendo - SNES / Famicom (nSide Balanced)</li> <li>Nintendo - SNES / Famicom (Mesen-S)</li> <li>Nintendo - SNES / Famicom (Snes9x)</li> <li>Nintendo - SNES / Famicom (Snes9x 2005 Plus)</li> <li>Nintendo - SNES / Famicom (Snes9x 2005)</li> <li>Nintendo - SNES / Famicom (Snes9x 2010)</li> </ul>"},{"location":"library/snes9x_2005/","title":"Nintendo - SNES / Famicom (Snes9x 2005)","text":""},{"location":"library/snes9x_2005/#background","title":"Background","text":"<p>Port of SNES9x 1.43 for libretro. It was previously called CAT SFC.</p> <p>Provides more favorable performance thresholds at the cost of accuracy. DO NOT use this core unless you have underpowered hardware and the mainline Snes9x core and the bsnes/higan/bsnes-mercury cores aren't fast enough</p> <p>This core is part of a group of Snes9x cores that are snapshots from the year their code is based on. (Snes9x 2002, Snes9x 2005, Snes9x 2005 Plus, Snes9x 2010)</p>"},{"location":"library/snes9x_2005/#authorlicense","title":"Author/License","text":"<p>The Snes9x 2005 core has been authored by</p> <ul> <li>Snes9x Team</li> <li>dking</li> <li>BassAceGold</li> <li>ShadauxCat</li> <li>Nebuleon</li> </ul> <p>The Snes9x 2005 core is licensed under</p> <ul> <li>Non-commercial</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/snes9x_2005/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the Snes9x 2005 core have the following file extensions:</p> <ul> <li>.smc</li> <li>.fig</li> <li>.sfc</li> <li>.gd3</li> <li>.gd7</li> <li>.dx2</li> <li>.bsx</li> <li>.swc</li> </ul>"},{"location":"library/snes9x_2005/#databases","title":"Databases","text":"<p>RetroArch database(s) that are associated with the Snes9x 2005 core:</p> <ul> <li>Nintendo - Super Nintendo Entertainment System</li> <li>Nintendo - Super Nintendo Entertainment System Hacks</li> <li>Nintendo - Sufami Turbo</li> </ul>"},{"location":"library/snes9x_2005/#features","title":"Features","text":"<p>Frontend-level settings or features that the Snes9x 2005 core respects.</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 Memory Monitoring (achievements) \u2714 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/snes9x_2005/#directories","title":"Directories","text":"<p>The Snes9x 2005 core's internal core name is 'Snes9x 2005'</p> <p>The Snes9x 2005 core saves/loads to/from these directories.</p> <p>Frontend's Save directory</p> <ul> <li>'content-name'.srm (Cartridge battery save)</li> </ul> <p>Frontend's State directory</p> <ul> <li>'content-name'.state# (State)</li> </ul>"},{"location":"library/snes9x_2005/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The Snes9x 2005 core's core provided FPS is 59.9010812533 for NTSC games and 50.3015490011 for PAL games.</li> <li>The Snes9x 2005 core's core provided sample rate is 32040 Hz</li> <li>The Snes9x 2005 core's core provided base width is 256</li> <li>The Snes9x 2005 core's core provided base height is 224</li> <li>The Snes9x 2005 core's core provided max width is 512</li> <li>The Snes9x 2005 core's core provided max height is 512</li> <li>The Snes9x 2005 core's core provided aspect ratio is 4/3</li> </ul>"},{"location":"library/snes9x_2005/#core-options","title":"Core options","text":"<p>The Snes9x 2005 core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded.</p> <p>Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch.</p> <ul> <li> <p>Video Mode [catsfc_VideoMode] (auto|NTSC|PAL)</p> <p>Awaiting description.</p> </li> <li> <p>Reduce Slowdown (Hack, Unsafe, Restart) [catsfc_overclock_cycles] (disabled|compatible|max)</p> <p>Many games for the SNES suffered from slowdown due to the weak main CPU. This option helps allievate that at the cost of possible bugs.</p> <p>Example video here</p> <p>compatible: Reduce slowdown but keep as much game compatibility as much as possible.</p> <p>max: Reduce slowdown as much as possible but will break more games.</p> </li> <li> <p>Reduce Flickering (Hack, Unsafe) [catsfc_reduce_sprite_flicker] (disabled|enabled)</p> <p>Raises sprite limit to reduce flickering in games.</p> </li> </ul>"},{"location":"library/snes9x_2005/#controllers","title":"Controllers","text":"<p>The Snes9x 2005 core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/snes9x_2005/#user-1-5-device-types","title":"User 1 - 5 device types","text":"<ul> <li>None - Doesn't disable input. There's no reason to switch to this.</li> <li>**RetroPad - Joypad - Stay on this.</li> <li>RetroPad w/Analog - Joypad - Same as RetroPad. There's no reason to switch to this.</li> </ul>"},{"location":"library/snes9x_2005/#controller-tables","title":"Controller tables","text":""},{"location":"library/snes9x_2005/#joypad","title":"Joypad","text":"User 1 - 5 Remap descriptors RetroPad Inputs B Y Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A X L R"},{"location":"library/snes9x_2005/#compatibility","title":"Compatibility","text":"Game Issue A.S.P. Air Strike Patrol The shadow below the aircraft is missing. Glitched graphics on the briefing screens. Bass Masters Classic - Pro Edition Only shows a black screen. Funaki Masakatsu Hybrid Wrestler \u2013 Tougi Denshou Corrupted graphics on the Pancrase logo screen. Hayazashi Nidan Morita Shougi 2 Matches won\u2019t start. Madden NFL 96 Only shows a black screen. Masters New \u2013 Harukanaru Augusta 3 Black screen after selecting game. Mecarobot Golf The ground \"wobbles\" during gameplay. Mechwarrior 3050 Black screen after the Activision logo."},{"location":"library/snes9x_2005/#external-links","title":"External Links","text":"<ul> <li>Official Snes9x 2005 Github Repository</li> <li>Libretro Snes9x 2005 Core info file</li> <li>Libretro Snes9x 2005 Github Repository</li> <li>Report Libretro Snes9x 2005 Core Issues Here</li> </ul>"},{"location":"library/snes9x_2005/#see-also","title":"See also","text":""},{"location":"library/snes9x_2005/#nintendo-sufami-turbo","title":"Nintendo - Sufami Turbo","text":"<ul> <li>Nintendo - SNES / Famicom (Beetle bsnes)</li> <li>Nintendo - SNES / Famicom (bsnes-jg)</li> <li>Nintendo - SNES / Famicom (bsnes-mercury Accuracy)</li> <li>Nintendo - SNES / Famicom (bsnes-mercury Balanced)</li> <li>Nintendo - SNES / Famicom (bsnes-mercury Performance)</li> <li>Nintendo - SNES / Famicom (bsnes Accuracy)</li> <li>Nintendo - SNES / Famicom (bsnes Balanced)</li> <li>Nintendo - SNES / Famicom (bsnes C++98 (v085))</li> <li>Nintendo - SNES / Famicom (bsnes Performance)</li> <li>Nintendo - SNES / Famicom (Snes9x)</li> <li>Nintendo - SNES / Famicom (Snes9x 2002)</li> <li>Nintendo - SNES / Famicom (Snes9x 2005 Plus)</li> <li>Nintendo - SNES / Famicom (Snes9x 2010)</li> </ul>"},{"location":"library/snes9x_2005/#nintendo-super-nintendo-entertainment-system-hacks","title":"Nintendo - Super Nintendo Entertainment System (+ Hacks)","text":"<ul> <li>Nintendo - SNES / Famicom (Beetle bsnes)</li> <li>Nintendo - SNES / Famicom (bsnes-jg)</li> <li>Nintendo - SNES / Famicom (bsnes-mercury Accuracy)</li> <li>Nintendo - SNES / Famicom (bsnes-mercury Balanced)</li> <li>Nintendo - SNES / Famicom (bsnes-mercury Performance)</li> <li>Nintendo - SNES / Famicom (bsnes Accuracy)</li> <li>Nintendo - SNES / Famicom (bsnes Balanced)</li> <li>Nintendo - SNES / Famicom (bsnes C++98 (v085))</li> <li>Nintendo - SNES / Famicom (bsnes Performance)</li> <li>Nintendo - SNES / Famicom (higan Accuracy)</li> <li>Nintendo - SNES / Famicom (nSide Balanced)</li> <li>Nintendo - SNES / Famicom (Mesen-S)</li> <li>Nintendo - SNES / Famicom (Snes9x)</li> <li>Nintendo - SNES / Famicom (Snes9x 2002)</li> <li>Nintendo - SNES / Famicom (Snes9x 2005 Plus)</li> <li>Nintendo - SNES / Famicom (Snes9x 2010)</li> </ul>"},{"location":"library/snes9x_2005_plus/","title":"Nintendo - SNES / Famicom (Snes9x 2005 Plus)","text":""},{"location":"library/snes9x_2005_plus/#background","title":"Background","text":"<p>Port of SNES9x 1.43 for libretro. It was previously called CAT SFC.</p> <p>The Snes9x 2005 Plus core has been compiled with Blargg's APU. An accurate audio processing unit.</p> <p>Provides more favorable performance thresholds at the cost of accuracy. DO NOT use this core unless you have underpowered hardware and the mainline Snes9x core and the bsnes/higan/bsnes-mercury cores aren't fast enough</p> <p>This core is part of a group of Snes9x cores that are snapshots from the year their code is based on. (Snes9x 2002, Snes9x 2005, Snes9x 2005 Plus, Snes9x 2010)</p>"},{"location":"library/snes9x_2005_plus/#authorlicense","title":"Author/License","text":"<p>The Snes9x 2005 Plus core has been authored by</p> <ul> <li>Snes9x Team</li> <li>dking</li> <li>BassAceGold</li> <li>ShadauxCat</li> <li>Nebuleon</li> </ul> <p>The Snes9x 2005 Plus core is licensed under</p> <ul> <li>Non-commercial</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/snes9x_2005_plus/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the Snes9x 2005 Plus core have the following file extensions:</p> <ul> <li>.smc</li> <li>.fig</li> <li>.sfc</li> <li>.gd3</li> <li>.gd7</li> <li>.dx2</li> <li>.bsx</li> <li>.swc</li> </ul>"},{"location":"library/snes9x_2005_plus/#databases","title":"Databases","text":"<p>RetroArch database(s) that are associated with the Snes9x 2005 Plus core:</p> <ul> <li>Nintendo - Super Nintendo Entertainment System</li> <li>Nintendo - Super Nintendo Entertainment System Hacks</li> <li>Nintendo - Sufami Turbo</li> </ul>"},{"location":"library/snes9x_2005_plus/#features","title":"Features","text":"<p>Frontend-level settings or features that the Snes9x 2005 Plus core respects.</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 Memory Monitoring (achievements) \u2714 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/snes9x_2005_plus/#directories","title":"Directories","text":"<p>The Snes9x 2005 Plus core's internal core name is 'Snes9x 2005 Plus'</p> <p>The Snes9x 2005 Plus core saves/loads to/from these directories.</p> <p>Frontend's Save directory</p> <ul> <li>'content-name'.srm (Cartridge battery save)</li> </ul> <p>Frontend's State directory</p> <ul> <li>'content-name'.state# (State)</li> </ul>"},{"location":"library/snes9x_2005_plus/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The Snes9x 2005 Plus core's core provided FPS is 59.9010812533 for NTSC games and 50.3015490011 for PAL games.</li> <li>The Snes9x 2005 Plus core's core provided sample rate is 32040 Hz</li> <li>The Snes9x 2005 Plus core's core provided base width is 256</li> <li>The Snes9x 2005 Plus core's core provided base height is 224</li> <li>The Snes9x 2005 Plus core's core provided max width is 512</li> <li>The Snes9x 2005 Plus core's core provided max height is 512</li> <li>The Snes9x 2005 Plus core's core provided aspect ratio is 4/3</li> </ul>"},{"location":"library/snes9x_2005_plus/#core-options","title":"Core options","text":"<p>The Snes9x 2005 Plus core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded.</p> <p>Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch.</p> <ul> <li> <p>Video Mode [catsfc_VideoMode] (auto|NTSC|PAL)</p> <p>Awaiting description.</p> </li> <li> <p>Reduce Slowdown (Hack, Unsafe, Restart) [catsfc_overclock_cycles] (disabled|compatible|max)</p> <p>Many games for the SNES suffered from slowdown due to the weak main CPU. This option helps allievate that at the cost of possible bugs.</p> <p>Example video here</p> <p>compatible: Reduce slowdown but keep as much game compatibility as much as possible.</p> <p>max: Reduce slowdown as much as possible but will break more games.</p> </li> <li> <p>Reduce Flickering (Hack, Unsafe) [catsfc_reduce_sprite_flicker] (disabled|enabled)</p> <p>Rises sprite limit to reduce flickering in games.</p> </li> </ul>"},{"location":"library/snes9x_2005_plus/#controllers","title":"Controllers","text":"<p>The Snes9x 2005 Plus core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/snes9x_2005_plus/#user-1-5-device-types","title":"User 1 - 5 device types","text":"<ul> <li>None - Doesn't disable input. There's no reason to switch to this.</li> <li>**RetroPad - Joypad - Stay on this.</li> <li>RetroPad w/Analog - Joypad - Same as RetroPad. There's no reason to switch to this.</li> </ul>"},{"location":"library/snes9x_2005_plus/#controller-tables","title":"Controller tables","text":""},{"location":"library/snes9x_2005_plus/#joypad","title":"Joypad","text":"User 1 - 5 Remap descriptors RetroPad Inputs B Y Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A X L R"},{"location":"library/snes9x_2005_plus/#compatibility","title":"Compatibility","text":"Game Issue A.S.P. Air Strike Patrol The shadow below the aircraft is missing. Glitched graphics on the briefing screens. Bass Masters Classic - Pro Edition Only shows a black screen. Funaki Masakatsu Hybrid Wrestler \u2013 Tougi Denshou Corrupted graphics on the Pancrase logo screen. Hayazashi Nidan Morita Shougi 2 Matches won\u2019t start. Madden NFL 96 Only shows a black screen. Masters New \u2013 Harukanaru Augusta 3 Black screen after selecting game. Mecarobot Golf The ground \"wobbles\" during gameplay. Mechwarrior 3050 Black screen after the Activision logo."},{"location":"library/snes9x_2005_plus/#external-links","title":"External Links","text":"<ul> <li>Official Snes9x 2005 Plus Github Repository</li> <li>Libretro Snes9x 2005 Plus Core info file</li> <li>Libretro Snes9x 2005 Plus Github Repository</li> <li>Report Libretro Snes9x 2005 Plus Core Issues Here</li> </ul>"},{"location":"library/snes9x_2005_plus/#see-also","title":"See also","text":""},{"location":"library/snes9x_2005_plus/#nintendo-sufami-turbo","title":"Nintendo - Sufami Turbo","text":"<ul> <li>Nintendo - SNES / Famicom (bsnes-jg)</li> <li>Nintendo - SNES / Famicom (Beetle bsnes)</li> <li>Nintendo - SNES / Famicom (bsnes-mercury Accuracy)</li> <li>Nintendo - SNES / Famicom (bsnes-mercury Balanced)</li> <li>Nintendo - SNES / Famicom (bsnes-mercury Performance)</li> <li>Nintendo - SNES / Famicom (bsnes Accuracy)</li> <li>Nintendo - SNES / Famicom (bsnes Balanced)</li> <li>Nintendo - SNES / Famicom (bsnes C++98 (v085))</li> <li>Nintendo - SNES / Famicom (bsnes Performance)</li> <li>Nintendo - SNES / Famicom (Snes9x)</li> <li>Nintendo - SNES / Famicom (Snes9x 2002)</li> <li>Nintendo - SNES / Famicom (Snes9x 2005)</li> <li>Nintendo - SNES / Famicom (Snes9x 2010)</li> </ul>"},{"location":"library/snes9x_2005_plus/#nintendo-super-nintendo-entertainment-system-hacks","title":"Nintendo - Super Nintendo Entertainment System (+ Hacks)","text":"<ul> <li>Nintendo - SNES / Famicom (bsnes-jg)</li> <li>Nintendo - SNES / Famicom (Beetle bsnes)</li> <li>Nintendo - SNES / Famicom (bsnes-mercury Accuracy)</li> <li>Nintendo - SNES / Famicom (bsnes-mercury Balanced)</li> <li>Nintendo - SNES / Famicom (bsnes-mercury Performance)</li> <li>Nintendo - SNES / Famicom (bsnes Accuracy)</li> <li>Nintendo - SNES / Famicom (bsnes Balanced)</li> <li>Nintendo - SNES / Famicom (bsnes C++98 (v085))</li> <li>Nintendo - SNES / Famicom (bsnes Performance)</li> <li>Nintendo - SNES / Famicom (higan Accuracy)</li> <li>Nintendo - SNES / Famicom (nSide Balanced)</li> <li>Nintendo - SNES / Famicom (Mesen-S)</li> <li>Nintendo - SNES / Famicom (Snes9x)</li> <li>Nintendo - SNES / Famicom (Snes9x 2002)</li> <li>Nintendo - SNES / Famicom (Snes9x 2005)</li> <li>Nintendo - SNES / Famicom (Snes9x 2010)</li> </ul>"},{"location":"library/snes9x_2010/","title":"Nintendo - SNES / Famicom (Snes9x 2010)","text":""},{"location":"library/snes9x_2010/#background","title":"Background","text":"<p>Port of Snes9x 1.52+ to Libretro (previously called SNES9x Next). Rewritten in C and several optimizations and speedhacks.</p> <p>Provides more favorable performance thresholds at the cost of accuracy. DO NOT use this core unless you have underpowered hardware and the mainline Snes9x core and the bsnes/higan/bsnes-mercury cores aren't fast enough</p> <p>This core is part of a group of Snes9x cores that are snapshots from the year their code is based on. (Snes9x 2002, Snes9x 2005, Snes9x 2005 Plus, Snes9x 2010)</p>"},{"location":"library/snes9x_2010/#authorlicense","title":"Author/License","text":"<p>The Snes9x 2010 core has been authored by</p> <ul> <li>Snes9x Team</li> <li>Squarepusher</li> </ul> <p>The Snes9x 2010 core is licensed under</p> <ul> <li>Non-commercial</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/snes9x_2010/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the Snes9x 2010 core have the following file extensions:</p> <ul> <li>.smc</li> <li>.fig</li> <li>.sfc</li> <li>.gd3</li> <li>.gd7</li> <li>.dx2</li> <li>.bsx</li> <li>.swc</li> </ul>"},{"location":"library/snes9x_2010/#databases","title":"Databases","text":"<p>RetroArch database(s) that are associated with the Snes9x 2010 core:</p> <ul> <li>Nintendo - Super Nintendo Entertainment System</li> <li>Nintendo - Super Nintendo Entertainment System Hacks</li> <li>Nintendo - Sufami Turbo</li> </ul>"},{"location":"library/snes9x_2010/#features","title":"Features","text":"<p>Frontend-level settings or features that the Snes9x 2010 core respects.</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 Memory Monitoring (achievements) \u2714 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse - Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2714 LEDs \u2715"},{"location":"library/snes9x_2010/#directories","title":"Directories","text":"<p>The Snes9x 2010 core's internal core name is 'Snes9x 2010'</p> <p>The Snes9x 2010 core saves/loads to/from these directories.</p> <p>Frontend's Save directory</p> <ul> <li>'content-name'.srm (Cartridge battery save)</li> </ul> <p>Frontend's State directory</p> <ul> <li>'content-name'.state# (State)</li> </ul>"},{"location":"library/snes9x_2010/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The Snes9x 2010 core's core provided FPS is 60.098475521 for NTSC games and 50.0069789082 for PAL games</li> <li>The Snes9x 2010 core's core provided sample rate is 32040.0 Hz</li> <li>The Snes9x 2010 core's core provided base width is 256</li> <li>The Snes9x 2010 core's core provided base height is 224</li> <li>The Snes9x 2010 core's core provided max width is 512</li> <li>The Snes9x 2010 core's core provided max height is 478</li> <li>The Snes9x 2010 core's core provided aspect ratio is 4/3</li> </ul>"},{"location":"library/snes9x_2010/#core-options","title":"Core options","text":"<p>The Snes9x 2010 core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded.</p> <p>Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch.</p> <ul> <li> <p>SuperFX Overclock [snes9x_next_overclock] (Disabled(10MHz)|40MHz|60MHz|80MHz|100MHz|Underclock(5MHz)|Underclock(8MHz))</p> <p>Overclock or underclock the SuperFX chip. 10Mhz is stock clockspeed.</p> </li> <li> <p>Reduce Slowdown (Hack, Unsafe) [snes9x_next_overclock_cycles] (disabled|compatible|max)</p> <p>Many games for the SNES suffered from slowdown due to the weak main CPU. This option helps allievate that at the cost of possible bugs.</p> <p>Example video here</p> <p>compatible: Reduce slowdown but keep as much game compatibility as much as possible.</p> <p>max: Reduce slowdown as much as possible but will break more games.</p> </li> <li> <p>Reduce Flickering (Hack, Unsafe) [snes9x_next_reduce_sprite_flicker] (disabled|enabled)</p> <p>Raises sprite limit to reduce flickering in games.</p> </li> </ul>"},{"location":"library/snes9x_2010/#controllers","title":"Controllers","text":"<p>The Snes9x 2010 core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/snes9x_2010/#user-1-device-types","title":"User 1 device types","text":"<ul> <li>None - Doesn't disable input. There's no reason to switch to this.</li> <li>SNES Joypad - Joypad</li> <li>SNES Mouse - Mouse</li> </ul>"},{"location":"library/snes9x_2010/#user-2-device-types","title":"User 2 device types","text":"<ul> <li>None - Doesn't disable input. There's no reason to switch to this.</li> <li>SNES Joypad - Joypad</li> <li>SNES Mouse - Mouse</li> <li>Multitap - Joypad - Allows for up to five players to play together in multitap games.</li> <li>SuperScope - Lightgun</li> <li>Justifier - Lightgun</li> <li>Justifiers - Lightgun - Two Justifiers are plugged in, for two-player Justifier games.</li> </ul>"},{"location":"library/snes9x_2010/#multitap-support","title":"Multitap support","text":"<p>Activating multitap support in compatible games can be configured by switching to the Multitap device type for User 2.</p>"},{"location":"library/snes9x_2010/#controller-tables","title":"Controller tables","text":""},{"location":"library/snes9x_2010/#joypad","title":"Joypad","text":"User 1 - 5 Remap descriptors RetroPad Inputs B Y Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A X L R"},{"location":"library/snes9x_2010/#mouse","title":"Mouse","text":"RetroMouse Inputs SNES Mouse  Mouse Cursor SNES Mouse Cursor  Mouse 1 SNES Mouse Left Button  Mouse 2 SNES Mouse Right Button"},{"location":"library/snes9x_2010/#lightgun","title":"Lightgun","text":"RetroLightgun Inputs SuperScope Justifier(s)  Gun Crosshair SuperScope Crosshair Justifier Crosshair Gun Trigger SuperScope Trigger Justifier Trigger Gun Aux A SuperScope Cursor Gun Aux B SuperScope Turbo Justifier Offscreen Gun Start SuperScope Pause Justifier Start"},{"location":"library/snes9x_2010/#compatibility","title":"Compatibility","text":"Game Issue A.S.P. Air Strike Patrol The shadow below the aircraft is missing. Glitched graphics on the briefing screens. Bass Masters Classic - Pro Edition Only shows a black screen. Doom Colored dots appear during gameplay. F-1 Grand Prix Glitched HUD display. F1 ROC II \u2013 Race of Champions Crashes when starting a race. Funaki Masakatsu Hybrid Wrestler \u2013 Tougi Denshou Corrupted graphics on the Pancrase logo screen. Hayazashi Nidan Morita Shougi 2 Matches won\u2019t start. Madden NFL 96 Only shows a black screen. Masters New \u2013 Harukanaru Augusta 3 Graphical corruption during gameplay. Mecarobot Golf The ground \"wobbles\" during gameplay. Mechwarrior 3050 Black screen after the Activision logo. Secret of Evermore (PAL) Randomly freezes when the background music changes. Sink or Swim Sometimes the levels are filled with water instantly. Speedy Gonzales: Los Gatos Bandidos Freezes when pressing a switch in the last level. Super Bomberman 3 Freezes after about 20 seconds in the Battle mode menu. Super Bomberman 5 Title screen flickers if the opening cinematic isn\u2019t skipped."},{"location":"library/snes9x_2010/#external-links","title":"External Links","text":"<ul> <li>Snes9x 2010/Next Web Player</li> <li>Libretro Snes9x 2010 Core info file</li> <li>Libretro Snes9x 2010 Github Repository</li> <li>Report Libretro Snes9x 2010 Core Issues Here</li> </ul>"},{"location":"library/snes9x_2010/#see-also","title":"See also","text":""},{"location":"library/snes9x_2010/#nintendo-sufami-turbo","title":"Nintendo - Sufami Turbo","text":"<ul> <li>Nintendo - SNES / Famicom (Beetle bsnes)</li> <li>Nintendo - SNES / Famicom (bsnes-jg)</li> <li>Nintendo - SNES / Famicom (bsnes-mercury Accuracy)</li> <li>Nintendo - SNES / Famicom (bsnes-mercury Balanced)</li> <li>Nintendo - SNES / Famicom (bsnes-mercury Performance)</li> <li>Nintendo - SNES / Famicom (bsnes Accuracy)</li> <li>Nintendo - SNES / Famicom (bsnes Balanced)</li> <li>Nintendo - SNES / Famicom (bsnes C++98 (v085))</li> <li>Nintendo - SNES / Famicom (bsnes Performance)</li> <li>Nintendo - SNES / Famicom (Snes9x)</li> <li>Nintendo - SNES / Famicom (Snes9x 2002)</li> <li>Nintendo - SNES / Famicom (Snes9x 2005 Plus)</li> <li>Nintendo - SNES / Famicom (Snes9x 2005)</li> </ul>"},{"location":"library/snes9x_2010/#nintendo-super-nintendo-entertainment-system-hacks","title":"Nintendo - Super Nintendo Entertainment System (+ Hacks)","text":"<ul> <li>Nintendo - SNES / Famicom (Beetle bsnes)</li> <li>Nintendo - SNES / Famicom (bsnes-jg)</li> <li>Nintendo - SNES / Famicom (bsnes-mercury Accuracy)</li> <li>Nintendo - SNES / Famicom (bsnes-mercury Balanced)</li> <li>Nintendo - SNES / Famicom (bsnes-mercury Performance)</li> <li>Nintendo - SNES / Famicom (bsnes Accuracy)</li> <li>Nintendo - SNES / Famicom (bsnes Balanced)</li> <li>Nintendo - SNES / Famicom (bsnes C++98 (v085))</li> <li>Nintendo - SNES / Famicom (bsnes Performance)</li> <li>Nintendo - SNES / Famicom (higan Accuracy)</li> <li>Nintendo - SNES / Famicom (nSide Balanced)</li> <li>Nintendo - SNES / Famicom (Mesen-S)</li> <li>Nintendo - SNES / Famicom (Snes9x)</li> <li>Nintendo - SNES / Famicom (Snes9x 2002)</li> <li>Nintendo - SNES / Famicom (Snes9x 2005 Plus)</li> <li>Nintendo - SNES / Famicom (Snes9x 2005)</li> </ul>"},{"location":"library/stella/","title":"Atari - 2600 (Stella)","text":""},{"location":"library/stella/#background","title":"Background","text":"<p>Stella is a multi-platform Atari 2600 VCS emulator.</p>"},{"location":"library/stella/#authorlicense","title":"Author/License","text":"<p>The Stella core has been authored by</p> <ul> <li>Stephen Anthony</li> <li>Bradford Mott</li> <li>Thomas Jentzsch</li> <li>Christian Speckner</li> </ul> <p>The Stella core is licensed under</p> <ul> <li>GPLv2</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/stella/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the Stella core have the following file extensions:</p> <ul> <li>.a26</li> <li>.bin</li> <li>.zip</li> </ul>"},{"location":"library/stella/#databases","title":"Databases","text":"<p>RetroArch database(s) that are associated with the Stella core:</p> <ul> <li>Atari - 2600</li> </ul>"},{"location":"library/stella/#features","title":"Features","text":"<p>Frontend-level settings or features that the Stella core respects.</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2715 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2715 Memory Monitoring (achievements) \u2714 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/stella/#directories","title":"Directories","text":"<p>The Stella core's internal core name is 'Stella'</p> <p>The Stella core saves/loads to/from these directories.</p> <p>Frontend's State directory</p> <ul> <li>'content-name'.state# (State)</li> </ul>"},{"location":"library/stella/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The Stella core's core provided FPS is (FPS)</li> <li>The Stella core's core provided sample rate is 31400 Hz</li> <li>The Stella core's core provided aspect ratio is 4/3</li> </ul>"},{"location":"library/stella/#controllers","title":"Controllers","text":"<p>The Stella core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/stella/#user-1-2-device-types","title":"User 1 - 2 device types","text":"<ul> <li>None - Doesn't disable input.</li> <li>RetroPad - Joypad - Stay on this</li> <li>RetroPad w/Analog - Joypad - There's no reason to switch to this</li> </ul>"},{"location":"library/stella/#controller-tables","title":"Controller tables","text":""},{"location":"library/stella/#joypad","title":"Joypad","text":"User 1 Remap descriptors RetroPad Inputs Fire Select Reset Up Down Left Right Left Difficulty A Right Difficulty A Left Difficulty B Right Difficulty B Color Black/White User 2 Remap descriptors RetroPad Inputs Fire Up Down Left Right"},{"location":"library/stella/#external-links","title":"External Links","text":"<ul> <li>Official Stella Website</li> <li>Official Stella Github Repository</li> <li>Libretro Stella Core info file</li> <li>Libretro Stella Github Repository</li> <li>Report Libretro Stella Core Issues Here</li> </ul>"},{"location":"library/stone_soup/","title":"Dungeon Crawl Stone Soup","text":""},{"location":"library/stone_soup/#background","title":"Background","text":"<p>Dungeon Crawl Stone Soup is a free roguelike game of exploration and treasure-hunting in dungeons filled with dangerous and unfriendly monsters in a quest for the mystifyingly fabulous Orb of Zot.</p> <p>The Dungeon Crawl Stone Soup core has been authored by</p> <ul> <li>DCSS Team</li> </ul> <p>The Dungeon Crawl Stone Soup core is licensed under</p> <ul> <li>GPLv2+</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/stone_soup/#how-to-start-the-dungeon-crawl-stone-soup-core","title":"How to start the Dungeon Crawl Stone Soup core:","text":"<ol> <li>Create an empty directory to hold game data.</li> <li>Copy https://github.com/libretro/crawl-ref/tree/master/crawl-ref/source/dat into the root of game directory.</li> <li>Create a file named game.crawlrc in the root of the game directory.</li> <li>Load game.crawlrc with the Dungeon Crawl Stone Soup core.</li> </ol>"},{"location":"library/stone_soup/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the Dungeon Crawl Stone Soup core have the following file extensions:</p> <ul> <li>.crawlrc</li> </ul>"},{"location":"library/stone_soup/#features","title":"Features","text":"<p>Frontend-level settings or features that the Dungeon Crawl Stone Soup core respects.</p> Feature Supported Restart \u2715 Screenshots \u2715 Saves \u2714 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2715 Memory Monitoring (achievements) \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/stone_soup/#directories","title":"Directories","text":"<p>The Dungeon Crawl Stone Soup core's library name is 'Dungeon Crawl: Stone Soup'</p> <p>The Dungeon Crawl Stone Soup core saves/loads to/from these directories.</p> <p>Loaded content's directory</p> File Description saves/ Dungeon Crawl Stone Soup saves directory"},{"location":"library/stone_soup/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The Dungeon Crawl Stone Soup core's core provided FPS is 60</li> <li>The Dungeon Crawl Stone Soup core's core provided sample rate is 44100 Hz</li> <li>The Dungeon Crawl Stone Soup core's base width is 1024</li> <li>The Dungeon Crawl Stone Soup core's base height is 768</li> <li>The Dungeon Crawl Stone Soup core's max width is 1024</li> <li>The Dungeon Crawl Stone Soup core's max height is 768</li> <li>The Dungeon Crawl Stone Soup core's core provided aspect ratio is 0.0</li> </ul>"},{"location":"library/stone_soup/#devices","title":"Devices","text":"<ul> <li>Joypad</li> <li>Pointer</li> <li>Keyboard (Keyboard callback)</li> </ul>"},{"location":"library/stone_soup/#joypad","title":"Joypad","text":"User 1 input descriptors RetroPad Inputs Enter Up Down Left Right"},{"location":"library/stone_soup/#pointer","title":"Pointer","text":"RetroPointer Inputs Dungeon Crawl Stone Soup inputs  or  Pointer Position Cursor  or  Pointer Pressed Click"},{"location":"library/stone_soup/#external-links","title":"External Links","text":"<ul> <li>Official Dungeon Crawl Stone Soup Website</li> <li>Official Dungeon Crawl Stone Soup Github Repository</li> <li>Libretro Dungeon Crawl Stone Soup Core info file</li> <li>Libretro Dungeon Crawl Stone Soup Github Repository</li> <li>Report Libretro Dungeon Crawl Stone Soup Core Issues Here</li> </ul>"},{"location":"library/tempgba/","title":"Nintendo - Game Boy Advance (TempGBA)","text":""},{"location":"library/tempgba/#background","title":"Background","text":"<p>TempGBA is a Gameboy Advance emulator. A fork of the PSP-specific TempGBA emulator for the Game Boy Advance console, ported to libretro. This core is only intended for use on Playstation Portable hardware, and, as a device-optimized fork of gpSP, it is intended to provide a better, more playable experience for GBA games on this low-powered device. Anyone using any other device should stick with the regular gpSP core or--even better--a more accurate core, such as mGBA.</p> <p>The Meteor core has been authored by</p> <ul> <li>Exophase</li> <li>Takka</li> <li>Nebuleon</li> <li>Normmatt</li> <li>BassAceGold</li> </ul> <p>The Meteor core is licensed under</p> <ul> <li>GPLv2</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/tempgba/#bios","title":"BIOS","text":"<p>Required or optional firmware files go in the frontend's system directory.</p> <p>Warning</p> <p>In order for the BIOS to be used, the 'Use BIOS file if found' core option must be set to On.</p> Filename Description md5sum gba_bios.bin Game Boy Advance BIOS - Optional a860e8c0b6d573d191e4ec7db1b1e4f6"},{"location":"library/tempgba/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the Meteor core have the following file extensions:</p> <ul> <li>gba</li> <li>bin</li> <li>agb</li> <li>gbz</li> </ul>"},{"location":"library/tempgba/#databases","title":"Databases","text":"<p>RetroArch database(s) that are associated with the TempGBA core:</p> <ul> <li>Nintendo - Game Boy Advance</li> </ul>"},{"location":"library/tempgba/#features","title":"Features","text":"<p>Frontend-level settings or features that the Meteor core respects.</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2715 Core Options \u2714 Memory Monitoring (achievements) \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/tempgba/#directories","title":"Directories","text":"<p>The Meteor core's internal core name is 'TempGBA'</p> <p>The Meteor core saves/loads to/from these directories.</p> <p>Frontend's Save directory</p> <ul> <li>'content-name'.srm (Cartridge battery save)</li> </ul> <p>Frontend's State directory</p> <ul> <li>'content-name'.state# (State)</li> </ul>"},{"location":"library/tempgba/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The Meteor core's core provided FPS is 59.7275005696</li> <li>The Meteor core's core provided sample rate is 44100 Hz</li> <li>The Meteor core's core provided aspect ratio is 3/2</li> </ul>"},{"location":"library/tempgba/#controllers","title":"Controllers","text":"<p>The Meteor core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/tempgba/#user-1-device-types","title":"User 1 device types","text":"<ul> <li>None - Doesn't disable input. There's no reason to switch to this.</li> <li>RetroPad - Joypad - Stay on this.</li> <li>RetroPad w/Analog - Joypad - Same as RetroPad. There's no reason to switch to this.</li> </ul>"},{"location":"library/tempgba/#controller-tables","title":"Controller tables","text":""},{"location":"library/tempgba/#joypad","title":"Joypad","text":"User 1 Remap descriptors RetroPad Inputs B Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A L R"},{"location":"library/tempgba/#compatibility","title":"Compatibility","text":"<p>Awaiting description.</p>"},{"location":"library/tempgba/#external-links","title":"External Links","text":"<ul> <li>Official Meteor Github Repository</li> <li>Libretro Meteor Core info file</li> <li>Libretro Meteor Github Repository</li> <li>Report Libretro Meteor Core Issues Here</li> </ul>"},{"location":"library/tempgba/#see-also","title":"See also","text":""},{"location":"library/tempgba/#nintendo-game-boy-advance","title":"Nintendo - Game Boy Advance","text":"<ul> <li>Nintendo - Game Boy Advance (Beetle GBA)</li> <li>Nintendo - Game Boy Advance (gpSP)</li> <li>Nintendo - Game Boy Advance (mGBA)</li> <li>Nintendo - Game Boy Advance (meteor)</li> <li>Nintendo - Game Boy Advance (VBA-M)</li> <li>Nintendo - Game Boy Advance (VBA Next)</li> </ul>"},{"location":"library/tgb_dual/","title":"Nintendo - Game Boy / Color (TGB Dual)","text":""},{"location":"library/tgb_dual/#background","title":"Background","text":"<p>TGB Dual is an open source (GPLv2) GB/GBC emulator with game link cable support.</p>"},{"location":"library/tgb_dual/#authorlicense","title":"Author/License","text":"<p>The TGB Dual core has been authored by</p> <ul> <li>GIGO</li> <li>Hii</li> </ul> <p>The TGB Dual core is licensed under</p> <ul> <li>GPLv2</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/tgb_dual/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the TGB Dual core have the following file extensions:</p> <ul> <li>.gb</li> <li>.gbc</li> <li>.sgb</li> </ul>"},{"location":"library/tgb_dual/#databases","title":"Databases","text":"<p>RetroArch database(s) that are associated with the TGB Dual core:</p> <ul> <li>Nintendo - Game Boy</li> <li>Nintendo - Game Boy Color</li> </ul>"},{"location":"library/tgb_dual/#features","title":"Features","text":"<p>Frontend-level settings or features that the TGB Dual core respects.</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 Memory Monitoring (achievements) \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/tgb_dual/#directories","title":"Directories","text":"<p>The TGB Dual core's internal core name is 'TGB Dual'</p> <p>The TGB Dual core saves/loads to/from these directories.</p> <p>Frontend's Save directory</p> <ul> <li>'content-name'.srm (Cartridge battery save)</li> <li>'content-name'.rtc (Real time clock save)</li> </ul> <p>Frontend's State directory</p> <ul> <li>'content-name'.state# (State)</li> </ul>"},{"location":"library/tgb_dual/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The TGB Dual core's core provided FPS is 59.7275005696</li> <li>The TGB Dual core's core provided sample rate is 44100 Hz</li> <li>The TGB dual core's core provided aspect ratio is (Ratio)</li> </ul>"},{"location":"library/tgb_dual/#core-options","title":"Core options","text":"<p>The TGB Dual core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded.</p> <p>Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch.</p> <ul> <li> <p>GB Link Enable (restart) [tgbdual_gblink_enable] (disabled|enabled)</p> <p>Emulates two Game Boy units side by side for multiplayer support.</p> </li> </ul> GB Link Enable - Enabled <p></p> <ul> <li> <p>Screen placement [tgbdual_screen_placement] (horizontal|vertical)</p> <p>Switches the screen layout for multiplayer support.</p> </li> </ul> Horizontal <p></p> Vertical <p></p> <ul> <li> <p>Switch player screens [tgbdual_switch_screens] (normal|switched)</p> <p>Switches the player screens for multiplayer support.</p> </li> <li> <p>Show player screens [tgbdual_single_screen_mp] (both players|player 1 only|player 2 only)</p> <p>Displays the selected player screens for multiplayer support.</p> </li> </ul>"},{"location":"library/tgb_dual/#controllers","title":"Controllers","text":"<p>The TGB Dual core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/tgb_dual/#user-1-2-device-types","title":"User 1 - 2 device types","text":"<ul> <li>None - Doesn't disable input. There's no reason to switch to this.</li> <li>RetroPad - Joypad - Stay on this.</li> <li>RetroPad - Joypad - Same as RetroPad. There's no reason to switch to this.</li> </ul>"},{"location":"library/tgb_dual/#controller-tables","title":"Controller tables","text":""},{"location":"library/tgb_dual/#joypad","title":"Joypad","text":"User 1 - 2 Remap descriptors RetroPad Inputs B Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A Next Audio Mode Prev Audio Mode"},{"location":"library/tgb_dual/#compatibility","title":"Compatibility","text":"<p>Awaiting description.</p>"},{"location":"library/tgb_dual/#external-links","title":"External Links","text":"<ul> <li>Official TGB Dual Website</li> <li>Official TGB Dual SDL port Website</li> <li>Libretro TGB Dual Core info file</li> <li>Libretro TGB Dual Github Repository</li> <li>Report Libretro TGB Dual Core Issues Here</li> </ul>"},{"location":"library/tgb_dual/#see-also","title":"See also","text":""},{"location":"library/tgb_dual/#nintendo-game-boy-color","title":"Nintendo - Game Boy (+ Color)","text":"<ul> <li>Nintendo - Game Boy / Color (Emux GB)</li> <li>Nintendo - Game Boy / Color (Gambatte)</li> <li>Nintendo - Game Boy / Color (Gearboy)</li> <li>Nintendo - Game Boy / Color (SameBoy)</li> <li>Nintendo - Game Boy Advance (mGBA)</li> <li>Nintendo - Game Boy Advance (VBA-M)</li> <li>Nintendo - SNES / Famicom (higan Accuracy)</li> <li>Nintendo - SNES / Famicom (nSide Balanced)</li> <li>Nintendo - SNES / Famicom (Mesen-S)</li> </ul>"},{"location":"library/the_powder_toy/","title":"The Powder Toy","text":""},{"location":"library/the_powder_toy/#background","title":"Background","text":"<p>Based upon the SDL version: https://github.com/ThePowderToy/The-Powder-Toy</p> <p>Have you ever wanted to blow something up? Or maybe you always dreamt of operating an atomic power plant? Do you have a will to develop your own CPU? The Powder Toy lets you to do all of these, and even more!</p> <p>The Powder Toy is a free physics sandbox game, which simulates air pressure and velocity, heat, gravity and a countless number of interactions between different substances! The game provides you with various building materials, liquids, gases and electronic components which can be used to construct complex machines, guns, bombs, realistic terrains and almost anything else. You can then mine them and watch cool explosions, add intricate wirings, play with little stickmen or operate your machine. You can browse and play thousands of different saves made by the community or upload your own - we welcome your creations!</p> <p>There is a Lua API - you can automate your work or even make plugins for the game. The Powder Toy is free and the source code is distributed under the GNU General Public License, so you can modify the game yourself or help with development. TPT-LibRetro is compiled using cmake.</p>"},{"location":"library/the_powder_toy/#instructions","title":"Instructions","text":"<p>Click on the elements with the mouse and draw in the field, like in MS Paint. The rest of the game is learning what happens next.</p>"},{"location":"library/the_powder_toy/#how-to-start-the-the-powder-toy-core","title":"How to start the The Powder Toy core:","text":"<ul> <li> <p>To start the The Powder Toy core, go to RetroArch's main menu screen. Select 'Load Core', then 'The Powder Toy'.</p> </li> <li> <p>Now, select 'Start Core'.</p> </li> </ul> <p>The content should now start running!</p>"},{"location":"library/the_powder_toy/#authorlicense","title":"Author/License","text":"<p>The The Powder Toy core has been authored by</p> <ul> <li>jselby</li> <li>Original TPT Contributors</li> </ul> <p>The The Powder Toy core is licensed under</p> <ul> <li>GPLv3</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/the_powder_toy/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the The Powder Toy core have the following file extensions:</p> <ul> <li>.cps</li> </ul>"},{"location":"library/the_powder_toy/#features","title":"Features","text":"<p>Frontend-level settings or features that the The Powder Toy core respects.</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2715 Memory Monitoring (achievements) \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2715 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/the_powder_toy/#directories","title":"Directories","text":"<p>The The Powder Toy core's library name is 'The Powder Toy'</p> <p>The The Powder Toy core saves/loads to/from these directories.</p> <p>Frontend's Save directory</p> File Description The Powder Toy/Saves/*.cps Simulations that have been saved to the computer. <p>Frontend's State directory</p> File Description *.state# State"},{"location":"library/the_powder_toy/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The The Powder Toy core's core provided FPS is 60</li> <li>The The Powder Toy core's core provided sample rate is 32000 Hz</li> <li>The The Powder Toy core's base width is (Base width)</li> <li>The The Powder Toy core's base height is (Base height)</li> <li>The The Powder Toy core's max width is (Max width)</li> <li>The The Powder Toy core's max height is (Max height)</li> <li>The The Powder Toy core's core provided aspect ratio is (Ratio)</li> </ul>"},{"location":"library/the_powder_toy/#controls","title":"Controls","text":"Key Action TAB Switch between circle/square/triangle brush Space Pause Q / Esc Quit Z Zoom S Save stamp (+ Ctrl when STK2 is out) L Load last saved stamp K Stamp library 1-9 Set view mode P / F2 Save screenshot to .png E Bring up element search F Pause and go to next frame G Increase grid size Shift + G Decrease grid size H Show/Hide HUD Ctrl + H / F1 Show intro text D / F3 Debug mode (+ Ctrl when STK2 is out) I Invert Pressure and Velocity map W Toggle gravity modes (+ Ctrl when STK2 is out) Y Toggle air modes B Enter decoration editor menu Ctrl + B Toggle decorations on/off N Toggle Newtonian Gravity on/off U Toggle ambient heat on/off Ctrl + I Install powder toy, for loading saves/stamps by double clicking ~ Console = Reset pressure and velocity map Ctrl + = Reset Electricity [ Decrease brush size ] Increase brush size Alt + [ Decrease brush size by 1 Alt + ] Increase brush size by 1 Ctrl + C/V/X Copy/Paste/Cut Ctrl + Z Undo Ctrl + Y Redo Ctrl + Cursor drag Rectangle Shift + Cursor drag Line Middle click Sample element Alt + Left click Sample element Mouse scroll Change brush size Ctrl + Mouse scroll Change vertical brush size Shift + Mouse scroll Change horizontal brush size Shift + R Horizontal mirror for selected area when pasting stamps Ctrl + Shift + R Vertical mirror for selected area when pasting stamps R Rotate selected area counterclockwise when pasting stamps"},{"location":"library/the_powder_toy/#external-links","title":"External Links","text":"<ul> <li>Official The Powder Toy Website</li> <li>Official The Powder Toy Github Repository</li> <li>Libretro The Powder Toy Core info file</li> <li>Libretro The Powder Toy Github Repository</li> <li>Report Libretro The Powder Toy Core Issues Here</li> </ul>"},{"location":"library/theodore/","title":"Thomson - MO/TO (Theodore)","text":""},{"location":"library/theodore/#background","title":"Background","text":"<p>Theodore is a Thomson MO/TO system emulator based on Daniel Coulom's DCTO8D/DCTO9P/DCMO5 emulators. Thomson MO/TO is a family of 8-bit home computers produced by French company Thomson SA between 1982 and 1989. Theodore emulates all the main models of the MO/TO family: TO7, TO7/70, TO8, TO8D, TO9, TO9+, MO5 and MO6. It also emulates the Olivetti Prodest PC128, a rebranded MO6 for the Italian market.</p> <p>The Theodore core has been authored by</p> <ul> <li>Thomas Lorblanch\u00e8s</li> </ul> <p>The Theodore core is licensed under</p> <ul> <li>GPLv3</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/theodore/#bios","title":"BIOS","text":"<p>The Theodore core does not feature BIOS use.</p>"},{"location":"library/theodore/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the Theodore core have the following file extensions:</p> <ul> <li>.fd (floppy disk)</li> <li>.sap (floppy disk)</li> <li>.k7 (tape)</li> <li>.rom (cartridge)</li> <li>.m7 (cartridge)</li> <li>.m5 (cartridge)</li> </ul> <p>RetroArch database(s) that are associated with the Theodore core:</p> <ul> <li>Thomson - MOTO</li> </ul>"},{"location":"library/theodore/#features","title":"Features","text":"<p>Frontend-level settings or features that the Theodore core respects.</p> Feature Supported Restart \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2714 Memory Monitoring (achievements) \u2715 RetroArch Cheats \u2714 Native Cheats \u2715 Controls - Remapping - Multi-Mouse - Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/theodore/#directories","title":"Directories","text":"<p>The Theodore core's internal core name is 'theodore'.</p> <p>Frontend's System directory</p> File Description theodore.cfg Config file"},{"location":"library/theodore/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The Theodore core's base width is 672 pixels.</li> <li>The Theodore core's base height is 432 pixels.</li> </ul>"},{"location":"library/theodore/#usage","title":"Usage","text":"<p>Once the content and core are loaded the start screen is displayed as shown below.</p> <p></p> <p>When the \"Thomson model\" core option is set to \"Auto\" (default value), the core tries to autodetect the Thomson model to emulate based on the name of the content file, and fallback to TO8 mode if it cannot. The \"Start\" button of the controller can be used to start the game. The core will then make an \"educated guess\" to start the game (cf. Theodore's README file for more info about it).</p>"},{"location":"library/theodore/#core-options","title":"Core options","text":"<p>The Theodore core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded.</p> <ul> <li> <p>Thomson model [theodore_rom]  (Auto|TO8|TO8D|TO9|TO9+|MO5|MO6|PC128|TO7|TO7/70)</p> </li> <li> <p>Auto run game [theodore_autorun] (disabled|enabled)</p> </li> <li> <p>Virtual keyboard transparency [theodore_vkb_transparency] (0%|10%|20%|30%|40%|50%|60%|70%|80%|90%)</p> </li> <li> <p>Floppy write protection [theodore_floppy_write_protect]  (disabled|enabled)</p> </li> <li> <p>Tape write protection [theodore_tape_write_protect]  (disabled|enabled)</p> </li> <li> <p>Dump printer data to file [theodore_printer_emulation] (disabled|enabled)</p> </li> </ul>"},{"location":"library/theodore/#user-1-device-types","title":"User 1 device types","text":"<p>The Theodore core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p> <ul> <li>None - Input disabled</li> <li>RetroPad - Joypad</li> <li>RetroPad w/ Analog - Joypad</li> </ul>"},{"location":"library/theodore/#other-devices","title":"Other devices","text":"<ul> <li>Light pen - The computer's light pen inputs are mapped to the mouse.</li> </ul>"},{"location":"library/theodore/#joypad","title":"Joypad","text":"RetroPad Inputs User 1 input descriptors \"Fire\" button / Press key when the virtual keyboard is displayed Virtual keyboard: move up/down Virtual keyboard: show/hide Start program(See: Usage) <p>When the virtual keyboard is displayed, the D-pad is used to move the selected key and the B button is used to press the selected key. Long press the B button for a sticky key. The virtual keyboard can also be used with a touch screen. The transparency of the virtual keyboard can be set using the core's \"Virtual keyboard transparency\" option.</p>"},{"location":"library/theodore/#keyboard","title":"Keyboard","text":"RetroKeyboard Inputs Theodore Inputs Keyboard Tab STOP Keyboard Left Control CNT Keyboard Caps Lock CAPSLOCK Keyboard Backspace ACC Keyboard Home HOME Keyboard Up UP Keyboard Down DOWN Keyboard Right RIGHT Keyboard Left LEFT Keyboard Insert INS Keyboard Delete DEL Keyboard Alt RAZ Keyboard F1 F1 Keyboard F2 F2 Keyboard F3 F3 Keyboard F4 F4 Keyboard F5 F5 Keyboard Shift + F1 F6 Keyboard Shift + F2 F7 Keyboard Shift + F3 F8 Keyboard Shift + F4 F9 Keyboard Shift + F5 F10 Keyboard Left Shift Shift or Yellow key (MO5) Keyboard Right Shift Shift or BASIC key (MO5)"},{"location":"library/theodore/#mouse","title":"Mouse","text":"RetroMouse Inputs Theodore Inputs  Mouse Cursor Light pen cursor  Mouse 1 Selection"},{"location":"library/theodore/#external-links","title":"External Links","text":"<ul> <li>Libretro Theodore Github Repository</li> <li>Report Libretro Theodore Core Issues Here</li> <li>Libretro Theodore Core info file</li> <li>Libretro Thomson Database</li> <li>Libretro Thomson Thumbnails</li> <li>Official DCTO8D/DCTO9P/DCMO5 Website</li> </ul>"},{"location":"library/tic80/","title":"TIC-80","text":""},{"location":"library/tic80/#background","title":"Background","text":"<p>TIC-80 is a fantasy computer for making, playing and sharing tiny games.</p> <p>The TIC-80 core has been authored by</p> <ul> <li>Rob Loach</li> </ul> <p>The TIC-80 core is licensed under</p> <ul> <li>MIT</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/tic80/#requirements","title":"Requirements","text":"<p>None</p>"},{"location":"library/tic80/#bios","title":"BIOS","text":"<p>The TIC-80 core does not feature BIOS use.</p>"},{"location":"library/tic80/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the TIC-80 core have the following file extensions:</p> <ul> <li><code>.tic</code> (TIC-80 cart)</li> </ul> <p>RetroArch database(s) that are associated with the TIC-80 core:</p> <ul> <li><code>TIC-80.rdb</code></li> </ul>"},{"location":"library/tic80/#features","title":"Features","text":"<p>Frontend-level settings or features that the Theodore core respects.</p> Feature Supported Restart \u2714 Saves \u2714 States \u2715 Rewind \u2715 Netplay \u2714 Core Options \u2714 Memory Monitoring (achievements) \u2715 RetroArch Cheats \u2715 Native Cheats \u2714 Controls \u2714 Remapping \u2715 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/tic80/#directories","title":"Directories","text":"<p>The TIC-80 core's internal core name is <code>tic80</code>.</p>"},{"location":"library/tic80/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The TIC-80 core's base width is 240 pixels.</li> <li>The TIC-80 core's base height is 136 pixels.</li> </ul>"},{"location":"library/tic80/#usage","title":"Usage","text":"<ol> <li> <p>Download a TIC-80 cart</p> <ul> <li>Example: TIC-80 Mario Bros?</li> </ul> </li> <li> <p>Launch the cart through the TIC-80 core</p> </li> </ol>"},{"location":"library/tic80/#core-options","title":"Core options","text":"<p>The TIC-80 core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded.</p> <ul> <li>Touch Interface for Mouse [tic80_mouse] (disabled|enabled)</li> <li>Mouse Cursor [tic80_mouse_cursor] (disabled|dot|cross|arrow)</li> <li>Mouse Cursor Hide Delay [tic80_mouse_cursor] (disabled|1|2|3|4|5|6|7|8|9|10)</li> </ul>"},{"location":"library/tic80/#controllers","title":"Controllers","text":"<p>The TIC-80 core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/tic80/#user-1-4-device-types","title":"User 1 - 4 device types","text":"<ul> <li>None - Doesn't disable input.</li> <li>RetroPad - Joypad - Stay on this.</li> <li>RetroPad w/Analog - Joypad - There's no reason to switch to this.</li> </ul>"},{"location":"library/tic80/#controller-tables","title":"Controller tables","text":""},{"location":"library/tic80/#joypad","title":"Joypad","text":"<p>Attention</p> <p>What the buttons do are game specific.</p> User 1 - 4 Remap descriptors RetroPad Inputs D-Pad Up D-Pad Down D-Pad Left D-Pad Right A X B Y"},{"location":"library/tic80/#external-links","title":"External Links","text":"<ul> <li>TIC-80 Github Repository</li> <li>Report Libretro TIC-80 Core Issues Here</li> <li>Libretro TIC-80 Core info file</li> <li>Libretro TIC-80 Database</li> <li>Libretro TIC-80 Thumbnails</li> <li>Libretro TIC-80 Cheats</li> </ul>"},{"location":"library/tyrquake/","title":"Quake 1 (TyrQuake)","text":""},{"location":"library/tyrquake/#background","title":"Background","text":"<p>Libretro port of Tyrquake (Quake 1 engine).</p> <p>Features</p> <ul> <li>Runs at fixed frametimes</li> <li>Software bilinear filtering</li> <li>Software Half-Life/Quake 2-style colored lighting RGBA</li> <li>Chasecam / thirdperson view mode</li> <li>Interpolated animation applied on the keyframe animation for smooth animation</li> </ul> <p>The TyrQuake core has been authored by</p> <ul> <li>Kevin Shanahan (Tyrann)</li> </ul> <p>The TyrQuake core is licensed under</p> <ul> <li>GPLv2</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/tyrquake/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the TyrQuake core have the following file extensions:</p> <ul> <li>.pak</li> </ul> <p>RetroArch database(s) that are associated with the TyrQuake core:</p> <ul> <li>Quake1</li> </ul>"},{"location":"library/tyrquake/#features","title":"Features","text":"<p>Frontend-level settings or features that the TyrQuake core respects.</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2714 Memory Monitoring (achievements) \u2715 RetroArch Cheats \u2714 Native Cheats \u2714 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2714 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2714 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/tyrquake/#directories","title":"Directories","text":"<p>The TyrQuake core's library name is 'TyrQuake'</p> <p>The TyrQuake core saves/loads to/from these directories.</p> <p>Frontend's Save directory</p> File Description (game directory)/config.cfg Config (game directory)/*.sav Save"},{"location":"library/tyrquake/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The TyrQuake core's core provided FPS is 60</li> <li>The TyrQuake core's core provided sample rate is 44100 Hz</li> <li>The TyrQuake core's base width is dependent on the Resolution core option.</li> <li>The TyrQuake core's base height is dependent on the Resolution core option.</li> <li>The TyrQuake core's max width is dependent on the Resolution core option.</li> <li>The TyrQuake core's max height is dependent on the Resolution core option.</li> <li>The TyrQuake core's core provided aspect ratio is 4/3</li> </ul>"},{"location":"library/tyrquake/#loading-quake-and-expansion-paks","title":"Loading Quake and Expansion Paks","text":"<p>Follow this directory structure</p> <ul> <li>'id1' for the main game</li> <li>'hipnotic' for the 1<sup>st</sup> mission pack</li> <li>'rogue' for the 2<sup>nd</sup> mission pack</li> <li>'dopa' for the official \"Episode 5: Dimension of the Past\" expansion</li> <li>Put BGM into a subfolder named music in each of them.</li> </ul> <pre><code>id1/\n\u251c\u2500\u2500 pak0.pak ## shareware data\n\u251c\u2500\u2500 pak1.pak ## registered data\n\u251c\u2500\u2500 music/\n\u2502   \u251c\u2500\u2500 track02.ogg\n\u2502   \u251c\u2500\u2500 ...\n\u2502   \u2514\u2500\u2500 track11.ogg\n\u2502\nhipnotic/\n\u251c\u2500\u2500 pak0.pak\n\u251c\u2500\u2500 music/\n\u2502   \u251c\u2500\u2500 track02.ogg\n\u2502   \u251c\u2500\u2500 ...\n\u2502   \u2514\u2500\u2500 track09.ogg\n\u2502\nrogue/\n\u251c\u2500\u2500 pak0.pak\n\u251c\u2500\u2500 music/\n\u2502   \u251c\u2500\u2500 track02.ogg\n\u2502   \u251c\u2500\u2500 ...\n\u2502   \u2514\u2500\u2500 track09.ogg\n\u2502\ndopa/\n\u2514\u2500\u2500  pak0.pak\n</code></pre> <p>Game saves and internal configuration files will be created in the frontend-defined save directory with a folder layout that mirrors the game data structure:</p> <pre><code>id1/\n\u251c\u2500\u2500 config.cfg\n\u251c\u2500\u2500 s0.sav\n\u251c\u2500\u2500 s1.sav\n\u2502\nhipnotic/\n\u251c\u2500\u2500 config.cfg\n\u251c\u2500\u2500 s0.sav\n\u251c\u2500\u2500 s1.sav\n\u2502\nrogue/\n\u251c\u2500\u2500 config.cfg\n\u251c\u2500\u2500 s0.sav\n\u251c\u2500\u2500 s1.sav\n\u2502\ndopa/\n\u251c\u2500\u2500 config.cfg\n\u251c\u2500\u2500 s0.sav\n\u2514\u2500\u2500 s1.sav\n</code></pre> <p>Game saves are numbered from 's0.sav' to 's11.sav'.</p>"},{"location":"library/tyrquake/#soundtrack-files","title":"Soundtrack files","text":"<p>TyrQuake supports playback of the original soundtrack from the base game and official mission packs' CDs.</p> <p>CD audio should be ripped into OGG format files, and placed into a subfolder named music of the appropriate folder (id1, hipnotic or rogue). The ripped CD tracks must be named trackXX.ogg, corresponding to the original CD track index for each audio track. Considering that the first CD track in all cases is the data track, the first audio track will always begin with track 02, which should be reflected in the filename of the ripped audio files.</p>"},{"location":"library/tyrquake/#username","title":"Username","text":"<p>The TyrQuake core uses RetroArch's username setting for the in-game player name.</p>"},{"location":"library/tyrquake/#config","title":"Config","text":"<p>TyrQuake's internal game settings can be found in the 'config.cfg' file inside each game's save directory.</p> <p>Many of these settings may be changed from the in-game menu. Notable options are as follows:</p> <ul> <li> <p>VIDEO \u2192 SCREEN SIZE</p> <p>With the slider at the 3<sup>rd</sup> position from the right, all HUD information is shown.</p> <p>With the slider at the 2<sup>nd</sup> position from the right, the gameplay area is increased while the HUD size is reduced such that only armour, health and current ammo are shown.</p> <p>With the slider at the far right position, the gameplay area fills the screen and no HUD is shown.</p> </li> <li> <p>VIDEO \u2192 GAMMA</p> <p>Sets display brightness</p> </li> <li> <p>VIDEO \u2192 DITHER FILTERING (OFF|ON)</p> <p>Enables texture smoothing.</p> </li> <li> <p>VIDEO \u2192 SMOOTH ANIMATION (OFF|ON)</p> <p>Enables linear interpolation of character animation.</p> </li> <li> <p>VIDEO \u2192 SMOOTH MOVEMENT (OFF|ON)</p> <p>Enables linear interpolation of character movement.</p> </li> <li> <p>GAME \u2192 CROSSHAIR (OFF|ON)</p> <p>Enables display of targeting reticule.</p> </li> </ul>"},{"location":"library/tyrquake/#core-options","title":"Core options","text":"<p>The TyrQuake core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded.</p> <p>Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch.</p> <ul> <li> <p>Colored lighting (restart) [tyrquake_colored_lighting] (disabled|enabled)</p> <p>Enables colored lightning when the loaded content supports it. Requires a restart.</p> </li> <li> <p>Resolution (restart) [tyrquake_resolution] (320x200|640x400|960x600|1280x800|1600x1000|1920x1200|320x240|320x480|360x200|360x240|360x400|360x480|400x224|480x272|512x224|512x240|512x384|512x512|640x224|640x240|640x448|640x480|720x576|800x480|800x600|960x720|1024x768|1280x720|1600x900|1920x1080)</p> <p>Configure the resolution. Requires a restart.</p> </li> </ul> Resolution - 320x240 <p></p> Resolution - 1920x1080 <p></p> <ul> <li> <p>Rumble [tyrquake_rumble] (disabled|enabled)</p> <p>Enables joypad rumble.</p> </li> <li> <p>Invert Y Axis [tyrquake_invert_y_axis] (disabled|enabled)</p> <p>Invert the gamepad right analog stick's Y axis.</p> </li> <li> <p>Analog Deadzone (percent) [tyrquake_analog_deadzone] (15|20|25|30|0|5|10)</p> <p>Sets the deadzone of the Gamepad analog sticks when the input device type is set to 'Gamepad Classic' or 'Gamepad Modern'.</p> </li> </ul>"},{"location":"library/tyrquake/#user-1-device-types","title":"User 1 device types","text":"<p>The TyrQuake core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p> <ul> <li>None - Input disabled.</li> <li>Gamepad Classic - Joypad</li> <li>Gamepad Classic Alt - Joypad</li> <li>Gamepad Modern - Joypad</li> <li>Keyboard + Mouse - Keyboard and Mouse - Switch to this for keyboard and mouse input. Has keymapper support.</li> </ul>"},{"location":"library/tyrquake/#rumble-support","title":"Rumble support","text":"<p>Rumble only works in the TyrQuake core when</p> <ul> <li>The content being ran has rumble support.</li> <li>The frontend being used has rumble support.</li> <li>The joypad device being used has rumble support.</li> <li>The 'Rumble' core option is set to enabled.</li> </ul>"},{"location":"library/tyrquake/#joypad","title":"Joypad","text":"User 1 Remap descriptors for 'Gamepad Classic' device type RetroPad Inputs TyrQuake inputs Jump Jump Fire Fire Toggle Run Mode Toggle Run Mode Menu Menu D-Pad Up D-Pad Up D-Pad Down D-Pad Down D-Pad Left D-Pad Left D-Pad Right D-Pad Right Cycle Weapon Cycle Weapon Freelook Freelook Strafe Left Strafe Left Strafe Right Strafe Right Look Up Look Up Look Down Look Down Move Down Move Down Swim Up Swim Up  X Strafe Left/Right  Y D-Pad Up/Down  X D-Pad Left/Right  Y Look Up/Down User 1 Remap descriptors for 'Gamepad Classic Alt' device type RetroPad Inputs TyrQuake inputs Look Down Look Down Look Left Look Left Toggle Run Mode Toggle Run Mode Menu Menu D-Pad Up D-Pad Up D-Pad Down D-Pad Down D-Pad Left D-Pad Left D-Pad Right D-Pad Right Look Right Look Right Look Up Look Up Jump Jump Fire Fire Run Run Next Weapon Next Weapon Swim Down Swim Down Previous Weapon Previous Weapon  X Strafe Left/Right  Y D-Pad Up/Down  X D-Pad Left/Right  Y Look Up/Down User 1 Remap descriptors for 'Gamepad Modern' device type RetroPad Inputs TyrQuake inputs Swim Down Swim Down Swim Up Swim Up Show Scores Show Scores Menu Menu D-Pad Up D-Pad Up D-Pad Down D-Pad Down D-Pad Left D-Pad Left D-Pad Right D-Pad Right Strafe Right Strafe Right Strafe Left Strafe Left Previous weapon Previous weapon Next weapon Next weapon Jump Jump Fire Fire Move Down Swim Up  X Strafe Left/Right  Y D-Pad Up/Down  X Look Left/Right  Y Look Up/Down <p>In-game menu controls:</p> Menu Function RetroPad Inputs Navigate Up Navigate Down Adjust Value Adjust Value Select Current Option Return To Previous Level/Close Menu"},{"location":"library/tyrquake/#keyboard","title":"Keyboard","text":"<ul> <li>Keyboard binds are in config.cfg</li> </ul>"},{"location":"library/tyrquake/#mouse","title":"Mouse","text":"<ul> <li>Mouse binds are in config.cfg</li> </ul>"},{"location":"library/tyrquake/#external-links","title":"External Links","text":"<ul> <li>Official TyrQuake Website</li> <li>Official TyrQuake Git Repository</li> <li>Libretro TyrQuake Core info file</li> <li>Libretro TyrQuake Github Repository</li> <li>Report Libretro TyrQuake Core Issues Here</li> </ul>"},{"location":"library/tyrquake/#id-software","title":"id Software","text":"<ul> <li>Doom (PrBoom)</li> </ul>"},{"location":"library/uzem/","title":"Uzebox (Uzem)","text":""},{"location":"library/uzem/#background","title":"Background","text":"<p>Uzem is the official emulator for the Uzebox (A retro-minimalist 8-bit open source game console).</p> <p>The Uzebox is a minimal system based on a AVR ATmega644 microcontroller.</p>"},{"location":"library/uzem/#authors","title":"Authors","text":"<ul> <li>David Etherton</li> </ul>"},{"location":"library/uzem/#license","title":"License","text":"<p>A summary of the licenses behind RetroArch and its cores can be found here.</p> <p>The Uzem core is licensed under</p> <p>GPLv3</p>"},{"location":"library/uzem/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the Uzem core have the following file extensions:</p> <ul> <li>.uze</li> </ul>"},{"location":"library/uzem/#databases","title":"Databases","text":"<p>RetroArch database(s) that are associated with the Uzem core:</p> <ul> <li>Uzebox</li> </ul>"},{"location":"library/uzem/#features","title":"Features","text":"<p>Frontend-level settings or features that the Uzem core respects.</p> Feature Supported Restart \u2715 Saves \u2715 States \u2714 Rewind \u2714 Netplay \u2715 Core Options \u2715 Memory Monitoring (achievements) \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2715 Remapping \u2715 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/uzem/#directories","title":"Directories","text":"<p>The Uzem core's library name is 'UZEM'.</p>"},{"location":"library/uzem/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The Uzem core's core provided FPS is 59.94</li> <li>The Uzem core's core provided sample rate is 15734 Hz</li> <li>The Uzem core's base width is 360</li> <li>The Uzem core's base height is 224</li> <li>The Uzem core's max width is 720</li> <li>The Uzem core's max height is 448</li> <li>The Uzem core's core provided aspect ratio is 630/448 (1.40625)</li> </ul>"},{"location":"library/uzem/#usage","title":"Usage","text":"<p>Awaiting description.</p>"},{"location":"library/uzem/#core-options","title":"Core options","text":"<p>There are no Core Options available.</p>"},{"location":"library/uzem/#controllers","title":"Controllers","text":"<p>The Uzem core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/uzem/#user-1-2-device-types","title":"User 1 - 2 device types","text":"<ul> <li>None - Doesn't disable input.</li> <li>RetroPad</li> <li>RetroPad w/Analog</li> </ul>"},{"location":"library/uzem/#controller-tables","title":"Controller tables","text":""},{"location":"library/uzem/#joypad","title":"Joypad","text":"User 1 - 2 Remap descriptors RetroPad Inputs A B Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right"},{"location":"library/uzem/#compatibility","title":"Compatibility","text":"<p>Awaiting description.</p>"},{"location":"library/uzem/#external-links","title":"External Links","text":"<ul> <li>Libretro Uzem Core info file</li> <li>Libretro Uzem Github Repository</li> <li>Report Libretro Uzem Core Issues Here</li> <li>Official Uzem Website</li> <li>Official Uzem Github Repository</li> </ul>"},{"location":"library/vaporspec/","title":"VaporSpec","text":""},{"location":"library/vaporspec/#background","title":"Background","text":"<p>A virtual game platform with capabilities similar to 80s game consoles. </p> <p>The VaporSpec core has been authored by</p> <ul> <li>Will Smith</li> <li>Vladimir Serbinenko</li> </ul> <p>The VaporSpec core is licensed under</p> <ul> <li>MIT</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/vaporspec/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the VaporSpec core have the following file extensions:</p> <ul> <li>.vaporbin</li> </ul>"},{"location":"library/vaporspec/#databases","title":"Databases","text":"<p>RetroArch database(s) that are associated with the VaporSpec core:</p> <ul> <li>VaporSpec</li> </ul>"},{"location":"library/vaporspec/#bios","title":"BIOS","text":"<p>VaporSpec doesn't require BIOS (bootrom) files to work. </p>"},{"location":"library/vaporspec/#features","title":"Features","text":"Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2715 States \u2714 Rewind \u2714 Netplay \u2715 Core Options \u2715 Memory Monitoring (achievements) \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Crop Overscan (in RetroArch's Video settings) \u2715"},{"location":"library/vaporspec/#directories","title":"Directories","text":"<p>The VaporSpec core's doesn't create any directory.</p>"},{"location":"library/vaporspec/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The VaporSpec core's core provided FPS is 60.</li> <li>The VaporSpec core's core provided sample rate is 44100 Hz.</li> <li>The VaporSpec core's base width is 768.</li> <li>The VaporSpec core's base height is 576.</li> <li>The VaporSpec's core provided aspect ratio is 4/3.</li> </ul>"},{"location":"library/vaporspec/#controllers","title":"Controllers","text":""},{"location":"library/vaporspec/#device-types","title":"Device types","text":"<p>The VaporSpec core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/vaporspec/#user-1-1-device-types","title":"User 1 - 1 device types","text":"<ul> <li>None - Input disabled.</li> <li>RetroPad - Joypad</li> <li>RetroPad w/Analog - Joypad - There is no reason to switch to this.</li> </ul>"},{"location":"library/vaporspec/#controller-tables","title":"Controller tables","text":""},{"location":"library/vaporspec/#joypad-and-analog-device-type-table","title":"Joypad and analog device type table","text":"RetroPad Inputs User 1 - 5 input descriptors Z X S A D-Pad Up D-Pad Down D-Pad Left D-Pad Right"},{"location":"library/vaporspec/#external-links","title":"External Links","text":"<ul> <li>Libretro VaporSpec Core info file</li> <li>VaporSpec Github Repository</li> </ul>"},{"location":"library/vba_m/","title":"Nintendo - Game Boy Advance (VBA-M)","text":""},{"location":"library/vba_m/#background","title":"Background","text":"<p>VBA-M is a Game Boy Advance emulator with the goal to improve upon VisualBoyAdvance by integrating the best features from the various builds floating around. It also supports Game Boy, Game Boy Color and Super Game Boy (borders, palette).</p>"},{"location":"library/vba_m/#authorlicense","title":"Author/License","text":"<p>The VBA-M core has been authored by</p> <ul> <li>Forgotten</li> <li>VBA-M Team</li> </ul> <p>The VBA-M core is licensed under</p> <ul> <li>GPLv2</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/vba_m/#bios","title":"BIOS","text":"<p>Required or optional firmware files go in the frontend's system directory.</p> <p>Warning</p> <p>In order for the BIOS to be used, the 'Use BIOS file if found' core option must be set to On.</p> Filename Description md5sum gba_bios.bin Game Boy Advance BIOS - Optional a860e8c0b6d573d191e4ec7db1b1e4f6 gb_bios.bin Game Boy BIOS - Optional 32fbbd84168d3482956eb3c5051637f5 gbc_bios.bin Game Boy Color BIOS - Optional dbfce9db9deaa2567f6a84fde55f9680"},{"location":"library/vba_m/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the VBA-M core have the following file extensions:</p> <ul> <li>.gb</li> <li>.gbc</li> <li>.gba</li> </ul>"},{"location":"library/vba_m/#databases","title":"Databases","text":"<p>RetroArch database(s) that are associated with the VBA-M core:</p> <ul> <li>Nintendo - Game Boy</li> <li>Nintendo - Game Boy Color</li> <li>Nintendo - Game Boy Advance</li> </ul>"},{"location":"library/vba_m/#features","title":"Features","text":"<p>Frontend-level settings or features that the VBA-M core respects.</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2715 Core Options \u2714 Memory Monitoring (achievements) \u2714 RetroArch Cheats \u2714 RetroArch SaveRAM Autosave Interval support \u2714 Native Cheats \u2714 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2714 Sensors \u2714 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/vba_m/#directories","title":"Directories","text":"<p>The VBA-M core's directory name is 'VBA-M'</p> <p>The VBA-M core saves/loads to/from these directories.</p> <p>Frontend's Save directory</p> File Description *.srm Cartridge battery save <p>Frontend's State directory</p> File Description *.state# State"},{"location":"library/vba_m/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The VBA-M core's core provided FPS is 59.72</li> <li>The VBA-M core's core provided sample rate is 32768 Hz</li> <li>The VBA-M core's base width is GBA: 240, GB: 160 (256 with border/SGB mode)</li> <li>The VBA-M core's base height is GBA: 160, GB: 144 (224 with border/SGB mode)</li> <li>The VBA-M core's max width is 256</li> <li>The VBA-M core's max height is 224</li> <li>The VBA-M core's core provided aspect ratio is GBA: 3:2, GB: 10:9 (8:7 with border/SGB)</li> </ul>"},{"location":"library/vba_m/#core-options","title":"Core options","text":"<p>The VBA-M core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded.</p> <p>Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch.</p> <ul> <li> <p>Solar sensor level [vbam_solarsensor] (0|1|2|3|4|5|6|7|8|9|10)</p> <p>For use with Boktai games (solar cartridge games). Manually adjust ingame's solar sensor meter.</p> </li> <li> <p>Use BIOS file if found [vbam_usebios] (Off/On)</p> <p>Uses BIOS present in RetroArch's system directory.</p> </li> <li> <p>Force enable RTC [vbam_forceRTCenable] (Off/On)</p> <p>Forces the internal real-time clock to be enabled regardless of rom. Usuable for rom patches that requires clock to be enabled (aka Pokemon).</p> </li> <li> <p>Sound Interpolation [vbam_soundinterpolation] (Off/On)</p> <p>Enable or disable sound filtering.</p> </li> <li> <p>Sound Filtering [vbam_soundfiltering] (0|1|2|3|4|5|6|7|8|9|10)</p> <p>Sets the cutoff-frequency for the interpolation filter. Higher value reduces more high frequencies.</p> </li> <li> <p>(GB) Color Palette [vbam_palettes] (black and white|blue sea|dark knight|green forest|hot desert|pink dreams|weird colors|original gameboy|gba sp)</p> <p>Set Game Boy palettes to use.</p> </li> </ul> (GB) Color Palette - black and white <p></p> (GB) Color Palette - blue sea <p></p> (GB) Color Palette - dark knight <p></p> (GB) Color Palette - green forest <p></p> (GB) Color Palette - hot desert <p></p> (GB) Color Palette - pink dreams <p></p> (GB) Color Palette - weird colors <p></p> (GB) Color Palette - original gameboy <p></p> (GB) Color Palette - gba sp <p></p> <ul> <li> <p>(GB) Emulated Hardware (Requires Restart) [vbam_gbHardware] (Automatic|Game Boy Color|Super Game Boy|Game Boy|Game Boy Advance|Super Game Boy)</p> <p>Selects the type of game boy handheld to emulate. Automatic will select the most appropriate model for the current game.</p> </li> <li> <p>(GB) Enable Colorizer Hack (Needs Restart) [vbam_allowcolorizerhack] (Off/On)</p> <p>Allows some Colorizer/DX patched gb roms to run correctly. NOT RECOMMENDED for non-colorized patched games since this hack relies on inaccurate vram and palette access.</p> <p>See: https://github.com/libretro/vbam-libretro/issues/58</p> </li> <li> <p>(GB) Show Borders [vbam_showborders] (auto|Off|On)</p> <p>Shows a solid-colored border around the normal window. If current game is SGB capable, an appropriate border from the cartridge will be loaded and shown instead.</p> </li> </ul> Show Borders - Off <p></p> Show Borders - On <p></p> <ul> <li> <p>(GB) Color Correction [vbam_gbcoloroption] (Off/On)</p> <p>Applies color correction to palette.</p> </li> </ul> (GB) Color Correction - Off <p></p> (GB) Color Correction - On <p></p> <ul> <li> <p>Enable Turbo Buttons [vbam_turboenable] (Off/On)</p> <p>Enable or disable gamepad turbo buttons.</p> </li> <li> <p>Turbo Delay (in frames) [vbam_turbodelay] (1|2|3|4|5|6|7...|15)</p> <p>Repeat rate of turbo triggers in frames. Lower value triggers more buttons per second.</p> </li> <li> <p>Analog Deadzone (%) [vbam_astick_deadzone] (5|10|15|20|25|30)</p> <p>The minimum absolute value of the analog joystick axis to move the gyro/tilt controller axis value.</p> </li> <li> <p>Sensor Sensitivity (Gyroscope) (%) [vbam_gyro_sensitivity] (10|15|20|25|30|35|40|45|50|55|60|65|70|75|80|85|90|95|100|105|110|115|120)</p> <p>Used to adjust sensitivity level for gyro-enabled games. Default bind is left analog.</p> </li> <li> <p>Sensor Sensitivity (Tilt) (%) [vbam_tilt_sensitivity] (10|15|20|25|30|35|40|45|50|55|60|65|70|75|80|85|90|95|100|105|110|115|120)</p> <p>Used to adjust sensitivity level for gyro-enabled games. Default bind is right analog.</p> </li> <li> <p>Swap Left/Right Analog [vbam_swap_astick] (Off/On)</p> <p>Swaps left and right analog stick function for gyro and tilt</p> </li> <li> <p>Sound channel 1 [vbam_sound_1] (Off/On)</p> <p>Self-explanatory.</p> </li> <li> <p>Sound channel 2 [vbam_sound_2] (Off/On)</p> <p>Self-explanatory.</p> </li> <li> <p>Sound channel 3 [vbam_sound_3] (Off/On)</p> <p>Self-explanatory.</p> </li> <li> <p>Sound channel 4 [vbam_sound_4] (Off/On)</p> <p>Self-explanatory.</p> </li> <li> <p>Sound DMA channel A [vbam_sound_5] (Off/On)</p> <p>Self-explanatory.</p> </li> <li> <p>Sound DMA channel B [vbam_sound_6] (Off/On)</p> <p>Self-explanatory.</p> </li> <li> <p>Show layer 1 [vbam_layer_1] (Off/On)</p> <p>Self-explanatory.</p> </li> <li> <p>Show layer 2 [vbam_layer_2] (Off/On)</p> <p>Self-explanatory.</p> </li> <li> <p>Show layer 3 [vbam_layer_3] (Off/On)</p> <p>Self-explanatory.</p> </li> <li> <p>Show layer 4 [vbam_layer_4] (Off/On)</p> <p>Self-explanatory.</p> </li> <li> <p>Show sprite layer [vbam_layer_5] (Off/On)</p> <p>Self-explanatory.</p> </li> <li> <p>Show window layer 1 [vbam_layer_6] (Off/On)</p> <p>Self-explanatory.</p> </li> <li> <p>Show window layer 2 [vbam_layer_7] (Off/On)</p> <p>Self-explanatory.</p> </li> <li> <p>Show sprite window layer [vbam_layer_8] (Off/On)</p> <p>Self-explanatory.</p> </li> </ul>"},{"location":"library/vba_m/#controllers","title":"Controllers","text":"<p>The VBA-M core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/vba_m/#user-1-device-types","title":"User 1 device types","text":"<ul> <li>None - Input disabled.</li> <li>GBA Joypad - Joypad</li> </ul>"},{"location":"library/vba_m/#controller-tables","title":"Controller tables","text":""},{"location":"library/vba_m/#joypad","title":"Joypad","text":"User 1 Remap descriptors RetroPad Inputs B Turbo B Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A Turbo A L R Solar Sensor (Darker) Solar Sensor (Lighter) Tilt X-Axis Tilt X-Yxis Gyro"},{"location":"library/vba_m/#compatibility","title":"Compatibility","text":"Game Issue"},{"location":"library/vba_m/#external-links","title":"External Links","text":"<ul> <li>Official VBA-M Website</li> <li>Official VBA-M Github Repository</li> <li>Libretro VBA-M Core info file</li> <li>Libretro VBA-M Github Repository</li> <li>Report Libretro VBA-M Core Issues Here</li> </ul>"},{"location":"library/vba_m/#see-also","title":"See also","text":""},{"location":"library/vba_m/#nintendo-game-boy-advance","title":"Nintendo - Game Boy Advance","text":"<ul> <li>Nintendo - Game Boy Advance (Beetle GBA)</li> <li>Nintendo - Game Boy Advance (gpSP)</li> <li>Nintendo - Game Boy Advance (Meteor)</li> <li>Nintendo - Game Boy Advance (mGBA)</li> <li>Nintendo - Game Boy Advance (TempGBA)</li> <li>Nintendo - Game Boy Advance (VBA Next)</li> </ul>"},{"location":"library/vba_m/#nintendo-game-boy-color","title":"Nintendo - Game Boy (+ Color)","text":"<ul> <li>Nintendo - Game Boy / Color (Emux GB)</li> <li>Nintendo - Game Boy / Color (Gambatte)</li> <li>Nintendo - Game Boy / Color (Gearboy)</li> <li>Nintendo - Game Boy / Color (SameBoy)</li> <li>Nintendo - Game Boy / Color (TGB Dual)</li> <li>Nintendo - SNES / Famicom (higan Accuracy)</li> <li>Nintendo - SNES / Famicom (nSide Balanced)</li> <li>Nintendo - SNES / Famicom (Mesen-S)</li> </ul>"},{"location":"library/vba_next/","title":"Nintendo - Game Boy Advance (VBA Next)","text":""},{"location":"library/vba_next/#background","title":"Background","text":"<p>VBA Next is a Game Boy Advance emulator based on VBA-M 2011 with backported patches for performance and compatibility improvements.</p>"},{"location":"library/vba_next/#authorlicense","title":"Author/License","text":"<p>The VBA Next core has been authored by</p> <ul> <li>Forgotten</li> <li>VBA-M Team</li> <li>Squarepusher</li> </ul> <p>The VBA Next core is licensed under</p> <ul> <li>GPLv2</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/vba_next/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the VBA Next core have the following file extensions:</p> <ul> <li>.gba</li> </ul>"},{"location":"library/vba_next/#databases","title":"Databases","text":"<p>RetroArch database(s) that are associated with the VBA Next core:</p> <ul> <li>Nintendo - Game Boy Advance</li> </ul>"},{"location":"library/vba_next/#bios","title":"BIOS","text":"<p>Required or optional firmware files go in the frontend's system directory.</p> <p>Warning</p> <p>In order for the Game Boy Advance BIOS to be used, the 'Use bios if available' core option must be set to On.</p> Filename Description md5sum gba_bios.bin Game Boy Advance Image - Optional a860e8c0b6d573d191e4ec7db1b1e4f6"},{"location":"library/vba_next/#features","title":"Features","text":"<p>Frontend-level settings or features that the VBA Next core respects.</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2715 Core Options \u2714 Memory Monitoring (achievements) \u2714 RetroArch Cheats \u2715 RetroArch SaveRAM Autosave Interval support \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2714 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/vba_next/#directories","title":"Directories","text":"<p>The VBA Next core's directory name is 'VBA Next'</p> <p>The VBA Next core saves/loads to/from these directories.</p> <p>Frontend's Save directory</p> <ul> <li>'content-name'.srm (Cartridge battery save)</li> </ul> <p>Frontend's State directory</p> <ul> <li>'content-name'.state# (State)</li> </ul>"},{"location":"library/vba_next/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The VBA Next core's core provided FPS is 59.727</li> <li>The VBA Next core's core provided sample rate is 32000 Hz</li> <li>The VBA Next core's core provided aspect ratio is 3/2</li> </ul>"},{"location":"library/vba_next/#core-options","title":"Core options","text":"<p>The VBA Next core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded.</p> <p>Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch.</p> <ul> <li> <p>Use bios if available (Restart) [vbanext_bios] (Off/On)</p> <p>Uses BIOS present in RetroArch's system directory. Look at the BIOS section for more information.</p> </li> </ul> Use bios if available - On <p></p>"},{"location":"library/vba_next/#controllers","title":"Controllers","text":"<p>The VBA Next core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/vba_next/#user-1-device-types","title":"User 1 device types","text":"<ul> <li>None - Doesn't disable input</li> <li>RetroPad - Joypad</li> <li>RetroPad w/Analog - Joypad - There's no reason to switch to this.</li> </ul>"},{"location":"library/vba_next/#controller-tables","title":"Controller tables","text":""},{"location":"library/vba_next/#joypad","title":"Joypad","text":"User 1 Remap descriptors RetroPad Inputs B Select Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right A L R"},{"location":"library/vba_next/#compatibility","title":"Compatibility","text":"Game Issue Boktai Trilogy The solar sensor is not emulated. Croket! 2 \u2013 Yami no Bank to Banqueen Heavy slowdown when approaching the snowman in the beginning. Koro Koro Puzzle Happy Panechu! The tilt sensor is not emulated. Super Mario Advance 2: Super Mario World (Europe) The program crashes during the final fight, when Bowser approaches (zoom mode 7) WarioWare: Twisted! The tilt sensor is not emulated. Yoshi\u2019s Universal Gravitation The tilt sensor is not emulated. 1"},{"location":"library/vba_next/#external-links","title":"External Links","text":"<ul> <li>Libretro VBA Next Core info file</li> <li>Libretro VBA Next Github Repository</li> <li>Report Libretro VBA Next Core Issues Here</li> <li>Gameplay Videos</li> </ul>"},{"location":"library/vba_next/#see-also","title":"See also","text":""},{"location":"library/vba_next/#nintendo-game-boy-advance","title":"Nintendo - Game Boy Advance","text":"<ul> <li>Nintendo - Game Boy Advance (Beetle GBA)</li> <li>Nintendo - Game Boy Advance (gpSP)</li> <li>Nintendo - Game Boy Advance (Meteor)</li> <li>Nintendo - Game Boy Advance (mGBA)</li> <li>Nintendo - Game Boy Advance (TempGBA)</li> <li>Nintendo - Game Boy Advance (VBA-M)</li> </ul>"},{"location":"library/vecx/","title":"Vectrex (vecx)","text":""},{"location":"library/vecx/#background","title":"Background","text":"<p>vecx is an emulator for the vector-display based Vectrex video game console.</p> <p>The vecx core has been authored by</p> <ul> <li>Valavan Manohararajah</li> <li>John Hawthorn</li> <li>Nikita Zimin</li> <li>Demeth</li> </ul> <p>The vecx core is licensed under</p> <ul> <li>GPLv3</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/vecx/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the vecx core have the following file extensions:</p> <ul> <li>bin</li> <li>vec</li> </ul>"},{"location":"library/vecx/#bios","title":"BIOS","text":"<p>vecx doesn't require BIOS (bootrom) files to work. </p>"},{"location":"library/vecx/#features","title":"Features","text":"Feature Supported Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2715 Memory Monitoring (achievements) \u2714 RetroArch Cheats \u2715 Native Cheats \u2715 Controllers \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715"},{"location":"library/vecx/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The vecx core's core provided FPS is 59.72.</li> <li>The vecx core's core provided sample rate is 44100 Hz.</li> <li>The vecx core's base width is 869.</li> <li>The vecx core's base height is 1080.</li> <li>The vecx core's max width is 1648.</li> <li>The vecx core's max height is 2048.</li> </ul>"},{"location":"library/vecx/#core-options","title":"Core Options","text":"<p>The vecx core has the following options that can be tweaked from the core options menu. The default setting is bolded.</p> <ul> <li>Use Hardware Rendering [vecx_render] (Hardware|Software)</li> <li>Hardware Rendering Resolution [vecx_renderresolution] (824x1024|434x540|515x640|580x720|618x768|845x1050|869x1080|966x1200|1159x1440|1648x2048)</li> <li>Line brightness [vecx_linebrightness] (4|1|2|3|5|6|7|8|9)</li> <li>Line width [vecx_linewidth] (4|0|1|2|3|5|6|7|8|9)</li> <li>Bloom brightness [vecx_bloombrightness] (4|1|2|3|5|6|7|8|9)</li> <li> <p>Bloom width [vecx_bloomwidth] (8x|2x|3x|4x|6x|10x|12x|14x|16x)</p> </li> <li> <p>Res Multiplier (1-4)</p> </li> </ul> Res Multiplier - 1 <p></p> Res Multiplier - 4 <p></p>"},{"location":"library/vecx/#controllers","title":"Controllers","text":"<p>The vecx core supports one controller setting:</p> <ul> <li>RetroPad</li> </ul> vecx RetroPad 2 4 D-pad 1 3"},{"location":"library/vecx/#external-links","title":"External Links","text":"<ul> <li>Libretro Repository</li> <li>Report Core Issues Here</li> <li>Official GitHub Repository of the SDL port</li> <li>Gameplay Videos</li> <li>Steam</li> </ul>"},{"location":"library/vemulator/","title":"VeMUlator","text":""},{"location":"library/vemulator/#background","title":"Background","text":"<p>VeMUlator is a Sega VMU emulator. This is a port of the Android SEGA Dreamcast VMU emulator \"VeMUlator\" for libretro, it was translated from Java to C++ and then implemented the libretro.h callbacks.</p>"},{"location":"library/vemulator/#authorlicense","title":"Author/License","text":"<p>The VeMUlator core has been authored by</p> <ul> <li>Mahmoud Jaoune</li> </ul> <p>The VeMUlator core is licensed under</p> <ul> <li>GPLv3</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/vemulator/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the VeMUlator core have the following file extensions:</p> <ul> <li>.vms</li> <li>.dci</li> <li>.bin</li> </ul>"},{"location":"library/vemulator/#features","title":"Features","text":"<p>Frontend-level settings or features that the VeMUlator core respects.</p> Feature Supported Restart \u2715<sup>1</sup> Screenshots \u2714 Saves \u2715 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2714 Memory Monitoring (achievements) \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping - Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/vemulator/#directories","title":"Directories","text":"<p>The VeMUlator core's internal core name is 'VeMUlator'</p>"},{"location":"library/vemulator/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The VeMUlator core's core provided FPS is 60</li> <li>The VeMUlator core's core provided sample rate is 32768 Hz</li> <li>The VeMUlator core's core provided aspect ratio is 3/2</li> </ul>"},{"location":"library/vemulator/#core-options","title":"Core options","text":"<p>The VeMUlator core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded.</p> <p>Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch.</p> <ul> <li> <p>Enable flash write (.bin, requires restart) [enable_flash_write] (enabled|disabled)</p> <p>Self-explanatory.</p> </li> </ul>"},{"location":"library/vemulator/#controllers","title":"Controllers","text":"<p>The VeMUlator core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/vemulator/#user-1-device-types","title":"User 1 device types","text":"<ul> <li>None - Doesn't disable input. There's no reason to switch to this.</li> <li>RetroPad - Joypad - Stay on this.</li> <li>RetroPad w/Analog - Joypad - Same as RetroPad. There's no reason to switch to this.</li> </ul>"},{"location":"library/vemulator/#controller-tables","title":"Controller tables","text":""},{"location":"library/vemulator/#joypad","title":"Joypad","text":"RetroPad Inputs VeMUlator core Inputs A B Start Up Down Left Right"},{"location":"library/vemulator/#compatibility","title":"Compatibility","text":"<p>Known issues:</p> <ul> <li>Timer problems (Mainly T0, due to lack of documentation of the VMU.)</li> <li>Sound not being synchronized with the system.</li> <li>Close/restart content will cause crash.</li> </ul>"},{"location":"library/vemulator/#external-links","title":"External Links","text":"<ul> <li>Official/Libretro VeMUlator Github Repository</li> <li>Libretro VeMUlator Core info file</li> <li>Report Libretro VeMUlator Core Issues Here</li> </ul> <ol> <li> <p>It will cause a crash.\u00a0\u21a9</p> </li> </ol>"},{"location":"library/vice/","title":"VICE, the Versatile Commodore Emulator","text":""},{"location":"library/vice/#background","title":"Background","text":"<p>VICE is a program that runs on a Unix, MS-DOS, Win32, OS/2, BeOS, QNX 4.x, QNX 6.x, Amiga, Syllable or Mac OS X machine and executes programs intended for the old 8-bit computers. The current version emulates the C64, the C64DTV, the C128, the VIC20, practically all PET models, the PLUS4 and the CBM-II (aka C610/C510). An extra emulator is provided for C64 expanded with the CMD SuperCPU.</p> <p>The VICE cores have been authored by</p> <ul> <li>VICE Team</li> </ul> <p>The VICE cores are licensed under</p> <ul> <li>GPLv2</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/vice/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the VICE cores have the following file extensions:</p>"},{"location":"library/vice/#floppies","title":"Floppies","text":"<ul> <li>.d64</li> <li>.d6z</li> <li>.d71</li> <li>.d7z</li> <li>.d80</li> <li>.d81</li> <li>.d82</li> <li>.d8z</li> <li>.g64</li> <li>.g6z</li> <li>.g41</li> <li>.g4z</li> <li>.x64</li> <li>.x6z</li> <li>.nib</li> <li>.nbz</li> <li>.d2m</li> <li>.d4m</li> </ul>"},{"location":"library/vice/#tapes","title":"Tapes","text":"<ul> <li>.t64</li> <li>.tap</li> <li>.tcrt</li> </ul>"},{"location":"library/vice/#read-only-memory","title":"Read-only memory","text":"<ul> <li>.prg</li> <li>.p00</li> <li>.crt</li> <li>.bin</li> </ul>"},{"location":"library/vice/#other","title":"Other","text":"<ul> <li>.cmd</li> <li>.m3u</li> <li>.vfl</li> <li>.vsf</li> <li>.zip</li> <li>.7z</li> <li>.gz</li> </ul> <p>Additional extensions for VIC-20:</p> <ul> <li>.20</li> <li>.40</li> <li>.60</li> <li>.a0</li> <li>.b0</li> <li>.rom</li> </ul>"},{"location":"library/vice/#databases","title":"Databases","text":"<p>RetroArch database(s) that are associated with the VICE cores:</p> <ul> <li>Commodore - 64</li> <li>Commodore - VIC-20</li> <li>Commodore - Plus-4</li> </ul>"},{"location":"library/vice/#bios","title":"BIOS","text":"<p>Required or optional firmware files go in the frontend's system directory (<code>system/vice</code>).</p> <p>All required files are embedded, ergo these files are optional.</p>"},{"location":"library/vice/#c64-fastaccurate","title":"C64 (fast/accurate)","text":"Filename Description md5sum JiffyDOS_C64.bin JiffyDOS C64 Kernal be09394f0576cf81fa8bacf634daf9a2 JiffyDOS_1541-II.bin JiffyDOS 1541 drive BIOS 1b1e985ea5325a1f46eb7fd9681707bf JiffyDOS_1571_repl310654.bin JiffyDOS 1571 drive BIOS 41c6cc528e9515ffd0ed9b180f8467c0 JiffyDOS_1581.bin JiffyDOS 1581 drive BIOS 20b6885c6dc2d42c38754a365b043d71"},{"location":"library/vice/#c64-supercpu","title":"C64 SuperCPU","text":"Filename Description md5sum JiffyDOS_C64.bin JiffyDOS C64 Kernal be09394f0576cf81fa8bacf634daf9a2 JiffyDOS_1541-II.bin JiffyDOS 1541 drive BIOS 1b1e985ea5325a1f46eb7fd9681707bf JiffyDOS_1571_repl310654.bin JiffyDOS 1571 drive BIOS 41c6cc528e9515ffd0ed9b180f8467c0 JiffyDOS_1581.bin JiffyDOS 1581 drive BIOS 20b6885c6dc2d42c38754a365b043d71 scpu-dos-1.4.bin CMD SuperCPU Kernal 1.4 cda2fcd2e1f0412029383e51dd472095 scpu-dos-2.04.bin CMD SuperCPU Kernal 2.04 b2869f8678b8b274227f35aad26ba509 <p>SuperCPU Kernal files go in <code>system/vice/SCPU64</code>.</p>"},{"location":"library/vice/#c128","title":"C128","text":"Filename Description md5sum JiffyDOS_C128.bin JiffyDOS C128 Kernal cbbd1bbcb5e4fd8046b6030ab71fc021 JiffyDOS_C64.bin JiffyDOS C64 Kernal be09394f0576cf81fa8bacf634daf9a2 JiffyDOS_1541-II.bin JiffyDOS 1541 drive BIOS 1b1e985ea5325a1f46eb7fd9681707bf JiffyDOS_1571_repl310654.bin JiffyDOS 1571 drive BIOS 41c6cc528e9515ffd0ed9b180f8467c0 JiffyDOS_1581.bin JiffyDOS 1581 drive BIOS 20b6885c6dc2d42c38754a365b043d71"},{"location":"library/vice/#features","title":"Features","text":"<p>Frontend-level settings or features that the VICE cores respect.</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2715 Core Options \u2714 Memory Monitoring (achievements) \u2714 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2714 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2714 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2714"},{"location":"library/vice/#directories","title":"Directories","text":"<p>The VICE cores' internal core names are:</p> <ul> <li>vice_x64</li> <li>vice_x64dtv</li> <li>vice_x64sc</li> <li>vice_x128</li> <li>vice_xcbm2</li> <li>vice_xcbm5x0</li> <li>vice_xpet</li> <li>vice_xplus4</li> <li>vice_xscpu64</li> <li>vice_xvic</li> </ul> <p>The VICE cores save/load to/from these directories.</p> <p>Frontend's Save directory</p> <ul> <li>'content-name'.nvr (VIC-20 Mega-Cart cartridge battery save)</li> <li><code>vice_printer.txt</code> (Printer output in ASCII)</li> <li><code>vice_work.d64</code> (Work disk in D64 format)</li> <li><code>vice_work.d71</code> (Work disk in D71 format)</li> <li><code>vice_work.d81</code> (Work disk in D81 format)</li> <li><code>vice_work/</code> (Work disk in Directory FileSystem format)</li> </ul> <p>Frontend's State directory</p> <ul> <li>'content-name'.state# (State)</li> </ul>"},{"location":"library/vice/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The VICE cores' core provided FPS is calculated accurately, but are approximately 50 for PAL and 59.940 for NTSC</li> <li>The VICE cores' core provided sample rate is 22050/44100/48000/96000 Hz</li> <li> <p>The VICE cores' core provided aspect ratio is automatically set based on core options</p> </li> <li> <p>The VICE C64 core's base width is 384</p> </li> <li> <p>The VICE C64 core's base height is 272 for PAL, 247 for NTSC</p> </li> <li> <p>The VICE VIC-20 core's base width is 448 for PAL, 400 for NTSC</p> </li> <li>The VICE VIC-20 core's base height is 284 for PAL, 234 for NTSC</li> </ul>"},{"location":"library/vice/#m3u-and-disk-control","title":"M3U and Disk control","text":"<p>When you have a multi disk game, you can use a M3U playlist file to be able to change disks via RetroArch Disc Control interface.</p> <p>A M3U file is a simple text file with one disk per line (Wikipedia).</p> <p>Example:</p> <p><code>Ultima VI - The False Prophet (1990)(Origin Systems).m3u</code> <pre><code>Ultima VI - The False Prophet (1990)(Origin Systems)(Disk 1 of 3 Side A)(Game).d64\nUltima VI - The False Prophet (1990)(Origin Systems)(Disk 1 of 3 Side B)(Surface).d64\nUltima VI - The False Prophet (1990)(Origin Systems)(Disk 2 of 3 Side A)(Dungeon).d64\nUltima VI - The False Prophet (1990)(Origin Systems)(Disk 2 of 3 Side B)(Populace A).d64\nUltima VI - The False Prophet (1990)(Origin Systems)(Disk 3 of 3 Side A)(Populace B).d64\nUltima VI - The False Prophet (1990)(Origin Systems)(Disk 3 of 3 Side B)(Populace C).d64\n</code></pre> Path can be absolute or relative to the location of the M3U file.</p> <p>When the game asks for it, you can change the current disk in the RetroArch \"Disc Control\" menu:</p> <ul> <li>Eject the current disk with \"Eject Disc\"</li> <li>Select the right disk index with \"Current Disc Index\"</li> <li>Insert the new disk with \"Insert Disc\"</li> </ul> <p>By default, RetroArch will display the filename (without extension) of each M3U entry when selecting a disk via the <code>Current Disc Index</code> drop-down menu. Custom display labels may be set for each disk using the syntax: <code>DISK_FILE|DISK_LABEL</code>. For example, the following M3U file:</p> <p><code>Ultima VI - The False Prophet (1990)(Origin Systems).m3u</code> <pre><code>Ultima VI - The False Prophet (1990)(Origin Systems)(Disk 1 of 3 Side A)(Game).d64|Game\nUltima VI - The False Prophet (1990)(Origin Systems)(Disk 1 of 3 Side B)(Surface).d64|Surface\nUltima VI - The False Prophet (1990)(Origin Systems)(Disk 2 of 3 Side A)(Dungeon).d64|Dungeon\nUltima VI - The False Prophet (1990)(Origin Systems)(Disk 2 of 3 Side B)(Populace A).d64|Populace A\nUltima VI - The False Prophet (1990)(Origin Systems)(Disk 3 of 3 Side A)(Populace B).d64|Populace B\nUltima VI - The False Prophet (1990)(Origin Systems)(Disk 3 of 3 Side B)(Populace C).d64|Populace C\n</code></pre></p> <p>...will be shown in RetroArch's disk selection menu as:</p> <pre><code>1: Game\n2: Surface\n3: Dungeon\n4: Populace A\n5: Populace B\n6: Populace C\n</code></pre> <p>If <code>DISK_LABEL</code> is intentionally left blank (i.e. <code>DISK_FILE|</code>) then only the disk index will be displayed.</p> <p>For games that require a dedicated save disk, one may be generated automatically by entering the following line in an M3U file: <code>#SAVEDISK:VolumeName</code>. <code>VolumeName</code> is optional and may be omitted. For example, this will create a blank, unlabelled disk image at disk index 5:</p> <p><code>Elite (1985)(Firebird Software).m3u</code> <pre><code>Elite (1985)(Firebird Software).d64\n#SAVEDISK:\n</code></pre></p> <p>Although one save disk is normally sufficient, an arbitrary number of <code>#SAVEDISK:VolumeName</code> lines may be included. Save disks are located in the frontend's save directory, with the following name: <code>[M3U_FILE_NAME].save[DISK_INDEX].d64</code>.</p> <p>Save disks generated by the <code>#SAVEDISK:</code> keyword are automatically assigned the label: <code>Save Disk [SAVE_DISK_INDEX]</code>.</p>"},{"location":"library/vice/#extra-m3u-features","title":"Extra M3U features","text":"<ul> <li><code>#COMMAND:&lt;commands&gt;</code><ul> <li>Pass arguments to VICE (place first, core name can be skipped)</li> </ul> </li> <li><code>#SAVEDISK:&lt;label&gt;</code><ul> <li>Create a save disk in <code>saves</code></li> </ul> </li> <li><code>#LABEL:&lt;label&gt;</code><ul> <li>Alternative label for the next entry</li> </ul> </li> <li><code>&lt;disk&gt;.d64:&lt;prg&gt;</code><ul> <li>Load a program instead of <code>\"*\"</code></li> </ul> </li> <li><code>&lt;disk&gt;.d64|&lt;label&gt;</code><ul> <li>Set a friendly name (shown in \"Disc Control\")</li> </ul> </li> <li><code>&lt;disks&gt;.zip#&lt;disk&gt;.d64</code><ul> <li>Specify a disk inside a ZIP with multiple disks (not needed with single file ZIPs)</li> </ul> </li> </ul> <p>M3U playlist supports disks, tapes, cartridges and programs.</p>"},{"location":"library/vice/#zip-support","title":"ZIP support","text":"<p>ZIPs are extracted to a temporary directory in <code>saves</code>, bypassing the default frontend extraction. The temporary directory is emptied but not removed on exit. ZIP is not repacked, which means saves and highscores are lost.</p> <p>This allows:</p> <ul> <li>Automatic M3U playlist generation of all files</li> <li>The use of zipped images in M3Us</li> </ul>"},{"location":"library/vice/#usage","title":"Usage","text":""},{"location":"library/vice/#default-controls","title":"Default controls","text":"RetroPad button Action D-Pad Joystick Left Analog Mouse/paddles B Fire button 1 / Handle A Fire button 2 / Base X Space L2 Escape (RUN/STOP) R2 Enter (RETURN) Select (Short) Toggle virtual keyboard Select (Long) Toggle statusbar Select (Hold) Fast-Forward Keyboard key Action F12 Toggle statusbar RControl Switch between joyports End Reset"},{"location":"library/vice/#virtual-keyboard","title":"Virtual keyboard","text":"<p>The VICE cores have a virtual keyboard that can be accessed by default through RetroPad Select.</p> <p>The virtual keyboard can be controlled with:</p> <ul> <li> <p>RetroPad</p> Button Action D-Pad Move B Keypress A Toggle transparency Y Toggle ShiftLock Y (Long) Quick map button Y (Very long) Quick clear button X Press Space Start Press Return </li> <li> <p>Keyboard</p> Key Action Cursors Move Enter Keypress CapsLock Toggle ShiftLock </li> <li> <p>Mouse</p> </li> <li>Touch screen</li> </ul> <p>The virtual keyboard has these additional actions:</p> <ul> <li>ShiftLock off:<ul> <li><code>STBR</code> = Toggle statusbar</li> <li><code>JOYP</code> = Switch joystick ports</li> <li><code>TRBF</code> = Toggle turbo fire</li> </ul> </li> <li> <p>ShiftLock on:</p> <ul> <li><code>SVDS</code> = Create/Insert &amp; remove save disk</li> <li><code>ASPR</code> = Toggle aspect ratio</li> <li><code>CROP</code> = Toggle crop mode</li> </ul> </li> <li> <p>Reset (Red key with undo icon, obeys 'Reset Type' core option)</p> </li> <li>Datasette controls (Reset, Play, Rewind, Forward, Stop)</li> </ul> <p>Long press for sticky keys. Stickying the third key will replace the second.</p>"},{"location":"library/vice/#joyport-control","title":"Joyport control","text":"<p>Older C64 games tend to use joystick port 1 and newer ones tend to use port 2 for player 1. There are several ways to switch ports in this core:</p> <ul> <li>Use the core option: <code>Quick Menu -&gt; Options -&gt; RetroPad Port</code></li> <li>Bring up the virtual keyboard with <code>Select</code> button, and press the key labeled <code>JOY</code></li> <li>Press the default keyboard shortcut <code>Right Control</code></li> <li>Assign <code>Switch Joyport</code> to any RetroPad button under <code>Quick Menu -&gt; Options</code></li> <li>Rename the game, eg. <code>Bruce_Lee_j1.tap</code> or <code>Bruce_Lee_(j1).tap</code> for port 1, and similarly <code>Bruce_Lee_j2.tap</code> or <code>Bruce_Lee_(j2).tap</code> for port 2</li> <li>Add <code>-j1</code> or <code>-j2</code> parameters in custom command line <code>.cmd</code></li> </ul>"},{"location":"library/vice/#core-options","title":"Core options","text":"<p>The VICE cores have the following option(s) that can be tweaked from the core options menu. The default setting is bolded.</p> <p>Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch.</p>"},{"location":"library/vice/#c64-fastaccuratesupercpu-specific","title":"C64 (fast/accurate/SuperCPU) specific","text":"<ul> <li> <p>Model [vice_c64_model] (C64 PAL auto|C64 NTSC auto|C64C PAL auto|C64C NTSC auto|C64 PAL|C64 NTSC|C64C PAL|C64C NTSC|C64SX PAL|C64SX NTSC|PET64 PAL|PET64 NTSC|C64 GS PAL|C64 JAP NTSC)</p> <p>'Automatic' switches region per file path tags.</p> </li> <li> <p>JiffyDOS [vice_jiffydos] (disabled|enabled)</p> <p>For D64/D71/D81 disk images only!</p> <p>ROMs required in <code>system/vice</code>: - <code>JiffyDOS_C64.bin</code> - <code>JiffyDOS_1541-II.bin</code> - <code>JiffyDOS_1571_repl310654.bin</code> - <code>JiffyDOS_1581.bin</code></p> </li> </ul>"},{"location":"library/vice/#c64-fastaccurate-specific","title":"C64 (fast/accurate) specific","text":"<ul> <li> <p>RAM Expansion Unit [vice_ram_expansion_unit] (none|128kB|256kB|512kB|1024kB|2048kB|4096kB|16384kB)</p> <p>Not allowed with cartridges. Changing while running resets the system!</p> </li> </ul>"},{"location":"library/vice/#c64-supercpu-specific","title":"C64 SuperCPU specific","text":"<ul> <li> <p>SuperCPU SIMM Size [vice_supercpu_simm_size] (0|1|2|4|8|16)</p> <p>Changing while running resets the system!</p> </li> <li> <p>SuperCPU Speed Switch [vice_supercpu_speed_switch] (disabled|enabled)</p> </li> <li> <p>SuperCPU Kernal [vice_supercpu_kernal] (0|1|2)</p> <p>JiffyDOS does not work with the internal kernal!</p> <p>ROMs required in <code>system/vice/SCPU64</code>: - <code>scpu-dos-1.4.bin</code> - <code>scpu-dos-2.04.bin</code></p> </li> </ul>"},{"location":"library/vice/#c64dtv-specific","title":"C64DTV specific","text":"<ul> <li>Model [vice_c64dtv_model] (DTV2 PAL|DTV2 NTSC|DTV3 PAL|DTV3 NTSC|HUMMER NTSC)</li> </ul>"},{"location":"library/vice/#c128-specific","title":"C128 specific","text":"<ul> <li> <p>Model [vice_c128_model] (C128 PAL auto|C128 NTSC auto|C128 D PAL auto|C128 D NTSC auto|C128 DCR PAL auto|C128 DCR NTSC auto|C128 PAL|C128 NTSC|C128 D PAL|C128 D NTSC|C128 DCR PAL|C128 DCR NTSC)</p> <p>'Automatic' switches region per file path tags.</p> </li> <li> <p>RAM Expansion Unit [vice_c128_ram_expansion_unit] (none|128kB|256kB|512kB|1024kB|2048kB|4096kB|16384kB)</p> <p>Not allowed with cartridges. Changing while running resets the system!</p> </li> <li> <p>Video Output [vice_c128_video_output] (VICII|VDC)</p> </li> <li> <p>VDC Video RAM [vice_c128_vdc_ram] (default|64)</p> Value Label default 16kB 64 64kB </li> <li> <p>GO64 (Restart) [vice_c128_go64] (disabled|enabled)</p> <p>Start in C64 compatibility mode.</p> </li> <li> <p>JiffyDOS [vice_jiffydos] (disabled|enabled)</p> <p>'True Drive Emulation' &amp; 1541/1571/1581 drive &amp; ROMs required in <code>system/vice</code>: - <code>JiffyDOS_C128.bin</code> - <code>JiffyDOS_C64.bin</code> - <code>JiffyDOS_1541-II.bin</code> - <code>JiffyDOS_1571_repl310654.bin</code> - <code>JiffyDOS_1581.bin</code></p> </li> </ul>"},{"location":"library/vice/#vic-20-specific","title":"VIC-20 specific","text":"<ul> <li> <p>Model [vice_vic20_model] (VIC20 PAL auto|VIC20 NTSC auto|VIC20 PAL|VIC20 NTSC|VIC21)</p> <p>'Automatic' switches region per file path tags.</p> <p>'VIC21' = <code>Super VIC (+16K) NTSC</code></p> </li> <li> <p>Memory Expansion [vice_vic20_memory_expansions] (none|3kB|8kB|16kB|24kB|35kB)</p> <p>Can be forced with filename tags <code>(8k)</code> &amp; <code>(8kb)</code> or directory tags <code>8k</code> &amp; <code>8kb</code>.</p> <p>Changing while running resets the system!</p> </li> </ul>"},{"location":"library/vice/#plus4-specific","title":"PLUS/4 specific","text":"<ul> <li>Model [vice_plus4_model] (C16 PAL|C16 NTSC|PLUS4 PAL|PLUS4 NTSC|V364 NTSC|232 NTSC)</li> </ul>"},{"location":"library/vice/#cbm-ii-specific","title":"CBM-II specific","text":"<ul> <li>Model [vice_cbm2_model] (610 PAL|610 NTSC|620 PAL|620 NTSC|620PLUS PAL|620PLUS NTSC|710 NTSC|720 NTSC|720PLUS NTSC)</li> </ul>"},{"location":"library/vice/#cbm-ii-5x0-specific","title":"CBM-II 5x0 specific","text":"<ul> <li>Model [vice_cbm5x0_model] (510 PAL|510 NTSC)</li> </ul>"},{"location":"library/vice/#pet-specific","title":"PET specific","text":"<ul> <li>Model [vice_pet_model] (2001|3008|3016|3032|3032B|4016|4032|4032B|8032|8096|8296|SUPERPET)</li> </ul>"},{"location":"library/vice/#common","title":"Common","text":"<ul> <li> <p>Printer [vice_printer] (disabled|enabled)</p> <p>Output is written to 'saves/vice_printer.txt'.</p> </li> <li> <p>Read 'vicerc' [vice_read_vicerc] (disabled|enabled)</p> <p>Process first found 'vicerc' in this order: 1. 'saves/[content].vicerc' 2. 'saves/vicerc' 3. 'system/vice/vicerc'</p> <p>All available options are dumped in <code>system/vice/vicerc-dump-[corename]</code>.</p> </li> <li> <p>Reset Type [vice_reset] (autostart|soft|hard|freeze)</p> <ul> <li>'Autostart' hard resets and reruns content</li> <li>'Soft' keeps some code in memory</li> <li>'Hard' erases all memory</li> <li>'Freeze' is for cartridges</li> </ul> </li> <li> <p>Automatic Load Warp [vice_autoloadwarp] (disabled|enabled|mute|disk|disk_mute|tape|tape_mute)</p> <p>Toggle warp mode during disk and/or tape access if there is no audio output.</p> <p>Mutes 'Drive Sound Emulation', 'Datasette Sound' and 'Audio Leak Emulation' when not ignoring audio.</p> <p>'True Drive Emulation' required with disks!</p> </li> <li> <p>Warp Boost [vice_warp_boost] (disabled|enabled)</p> <p>Make warp mode much faster by changing SID emulation to 'FastSID' while warping.</p> </li> <li> <p>Autostart [vice_autostart] (disabled|enabled|warp)</p> <p>'ON' always runs content, 'OFF' runs only PRG/CRT, 'Warp' turns warp mode on during autostart loading.</p> </li> <li> <p>True Drive Emulation [vice_drive_true_emulation] (disabled|enabled)</p> <p>Loads much slower, but some games need it.</p> <p>Required for 'JiffyDOS', 'Automatic Load Warp' and LED driver interface!</p> </li> <li> <p>Virtual Device Traps [vice_virtual_device_traps] (disabled|enabled)</p> <p>Required for printer device, but causes loading issues on rare cases.</p> <p>Enabled forcefully by disabling 'True Drive Emulation'.</p> </li> <li> <p>Floppy MultiDrive [vice_floppy_multidrive] (disabled|enabled)</p> <p>Insert each disk in different drives. Can be forced with '(MD)' file path tag. Maximum is 4 disks due to external drive limit! Core restart required.</p> </li> <li> <p>Floppy Write Protection [vice_floppy_write_protection] (disabled|enabled)</p> <p>Set device 8 read only.</p> </li> <li> <p>EasyFlash Write Protection [vice_easyflash_write_protection] (disabled|enabled)</p> <p>Set EasyFlash cartridges read only.</p> </li> <li> <p>Global Work Disk [vice_work_disk] (disabled|8_d64|9_d64|8_d71|9_d71|8_d81|9_d81|8_fs|9_fs)</p> <p>Work disk in device 8 will not be inserted when floppy content is launched.</p> </li> <li> <p>Cartridge [vice_cartridge] (disabled)</p> <p>Cartridge images go in 'system/vice/[corename]'.</p> <p>Changing while running resets the system!</p> </li> </ul>"},{"location":"library/vice/#video-options","title":"Video options","text":"<ul> <li> <p>Show Video Options [vice_video_options_display] (disabled|enabled)</p> <p>Page refresh by menu toggle required!</p> </li> <li> <p>Pixel Aspect Ratio [vice_aspect_ratio] (auto|pal|ntsc|raw)</p> <p>Hotkey toggling disables this option until core restart.</p> </li> <li> <p>Crop [vice_crop] (disabled|small|medium|maximum|auto|auto_disable|manual)</p> <p>Remove borders according to 'Crop Mode'.</p> </li> <li> <p>Automatic Crop Delay [vice_crop_delay] (disabled|enabled)</p> <p>Patient or instant geometry change.</p> </li> <li> <p>Crop Mode [vice_crop_mode] (both|horizontal|vertical|16:9|16:10|4:3|5:4)</p> <p>'Horizontal + Vertical' &amp; 'Maximum' removes borders completely.</p> </li> <li> <p>Manual Crop Top [vice_manual_crop_top] (0-60)</p> </li> <li> <p>Manual Crop Bottom [vice_manual_crop_bottom] (0-60)</p> </li> <li> <p>Manual Crop Left [vice_manual_crop_left] (0-60)</p> </li> <li> <p>Manual Crop Right [vice_manual_crop_right] (0-60)</p> </li> <li> <p>Color Depth [vice_gfx_colors] (16bit|24bit)</p> </li> </ul>"},{"location":"library/vice/#color-palette-options","title":"Color palette options","text":""},{"location":"library/vice/#vic-ii-c64-c128-cbm-ii-5x0","title":"VIC-II (C64, C128, CBM-II 5x0)","text":"<ul> <li> <p>VIC-II Filter [vice_vicii_filter] (disabled|enabled_noblur|enabled_lowblur|enabled_medblur|enabled)</p> <p>PAL emulation filter with custom horizontal blur.</p> </li> <li> <p>VIC-II Filter Oddline Offset [vice_vicii_filter_oddline_offset] (1000|20-2000)</p> <p>PAL emulation filter oddline offset.</p> </li> <li> <p>VIC-II Filter Oddline Phase [vice_vicii_filter_oddline_phase] (1000|20-2000)</p> <p>PAL emulation filter oddline phase. Applies with 'Internal' palette only!</p> </li> <li> <p>VIC-II Color Palette [vice_external_palette] (default|c64hq|c64s|ccs64|cjam|colodore|community-colors|deekay|frodo|godot|lemon64|palette|palette_6569R1_v1r|palette_6569R5_v1r|palette_8565R2_v1r|palette_C64_amber|palette_C64_cyan|palette_C64_green|pc64|pepto-pal|pepto-palold|pepto-ntsc|pepto-ntsc-sony|pixcen|ptoing|rgb|the64|vice)</p> <p>'Colodore' is recommended for the most accurate colors.</p> </li> <li> <p>VIC-II Color Gamma [vice_vicii_color_gamma] (2800|1000-4000)</p> <p>Gamma for the internal palette.</p> </li> <li> <p>VIC-II Color Brightness [vice_vicii_color_brightness] (1000|20-2000)</p> <p>Brightness for the internal palette.</p> </li> <li> <p>VIC-II Color Contrast [vice_vicii_color_contrast] (1000|20-2000)</p> <p>Contrast for the internal palette.</p> </li> <li> <p>VIC-II Color Saturation [vice_vicii_color_saturation] (1000|20-2000)</p> <p>Saturation for the internal palette.</p> </li> <li> <p>VIC-II Color Tint [vice_vicii_color_tint] (1000|20-2000)</p> <p>Tint for the internal palette.</p> </li> </ul>"},{"location":"library/vice/#vic-vic-20","title":"VIC (VIC-20)","text":"<ul> <li> <p>VIC Filter [vice_vic_filter] (disabled|enabled_noblur|enabled_lowblur|enabled_medblur|enabled)</p> <p>PAL emulation filter with custom horizontal blur.</p> </li> <li> <p>VIC Filter Oddline Offset [vice_vic_filter_oddline_offset] (1000|20-2000)</p> <p>PAL emulation filter oddline offset.</p> </li> <li> <p>VIC Filter Oddline Phase [vice_vic_filter_oddline_phase] (1000|20-2000)</p> <p>PAL emulation filter oddline phase. Applies with 'Internal' palette only!</p> </li> <li> <p>VIC Color Palette [vice_vic20_external_palette] (default|colodore_vic|mike-pal|mike-ntsc|palette|vice)</p> <p>'Colodore' is recommended for the most accurate colors.</p> </li> <li> <p>VIC Color Gamma [vice_vic_color_gamma] (2800|1000-4000)</p> <p>Gamma for the internal palette.</p> </li> <li> <p>VIC Color Brightness [vice_vic_color_brightness] (1000|20-2000)</p> <p>Brightness for the internal palette.</p> </li> <li> <p>VIC Color Contrast [vice_vic_color_contrast] (1000|20-2000)</p> <p>Contrast for the internal palette.</p> </li> <li> <p>VIC Color Saturation [vice_vic_color_saturation] (1000|20-2000)</p> <p>Saturation for the internal palette.</p> </li> <li> <p>VIC Color Tint [vice_vic_color_tint] (1000|20-2000)</p> <p>Tint for the internal palette.</p> </li> </ul>"},{"location":"library/vice/#ted-plus4","title":"TED (PLUS/4)","text":"<ul> <li> <p>TED Filter [vice_ted_filter] (disabled|enabled_noblur|enabled_lowblur|enabled_medblur|enabled)</p> <p>PAL emulation filter with custom horizontal blur.</p> </li> <li> <p>TED Filter Oddline Offset [vice_ted_filter_oddline_offset] (1000|20-2000)</p> <p>PAL emulation filter oddline offset.</p> </li> <li> <p>TED Filter Oddline Phase [vice_ted_filter_oddline_phase] (1000|20-2000)</p> <p>PAL emulation filter oddline phase. Applies with 'Internal' palette only!</p> </li> <li> <p>TED Color Palette [vice_plus4_external_palette] (default|colodore_ted|ITU-R_BT601_CRT|ITU-R_BT709_HDTV|ITU-R_BT2020|yape-pal|yape-ntsc)</p> <p>'Colodore' is recommended for the most accurate colors.</p> </li> <li> <p>TED Color Gamma [vice_ted_color_gamma] (2800|1000-4000)</p> <p>Gamma for the internal palette.</p> </li> <li> <p>TED Color Brightness [vice_ted_color_brightness] (1000|20-2000)</p> <p>Brightness for the internal palette.</p> </li> <li> <p>TED Color Contrast [vice_ted_color_contrast] (1000|20-2000)</p> <p>Contrast for the internal palette.</p> </li> <li> <p>TED Color Saturation [vice_ted_color_saturation] (1000|20-2000)</p> <p>Saturation for the internal palette.</p> </li> <li> <p>TED Color Tint [vice_ted_color_tint] (1000|20-2000)</p> <p>Tint for the internal palette.</p> </li> </ul>"},{"location":"library/vice/#crtc-cbm-ii-pet","title":"CRTC (CBM-II, PET)","text":"<ul> <li> <p>CRTC Filter [vice_crtc_filter] (disabled|enabled_noblur|enabled_lowblur|enabled_medblur|enabled)</p> <p>PAL emulation filter with custom horizontal blur.</p> </li> <li> <p>CRTC Color Palette [vice_cbm2_external_palette] (default|green|amber|white)</p> </li> <li> <p>CRTC Color Palette [vice_pet_external_palette] (default|green|amber|white)</p> </li> </ul>"},{"location":"library/vice/#on-screen-display-options","title":"On-Screen Display options","text":"<ul> <li> <p>Virtual KBD Theme [vice_vkbd_theme] (auto|auto_outline|brown|brown_outline|beige|beige_outline|dark|dark_outline|light|light_outline)</p> <p>The keyboard comes up with RetroPad Select by default.</p> </li> <li> <p>Virtual KBD Transparency [vice_vkbd_transparency] (0%|25%|50%|75%|100%)</p> <p>Keyboard transparency can be toggled with RetroPad A.</p> </li> <li> <p>Virtual KBD Dimming [vice_vkbd_dimming] (0%|25%|50%|75%|100%)</p> <p>Dimming level of the surrounding area.</p> </li> <li> <p>Statusbar Mode [vice_statusbar] (bottom|bottom_minimal|bottom_basic|bottom_basic_minimal|top|top_minimal|top_basic|top_basic_minimal)</p> <ul> <li>'Full': Joyports + Current image + LEDs</li> <li>'Basic': Current image + LEDs</li> <li>'Minimal': Track number + FPS hidden</li> </ul> </li> <li> <p>Statusbar Startup [vice_statusbar_startup] (disabled|enabled)</p> <p>Show statusbar on startup.</p> </li> <li> <p>Statusbar Messages [vice_statusbar_messages] (disabled|enabled)</p> <p>Show messages when statusbar is hidden.</p> </li> <li> <p>Light Pen/Gun Pointer Color [vice_joyport_pointer_color] (disabled|black|white|red|green|blue|yellow|purple)</p> <p>Crosshair color for light pens and guns.</p> </li> </ul>"},{"location":"library/vice/#audio-options","title":"Audio options","text":"<ul> <li> <p>Show Audio Options [vice_audio_options_display] (disabled|enabled)</p> <p>Page refresh by menu toggle required!</p> </li> <li> <p>Drive Sound Emulation [vice_drive_sound_emulation] (disabled|5%|10%|15%|20%|25%|30%|35%|40%|45%|50%|55%|60%|65%|70%|75%|80%|85%|90%|95%|100%)</p> <p>'True Drive Emulation' &amp; D64/D71 disk image required.</p> </li> <li> <p>Datasette Sound [vice_datasette_sound] (disabled|5%|10%|15%|20%|25%|30%|35%|40%|45%|50%|55%|60%|65%|70%|75%|80%|85%|90%|95%|100%|-1)</p> <p>TAP tape image required.</p> <p>'-1': 100% + Mute</p> </li> <li> <p>(VIC-II/VIC/TED) Audio Leak Emulation [vice_audio_leak_emulation] (disabled|1|2|3|4|5|6|7|8|9|10)</p> <p>Graphic chip to audio leak emulation.</p> </li> <li> <p>SID Engine [vice_sid_engine] (FastSID|ReSID|ReSID-FP)</p> <p>'ReSID' is accurate, 'ReSID-FP' is more accurate, 'FastSID' is the last resort.</p> </li> <li> <p>SID Model [vice_sid_model] (default|6581|8580|8580RD)</p> <p>C64 has '6581', C64C has '8580'.</p> </li> <li> <p>SID Extra [vice_sid_extra] (disabled|0xd420|0xd500|0xde00|0xdf00)</p> <p>Second SID base address.</p> </li> <li> <p>ReSID Sampling [vice_resid_sampling] (fast|interpolation|fast resampling|resampling)</p> <p>'Resampling' provides best quality. Defaults to 'fast' on low-power systems and x64-core.</p> </li> <li> <p>ReSID Filter Passband [vice_resid_passband] (0|10|20|30|40|50|60|70|80|90)</p> <p>Resampling filter passband in percentage of the total bandwidth.</p> </li> <li> <p>ReSID Filter Gain [vice_resid_gain] (90|91|92|93|94|95|96|97|98|99|100)</p> <p>Filter gain in percent.</p> </li> <li> <p>ReSID Filter 6581 Bias [vice_resid_filterbias] (-5000|-4500|-4000|-3500|-3000|-2500|-2000|-1500|-1000|-500|0|500|1000|1500|2000|2500|3000|3500|4000|4500|5000)</p> <p>Filter bias for 6581, which can be used to adjust DAC bias in millivolts.</p> </li> <li> <p>ReSID Filter 8580 Bias [vice_resid_8580filterbias] (-5000|-4500|-4000|-3500|-3000|-2500|-2000|-1500|-1000|-500|0|500|1000|1500|2000|2500|3000|3500|4000|4500|5000)</p> <p>Filter bias for 8580, which can be used to adjust DAC bias in millivolts.</p> </li> <li> <p>SFX Sound Expander [vice_sfx_sound_expander] (disabled|3526|3812)</p> <p>Sound synthesizer cartridge with 9 voices.</p> </li> <li> <p>Sample Rate [vice_sound_sample_rate] (22050|44100|48000|96000)</p> <p>Sound sample rate in Hz.</p> </li> </ul>"},{"location":"library/vice/#input-options","title":"Input options","text":"<ul> <li> <p>Analog Stick Mouse [vice_analogmouse] (disabled|left|right|both)</p> <p>Override analog stick remappings when non-joysticks are used. 'OFF' controls mouse/paddles with both analogs when remappings are empty.</p> </li> <li> <p>Analog Stick Mouse Deadzone [vice_analogmouse_deadzone] (0|5|10|15|20|25|30|35|40|45|50)</p> <p>Required distance from stick center to register input.</p> </li> <li> <p>Left Analog Stick Mouse Speed [vice_analogmouse_speed] (0.1|0.2|0.3|0.4|0.5|0.6|0.7|0.8|0.9|1.0|1.1|1.2|1.3|1.4|1.5|1.6|1.7|1.8|1.9|2.0|2.1|2.2|2.3|2.4|2.5|2.6|2.7|2.8|2.9|3.0)</p> <p>Mouse speed for left analog stick.</p> </li> <li> <p>Right Analog Stick Mouse Speed [vice_analogmouse_speed_right] (0.1|0.2|0.3|0.4|0.5|0.6|0.7|0.8|0.9|1.0|1.1|1.2|1.3|1.4|1.5|1.6|1.7|1.8|1.9|2.0|2.1|2.2|2.3|2.4|2.5|2.6|2.7|2.8|2.9|3.0)</p> <p>Mouse speed for right analog stick.</p> </li> <li> <p>D-Pad Mouse Speed [vice_dpadmouse_speed] (0|1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18)</p> <p>Mouse speed for directional pad.</p> </li> <li> <p>Mouse Speed [vice_mouse_speed] (10|20|30|40|50|60|70|80|90|100|110|120|130|140|150|160|170|180|190|200|210|220|230|240|250|260|270|280|290|300)</p> <p>Global mouse speed.</p> </li> <li> <p>Keyboard Pass-through [vice_physical_keyboard_pass_through] (disabled|enabled)</p> <p>'ON' passes all physical keyboard events to the core. 'OFF' prevents RetroPad keys from generating keyboard events.</p> </li> <li> <p>Datasette Hotkeys [vice_datasette_hotkeys] (disabled|enabled)</p> <p>Toggle all Datasette hotkeys.</p> </li> <li> <p>Keyrah Keypad Mappings [vice_keyrah_keypad_mappings] (disabled|enabled)</p> <p>Hardcoded keypad to joyport mappings for Keyrah hardware.</p> </li> <li> <p>Keyboard Keymap [vice_keyboard_keymap] (positional|symbolic|positional-user|symbolic-user)</p> <p>User-defined keymaps go in <code>system/vice/[corename]</code>. - Positional: <code>sdl_pos.vkm</code> - Symbolic: <code>sdl_sym.vkm</code></p> </li> <li> <p>Turbo Fire [vice_turbo_fire] (disabled|enabled)</p> <p>Hotkey toggling disables this option until core restart.</p> </li> <li> <p>Turbo Button [vice_turbo_fire_button] (B|A|Y|X|L|R|L2|R2)</p> <p>Replace the mapped button with turbo fire button.</p> </li> <li> <p>Turbo Pulse [vice_turbo_pulse] (2|4|6|8|10|12)</p> <p>Frames in a button cycle.</p> </li> <li> <p>Userport Joystick Adapter [vice_userport_joytype] (disabled|CGA|HIT|Kingsoft|Starbyte|Hummer|OEM|PET)</p> <p>Required for more than 2 joysticks, for example IK+ Gold with 3 players.</p> </li> <li> <p>Joystick Port [vice_joyport] (1|2)</p> <p>Most games use port 2, some use port 1. Filename forcing or hotkey toggling disables this option until core restart.</p> </li> <li> <p>Joystick Port Type [vice_joyport_type] (1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16)</p> Value Label 1 Joystick 2 Paddles 3 Mouse (1351) 4 Mouse (NEOS) 5 Mouse (Amiga) 6 Trackball (Atari CX-22) 7 Mouse (Atari ST) 8 Mouse (SmartMouse) 9 Mouse (Micromys) 10 Koalapad 11 Light Pen (Up trigger) 12 Light Pen (Left trigger) 13 Light Pen (Datel) 16 Light Pen (Inkwell) 14 Light Gun (Magnum Light Phaser) 15 Light Gun (Stack Light Rifle) </li> <li> <p>RetroPad Face Button Options [vice_retropad_options] (disabled|jump|rotate|rotate_jump)</p> <p>Rotate face buttons clockwise and/or make 2<sup>nd</sup> fire press up.</p> Value Label disabled B = Fire, A = 2<sup>nd</sup> fire jump B = Fire, A = Up rotate Y = Fire, B = 2<sup>nd</sup> fire rotate_jump Y = Fire, B = Up </li> <li> <p>Show Mapping Options [vice_mapping_options_display] (disabled|enabled)</p> <p>Page refresh by menu toggle required!</p> </li> <li> <p>Toggle Virtual Keyboard [vice_mapper_vkbd] (---)</p> </li> <li> <p>Toggle Statusbar [vice_mapper_statusbar] (RETROK_F12)</p> </li> <li> <p>Switch Joyport [vice_mapper_joyport_switch] (RETROK_RCTRL)</p> </li> <li> <p>Toggle Turbo Fire [vice_mapper_turbo_fire_toggle] (---)</p> </li> <li> <p>Toggle Save Disk [vice_mapper_save_disk_toggle] (---)</p> </li> <li> <p>Toggle Aspect Ratio [vice_mapper_aspect_ratio_toggle] (---)</p> </li> <li> <p>Toggle Crop [vice_mapper_crop_toggle] (---)</p> </li> <li> <p>Toggle Datasette Hotkeys [vice_mapper_datasette_toggle_hotkeys] (---)</p> </li> <li> <p>Datasette PLAY [vice_mapper_datasette_start] (RETROK_UP)</p> </li> <li> <p>Datasette STOP [vice_mapper_datasette_stop] (RETROK_DOWN)</p> </li> <li> <p>Datasette REWIND [vice_mapper_datasette_rewind] (RETROK_LEFT)</p> </li> <li> <p>Datasette F.FWD [vice_mapper_datasette_forward] (RETROK_RIGHT)</p> </li> <li> <p>Datasette RESET [vice_mapper_datasette_reset] (---)</p> </li> <li> <p>Reset [vice_mapper_reset] (RETROK_END)</p> </li> <li> <p>Hold Warp Mode [vice_mapper_warp_mode] (---)</p> </li> <li> <p>RetroPad Up [vice_mapper_up] (---)</p> </li> <li> <p>RetroPad Down [vice_mapper_down] (---)</p> </li> <li> <p>RetroPad Left [vice_mapper_left] (---)</p> </li> <li> <p>RetroPad Right [vice_mapper_right] (---)</p> </li> <li> <p>RetroPad A [vice_mapper_a] (---)</p> </li> <li> <p>RetroPad B [vice_mapper_b] (---)</p> </li> <li> <p>RetroPad X [vice_mapper_x] (RETROK_SPACE)</p> </li> <li> <p>RetroPad Y [vice_mapper_y] (---)</p> </li> <li> <p>RetroPad Select [vice_mapper_select] (TOGGLE_VKBD)</p> </li> <li> <p>RetroPad Start [vice_mapper_start] (---)</p> </li> <li> <p>RetroPad L [vice_mapper_l] (---)</p> </li> <li> <p>RetroPad R [vice_mapper_r] (---)</p> </li> <li> <p>RetroPad L2 [vice_mapper_l2] (RETROK_ESCAPE)</p> </li> <li> <p>RetroPad R2 [vice_mapper_r2] (RETROK_RETURN)</p> </li> <li> <p>RetroPad L3 [vice_mapper_l3] (---)</p> </li> <li> <p>RetroPad R3 [vice_mapper_r3] (---)</p> </li> <li> <p>RetroPad Left Analog Up [vice_mapper_lu] (---)</p> </li> <li> <p>RetroPad Left Analog Down [vice_mapper_ld] (---)</p> </li> <li> <p>RetroPad Left Analog Left [vice_mapper_ll] (---)</p> </li> <li> <p>RetroPad Left Analog Right [vice_mapper_lr] (---)</p> </li> <li> <p>RetroPad Right Analog Up [vice_mapper_ru] (---)</p> </li> <li> <p>RetroPad Right Analog Down [vice_mapper_rd] (---)</p> </li> <li> <p>RetroPad Right Analog Left [vice_mapper_rl] (---)</p> </li> <li> <p>RetroPad Right Analog Right [vice_mapper_rr] (---)</p> </li> </ul>"},{"location":"library/vice/#controllers","title":"Controllers","text":"<p>The VICE cores support the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/vice/#user-1-5-device-types","title":"User 1 - 5 device types","text":"<ul> <li>None - Input disabled.</li> <li>RetroPad - Joypad - Standard one fire button joystick + customizable buttons with keyboard keys and hotkeys.</li> <li>Joystick - Joypad - Standard one fire button joystick.</li> <li>Keyboard - Keyboard - Keyboard input are always active. Has keymapper support.</li> </ul>"},{"location":"library/vice/#other-controllers","title":"Other controllers","text":"<ul> <li>Mouse - Paddles and mice, enabled only when 'RetroPad Port Type' has a non-joystick selected.</li> </ul>"},{"location":"library/vice/#controller-tables","title":"Controller tables","text":""},{"location":"library/vice/#joypad","title":"Joypad","text":"Input descriptors for Retropad RetroPad Inputs D-Pad Up D-Pad Down D-Pad Left D-Pad Right B / Fire A Y X Select Start L R L2 R2 L3 R3 Left Analog X  X Left Analog Y  Y Right Analog X  X Right Analog Y  Y Input descriptors for Joystick RetroPad Inputs D-Pad Up D-Pad Down D-Pad Left D-Pad Right B / Fire"},{"location":"library/vice/#keyboard","title":"Keyboard","text":"<p>English positional layout</p> RetroKeyboard Special Inputs Commodore Keyboard Backquote Left arrow Keyboard Tab CTRL Keyboard Escape RUN/STOP Keyboard Left Control C= (Commodore) Keyboard Backspace DEL Keyboard Page Up RESTORE Keyboard Home CLR/HOME Keyboard Left Bracket @ Keyboard Right bracket * Keyboard Insert \u00a3 Keyboard Delete Up arrow / Pi Keyboard Backslash ="},{"location":"library/vice/#external-links","title":"External Links","text":"<ul> <li>Official VICE Website</li> <li>Libretro VICE Github repository</li> <li>Report Libretro VICE core issues here</li> <li>Vice x64sc, accurate Gameplay Videos</li> <li>Gameplay Videos</li> </ul>"},{"location":"library/video_processor/","title":"Video Processor","text":""},{"location":"library/video_processor/#background","title":"Background","text":"<p>Libretro core for V4L2 capture devices</p> <p>The basic idea is this -- plug your legacy console into a capture device and use RetroArch to upscale it and apply shaders to taste.</p>"},{"location":"library/video_processor/#how-to-start-the-video-processor-core","title":"How to start the Video Processor core:","text":"<ul> <li>To start the Video Processor core, go to RetroArch's main menu screen. Select 'Load Core', then 'Start Video Processor'.</li> </ul> <p>The content should now start running!</p>"},{"location":"library/video_processor/#authorlicense","title":"Author/License","text":"<p>The Video Processor core has been authored by</p> <ul> <li>Jared McNeill</li> </ul> <p>The Video Processor core is licensed under</p> <ul> <li>BSD-2-Clause</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/video_processor/#features","title":"Features","text":"<p>Frontend-level settings or features that the Video Processor core respects.</p> Feature Supported Restart - Screenshots - Saves - States - Rewind - Netplay - Core Options - Memory Monitoring (achievements) - RetroArch Cheats - Native Cheats - Controls - Remapping - Multi-Mouse - Rumble - Sensors - Camera - Location - Subsystem - Softpatching - Disk Control - Username - Language - Crop Overscan - LEDs -"},{"location":"library/video_processor/#directories","title":"Directories","text":"<p>The Video Processor core's internal core name is 'V4L2'</p>"},{"location":"library/video_processor/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The Video Processor core's core provided FPS is (FPS)</li> <li>The Video Processor core's core provided sample rate is 48000 Hz</li> <li>The Video Processor core's core provided aspect ratio is (Ratio)</li> </ul>"},{"location":"library/video_processor/#usage","title":"Usage","text":"<p>Awaiting description</p>"},{"location":"library/video_processor/#controllers","title":"Controllers","text":"<p>The Video Processor core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/video_processor/#user-device-types","title":"User # - # device types","text":"<p>Awaiting description.</p>"},{"location":"library/video_processor/#joypad","title":"Joypad","text":"<p>Awaiting description.</p>"},{"location":"library/video_processor/#external-links","title":"External Links","text":"<ul> <li>Libretro Video Processor Github Repository</li> <li>Report Libretro Video Processor Core Issues Here</li> </ul>"},{"location":"library/vircon32/","title":"Vircon32","text":""},{"location":"library/vircon32/#background","title":"Background","text":"<p>Vircon32 is a virtual game console, inspired by classic 16 &amp; 32 bit systems as well as the arcade era.</p> <p>The Vircon32 core has been authored by</p> <ul> <li>Carra</li> </ul> <p>The Vircon32 core is licensed under</p> <ul> <li>3-clause BSD</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/vircon32/#requirements","title":"Requirements","text":"<ul> <li>OpenGL 3.0 or Open GL ES 2.0 or higher for the OpenGL renderer.</li> </ul>"},{"location":"library/vircon32/#bios","title":"BIOS","text":"<p>The Vircon32 core already contains the Vircon32 Standard BIOS. But you can optionally use a different BIOS file by placing it in the frontend's system directory, with name Vircon32Bios.v32.</p> <p>The core will first check if an alternative BIOS file is present and if so, use it. Otherwise it will default to its embedded standard BIOS.</p> Filename Description Vircon32Bios.v32 Optional alternative Vircon32 BIOS file"},{"location":"library/vircon32/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the Vircon32 core have the following file extensions:</p> <ul> <li>.v32</li> <li>.V32</li> </ul> <p>RetroArch database that are associated with the Vircon32 core:</p> <ul> <li>Vircon32</li> </ul>"},{"location":"library/vircon32/#features","title":"Features","text":"<p>Frontend-level settings or features that the Vircon32 core respects.</p> Feature Supported Restart \u2714 Saves \u2715 States \u2714 Rewind \u2714 Netplay \u2715 Core Options \u2714 Memory Monitoring (achievements) \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching - Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/vircon32/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The Vircon32 core's core provided FPS is 60.</li> <li>The Vircon32 core's core provided sample rate is 44100.</li> <li>The Vircon32 core's base width is 640.</li> <li>The Vircon32 core's base height is 360.</li> <li>The Vircon32 core's max width is 640.</li> <li>The Vircon32 core's max height is 360.</li> <li>The Vircon32 core's core provided aspect ratio is 16/9.</li> </ul>"},{"location":"library/vircon32/#user-1-4-device-types","title":"User 1 - 4 device types","text":"<p>The Vircon32 core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p> <ul> <li>None</li> <li>Vircon32 gamepad</li> </ul>"},{"location":"library/vircon32/#joypad","title":"Joypad","text":"RetroPad Inputs Vircon32 inputs Button Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right Button X Button Y Button A Button B Button L Button R"},{"location":"library/vircon32/#external-links","title":"External Links","text":"<ul> <li>Official Website</li> <li>Libretro Vircon32 Core repository</li> <li>Libretro Vircon32 Core info file</li> <li>Report Libretro Vircon32 Core issues here</li> <li>Vircon32 games</li> <li>Vircon32 test roms</li> </ul>"},{"location":"library/virtual_jaguar/","title":"Atari - Jaguar (Virtual Jaguar)","text":""},{"location":"library/virtual_jaguar/#background","title":"Background","text":"<p>Virtual Jaguar is a portable Jaguar emulator which is based on the source code of what used to be Potato Emulation.</p>"},{"location":"library/virtual_jaguar/#authorlicense","title":"Author/License","text":"<p>The Virtual Jaguar core has been authored by</p> <ul> <li>David Raingeard</li> <li>Shamus</li> </ul> <p>The Virtual Jaguar core is licensed under</p> <ul> <li>GPLv3</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/virtual_jaguar/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the Virtual Jaguar core have the following file extensions:</p> <ul> <li>.j64</li> <li>.jag</li> <li>.rom</li> <li>.abs</li> <li>.cof</li> <li>.bin</li> <li>.prg</li> </ul>"},{"location":"library/virtual_jaguar/#databases","title":"Databases","text":"<p>RetroArch database(s) that are associated with the Virtual Jaguar core:</p> <ul> <li>Atari - Jaguar</li> </ul>"},{"location":"library/virtual_jaguar/#features","title":"Features","text":"<p>Frontend-level settings or features that the Virtual Jaguar core respects.</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2714 Memory Monitoring (achievements) \u2714 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/virtual_jaguar/#directories","title":"Directories","text":"<p>The Virtual Jaguar core's internal core name is 'Virtual Jaguar'</p> <p>The Virtual Jaguar core saves/loads to/from these directories.</p> <p>Frontend's Save directory</p> File Description *.srm Cartridge EEPROM save *.cdrom.srm CD-ROM EEPROM save <p>Note: When performing an in-game save, the Virtual Jaguar core creates both a Cartridge EEPROM save file and a CD-ROM EEPROM save file, regardless of the game type.</p>"},{"location":"library/virtual_jaguar/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The Virtual Jaguar core's core provided FPS is 50 for PAL games and 60 for NTSC games.</li> <li>The Virtual Jaguar core's core provided sample rate is 48000 Hz</li> <li>The Virtual Jaguar core's core provided aspect ratio is 4/3</li> </ul>"},{"location":"library/virtual_jaguar/#core-options","title":"Core options","text":"<p>The Virtual Jaguar core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded.</p> <p>Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch.</p> <ul> <li> <p>Fast Blitter [virtualjaguar_usefastblitter] (disabled|enabled)</p> <p>This option will force Virtual Jaguar to use the older, less compatible yet faster blitter. Some games will not work properly with this option on.</p> </li> <li> <p>Doom Res Hack [virtualjaguar_doom_res_hack] (disabled|enabled)</p> <p>A hack that needs to be enabled for Doom to run at its correct resolution.</p> </li> </ul> Doom Res Hack - Disabled <p></p> Doom Res Hack - Enabled <p></p> <ul> <li> <p>Bios [virtualjaguar_bios] (disabled|enabled)</p> <p>Enables BIOS loading sequence.</p> </li> </ul> Bios - Enabled <p></p> <ul> <li> <p>Pal (Restart) [virtualjaguar_pal] (disabled|enabled)</p> <p>NTSC to PAL switch. Setting this to on switches to PAL mode.</p> </li> </ul>"},{"location":"library/virtual_jaguar/#controllers","title":"Controllers","text":"<p>The Virtual Jaguar core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/virtual_jaguar/#user-1-2-device-types","title":"User 1 - 2 device types","text":"<ul> <li>None - Doesn't disable input. There's no reason to switch to this.</li> <li>RetroPad - Joypad - Stay on this.</li> <li>RetroPad w/Analog - Joypad - Same as RetroPad. There's no reason to switch to this.</li> </ul>"},{"location":"library/virtual_jaguar/#controller-tables","title":"Controller tables","text":""},{"location":"library/virtual_jaguar/#joypad","title":"Joypad","text":"User 1 - 2 Remap descriptors RetroPad Inputs B C Pause Option D-Pad Up D-Pad Down D-Pad Left D-Pad Right A Numpad 0 Numpad 1 Numpad 2 Numpad 3 Numpad 4 Numpad 5 Numpad 6"},{"location":"library/virtual_jaguar/#keyboard","title":"Keyboard","text":"User 1 Joypad Descriptors Keyboard Inputs Numpad 0 0 Numpad 1 1 Numpad 2 2 Numpad 3 3 Numpad 4 4 Numpad 5 5 Numpad 6 6 Numpad 7 7 Numpad 8 8 Numpad 9 9 Numpad * - Numpad # = ## Compatibility <p>A reference compatibility table can be found on the bottom of this page</p> Game Issue Cybermorph Graphics glitches. (1) Doom Enable Doom core option hack for proper graphics pitch. Iron Soldier Hangs after selecting a stage. Iron Soldier 2 Hangs after selecting a stage. Audio glitches. Kasumi Ninja Graphics glitches. Missing background layers (2) Ruiner Pinball Doesn't boot. Super Burnout Hangs after selecting a track. Towers II Heavy flickering. Wolfenstein 3D ROM version doesn't boot, J64 version does. (1) <p></p> (2) <p></p>"},{"location":"library/virtual_jaguar/#external-links","title":"External Links","text":"<ul> <li>Official Virtual Jaguar Website</li> <li>Official Virtual Jaguar Git Repository</li> <li>Libretro Virtual Jaguar Core info file</li> <li>Libretro Virtual Jaguar Github Repository</li> <li>Report Libretro Virtual Jaguar Core Issues Here</li> </ul>"},{"location":"library/virtualxt/","title":"[VirtualXT]","text":""},{"location":"library/virtualxt/#background","title":"Background","text":"<p>VirtualXT is a Turbo PC/XT emulator that runs on modern hardware and operating systems. It is designed to be simple and lightweight yet still capable enough to run a large library of old application and games.</p> <p>The VirtualXT core has been authored by</p> <ul> <li>[Andreas T Jonsson]</li> </ul> <p>The VirtualXT core is licensed under</p> <ul> <li>zlib</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/virtualxt/#how-to-start-the-virtualxt-core","title":"How to start the VirtualXT core:","text":"<p>The core has no external dependacies. You only need to load the .so/dll file and preferably install the .info file and you are good to go.</p> <p>The default system emulated is a XT class machine with an Intel 8088 CPU. This means that most DOS games form the 90's wont run. VirtualXT is intended to run older CGA games and applications from the 80's, like PC booters. There is also optional support for 80186 CPU's and VGA adapters if you want to try some more \"modern\" software.</p>"},{"location":"library/virtualxt/#bios","title":"BIOS","text":"<p>There is an option to use GLaBIOS or TurboXT BIOS 3.1. Both are included in the core.</p>"},{"location":"library/virtualxt/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the VirtualXT core have the following file extensions:</p> <ul> <li>.img</li> <li>.exe</li> <li>.com</li> <li>.ini</li> </ul>"},{"location":"library/virtualxt/#features","title":"Features","text":"<p>Frontend-level settings or features that the VirtualXT core respects.</p> Feature Supported Restart \u2714 Saves \u2715 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2714 Memory Monitoring (achievements) \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping - Multi-Mouse - Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2714 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2714"},{"location":"library/virtualxt/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The VirtualXT core's core provided FPS is 60.</li> <li>The VirtualXT core's core provided sample rate is 44100.</li> <li>The VirtualXT core's base width is 640.</li> <li>The VirtualXT core's base height is 200.</li> <li>The VirtualXT core's max width is 720.</li> <li>The VirtualXT core's max height is 350.</li> <li>The VirtualXT core's core provided aspect ratio is 4/3.</li> </ul>"},{"location":"library/virtualxt/#core-options","title":"Core options","text":"<p>The VirtualXT core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded.</p> <p>Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch.</p> <ul> <li> <p>Reset default disk (Restart) [virtualxt_reset_default_disk] (true|false)</p> <p>The default disk image will be reverted to it's original state upon boot.</p> </li> <li> <p>Boot priority (Restart) [virtualxt_boot_priority] (FD|HD)</p> <p>Set preferred boot device.</p> </li> <li> <p>Video standard (Restart) [virtualxt_video] (CGA|VGA)</p> <p>Selects default video adapter.</p> </li> <li> <p>CPU Frequency [virtualxt_cpu_frequency] (4.77MHz|7.15MHz|14.3MHz)</p> <p>Set the CPU frequency. If this is set to a higher value then the host system can emulate the time will appear to go slower in the guest environment.</p> </li> <li> <p>186 instructions (Restart) [virtualxt_186] (true|false)</p> <p>Enable emulation of 186 instruction.</p> </li> <li> <p>286 flag register (Restart) [virtualxt_flag_286] (true|false)</p> <p>Pull the high nibble of the flag register low. This will trick most software that a 286 CPU is installed.</p> </li> <li> <p>EMS memory (Restart) [virtualxt_ems] (true|false)</p> <p>Emulate the Lo-tech EMS Board.</p> </li> <li> <p>BIOS (Restart) [virtualxt_bios] (GLaBIOS 0.2.6|TurboXT 3.1)</p> <p>Select system BIOS.</p> </li> <li> <p>RTC type (Restart) [virtualxt_rtc] (GLaTICK 0.8.4|none)</p> <p>Enable RTC and BIOS extension. (This is not supported in freestanding builds.)</p> </li> <li> <p>Host RIFS2 (Restart) [virtualxt_rifs] (true|false)</p> <p>Enable direct file share with host system. (Defaults to Z:)</p> </li> </ul>"},{"location":"library/virtualxt/#device-types","title":"Device types","text":"<p>The VirtualXT core supports the following device type(s), bolded device type(s) are required:</p> <ul> <li>Keyboard - Keyboard</li> <li>Mouse</li> </ul>"},{"location":"library/virtualxt/#compatibility","title":"Compatibility","text":"<p>This core emulates a Intel 8088 CPU running at 4.77 Mhz just like the original IBM 5150/5160. This is quite a slow system and the original 8088 only operates in real-mode. This means that no protected-mode or 32 bit applications will run.</p> <p>Try software released in the 80's, like classic PC booters.</p>"},{"location":"library/virtualxt/#external-links","title":"External Links","text":"<ul> <li>VirtualXT Homepage</li> <li>VirtualXT Repository</li> <li>VirtualXT Issues Here</li> </ul>"},{"location":"library/wasm-4/","title":"WebAssembly (WASM-4)","text":""},{"location":"library/wasm-4/#background","title":"Background","text":"<p>WASM-4 is a low-level fantasy game console for building small games with WebAssembly. Game cartridges (ROMs) are small, self-contained .wasm files that can be built with any programming language that compiles to WebAssembly.</p> <p>The WASM-4 core have been authored by</p> <ul> <li>aduros (Bruno Garcia)</li> </ul> <p>The WASM-4 core is licensed under</p> <ul> <li>ISC</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p> <ul> <li>No Glue Code: If you've ever tried to write even a simple \"Hello World\" with WebAssembly before, you'll know it usually involves writing a bunch of JS and HTML glue. WASM-4 removes all of that, games interface directly with the system through a small API.</li> <li>Minimalist: Fantasy consoles force developers to work with limited resources. This makes them simple to learn, and easier to focus on finishing your game.</li> <li>Language Agnostic: Use any programming language, as long as it can compile to WebAssembly. Out of the box we currently support: AssemblyScript, C/C++, Rust, Go, D, Nim, Odin, Zig.</li> <li>Portable: WASM-4 is designed to run on any device that can execute WebAssembly, even outside of the web! We're planning a lightweight implementation written in C that will run even on a potato.</li> </ul>"},{"location":"library/wasm-4/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the WASM-4 core have the following file extensions:</p> <ul> <li>.wasm</li> </ul>"},{"location":"library/wasm-4/#databases","title":"Databases","text":"<p>RetroArch database(s) that are associated with the WASM-4 core:</p> <ul> <li>WASM-4</li> </ul>"},{"location":"library/wasm-4/#bios","title":"BIOS","text":"<p>WASM-4 does not require BIOS (bootrom) files to work.</p>"},{"location":"library/wasm-4/#features","title":"Features","text":"Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2714 Netplay \u2714 Core Options \u2715 Memory Monitoring (achievements) \u2715 RetroArch Cheats \u2715 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Crop Overscan (in RetroArch's Video settings) \u2715"},{"location":"library/wasm-4/#directories","title":"Directories","text":"<p>The WASM-4 core's doesn't create any directory.</p>"},{"location":"library/wasm-4/#core-provided-aspect-ratio","title":"Core provided aspect ratio","text":"<p>WASM-4's core provided aspect ratio is 1/1.</p>"},{"location":"library/wasm-4/#core-options","title":"Core options","text":"<p>The WASM-4 core's doesn't have any Core Options.</p>"},{"location":"library/wasm-4/#controllers","title":"Controllers","text":""},{"location":"library/wasm-4/#device-types","title":"Device types","text":"<p>The WASM-4 core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/wasm-4/#user-1-1-device-types","title":"User 1 - 1 device types","text":"<ul> <li>None - Input disabled.</li> <li>RetroPad - Joypad</li> <li>RetroPad w/Analog - Joypad - There is no reason to switch to this.</li> </ul>"},{"location":"library/wasm-4/#controller-tables","title":"Controller tables","text":""},{"location":"library/wasm-4/#joypad-and-analog-device-type-table","title":"Joypad and analog device type table","text":"RetroPad Inputs User 1 - 5 input descriptors Z X D-Pad Up D-Pad Down D-Pad Left D-Pad Right"},{"location":"library/wasm-4/#external-links","title":"External Links","text":"<ul> <li>Libretro WASM-4 Core info file</li> <li>Libretro WASM-4 Github Repository</li> <li>Report WASM-4 Core Issues Here</li> </ul>"},{"location":"library/xrick/","title":"Rick Dangerous (XRick)","text":""},{"location":"library/xrick/#background","title":"Background","text":"<p>XRick is an open source implementation of the game \"Rick Dangerous\". Rick Dangerous is a platform game developed by Core Design for the Acorn Archimedes, Amiga, Atari ST, Amstrad CPC, ZX Spectrum, Commodore 64, and MS-DOS. The game was released in 1989 and published by MicroProse on the Firebird Software label in the UK, and on the MicroPlay label in America. It was also published in Spain by Erbe Software. Later, it was released with two other games, Stunt Car Racer and MicroProse Soccer, on the Commodore 64 Powerplay 64 cartridge. The game was followed by a sequel, Rick Dangerous 2, in 1990. Loosely based on the Indiana Jones film franchise, the game received mixed reviews from critics. This libretro core is based on BigOrno's work.</p> <p>The XRick core have been authored by</p> <ul> <li>fabiensanglard</li> <li>r-type</li> <li>phcoder</li> </ul> <p>The XRick core is licensed under</p> <ul> <li>GPLv3</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/xrick/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the XRick core have the following file extensions:</p> <ul> <li>.zip</li> </ul>"},{"location":"library/xrick/#databases","title":"Databases","text":"<p>RetroArch database(s) that are associated with the XRick core:</p> <ul> <li>Rick Dangerous</li> </ul>"},{"location":"library/xrick/#bios","title":"BIOS","text":"<p>Required or optional firmware files go in the frontend's system directory.</p> Filename Description md5sum xrick/data.zip Audio and visual files required for Core to work. A471E64E9F69AFBE59C10CC94ED1B184"},{"location":"library/xrick/#features","title":"Features","text":"<p>Frontend-level settings or features that the XRick core respects.</p> Feature Supported Restart \u2715 Screenshots \u2714 Saves \u2715 States \u2715 Rewind \u2715 Netplay \u2715 Core Options \u2714 Memory Monitoring (achievements) \u2715 RetroArch Cheats \u2715 Native Cheats \u2714 Controls \u2714 Remapping \u2715 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2715 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/xrick/#directories","title":"Directories","text":"<p>The XRick core's internal core name is 'xrick'.</p>"},{"location":"library/xrick/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The XRick core's core provided FPS is 25.</li> <li>The XRick core's core provided sample rate is 22050.0 Hz.</li> <li>The XRick core's core provided aspect ratio is 4/3.</li> <li>The XRick core's base width is 801.</li> <li>The XRick core's base height is 600.</li> </ul>"},{"location":"library/xrick/#core-options","title":"Core Options","text":"<p>The Mesen core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded.</p> <ul> <li> <p>Crop Border [xrick_crop_borders] (ON|OFF)     Remove the 32 pixels of empty padding either side of the game screen. Note: Cheat mode indicators will only be shown if cropping is disabled.</p> </li> <li> <p>Cheats     Configure internal trainer/cheat modes provided by the game engine.</p> <ul> <li>Trainer Mode [xrick_cheat1] (OFF|ON)     Always have 6 bullets, 6 dynamite stick, 6 lives.</li> <li>Invulnerability Mode [xrick_cheat2] (OFF|ON)     Nothing can kill Rick. Use with care. May break the game.</li> <li>Expose Mode [xrick_cheat3] (OFF|ON)     Highlight all entities on the game map. </li> </ul> </li> </ul>"},{"location":"library/xrick/#controllers","title":"Controllers","text":"<p>The XRick core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/xrick/#user-1-device-types","title":"User 1 device types","text":"<ul> <li>None - Doesn't disable input. There's no reason to switch to this.</li> <li>RetroPad - Joypad - Stay on this.</li> <li>RetroPad w/Analog - Joypad - Same as RetroPad. There's no reason to switch to this.</li> </ul>"},{"location":"library/xrick/#controller-tables","title":"Controller tables","text":""},{"location":"library/xrick/#joypad","title":"Joypad","text":"RetroPad Inputs XRick core inputs Jump Crouch Left Right Attack <p>Supported combinations</p> <ul> <li>Attack + Left = Stab left using your bayonet</li> <li>Attack + Right = Stab right using your bayonet</li> <li>Attack + Up = Shoot</li> <li>Attack + Down = Drop a bomb</li> </ul>"},{"location":"library/xrick/#external-links","title":"External Links","text":"<ul> <li>Official XRick Website</li> <li>Libretro XRick Core info file</li> <li>Libretro XRick Github Repository</li> <li>Report Libretro XRick Core Issues Here</li> </ul>"},{"location":"library/yabasanshiro/","title":"Sega - Saturn (Yabause)","text":""},{"location":"library/yabasanshiro/#background","title":"Background","text":"<p>YabaSanshiro is a fork of Yabause. It requires OpenGL 3.3 or OpenGL ES 3.0.</p> <p>This core is outdated, known for having many issues, and unmaintained</p> <p>Use it at your own risk, it is recommended you use one of the other Sega Saturn cores if possible.</p>"},{"location":"library/yabasanshiro/#authorlicense","title":"Author/License","text":"<p>The YabaSanshiro core has been authored by</p> <ul> <li>Guillaume Duhammel</li> <li>Theo Berkau</li> <li>Anders Montonen</li> <li>devmiyax</li> </ul> <p>The YabaSanshiro core is licensed under</p> <ul> <li>GPLv2</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/yabasanshiro/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the YabaSanshiro core have the following file extensions:</p> <ul> <li>.cue</li> <li>.iso</li> <li>.ccd</li> <li>.mds</li> <li>.chd</li> <li>.zip</li> </ul>"},{"location":"library/yabasanshiro/#databases","title":"Databases","text":"<p>RetroArch database(s) that are associated with the YabaSanshiro core:</p> <ul> <li>Sega - Saturn</li> </ul>"},{"location":"library/yabasanshiro/#bios","title":"BIOS","text":"<p>Required or optional firmware files go in the frontend's system directory.</p> Filename Description md5sum saturn_bios.bin Saturn BIOS - Optional af5828fdff51384f99b3c4926be27762 <p>This md5sum is just a hint, it is not required, any valid saturn bios should work.</p>"},{"location":"library/yabasanshiro/#saturn","title":"Saturn","text":"<ul> <li>Sega - Saturn (Beetle Saturn)</li> <li>Sega - Saturn/ST-V (Kronos)</li> <li>Sega - Saturn (Yabause)</li> <li>Sega - Saturn (YabaSanshiro)</li> </ul>"},{"location":"library/yabause/","title":"Sega - Saturn (Yabause)","text":""},{"location":"library/yabause/#background","title":"Background","text":"<p>Yabause is a Sega Saturn emulator that is both open-source and written with portability in mind. It is software rendered. Without any update for years it seems upstream is now dead.</p>"},{"location":"library/yabause/#authorlicense","title":"Author/License","text":"<p>The Yabause core has been authored by</p> <ul> <li>Guillaume Duhammel</li> <li>Theo Berkau</li> <li>Anders Montonen</li> </ul> <p>The Yabause core is licensed under</p> <ul> <li>GPLv2</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"library/yabause/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the Yabause core have the following file extensions:</p> <ul> <li>.cue</li> <li>.iso</li> <li>.ccd</li> <li>.mds</li> <li>.chd</li> <li>.zip</li> <li>.m3u</li> </ul>"},{"location":"library/yabause/#databases","title":"Databases","text":"<p>RetroArch database(s) that are associated with the Yabause core:</p> <ul> <li>Sega - Saturn</li> </ul>"},{"location":"library/yabause/#bios","title":"BIOS","text":"<p>Required or optional firmware files go in the frontend's system directory.</p> Filename Description md5sum saturn_bios.bin Saturn BIOS - Optional af5828fdff51384f99b3c4926be27762 <p>This md5sum is just a hint, it is not required, any valid saturn bios should work.</p> <p>Is the bios really optional ?</p> <p>It's highly recommended to install a real bios, the emulated bios is not perfect and has lesser compatibility. Furthermore, due to the nature of \"multi-disc\" games on Sega Saturn (they are independent game discs that will send you back to the bios screen when switching), the bios is required if you intend to load m3u files.</p>"},{"location":"library/yabause/#features","title":"Features","text":"<p>Frontend-level settings or features that the Yabause core respects.</p> Feature Supported Restart \u2714 Screenshots \u2714 Saves \u2714 States \u2714 Rewind \u2715 Netplay \u2715 Core Options \u2714 Memory Monitoring (achievements) \u2714 RetroArch Cheats \u2714 Native Cheats \u2715 Controls \u2714 Remapping \u2714 Multi-Mouse \u2715 Rumble \u2715 Sensors \u2715 Camera \u2715 Location \u2715 Subsystem \u2715 Softpatching \u2715 Disk Control \u2714 Username \u2715 Language \u2715 Crop Overscan \u2715 LEDs \u2715"},{"location":"library/yabause/#directories","title":"Directories","text":"<p>The Yabause core's library name is 'Yabause'</p> <p>The Yabause core saves/loads to/from these directories.</p> <p>Frontend's Save directory</p> <ul> <li>'content-name'.srm (Save)</li> </ul> <p>Frontend's State directory</p> <ul> <li>'content-name'.state# (State)</li> </ul>"},{"location":"library/yabause/#geometry-and-timing","title":"Geometry and timing","text":"<ul> <li>The Yabause core's core provided FPS is 60 for NTSC games and 50 for PAL games</li> <li>The Yabause core's core provided sample rate is 44100 Hz</li> <li>The Yabause core's core provided aspect ratio is 4/3</li> </ul>"},{"location":"library/yabause/#loading-sega-saturn-content","title":"Loading Sega Saturn content","text":"<ul> <li>Yabause is not compatible with cue sheets containing references to audio files with wav/mp3/ogg/flac/ape extensions.</li> <li>Zip files containing cue+bin files can be loaded directly, however the dump will be loaded in RAM (meaning it will use around 700MB of RAM depending on the size of the dump).</li> </ul>"},{"location":"library/yabause/#core-options","title":"Core options","text":"<p>The Yabause core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded.</p> <p>Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch.</p> <ul> <li> <p>Frameskip [yabause_frameskip] (disabled|enabled)</p> <p>Frames are skipped when the CPU is unable to keep up a stable rate.</p> </li> <li> <p>Force HLE BIOS (restart) [yabause_force_hle_bios] (disabled|enabled)</p> <p>HLE BIOS will be used even when a real BIOS file is present.</p> </li> <li> <p>Addon Cartridge (restart) [yabause_addon_cart] (none|1M_ram|4M_ram)</p> <p>Allows switching between the various RAM cartridges released for the system.</p> <p>A list of games that require a cartridge can be found here.</p> </li> <li> <p>6Player Adaptor on Port 1 [yabause_multitap_port1] (disabled|enabled)</p> <p>Enable multitap in port 1.</p> </li> <li> <p>6Player Adaptor on Port 2 [yabause_multitap_port2] (disabled|enabled)</p> <p>Enable multitap in port 2.</p> </li> <li> <p>Number of Threads (restart) [yabause_numthreads] (1|2|4|8|16|32)</p> <p>Adjust the number of threads to an appropriate level for your CPU.</p> </li> </ul>"},{"location":"library/yabause/#controllers","title":"Controllers","text":"<p>The Yabause core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p>"},{"location":"library/yabause/#user-device-types","title":"User device types","text":"<ul> <li>None - Doesn't disable input. There's no reason to switch to this.</li> <li>Saturn Pad - Joypad</li> <li>Saturn 3D Pad - Analog</li> </ul>"},{"location":"library/yabause/#multitap-support","title":"Multitap support","text":"<p>Must be enabled in core options.</p>"},{"location":"library/yabause/#controller-tables","title":"Controller tables","text":""},{"location":"library/yabause/#joypad","title":"Joypad","text":"User 1 - 12 Remap descriptors RetroPad Inputs A X Start D-Pad Up D-Pad Down D-Pad Left D-Pad Right B Y C Z L R Analog X  X Analog Y  Y"},{"location":"library/yabause/#compatibility","title":"Compatibility","text":"<ul> <li>Official Yabause Compatibility List</li> </ul>"},{"location":"library/yabause/#known-issues","title":"Known issues","text":"<ul> <li>Savestates work but can freeze a game</li> <li>Enabling both multitaps at the same time causes some sort of \"autofire\" bug</li> </ul>"},{"location":"library/yabause/#external-links","title":"External Links","text":"<ul> <li>Official Yabause Website</li> <li>Official Yabause Documentation</li> <li>Official Yabause Repository</li> <li>Libretro Yabause Core info file</li> <li>Libretro Yabause Github Repository</li> <li>Report Libretro Yabause Core Issues Here</li> </ul>"},{"location":"library/yabause/#saturn","title":"Saturn","text":"<ul> <li>Sega - Saturn (Beetle Saturn)</li> <li>Sega - Saturn/ST-V (Kronos)</li> <li>Sega - Saturn (Yabause)</li> <li>Sega - Saturn (YabaSanshiro)</li> </ul>"},{"location":"library/compatibility/32x/","title":"Sega 32X Core Compatibility","text":""},{"location":"library/compatibility/32x/#picodrive","title":"PicoDrive","text":"Game Issue Brutal Unleashed \u2013 Above the Claw Softlocks after the first fight. FIFA Soccer \u201996 Glitched main menu text. Knuckles\u2019 Chaotix Glitched graphics on the Player Select screen. NBA Jam Tournament Edition Framerate issues. NFL Quarterback Club Some menu graphics are missing. Virtua Racing Deluxe Blinking line during the SEGA logo screen. World Series Baseball Starring Deion Sanders Crashes when starting a match. WWF Raw Various graphics are missing."},{"location":"library/compatibility/3do/","title":"3DO Core Compatibility","text":""},{"location":"library/compatibility/3do/#opera","title":"Opera","text":"<p>Opera Core Compatibility List</p>"},{"location":"library/compatibility/dc/","title":"Sega Dreamcast Core Compatibility","text":""},{"location":"library/compatibility/dc/#flycast","title":"FlyCast","text":"<p>General FlyCast Issues</p> <ul> <li>The date and time do not seem to get properly saved, as the system will ask you to set the clock every time you start.</li> <li>Once you save to a VMU slot with any game, that VMU becomes inaccessible the next time you load the emulator.</li> <li>Polygon/Alpha sorting issues can make objects appear distorted in regular Flycast core. Use Per-Pixel Alpha sorting if you want complete/accurate emulation instead.</li> <li>When using an Xbox 360 Controller, analog triggers don't work properly. Use the bumpers instead.</li> <li>Changing games without closing and reloading RetroArch often leads to RetroArch crashing.</li> </ul> Game Issue Sonic Adventure (PAL) Must be set to use \"VGA\" output in core options, as \"TV\" mode will cause all subsequent FMV to make RetroArch become unresponsive. The Typing of the Dead (NTSC-J) Must have real BIOS for kanji, hiragana, and katakana to show up since HLE BIOS only has US/ASCII characters."},{"location":"library/compatibility/ds/","title":"Nintendo DS Core Compatibility","text":""},{"location":"library/compatibility/ds/#desmume","title":"DeSmuME","text":"Game Issue Alice in Wonderland Needs JIT Block Size 8 or smaller to get past title screen. Golden Sun: Dark Dawn (Europe) Runs very slowly. Buggy sound. Hotel Dusk: Room 215 Graphics glitches. Unintended \"scanlines\" appear on some screens. Pok\u00e9mon HeartGold (Europe) (Rev 10) Graphics glitches . Black pixels pop-ups in the top screen. Top screen goes black. Pok\u00e9mon SoulSilver (Europe) (Rev 10) Graphics glitches. Black pixels pop-ups in the top screen. Top screen goes black. Puppy Palace (U) / My Puppy Shop (E) Crashes in menus. Rune Factory (U) Random crashes. Rune Factory 2 (U) Random crashes. Ultimate Mortal Kombat 3 Runs very slowly. Yoshi Touch &amp; Go Runs very slowly. Yu-Gi-Oh! 5D's WORLD CHAMPIONSHIP 2010 (J) Random crashes."},{"location":"library/compatibility/gba/","title":"Nintendo Game Boy Advance Core Compatibility","text":"<p>Please notice that when using these cores on RetroArch, only certain cores support libretro save interface, meaning even if you set option \"SaveRAM Autosave Interval\" on settings, some cores will only write down internal save game data when you gracefully close emulation. That might lead to loss of data if you exit RetroArch from your OS app switcher, if it freezes or if shuts down unexpectedly without battery for instance.</p>"},{"location":"library/compatibility/gba/#beetle-gba","title":"Beetle GBA","text":"<p>Does not support SaveRAM Autosave Interval.</p>"},{"location":"library/compatibility/gba/#gpsp","title":"gpSP","text":"<p>Does not support SaveRAM Autosave Interval.</p> Game Issue Activision Anthology Freezes when entering a game. Banjo-Kazooie - Grunty's Revenge Black screen during developer logo. Resets when Banjo leaves his house. Boktai Trilogy The solar sensor is not emulated. DemiKids - Light/Dark Version Crashes when entering a battle. Digimon Racing (Europe) Freezes during the intro. Dragon Ball Z - The Legacy of Goku Graphics glitches. Final Fantasy VI Background/tiling order issues. Golden Sun 1 and 2 Background/tiling order issues (GS1 Carpet on Ship / GS2 Ice shards in cave). Game Boy Advance Video - Dragon Ball GT - Volume 1 White screen. Grand Theft Auto Advance Crashes after first dialog. Works on some platforms. Harry Potter - Quidditch World Cup Crashes when going ingame. Koro Koro Puzzle Happy Panechu! The tilt sensor is not emulated. Mario &amp; Luigi - Superstar Saga Sometimes crashes when entering a battle. Phantasy Star Collection Phantasy Star 1 flickers  - turn on Interframe Blending in core options to fix. R-Type III - The Third Lightning Softlocks at Irem startup screen. Rock 'n Roll Racing Corrupted graphics, not playable. Rockman &amp; Forte Doesn't continue after GBA BIOS screen. Sims 2, The - Pets Graphics glitches. Heavy flickering, black objects. Street Racing Syndicate Crashes at startup screen, after pressing Start (Works in Interpreter Mode in lr-gpsp v1.0.0). Super Monkey Ball Jr. Softlocks at startup screen. Super Street Fighter II Turbo/X Revival Small graphics glitch. Selecting speed 'Turbo 1' and beyond on the character select screen makes the game speed window not fully visible. Tales of Phantasia (USA version) Softlocks during the introduction sequence (just before the small guy hits the tall guy in the right). WarioWare: Twisted! The tilt sensor is not emulated. Wolfenstein 3D Softlocks at id Software startup screen. Yoshi\u2019s Universal Gravitation The tilt sensor is not emulated."},{"location":"library/compatibility/gba/#mgba","title":"mGBA","text":"<p>Supports SaveRAM Autosave Interval.</p>"},{"location":"library/compatibility/gba/#vba-m","title":"VBA-M","text":"<p>Supports SaveRAM Autosave Interval.</p> Game Issue Boktai Trilogy The solar sensor is not emulated Digimon Racing (Europe) Freezes during the intro. This can be avoided by enabling linking in the standalone VBA-M release Koro Koro Puzzle Happy Panechu! The tilt sensor is not emulated Phantasy Star Collection Digital Eclipse logo sound effect is missing. Phantasy Star 1 flickers WarioWare: Twisted! The tilt sensor is not emulated Yoshi\u2019s Universal Gravitation The tilt sensor is not emulated"},{"location":"library/compatibility/gba/#vba-next","title":"VBA Next","text":"<p>Supports SaveRAM Autosave Interval.</p> Game Issue Boktai Trilogy The solar sensor is not emulated. Croket! 2 \u2013 Yami no Bank to Banqueen Heavy slowdown when approaching the snowman in the beginning. Digimon Racing (Europe) Freezes during the intro. This can be avoided by enabling linking in the standalone VBA-M release. Drome Racers Only shows a black screen after the THQ logo. Hamtaro: Ham-Ham Games Locks up if the opening cinematics aren\u2019t skipped. Hot Wheels - Stunt Track Challenge Resets itself when trying to go in-game. Jurassic Park III: Park Builder Unreadable glitched text. Koro Koro Puzzle Happy Panechu! The tilt sensor is not emulated. Moto GP Black screen, loud screeching noise. Sanrio Puroland: All Characters Loads Indefinitely. Very slow. Phantasy Star Collection Digital Eclipse logo sound effect is missing. Phantasy Star 1 flickers. SSX 3 Graphics glitches. Seems pitch-related. Super Mario Advance 2: Super Mario World (Europe) The program crashes during the final fight, when Bowser approaches (zoom mode 7) WarioWare: Twisted! The tilt sensor is not emulated. Yoshi\u2019s Universal Gravitation The tilt sensor is not emulated."},{"location":"library/compatibility/gbc/","title":"Nintendo Game Boy Color Core Compatibility","text":""},{"location":"library/compatibility/gbc/#gambatte","title":"Gambatte","text":"Game Issue Command Master Crashes on start. Unemulated MBC7 mapper. Game Boy Camera Crashes on start. Unemulated Pocket Camera mapper. Game de Hakken!! Tamagotchi - Osutchi to Mesutchi Crashes on start. Unemulated TAMA5 mapper. Kirby Tilt 'n' Tumble Crashes on start. Unemulated MBC7 mapper. Net de Get: Mini-Game @ 100 Crashes on start. Unemulated MBC6 mapper."},{"location":"library/compatibility/jaguar/","title":"Atari Jaguar Core Compatibility","text":""},{"location":"library/compatibility/jaguar/#virtual-jaguar","title":"Virtual Jaguar","text":"<p>A reference compatibility table can be found here https://icculus.org/virtualjaguar/</p> Game Issue Cybermorph Graphics glitches. Doom Enable Doom core option hack for proper graphics pitch. Iron Soldier Hangs after selecting a stage. Iron Soldier 2 Hangs after selecting a stage. Audio glitches. Kasumi Ninja Graphics glitches. Missing background layers Ruiner Pinball Doesn't boot. Super Burnout Hangs after selecting a track. Towers II Heavy flickering. Wolfenstein 3D Doesn't boot."},{"location":"library/compatibility/lynx/","title":"Atari Lynx Core Compatibility","text":""},{"location":"library/compatibility/lynx/#handy","title":"Handy","text":"Game Issue RoadBlasters Graphics glitches. Minor flickering and glitches after starting a race."},{"location":"library/compatibility/lynx/#beetle-lynx","title":"Beetle Lynx","text":"Game Issue RoadBlasters Graphics glitches. Minor flickering and glitches after starting a race."},{"location":"library/compatibility/nes/","title":"Nintendo NES Core Compatibility","text":""},{"location":"library/compatibility/nes/#nestopia","title":"Nestopia","text":"Game Issue Skull &amp; Crossbones Graphical glitches and screen shaking when in 2-player mode. Fixed!"},{"location":"library/compatibility/nes/#fceumm","title":"FCEUmm","text":"Game Issue Skull &amp; Crossbones Graphical glitches and screen shaking when in 2-player mode."},{"location":"library/compatibility/nes/#bnes","title":"bnes","text":"Game Issue Crisis Force Graphical glitches. Huge Insect No enemies spawn. Lagrange Point No music. Ms. Pac-Man (Tengen version) Graphical glitches on the sides of the screen. Skull &amp; Crossbones Crashes on start."},{"location":"library/compatibility/nes/#quicknes","title":"QuickNES","text":"Game Issue Burai Fighter Softlocks when entering a level. Confirmed issue. MMC3 incompatible. Family Circuit '91 Crashes on start. Unsupported Mapper 210. Huge Insect No enemies spawn. Mapper 3 confirmed issue. Unemulated bus conflict handling. Skull &amp; Crossbones Crashes on start. Unsupported Mapper."},{"location":"library/compatibility/pcfx/","title":"NEC PC-FX Core Compatibility","text":""},{"location":"library/compatibility/pcfx/#beetle-pc-fx","title":"Beetle PC-FX","text":"Game Issue Pia Carrot e Youkoso!! (Japan) [T-En by David Michel + filler v1.0] Doesn't boot. Confirmed to work on real hardware."},{"location":"library/compatibility/psx/","title":"PlayStation Core Compatibility","text":""},{"location":"library/compatibility/psx/#beetle-psx","title":"Beetle PSX","text":"<p>A list of known emulation bugs can be found here https://forum.fobby.net/index.php?t=msg&amp;th=1114&amp;start=0&amp;</p>"},{"location":"library/compatibility/psx/#pcsx-rearmed","title":"PCSX ReARMed","text":"Game Issue Jumping Flash 2 Graphics glitches. Geometry issues. Tobal 2 Graphics glitch. Garbled Dream Factory intro sequence. Hot Wheels: Turbo Racing Black screen after intro video"},{"location":"library/compatibility/saturn/","title":"Sega Saturn Core Compatibility","text":""},{"location":"library/compatibility/saturn/#yabause","title":"Yabause","text":"<p>Official Yabause Compatibility List</p>"},{"location":"library/compatibility/saturn/#kronos","title":"Kronos","text":"<p>Official Kronos Compatibility List</p>"},{"location":"library/compatibility/snes/","title":"Nintendo SNES Core Compatibility","text":""},{"location":"library/compatibility/snes/#bsnes-accuracy","title":"bsnes Accuracy","text":"<p>The bsnes Accuracy core fully emulates all SNES games that have ever been officially released.</p> <p>Same with bsnes-mercury Accuracy</p>"},{"location":"library/compatibility/snes/#bsnes-balanced","title":"bsnes Balanced","text":"Game Issue A.S.P. Air Strike Patrol Black lines show up during gameplay. The shadow below the aircraft is missing. <p>Same with bsnes-mercury Balanced</p>"},{"location":"library/compatibility/snes/#bsnes-performance","title":"bsnes Performance","text":"Game Issue A.S.P. Air Strike Patrol Black lines show up during gameplay. The shadow below the aircraft is missing. Funaki Masakatsu Hybrid Wrestler \u2013 Tougi Denshou Corrupted graphics on the Pancrase logo screen. Mecarobot Golf The ground \"wobbles\" during gameplay. Mega Man X2 Only displays a black screen. Mega Man X3 Only displays a black screen. Mortal Kombat II Various glitched graphics. NHL \u201994 Corrupted line on the NHL logo screen. Tetris Attack Lots of flickering on the VS. CPU mode map screen. <p>Same with bsnes-mercury Performance</p>"},{"location":"library/compatibility/snes/#snes9x-2005","title":"Snes9x 2005","text":"Game Issue A.S.P. Air Strike Patrol The shadow below the aircraft is missing. Glitched graphics on the briefing screens. Bass Masters Classic - Pro Edition Only shows a black screen. Funaki Masakatsu Hybrid Wrestler \u2013 Tougi Denshou Corrupted graphics on the Pancrase logo screen. Hayazashi Nidan Morita Shougi 2 Matches won\u2019t start. Madden NFL 96 Only shows a black screen. Masters New \u2013 Harukanaru Augusta 3 Black screen after selecting game. Mecarobot Golf The ground \"wobbles\" during gameplay. Mechwarrior 3050 Black screen after the Activision logo. <p>Same with Snes9x 2005 Plus</p>"},{"location":"library/compatibility/snes/#snes9x-2010","title":"Snes9x 2010","text":"Game Issue A.S.P. Air Strike Patrol The shadow below the aircraft is missing. Glitched graphics on the briefing screens. Bass Masters Classic - Pro Edition Only shows a black screen. Doom Colored dots appear during gameplay. F-1 Grand Prix Glitched HUD display. F1 ROC II \u2013 Race of Champions Crashes when starting a race. Funaki Masakatsu Hybrid Wrestler \u2013 Tougi Denshou Corrupted graphics on the Pancrase logo screen. Hayazashi Nidan Morita Shougi 2 Matches won\u2019t start. Madden NFL 96 Only shows a black screen. Masters New \u2013 Harukanaru Augusta 3 Graphical corruption during gameplay. Mecarobot Golf The ground \"wobbles\" during gameplay. Mechwarrior 3050 Black screen after the Activision logo. Secret of Evermore (PAL) Randomly freezes when the background music changes. Sink or Swim Sometimes the levels are filled with water instantly. Speedy Gonzales: Los Gatos Bandidos Freezes when pressing a switch in the last level. Super Bomberman 3 Freezes after about 20 seconds in the Battle mode menu. Super Bomberman 5 Title screen flickers if the opening cinematic isn\u2019t skipped."},{"location":"library/compatibility/snes/#snes9x","title":"Snes9x","text":"Game Issue A.S.P. Air Strike Patrol The shadow below the aircraft is missing. Glitched graphics on the briefing screens. BS-Zelda MottZilla Patch Only shows a black screen. Doom Colored dots appear during gameplay. Funaki Masakatsu Hybrid Wrestler \u2013 Tougi Denshou Corrupted graphics on the Pancrase logo screen. Hayazashi Nidan Morita Shougi 2 Matches won\u2019t start. Mecarobot Golf The ground \"wobbles\" during gameplay. Secret of Evermore (PAL versions) Randomly freezes when the background music changes."},{"location":"library/compatibility/snes/#higan-accuracy","title":"higan Accuracy","text":"<p>The higan Accuracy core fully emulates all SNES games that have ever been officially released.</p>"},{"location":"library/compatibility/snes/#nside-balanced","title":"nSide Balanced","text":"Game Issue A.S.P. Air Strike Patrol Black lines show up during gameplay. The shadow below the aircraft is missing."},{"location":"library/compatibility/wswan/","title":"Bandai Wonderswan Core Compatibility","text":""},{"location":"library/compatibility/wswan/#beetle-cygne","title":"Beetle Cygne","text":"Game Issue Tonpuusou Title screen announcer voice missing. Softlocks after picking a menu option."},{"location":"meta/core-template/","title":"Core Template","text":"<ul> <li>// THE CORE TEMPLATE DOES NOT NEED TO BE FOLLOWED 100%</li> <li>// DOCUMENT THE CORE IN A WAY THAT FEELS THE EASIEST/MOST EFFICIENT TO YOU</li> </ul>"},{"location":"meta/core-template/#title","title":"[Title]","text":"<ul> <li>// [Title] is the display name entry from the core's info file</li> <li>// https://github.com/libretro/libretro-super/tree/master/dist/info</li> </ul>"},{"location":"meta/core-template/#background","title":"Background","text":"<p>[Background info]</p> <ul> <li>// Add [Background] info for the core here, use google for background info</li> </ul> <p>The [Core name] core has been authored by:</p> <ul> <li> <p>[Author]</p> </li> <li> <p>// Add [Core name]</p> </li> <li>// [Author] is the display name entry from the core's info file</li> <li>// https://github.com/libretro/libretro-super/tree/master/dist/info</li> </ul> <p>The [Core name] core is licensed under:</p> <ul> <li> <p>License</p> </li> <li> <p>// Add [Core name]</p> </li> <li>// Add [License] and (URL), use the core info file, the licenses doc or google for license info</li> <li>// https://github.com/libretro/libretro-super/tree/master/dist/info</li> <li>// https://docs.libretro.com/development/licenses/</li> </ul> <p>A summary of the licenses behind RetroArch and its cores can be found here.</p>"},{"location":"meta/core-template/#requirements","title":"Requirements","text":"<p>[Requirements]</p> <ul> <li>// Add [Requirements] such as hardware or software requirements for the core here</li> </ul>"},{"location":"meta/core-template/#how-to-start-the-core-name-core","title":"How to start the [Core name] core:","text":"<ul> <li> <p>// This section is for cores that need to be started in a special way</p> </li> <li> <p>/// Use this example section for cores that need files from RetroArch's Content Downloader</p> </li> <li> <p>To start the [Core name] core, you need to obtain [Core name]'s data files. You can do this by going to RetroArch's main menu screen and selecting 'Online Updater'. From there, select 'Content Downloader'.</p> </li> <li> <p>// Fill in the [Core name]</p> </li> <li> <p>Select '[Content directory name]', then select '[Game filename]'. This should download and extract this file to RetroArch's Downloads directory.</p> </li> <li> <p>// Fill in the [Content directory name] and the [Game filename]</p> </li> <li> <p>Go back to RetroArch's main menu screen. Select 'Load Content', then 'Downloads'.</p> </li> <li> <p>Select the '[Content directory name]' directory, then select '[Game filename]'.</p> </li> <li> <p>// Fill in the [Content directory name] and the [Game filename]</p> </li> <li> <p>If you are asked which core to select, choose '[Title]'.</p> </li> <li> <p>// Fill in the [Title]</p> </li> </ul> <p>The content should now start running!</p> <ul> <li> <p>/// Use this example section for cores that don't need content to be started</p> </li> <li> <p>To start the [Core name] core, go to RetroArch's main menu screen. Select 'Load Core', then '[Core name]'.</p> </li> <li> <p>// Fill in the [Core name]</p> </li> <li> <p>Now, select 'Start Core'.</p> </li> </ul> <p>The content should now start running!</p>"},{"location":"meta/core-template/#bios","title":"BIOS","text":"<ul> <li>// Add firmware information from the core info file here</li> <li>// https://github.com/libretro/libretro-super/tree/master/dist/info)</li> <li>// For core that don't need BIOS, either say BIOS not required or just not include a BIOS section</li> </ul> <p>Required or optional firmware files go in the frontend's system directory:</p> Filename Description md5sum bios_filename.bin Description - Optional/Required"},{"location":"meta/core-template/#extensions","title":"Extensions","text":"<p>Content that can be loaded by the [Core name] core have the following file extensions:</p> <ul> <li> <p>// Fill in the [Core name]</p> </li> <li> <p>.[extension]</p> </li> </ul> <p>// Copy the exntension entry from the core info file and paste it here. // https://github.com/libretro/libretro-super/tree/master/dist/info) // Also look at the core's libretro.c/libretro.cpp file, sometimes the core info files can get out of sync</p> <p>RetroArch database(s) that are associated with the [Core name] core:</p> <ul> <li> <p>// Fill in the [Core name]</p> </li> <li> <p>Database name</p> </li> <li> <p>// Add database entries from the core info file here and add (URL) from libretro-database repo</p> </li> <li>// https://github.com/libretro/libretro-super/tree/master/dist/info</li> <li>// https://github.com/libretro/libretro-database/tree/master/rdb</li> </ul>"},{"location":"meta/core-template/#features","title":"Features","text":"<p>Frontend-level settings or features that the [Core name] core respects:</p> <ul> <li>// Fill in the [Core name]</li> <li>// Use \u2714 or \u2715</li> <li>// Leave it as - if unsure</li> </ul> Feature Supported Restart - Saves - States - Rewind - Netplay - Core Options - RetroAchievements - RetroArch Cheats - Native Cheats - Controls - Remapping - Multi-Mouse - Rumble - Sensors - Camera - Location - Subsystem - Softpatching - Disk Control - Username - Language - Crop Overscan - LEDs -"},{"location":"meta/core-template/#directories","title":"Directories","text":"<ul> <li>// This section is a list of files and/or directories the core creates in certain directories</li> </ul> <p>The [Core name] core's library name is '[Library name]'</p> <ul> <li>//Add [Core name] and the [Library name]. Check libretro.c/.cpp for [Library name]</li> </ul> <p>The [Core name] core saves/loads to/from these directories.</p> <p>// Fill in the [Core name]</p> <ul> <li>// Add a list of directories/files the core uses</li> <li>// The Home, Appdata directories sections are rarely used, they're only for cores that don't follow the libretro API 100%</li> </ul> <p>Frontend's Home directory</p> File Description filename.bin Description <p>Frontend's Save directory</p> File Description filename.bin Description <p>Frontend's State directory</p> File Description filename.bin Description <p>Frontend's System directory</p> File Description filename.bin Description <p>Loaded content's directory</p> File Description filename.bin Description <p>Appdata directory</p> File Description filename.bin Description"},{"location":"meta/core-template/#geometry-and-timing","title":"Geometry and timing","text":"<p>// Add [Core name], [FPS], [Sample rate], [Base width], [Base height], [Max width], [Max height], [Aspect ratio]</p> <ul> <li>The [Core name] core's core provided FPS is [FPS]</li> <li>The [Core name] core's core provided sample rate is [Sample rate]</li> <li>The [Core name] core's base width is [Base width]</li> <li>The [Core name] core's base height is [Base height]</li> <li>The [Core name] core's max width is [Max width]</li> <li>The [Core name] core's max height is [Max height]</li> <li>The [Core name] core's core provided aspect ratio is [Aspect ratio]</li> </ul>"},{"location":"meta/core-template/#usage","title":"Usage","text":"<p>// Explain how to use the core if further explaination is needed</p>"},{"location":"meta/core-template/#core-options","title":"Core options","text":"<p>The [Core name] core has the following option(s) that can be tweaked from the core options menu. The default setting is bolded.</p> <p>// Fill in the [Core name]</p> <p>Settings with (Restart) means that core has to be closed for the new setting to be applied on next launch.</p> <p>// Fill in core options. // Add core option screenshots if needed.</p> <ul> <li> <p>Core Option [option-string] (Setting1|Setting2)</p> <p>Awaiting description.</p> </li> </ul> <p>Core Option - Setting</p>"},{"location":"meta/core-template/#user-device-types","title":"User # - # device types","text":"<p>The [Core name] core supports the following device type(s) in the controls menu, bolded device types are the default for the specified user(s):</p> <p>// Add [Core name] and device types /// Possible device types /// Gamepad /// Analog /// Keyboard /// Mouse /// Lightgun /// Pointer</p> <ul> <li>None - Optional description.</li> <li>(Device name) - (Device type) - Optional description.</li> </ul>"},{"location":"meta/core-template/#other-devices","title":"Other devices","text":"<p>// This section is for cores that have devices that cannot be manually selected</p> <ul> <li>(Device name) - (Device type) - Optional description.</li> </ul>"},{"location":"meta/core-template/#rumble","title":"Rumble","text":"<ul> <li>// This section is for cores that have rumble support</li> <li>// Explain how to activate rumble</li> </ul> <p>Rumble only works in the [Core name] core when</p> <ul> <li> <p>// Fill in the [Core name]</p> </li> <li> <p>The content being ran has rumble support.</p> </li> <li>The frontend being used has rumble support.</li> <li>The controller device being used has rumble support.</li> </ul>"},{"location":"meta/core-template/#multitap","title":"Multitap","text":"<ul> <li>// This section for cores that have an option to activate mutlitap in supported games</li> <li>// Explain how to activate multitap</li> </ul>"},{"location":"meta/core-template/#joypad","title":"Joypad","text":"<ul> <li>// Illustrations are available in 'docs/image/controller', which may be useful here</li> <li>// Add RetroPad inputs, please note the third column is only used when an input doesn't have a descriptor</li> </ul> RetroPad Inputs User # input descriptors (Device name) Inputs Action 1 - Action 2 - Action 3 - Action 4 - Action 5 - Action 6 - Action 7 - Action 8 - Action 9 - Action 10 - Action 11 - Action 12 - Action 13 - Action 14 - Action 15 - Action 16 -  X Action 17 -  Y Action 18 -  X Action 19 -  Y Action 20 -"},{"location":"meta/core-template/#keyboard","title":"Keyboard","text":"<ul> <li>// Add keyboard inputs</li> </ul> RetroKeyboard Inputs (Device name) Inputs Keyboard Backspace - Keyboard Tab - Keyboard Clear - Keyboard Return - Keyboard Pause - Keyboard Escape - Keyboard Space - Keyboard Exclaim ! - Keyboard Double Quote \" - Keyboard Hash # - Keyboard Dollar $ - Keyboard Ampersand &amp; - Keyboard Quote ' - Keyboard Left Parenthesis ( - Keyboard Right Parenthesis ) - Keyboard Asterisk * - Keyboard Plus + - Keyboard Comma , - Keyboard Minus - - Keyboard Period . - Keyboard Slash / - Keyboard 0 - Keyboard 1 - Keyboard 2 - Keyboard 3 - Keyboard 4 - Keyboard 5 - Keyboard 6 - Keyboard 7 - Keyboard 8 - Keyboard 9 - Keyboard Colon : - Keyboard Semicolon ; - Keyboard Less than &lt; - Keyboard Equals = - Keyboard Greater than &gt; - Keyboard Question ? - Keyboard At @ - Keyboard Left Bracket [ - Keyboard Backslash \\ - Keyboard Right Bracket ] - Keyboard Caret ^ - Keyboard Underscore _ - Keyboard Backquote ` - Keyboard a - Keyboard b - Keyboard c - Keyboard d - Keyboard e - Keyboard f - Keyboard g - Keyboard h - Keyboard i - Keyboard j - Keyboard k - Keyboard l - Keyboard m - Keyboard n - Keyboard o - Keyboard p - Keyboard q - Keyboard r - Keyboard s - Keyboard t - Keyboard u - Keyboard v - Keyboard w - Keyboard x - Keyboard y - Keyboard z - Keyboard Delete - Keyboard Keypad 0 - Keyboard Keypad 1 - Keyboard Keypad 2 - Keyboard Keypad 3 - Keyboard Keypad 4 - Keyboard Keypad 5 - Keyboard Keypad 6 - Keyboard Keypad 7 - Keyboard Keypad 8 - Keyboard Keypad 9 - Keyboard Keypad Period . - Keyboard Keypad Divide / - Keyboard Keypad Multiply * - Keyboard Keypad Minus - - Keyboard Keypad Plus + - Keyboard Keypad Enter - Keyboard Keypad Equals = - Keyboard Up - Keyboard Down - Keyboard Right - Keyboard Left - Keyboard Insert - Keyboard Home - Keyboard End - Keyboard Page Up - Keyboard Page Down - Keyboard F1 - Keyboard F2 - Keyboard F3 - Keyboard F4 - Keyboard F5 - Keyboard F6 - Keyboard F7 - Keyboard F8 - Keyboard F9 - Keyboard F10 - Keyboard F11 - Keyboard F12 - Keyboard F13 - Keyboard F14 - Keyboard F15 - Keyboard Num Lock - Keyboard Caps Lock - Keyboard Scroll Lock - Keyboard Right Shift - Keyboard Left Shift - Keyboard Right Control - Keyboard Left Control - Keyboard Right Alt - Keyboard Left Alt - Keyboard Right Meta - Keyboard Left Meta - Keyboard Right Super - Keyboard Left Super - Keyboard Mode - Keyboard Compose - Keyboard Help - Keyboard Print - Keyboard Sys Req - Keyboard Break - Keyboard Menu - Keyboard Power - Keyboard \u20ac - Keyboard Undo - Keyboard Unmapped - Keyboard Unknown -"},{"location":"meta/core-template/#mouse","title":"Mouse","text":"<ul> <li>// Add mouse inputs</li> </ul> RetroMouse Inputs (Device name) Inputs  Mouse Cursor -  Mouse 1 -  Mouse 2 -  Mouse 3 - Mouse 4 - Mouse 5 - Wheel Up - Wheel Down - Wheel Left - Wheel Right -"},{"location":"meta/core-template/#pointer","title":"Pointer","text":"<ul> <li>// Add pointer inputs</li> </ul> RetroPointer Inputs (Device name) Inputs  or  Pointer Position -  or  Pointer Pressed -"},{"location":"meta/core-template/#lightgun","title":"Lightgun","text":"<ul> <li>// Add lightgun inputs</li> <li>/// Deprecated Lightgun inputs</li> <li>/// RETRO_DEVICE_ID_LIGHTGUN_CURSOR - Use Gun Aux A instead</li> <li>/// RETRO_DEVICE_ID_LIGHTGUN_TURBO - Use Gun Aux B instead</li> <li>/// RETRO_DEVICE_ID_LIGHTGUN_PAUSE - Use Gun Start instead</li> </ul> RetroLightgun Inputs (Device name) Inputs  Gun Crosshair - Gun Trigger - Gun Reload - Gun Aux A - Gun Aux B - Gun Aux C - Gun Start - Gun Select - Gun D-pad Up - Gun D-pad Down - Gun D-pad Left - Gun D-pad Right -"},{"location":"meta/core-template/#compatibility","title":"Compatibility","text":"<ul> <li>// Paste in a link to a compatibility list</li> <li>// Or write up a compatibility description</li> <li>// Or make a compatibility table</li> </ul>"},{"location":"meta/core-template/#external-links","title":"External links","text":"<ul> <li> <p>// Put relevant links here</p> </li> <li> <p>Official/Original (Core name) Website</p> </li> <li>Official/Original (Core name) (Website name) Repository</li> <li>Libretro (Core name) Core info file</li> <li>Libretro (Core name) (Website name) Repository</li> <li>Report Libretro (Core name) Core Issues Here</li> </ul>"},{"location":"meta/core-template/#related-cores","title":"(Related cores)","text":"<ul> <li>// Add links to related core docs here. Use the 'docs/meta/see-also.md' doc for help</li> </ul>"},{"location":"meta/how-to-contribute/","title":"Contribute to the documentation","text":"<p>The documentation for this project is written in Markdown, a simple markup language that allows you to format text using plain text syntax. If you're not familiar with Markdown, you can use this guide to learn the syntax. Note that Mkdocs uses some Markdown extensions, so you may need to familiarize yourself with those as well.</p> <p>The documentation source is maintained via Git. For more info on how to use git, refer to Github's help page. If you're new to Git, you can refer to their documentation for more information on how to use it.</p> <p>By using Git and Markdown effectively, you can contribute to the project's documentation and help improve it for everyone.</p> <p>In order to propose improvements to a document:</p> <ol> <li>Clone the repo</li> <li>Make the changes and update your clone</li> <li>Follow the \"Building the docs\" section to render the documentation site locally</li> <li>Propose your changes using the button <code>New Pull Request</code> in the docs repo</li> </ol> <p>To contribute to libretro/docs documentation, you can check out the To-Do list here, or submit suggestions and issues at the libretro/docs issue tracker on GitHub.</p>"},{"location":"meta/how-to-contribute/#building-the-docs","title":"Building the docs","text":"<ol> <li>Make sure you have Python and pip installed     <pre><code>python --version\npip --version\n</code></pre></li> </ol> <p>Building in Windows/msys2</p> <p>If you are using the standard RetroArch msys2 environment, you will need to install python with the command <code>pacman -S python</code>. Next you will need to download the <code>get-pip.py</code> script from the <code>pip</code> bootstrap site. Finally, execute the script with the command <code>python get-pip.py</code>.</p> <ol> <li> <p>Install MkDocs     <pre><code>pip install mkdocs\n</code></pre></p> </li> <li> <p>Install MkDocs-Material     <pre><code>pip install mkdocs-material\n</code></pre></p> </li> <li> <p>Install PyMdown Extensions     <pre><code>pip install pymdown-extensions\n</code></pre></p> </li> <li> <p>Build the site     <pre><code>mkdocs build\n</code></pre></p> </li> <li> <p>The documentation will be built to the <code>site</code> directory; preview any changes with MkDocs' built-in dev-server before submitting a pull request     <pre><code>mkdocs serve\n</code></pre></p> </li> </ol> <p>References</p> <ul> <li>Guide to installing mkdocs </li> </ul>"},{"location":"meta/how-to-contribute/#adding-a-new-core","title":"Adding a new core","text":"<p>These are the documents that should be added/updated when a new core is added to the libretro ecosystem.</p> <ul> <li>Add the core to docs/library/ (Follow the latest core template. docs/meta/core-template.md)</li> <li>Add the core to mkdocs.yml</li> <li>Add the core to docs/meta/core-list.md</li> <li>Add the core to docs/meta/see-also.md if it's related to another core in some way</li> <li>Add the core to docs/development/licenses.md</li> <li>Add the core to docs/guides/softpatching.md if it supports softpatching</li> <li>Add the core to docs/guides/retroachievements.md if it supports cheevos</li> <li>Add the core to docs/library/bios.md if it needs a BIOS</li> </ul>"},{"location":"meta/see-also/","title":"See Also","text":"<p>This is a list of cores that are related to each other in some way.</p>"},{"location":"meta/see-also/#3ds","title":"3DS","text":"<ul> <li>Nintendo - 3DS (Citra)</li> <li>Nintendo - 3DS (Citra Canary/Experimental)</li> </ul>"},{"location":"meta/see-also/#apple","title":"Apple","text":"<ul> <li>Apple - Macintosh (minivmac)</li> </ul>"},{"location":"meta/see-also/#arcade","title":"Arcade","text":"<ul> <li>DICE</li> <li>MAME 2003</li> <li>MAME 2003-Plus</li> <li>MAME 2010</li> <li>FB Neo</li> <li>SAME_CDI</li> </ul>"},{"location":"meta/see-also/#colecovision","title":"ColecoVision","text":"<ul> <li>Coleco - ColecoVision (Gearcoleco)</li> <li>Coleco - ColecoVision (JollyCV)</li> </ul>"},{"location":"meta/see-also/#cpc","title":"CPC","text":"<ul> <li>Amstrad - CPC (Caprice32)</li> <li>Amstrad - CPC (CrocoDS)</li> </ul>"},{"location":"meta/see-also/#custom-engine","title":"Custom Engine","text":"<ul> <li>ChaiLove</li> <li>Lua Engine (Lutro)</li> </ul>"},{"location":"meta/see-also/#dos","title":"DOS","text":"<ul> <li>MS - DOS (DOSBox)</li> <li>MS - DOS (DOSBox Pure)</li> </ul>"},{"location":"meta/see-also/#dreamcast","title":"Dreamcast","text":"<ul> <li>Sega - Dreamcast (Redream)</li> <li>Sega - Dreamcast (Flycast)</li> </ul>"},{"location":"meta/see-also/#elektronika-bk-0010bk-0011","title":"Elektronika - BK-0010/BK-0011","text":"<ul> <li>Elektronika - BK-0010/BK-0011 (bk)</li> </ul>"},{"location":"meta/see-also/#lynx","title":"Lynx","text":"<ul> <li>Atari - Lynx (Beetle Lynx)</li> <li>Atari - Lynx (Handy)</li> <li>Atari - Lynx (Holani)</li> </ul>"},{"location":"meta/see-also/#msx","title":"MSX","text":"<ul> <li>Microsoft - MSX (fMSX)</li> <li>MSX/SVI/ColecoVision/SG-1000 (blueMSX)</li> </ul>"},{"location":"meta/see-also/#gb","title":"GB","text":"<ul> <li>Nintendo - Game Boy / Color (Emux GB)</li> <li>Nintendo - Game Boy / Color (Gambatte)</li> <li>Nintendo - Game Boy / Color (Gearboy)</li> <li>Nintendo - Game Boy / Color (SameBoy)</li> <li>Nintendo - Game Boy / Color (TGB Dual)</li> <li>Nintendo - Game Boy Advance (mGBA)</li> <li>Nintendo - SNES / Famicom (higan Accuracy)</li> <li>Nintendo - SNES / Famicom (nSide Balanced)</li> <li>Nintendo - SNES / Famicom (Mesen-S)</li> </ul>"},{"location":"meta/see-also/#gba","title":"GBA","text":"<ul> <li>Nintendo - Game Boy Advance (Beetle GBA)</li> <li>Nintendo - Game Boy Advance (gpSP)</li> <li>Nintendo - Game Boy Advance (Meteor)</li> <li>Nintendo - Game Boy Advance (mGBA)</li> <li>Nintendo - Game Boy Advance (TempGBA)</li> <li>Nintendo - Game Boy Advance (VBA-M)</li> <li>Nintendo - Game Boy Advance (VBA Next)</li> </ul>"},{"location":"meta/see-also/#media","title":"Media","text":"<ul> <li>FFmpeg</li> <li>Game Music Emu</li> <li>Imageviewer</li> <li>PocketCDG</li> </ul>"},{"location":"meta/see-also/#mega-duck-cougar-boy","title":"Mega Duck / Cougar Boy","text":"<ul> <li>Mega Duck / Cougar Boy (SameDuck)</li> </ul>"},{"location":"meta/see-also/#misc","title":"Misc","text":"<ul> <li>VaporSpec</li> <li>Jump 'n Bump</li> </ul>"},{"location":"meta/see-also/#neo-geo-aesmvs","title":"Neo Geo AES/MVS","text":"<ul> <li>Geolith</li> </ul>"},{"location":"meta/see-also/#n64","title":"N64","text":"<ul> <li>Nintendo - Nintendo 64 (Mupen64Plus)</li> </ul>"},{"location":"meta/see-also/#nds","title":"NDS","text":"<ul> <li>Nintendo - DS (DeSmuME 2015)</li> <li>Nintendo - DS (DeSmuME)</li> <li>Nintendo - DS (melonDS 2021)</li> <li>Nintendo - DS (melonDS DS)</li> </ul>"},{"location":"meta/see-also/#nes","title":"NES","text":"<ul> <li>Nintendo - NES / Famicom (bnes)</li> <li>Nintendo - NES / Famicom (Emux NES)</li> <li>Nintendo - NES / Famicom (FCEUmm)</li> <li>Nintendo - NES / Famicom (Mesen)</li> <li>Nintendo - NES / Famicom (Nestopia)</li> <li>Nintendo - NES / Famicom (QuickNES)</li> </ul>"},{"location":"meta/see-also/#rpg-maker","title":"RPG Maker","text":"<ul> <li>RPG Maker 2000/2003 (EasyRPG)</li> <li>RPG Maker XP/VX/VX Ace (mkxp-z)</li> </ul>"},{"location":"meta/see-also/#id-software","title":"id Software","text":"<ul> <li>Doom (PrBoom)</li> <li>Quake 1 (TyrQuake)</li> </ul>"},{"location":"meta/see-also/#snes","title":"SNES","text":"<ul> <li>Nintendo - SNES / Famicom (Beetle bsnes)</li> <li>Nintendo - SNES / Famicom (bsnes-mercury Accuracy)</li> <li>Nintendo - SNES / Famicom (bsnes-mercury Balanced)</li> <li>Nintendo - SNES / Famicom (bsnes-mercury Performance)</li> <li>Nintendo - SNES / Famicom (bsnes Accuracy)</li> <li>Nintendo - SNES / Famicom (bsnes Balanced)</li> <li>Nintendo - SNES / Famicom (bsnes C++98 (v085))</li> <li>Nintendo - SNES / Famicom (bsnes Performance)</li> <li>Nintendo - SNES / Famicom (higan Accuracy)</li> <li>Nintendo - SNES / Famicom (nSide Balanced)</li> <li>Nintendo - SNES / Famicom (Mesen-S)</li> <li>Nintendo - SNES / Famicom (Snes9x)</li> <li>Nintendo - SNES / Famicom (Snes9x 2002)</li> <li>Nintendo - SNES / Famicom (Snes9x 2005 Plus)</li> <li>Nintendo - SNES / Famicom (Snes9x 2005)</li> <li>Nintendo - SNES / Famicom (Snes9x 2010)</li> </ul>"},{"location":"meta/see-also/#sega-16-bit","title":"Sega 16-bit","text":"<ul> <li>Sega - Master System (Emux SMS)</li> <li>Sega - MS/GG/MD/CD (Genesis Plus GX)</li> <li>Sega - MS/MD/CD/32X (PicoDrive)</li> <li>Sega - MD/CD (BlastEm)</li> <li>Sega - MD/CD (ClownMDEmu)</li> <li>Sega - MS/GG/SG-1000 (Gearsystem)</li> <li>Sega - MS/GG (SMS Plus GX)</li> <li>MSX/SVI/ColecoVision/SG-1000 (blueMSX)</li> </ul>"},{"location":"meta/see-also/#saturn","title":"Saturn","text":"<ul> <li>Sega - Saturn (Beetle Saturn)</li> <li>Sega - Saturn (Kronos)</li> <li>Sega - Saturn (YabaSanshiro)</li> <li>Sega - Saturn (Yabause)</li> </ul>"},{"location":"meta/see-also/#psx","title":"PSX","text":"<ul> <li>Sony - PlayStation (Beetle PSX HW)</li> <li>Sony - PlayStation (Beetle PSX)</li> <li>Sony - PlayStation (PCSX ReARMed)</li> </ul>"},{"location":"meta/see-also/#tg-16","title":"TG-16","text":"<ul> <li>NEC - PC Engine / CD (Beetle PCE FAST)</li> <li>NEC - PC Engine SuperGrafx (Beetle SGX)</li> <li>NEC - PC Engine / SuperGrafx (Geargrafx)</li> </ul>"},{"location":"meta/see-also/#cave-story","title":"Cave Story","text":"<ul> <li>d-rs</li> <li>NXEngine</li> </ul>"},{"location":"meta/shader-preview-template/","title":"Title","text":""},{"location":"meta/shader-preview-template/#background","title":"Background","text":""},{"location":"meta/shader-preview-template/#comments","title":"Comments","text":""},{"location":"meta/shader-preview-template/#external-links","title":"External Links","text":"<ul> <li>Slang Shaders</li> <li>GLSL Shaders</li> <li>CG Shaders</li> </ul>"},{"location":"shader/3dfx/","title":"3dfx","text":""},{"location":"shader/3dfx/#background","title":"Background","text":""},{"location":"shader/3dfx/#preview-image","title":"Preview Image","text":"<ul> <li>3dfx_4x1</li> </ul>"},{"location":"shader/3dfx/#comments","title":"Comments","text":""},{"location":"shader/3dfx/#external-links","title":"External Links","text":"<ul> <li>Slang Shaders</li> <li>GLSL Shaders</li> <li>CG Shaders</li> </ul>"},{"location":"shader/antialiasing/","title":"Anti-Aliasing","text":"<p>These shaders perform post-process anti-aliasing, which is useful for smoothing the jagged edges that occur with polygons rendered at non-native sizes. As such, the test image used does not really show the effects properly in most cases. While some--like advanced-aa--have a visible and pleasant effect on low-res pixel art, these are mostly paired with high-res content.</p>"},{"location":"shader/antialiasing/#aa-shader-40","title":"AA Shader 4.0","text":"<ul> <li>A basic anti-aliasing shader with a configurable parameter that allows it to work with greater internal resolution multipliers. Preview</li> </ul>"},{"location":"shader/antialiasing/#aa-shader-40-level-2","title":"AA Shader 4.0 Level 2","text":"<ul> <li>An enhanced version of the AA Shader 4.0 that doubles the radius of pixel analysis.</li> </ul>"},{"location":"shader/antialiasing/#advanced-aa","title":"Advanced AA","text":"<ul> <li>An interpolation shader that fills in pixels between upscaled texels. It typically works best at 2x scale factors. Preview</li> </ul>"},{"location":"shader/antialiasing/#fxaa","title":"FXAA","text":"<ul> <li>Fast ApproXimate Anti-Aliasing is a common and fast GPU-powered anti-aliasing algorithm created by Timothy Lottes at Nvidia. It works best on high-res content and is increasingly invasive on lower resolutions (like this test image). Preview</li> </ul>"},{"location":"shader/antialiasing/#reverse-aa","title":"Reverse AA","text":"<ul> <li>An algorithm devised by kdepepo that reduces the effects of anti-aliasing, either natural (such as from downsampling a high-res image) or artificial (such as after an anti-aliasing shader) while avoiding many of the haloing problems caused by normal sharpening algorithms. Works best at 2x scale. There is also a 3x scale version for use with other shaders, but there is no preset to use it on its own.</li> </ul>"},{"location":"shader/antialiasing/#smaa","title":"SMAA","text":"<ul> <li>Subpixel Morphological Anti-Aliasing is an image-based GPU-based implementation of Morphological antialiasing, or MLAA. The algorithm detects borders in the resulting image and then finds specific patterns in these. Anti-aliasing is achieved by blending pixels in these borders, according to the pattern they belong to and their position within the pattern. The effect is not really apparent in this test image, unfortunately. Preview</li> </ul>"},{"location":"shader/antialiasing/#shaders-without-presets","title":"Shaders Without Presets","text":""},{"location":"shader/antialiasing/#ewa-curvature","title":"EWA Curvature","text":"<ul> <li>A combination of strong Elliptical-Weighted Average (developed by Paul Heckbert back in the '80s; this is the best source I could find for it) anti-aliasing and barrel/curvature distortion. This shader can be used to apply CRT tube-style curvature on top of CRT/scanline shaders that do not have curvature of their own while avoiding the heavy moire distortion that normally occurs.</li> </ul>"},{"location":"shader/antialiasing/#shock","title":"Shock","text":"<ul> <li>An algorithm that transforms the smooth transitions resulting from texture interpolation into abrupt transitions to deblur an image. The underlying principle is based on diffusing energy between neighboring pixels whereby, in areas of the image where the second derivative is positive, pixel colors are diffused in the reverse gradient direction, and vice versa (see section 27.3 from Nvidia's GPU Gems article for more details). To sharpen an image properly, several to many shock passes are usually required, along with adjustments to the Shock Magnitude parameter.</li> </ul>"},{"location":"shader/antialiasing/#comments","title":"Comments","text":""},{"location":"shader/antialiasing/#external-links","title":"External Links","text":"<ul> <li>Slang Shaders</li> <li>GLSL Shaders</li> <li>CG Shaders</li> </ul>"},{"location":"shader/auto-box/","title":"Auto-Box","text":"<p>Shaders that scale the image inside the viewport. This can be useful for ensuring certain quality of scaling, often with the intention of applying other effects that are picky about scaling on top.</p>"},{"location":"shader/auto-box/#shaders-without-presets","title":"Shaders Without Presets","text":""},{"location":"shader/auto-box/#box-center","title":"Box-Center","text":"<pre><code>- Centers pre-scaled output into the viewport to prevent unintentional non-integer scaling. Maintains 1x scale of the input.\n</code></pre>"},{"location":"shader/auto-box/#box-max","title":"Box-Max","text":"<pre><code>- Automatically scales output to the maximum integer scale possible.\n</code></pre>"},{"location":"shader/auto-box/#box","title":"Box","text":"<pre><code>- Scales output according to the scale factor parameters.\n</code></pre>"},{"location":"shader/auto-box/#comments","title":"Comments","text":""},{"location":"shader/auto-box/#external-links","title":"External Links","text":"<ul> <li>Slang Shaders</li> <li>GLSL Shaders</li> <li>CG Shaders</li> </ul>"},{"location":"shader/blurs/","title":"Blurs","text":"<p>Shaders that use low-pass algorithms to remove high-frequency data and blur the image.</p>"},{"location":"shader/blurs/#gaussian-blur","title":"Gaussian Blur","text":"<ul> <li>A basic implementation of Gaussian blur, available in single-pass, multipass (much faster) and sharper flavors.</li> </ul>"},{"location":"shader/blurs/#kawase-blur","title":"Kawase Blur","text":"<ul> <li>A method for making very fast, high-quality blurs with extremely large kernels by stacking many passes of a simple blur.</li> </ul>"},{"location":"shader/blurs/#shaders-without-presets","title":"Shaders Without Presets","text":""},{"location":"shader/blurs/#bilateral","title":"Bilateral","text":"<ul> <li>Calculates a weighted mean of surrounding pixels based on color and spatial distance. This can be used to smooth color transitions or blend dithering to some extent while preserving sharp edges. Increasing the radius leads to more pixel lookups and therefore to a lower shader performance.</li> </ul>"},{"location":"shader/blurs/#smart-blur","title":"Smart-Blur","text":"<ul> <li>Blurs pixels selectively based on the absolute difference from the neighboring pixels per color channel. Similar to bilateral filtering.</li> </ul>"},{"location":"shader/blurs/#blurx-including-seperable-yxy-fast-resize-gamma-etc","title":"BlurX (including seperable, YxY, fast, resize, gamma, etc)","text":"<ul> <li>A huge collection of blurs written by Trogglemonkey (author of CRT-Royale) to cover a wide variety of kernel sizes and gamma configurations for many different use-cases.</li> </ul>"},{"location":"shader/blurs/#blur-gauss-hv","title":"Blur-Gauss-H/V","text":"<ul> <li>A seperable, 2-pass implementation based on the article Efficient Gaussian blur with linear sampling.</li> </ul>"},{"location":"shader/blurs/#comments","title":"Comments","text":""},{"location":"shader/blurs/#external-links","title":"External Links","text":"<ul> <li>Slang Shaders</li> <li>GLSL Shaders</li> <li>CG Shaders</li> </ul>"},{"location":"shader/border/","title":"Border","text":"<p>These shaders are used to apply a border image or effect with a transparent window to show content through. These shaders are typically intended to draw to the entire screen area, so you may need to change your aspect ratio settings to give them more space to fill (that is, set your aspect ratio to match your monitor's physical aspect). Most of them default to integer scaling (including an option for \"integer overscale,\" which scales to the next highest integer; useful for 5x scale on 1080p monitors), along with an option for scanline and pixel anti-aliasing effects.</p>"},{"location":"shader/border/#ambient-glow","title":"Ambient Glow","text":"<ul> <li>This shader puts a glow effect shining out behind the image. The color of the glow effect is based on the average color on the screen and the color changes gradually to prevent ugly strobing.</li> </ul>"},{"location":"shader/border/#bigblur","title":"BigBlur","text":"<ul> <li>This shader fills the area outside of the viewport with an enlarged, blurred copy of the viewport. This is similar to the effect used on vertical/portrait cell phone videos shown on TV, etc. Preview</li> </ul>"},{"location":"shader/border/#effect-border-iq","title":"Effect Border IQ","text":"<ul> <li>This shader fills the border with live, animated effects based on shadertoys from Inigo Quilez. The active effect can be toggled by a runtime parameter. Preview</li> </ul>"},{"location":"shader/border/#imgborder","title":"ImgBorder","text":"<ul> <li>This shader places an image file on top of the screen, commonly used for TV bezels. Preview</li> </ul>"},{"location":"shader/border/#widescreen-border-dark","title":"WideScreen Border Dark","text":"<ul> <li>This shader puts darkened columns--a.k.a. \"pillarboxing\"--on widescreen images, leaving an area of user-configurable aspect ratio at the normal brightness. This can be useful for cores that produce a widescreen image (e.g., bsnes-hd-beta and Genesis Plus GX Wide) when some games only allow interaction with the original (approximately 4:3) viewable area.</li> </ul>"},{"location":"shader/border/#game-boy-player-sgb-and-sgba","title":"Game Boy Player, SGB and SGBA","text":"<p>(presets located inside their respective subdirs)   + These shaders reproduce the borders associated with their respective hardware. They are intended to run at 1x scale and then scale up to fit the screen, often with the addition of a CRT shader on top.</p>"},{"location":"shader/border/#comments","title":"Comments","text":""},{"location":"shader/border/#external-links","title":"External Links","text":"<ul> <li>Slang Shaders</li> <li>GLSL Shaders</li> <li>CG Shaders</li> </ul>"},{"location":"shader/cel/","title":"Cel","text":"<p>Shaders that produce a faux cel-shaded look. These shaders work best with early 3D content with very low-res textures.</p>"},{"location":"shader/cel/#advcartoon","title":"AdvCartoon","text":"<ul> <li>Ported from guest's old Pete's OGL2 plugin shader, the user can specify the thickness of the cartoon-style black border and how muted the colors become.</li> </ul>"},{"location":"shader/cel/#mmj-cel-shader","title":"MMJ Cel Shader","text":"<ul> <li>MMJ revisited their old Pete's OGL2 plugin shader to bring it up to date and get it working with RetroArch, resulting in this shader, which is available in single- and multi-pass flavors. It works best with hardware-rendered cores running in &gt;= 4x internal resolution scale.</li> </ul>"},{"location":"shader/cel/#comments","title":"Comments","text":""},{"location":"shader/cel/#external-links","title":"External Links","text":"<ul> <li>Slang Shaders</li> <li>GLSL Shaders</li> <li>CG Shaders</li> </ul>"},{"location":"shader/cgp/","title":"cgp","text":""},{"location":"shader/cgp/#background","title":"Background","text":""},{"location":"shader/cgp/#preview-image","title":"Preview Image","text":"<ul> <li>2x2xscalehq</li> </ul> <ul> <li>2xbr-crt-hyllian</li> </ul> <ul> <li>2xbr-hybrid-crt-hyllian</li> </ul> <ul> <li>2xbr-jinc2-sharper-hybrid</li> </ul> <ul> <li>2xbr-reverse-aa</li> </ul> <ul> <li>crt-reverse-aa-ddt</li> </ul> <ul> <li>crt-royale-kurozumi</li> </ul> <ul> <li>gameboy-colors</li> </ul> <ul> <li>gameboy-scree-n-grid</li> </ul> <ul> <li>gameboy-screen-grid+motionblur</li> </ul> <ul> <li>lowquality-lcd</li> </ul> <ul> <li>lowquality-lcd+motionblur</li> </ul> <ul> <li>xbr-dilation-smart-blur-4xsoft</li> </ul> <ul> <li>xbr-dtt-dilation-soft2-aa-gamma</li> </ul> <ul> <li>xbr-hybrid-bicubic</li> </ul> <ul> <li>xbr-hybrid-ddt</li> </ul> <ul> <li>xbr-hybrid-lanczos</li> </ul> <ul> <li>xbr-hybrid-sharp-lanczos</li> </ul> <ul> <li>xbr-smart-blur</li> </ul>"},{"location":"shader/cgp/#comments","title":"Comments","text":""},{"location":"shader/cgp/#external-links","title":"External Links","text":"<ul> <li>Slang Shaders</li> <li>GLSL Shaders</li> <li>CG Shaders</li> </ul>"},{"location":"shader/crt/","title":"CRT Shaders","text":"<p>These shaders attempt to reproduce aspects and characteristics of cathode ray tube (CRT) displays with modern hardware. Most include some sort of scanline effect and often a phosphor mask effect, and they typically do some amount of blurring/blending. Some also include interlacing effects and/or faux barrel distortion (a.k.a., \"curvature\"). Variations with \"glow\" or \"halation\" include a bloom effect that mimics the glow and/or internal reflections of a CRT. As is the case with any repeating, scanline-type effects, these shaders will all look better with integer scaling, but some can handle non-integer scales better than others.</p>"},{"location":"shader/crt/#crt-aperture","title":"crt-aperture","text":"<ul> <li>A shader designed to reproduce the look of a high-quality aperture grille CRT TV, such as a Sony PVM or Wega TV. It still looks fairly good at non-integer scales.<ul> <li></li> </ul> </li> </ul>"},{"location":"shader/crt/#crt-blurpi","title":"crt-blurpi","text":"<ul> <li>A lightweight shader designed to run full speed on Raspberry Pi hardware (hence, the name) and on low-res screens (640x480 or less). It cheats a little by rendering scanlines that match your screen resolution instead of the game resolution, to avoid painful aliasing/Moir\u00e9 efects on low res screens. Comes in sharp and soft flavors; use the sharp variant when using interger scaling for best results, and the soft variant otherwise.<ul> <li></li> </ul> </li> </ul>"},{"location":"shader/crt/#crt-caligari","title":"crt-caligari","text":"<ul> <li>A shader that produces a scanline/mask effect by controlling the height and width of each simulated pixel \"spot\".<ul> <li></li> </ul> </li> </ul>"},{"location":"shader/crt/#crt-easymode","title":"crt-easymode","text":"<ul> <li>A popular shader with good performance, many features (including curvature and masks) and looks quite nice even at non-integer scales. Also comes in a -Halation variant.<ul> <li></li> </ul> </li> </ul>"},{"location":"shader/crt/#crt-frutbunn","title":"crt-frutbunn","text":"<ul> <li>A port of the \"Another CRT Shader\" shadertoy to RetroArch's shader format. It includes scanlines, curvature and vignetting in a nice, simple package.<ul> <li></li> </ul> </li> </ul>"},{"location":"shader/crt/#crt-geom","title":"crt-geom","text":"<ul> <li>The original CRT shader, which still looks great (even at non-integer scales) and includes many options for customization. Thanks to improvements in GPUs since its release, it now runs well even on very modest hardware. The CRT-cgwg-Fast variety runs even faster, while the CRT-Geom-Deluxe version is slower but includes many, many more options. The CRT-Interlaced-Halation shader is another variant.<ul> <li></li> </ul> </li> </ul>"},{"location":"shader/crt/#crtglow","title":"crtglow","text":"<ul> <li>A bold CRT effect that accentuates the rounded edges of scanlines. Comes in CRTGlow_Gauss and CRTGlow_Lanczos flavors, named for the scaling algorithm used, and another CRTGlow_Gauss_NTSC variant that includes NTSC composite signal/connection simulation.<ul> <li></li> </ul> </li> </ul>"},{"location":"shader/crt/#crt-guest","title":"crt-guest","text":"<ul> <li>A family of very attractive shaders with tons of features and options to play with, these shaders are an excellent option for users with powerful GPUs who like to tweak options. The CRT-Guest-Dr-Venom and -2 versions are similar but have slightly different settings available, while the -Fast version lowers the requirements quite a bit. The -SM variant uses a different method of generating scanlines.<ul> <li></li> </ul> </li> </ul>"},{"location":"shader/crt/#crt-hyllian","title":"crt-hyllian","text":"<ul> <li>A family of attractive and advanced CRT shaders which have relatively few options, making it a good fit for users who don't want to spend a lot of time twiddling settings. The -3D variant includes a downsampling option that works with high-res content (such as cores with increased internal resolution), the -Sinc version uses a different scaling algorithm that looks a bit different. The -Multipass version runs well on even very modest GPUs, while the -Glow and -Curvature variants add those effects on top.<ul> <li></li> </ul> </li> </ul>"},{"location":"shader/crt/#crt-lottes","title":"crt-lottes","text":"<ul> <li>Ported from Timothy Lottes' \"FixingPixelArt\" shadertoy, this shader is intended to look like \"a really good CGA arcade monitor with RGB inputs instead of NTSC.\" It doesn't have many options and looks good at default settings, making it a good general-purpose choice. The -Fast version is actually an updated version ported from a separate shadertoy, while the -Multipass versions are faster versions of the base Lottes effect. The Fakelottes shader pairs the excellent mask simulation code from CRT-Lottes with basic fast scanlines for use with even weaker devices.<ul> <li></li> </ul> </li> </ul>"},{"location":"shader/crt/#crt-mattias","title":"crt-mattias","text":"<ul> <li>A port of Mattias' CRT Emulation shadertoy, which is characterized by \"crawling\" (i.e., scrolling) scanlines. NewPixie-CRT is an updated and extended shader from the same author that expands on many of the same ideas used in the original shadertoy.<ul> <li></li> </ul> </li> </ul>"},{"location":"shader/crt/#crt-nes-mini","title":"crt-nes-mini","text":"<ul> <li>A clone of the NES Mini's TV-style shader, which is really just some light scanlines.<ul> <li></li> </ul> </li> </ul>"},{"location":"shader/crt/#crt-pi","title":"crt-pi","text":"<ul> <li>A nice-looking shader designed to run full speed on all Raspberry Pi models at 4:3 aspect and 1080p, though RPi1 and Zero models may need overclocking to achieve this, and some settings may be too demanding on some models. Aside from RPi hardware, this is just an all-around good shader for weak/mobile GPUs.</li> </ul>"},{"location":"shader/crt/#crt-potato","title":"crt-potato","text":"<ul> <li>An attempt to reproduce the very demanding effects of the popular Kurozumi variation of CRT-Royale through a simple lookup texture. It does not capture much of the nuances of the demanding shader it tries to copy, but it runs very fast and comes with -Warm and -Cool flavors, which describe their warmer and cooler white points, respectively.<ul> <li></li> </ul> </li> </ul>"},{"location":"shader/crt/#crt-royale","title":"crt-royale","text":"<ul> <li>The first of the modern mega-shaders with dozens of options to tweak, this shader looks good at 1080p but doesn't really shine until at least 1440p and looks better the more pixels you can throw at it. However, it's also quite demanding, and this increases with higher resolution, as well. The -Intel and -Fake-Bloom varieties sacrifice some fidelity to lower the requirements, while the -NTSC and -PAL varieties add the characteristics of those broadcast signal standards to the image. The popular Kurozumi preset among others are located in the \"Presets\" shader directory.<ul> <li></li> </ul> </li> </ul>"},{"location":"shader/crt/#crtsim","title":"crtsim","text":"<ul> <li>An interesting shader that doesn't try to be realistic but rather just tries to look nostalgic. This shader is most notable for its fast faux-NTSC effect.<ul> <li></li> </ul> </li> </ul>"},{"location":"shader/crt/#crt-slangtest","title":"crt-slangtest","text":"<ul> <li>A distant cousin to the CRTGlow shaders (though with a more subtle effect), it comes in -Cubic and -Lanczos flavors, named for the scaling algorithm used.<ul> <li></li> </ul> </li> </ul>"},{"location":"shader/crt/#crt-torridgristle","title":"crt-torridgristle","text":"<ul> <li>A very fast, high-contrast CRT effect with a prominent phosphor mask.</li> </ul>"},{"location":"shader/crt/#crt-yo6-kv-m14208b","title":"crt-yo6-kv-m14208b","text":"<ul> <li>One of the few shaders based directly on a specific model (and size) of CRT display, this shader was created using a unique, data-driven methodology resulting in a very realistic image. It also comes in a -Sharp variant.</li> </ul>"},{"location":"shader/crt/#dotmask","title":"dotmask","text":"<ul> <li>A basic shader that collects just the isolated dotmask code from several different shaders.<ul> <li></li> </ul> </li> </ul>"},{"location":"shader/crt/#gritsscanlines","title":"GritsScanlines","text":"<ul> <li>Another fast, LUT-based CRT shader that tries to mimic the dynamic beam width of more demanding CRT shaders.<ul> <li></li> </ul> </li> </ul>"},{"location":"shader/crt/#gtu","title":"gtu","text":"<ul> <li>A useful and versatile scaling shader, GTU stands for Gaussian-kernel TV Upscaler. This shader eschews the normal scanline-heavy, mask-prominent CRT characteristics and instead focuses on getting the blurring/smoothing effects down convincingly. With parameters to simulate different vertical (TVL) and horizontal resolutions, GTU can go from sharp, anti-aliased pixels (like a CRT monitor) all the way down to blurry enough to smear Genesis/Mega Drive jailbar dithering. It does include a basic, subtle scanline effect, as well as the ability to simulate composite color-shifting and chroma smearing. Its cousin, TVOut-Tweaks, isolates just the resolution/scaling functionality to simulate low-res displays on higher-res ones, such as simulating a consumer TV on a high-res PC CRT monitor.<ul> <li></li> </ul> </li> </ul>"},{"location":"shader/crt/#mame-hlsl","title":"mame-hlsl","text":"<ul> <li>A port of MAME's built-in HLSL shader, which exposes a variety of nice options.<ul> <li></li> </ul> </li> </ul>"},{"location":"shader/crt/#meta-crt","title":"meta-crt","text":"<ul> <li>A port of P_Malin's Meta Meta CRT shadertoy, this shader models a 3D environment with a little CRT monitor sitting on a table via a raytracing-like technique called \"raymarching\". It includes a parameter to change the camera location to a number of different pre-set locations, including some that are not really practical for playing games but zoom in to show the meta-CRT's phosphor mask and other details. This shader is a really cool technical feat that's fun to explore. WARNING: this shader is very, very demanding and can make weak hardware move so slowly that it's difficult to navigate the menus to turn it off.<ul> <li></li> </ul> </li> </ul>"},{"location":"shader/crt/#vector-glow","title":"vector-glow","text":"<ul> <li>A shader designed to mimic the glow and phosphor trails of a CRT vector display (like those used in the Vectrex console and a number of arcade cabinets, most famously Asteroids and Star Wars), which lacks many of the characteristics of a typical CRT (e.g., no scanlines). The -Alt-Render variant works better with the high-res \"alternate render\" option found in some of the MAME cores or other high-res vector emulation.</li> </ul>"},{"location":"shader/crt/#vt220","title":"vt220","text":"<ul> <li>Another shadertoy port, this time for sprash3's vt220 shadertoy, which generates a CRT monitor bezel and then casts dynamic reflections onto it based on the content that's being displayed. This shader works very nicely with classic computer and DOS emulation.<ul> <li></li> </ul> </li> </ul>"},{"location":"shader/crt/#yeetron","title":"yeetron","text":"<ul> <li>Along with its close relative, Yee64, this shader is a clone of the CRT effects found in the Sonic Mania PC game. They both run quite fast and are compatible with relatively weak hardware, while also looking pretty good.<ul> <li></li> </ul> </li> </ul>"},{"location":"shader/crt/#zfast-crt","title":"zfast-crt","text":"<ul> <li>An excellent lightweight CRT shader that looks far better than it has any right to, considering how fast it is! This shader should be the first stop for weak/mobile devices that cannot handle even moderately demanding shaders, like CRT-Geom.<ul> <li></li> </ul> </li> </ul>"},{"location":"shader/crt/#comments","title":"Comments","text":""},{"location":"shader/crt/#external-links","title":"External Links","text":"<ul> <li>Slang Shaders</li> <li>GLSL Shaders</li> <li>CG Shaders</li> </ul>"},{"location":"shader/crt_royale/","title":"CRT-Royale","text":"<p>CRT-Royale is a collection of shaders developed by TroggleMonkey.</p> <p>It is quite an advanced shader that requires a bit of documentation in order to get the most out of it. Contents</p>"},{"location":"shader/crt_royale/#basics","title":"Basics","text":"<p>crt-royale is a highly customizable CRT shader for Retroarch and other programs supporting the libretro Cg shader standard. It uses a number of nonstandardized extensions like sRGB FBO's, mipmapping, and runtime shader parameters, but hopefully it will run without much of a fuss on new implementations of the standard as well.</p>"},{"location":"shader/crt_royale/#customizable-parameters","title":"Customizable Parameters","text":"<p>There are a huge number of parameters. Among the things you can customize:</p> <ul> <li>Phosphor mask type: An aperture grille, slot mask, and shadow mask are each included, although the latter won't be seeing much usage until 1440p displays and better become more common (4k UHD and 8k UHD are increasingly optimal).</li> <li>Phosphor mask dot pitch</li> <li>Phosphor mask resampling method: Choose between Lanczos sinc resizing, mipmapped hardware resizing, and no resizing of the input LUT.</li> <li>Phosphor bloom softness and type (real or fake ;))</li> <li>Gaussian and generalized Gaussian scanline beam properties/distribution, including convergence offsets</li> <li>Screen geometry, including curvature (spherical, alternative spherical, or cylindrical like Trinitrons), tilt, and borders</li> <li>Antialiasing level, resampling filter, and sharpness parameters for gracefully combining screen curvature with high-frequency phosphor details, including optionally resampling based on RGB subpixel positions.</li> <li>Halation (electrons bouncing under the glass and lighting random phosphors) random phosphors)</li> <li>Refractive diffusion (light spreading from the imperfect CRT glass face)</li> <li>Interlacing options</li> <li>etc.</li> </ul>"},{"location":"shader/crt_royale/#how-to-customize","title":"How to Customize","text":"<p>There are two major ways to customize the shader:</p> <ul> <li>Runtime shader parameters allow convenient experimentation with real-time feedback, but they are much slower, because they prevent static evaluation of a lot of math. Disabling them drastically speeds up the shader.</li> <li>If runtime shader parameters are disabled (partially or totally), those same settings can be freely altered in the text of the user-settings.h file. There are also a number of other static-only settings, including the #define macros which indicate where and when to allow runtime shader parameters. To disable them entirely, comment out the \"#define RUNTIME_SHADER_PARAMS_ENABLE\" line by putting a double-slash (\"//\") at the ginning...your FPS will skyrocket.</li> </ul>"},{"location":"shader/crt_royale/#preset-versions","title":"Preset Versions","text":"<p>You may also note that there are two major versions of the shader preset:</p> <ul> <li>crt-royale.cgh is the \"full\" version of the shader, which blooms the light from the brighter phosphors to maintain brightness and avoid clipping.</li> <li>crt-royale-fake-bloom.cgh is the \"cheater's\" version of the shader, which only fakes the bloom based on carefully blending in a [potentially blurred] version of the original input. This version is MUCH faster, and you have to strain to see the difference, so people with slower GPU's will prefer it.</li> </ul> <p>There's a lot to play around with, and I encourage everyone using this shader to read through the user-settings.h file to learn about the parameters. Before loading the shader, be sure to read the next section, entitled...</p>"},{"location":"shader/crt_royale/#frequently-asked-questions","title":"Frequently Asked Questions","text":""},{"location":"shader/crt_royale/#why-is-the-shader-crashing-when-i-load-it","title":"Why is the shader crashing when I load it!?","text":"<p>Do you get C6001 or C6002 errors with integrated graphics, like Intel HD 4000? If so, please try one of the following .cgp presets:</p> <ul> <li>crt-royale-intel.cgp</li> <li>crt-royale-fake-bloom-intel.cgp</li> </ul> <p>These load .cg wrappers that #define INTEGRATED_GRAPHICS_COMPATIBILITY_MODE (also available in user-settings.h) before loading the main .cg shader files.</p> <p>Integrated graphics compatibility mode will disable these three features, which currently require more registers or instructions than Intel GPU's allow:</p> <ul> <li>PHOSPHOR_MASK_MANUALLY_RESIZE: The phosphor mask will be softer. (This may be reenabled in a later release.)</li> <li>RUNTIME_GEOMETRY_MODE: You must change the screen geometry/curvature using the geom_mode_static setting in user-settings.h.</li> <li>The high-quality 4x4 Gaussian resize for the bloom approximation</li> </ul> <p>Using Intel-specific .cgp files is equivalent to #defining INTEGRATED_GRAPHICS_COMPATIBILITY_MODE in your user-settings.h. Out of the box, user-settings.h is configured for maximum configurability and compatibility with dedicated nVidia and AMD/ATI GPU's. Compatibility mode is disabled by default to avoid silently degrading quality for AMD/ATI and nVidia users, so Intel-specific .cgp's are a convenient way for Intel users to play with the shader without editing text files.</p> <p>I've tested this solution on Intel HD 4000 graphics, and it should work for that GPU at least, but please let me know if you're still having problems!</p>"},{"location":"shader/crt_royale/#why-is-everything-so-slow","title":"Why is everything so slow!?","text":"<p>Out of the box, this will be a problem for all but monster GPU's. The default user-settings.h file disables any features and optimizations which might cause compilation failure on AMD/ATI GPU's. Despite the name of the options, this is not a problem with your card or drivers; it's a shortcoming in the Cg shader compiler's nVidia-centric profile setups.</p> <p>Uncommenting the following #define macros at the top of user-settings.h will help performance a good deal on compatible nVidia cards:</p> <pre><code>#define DRIVERS_ALLOW_DERIVATIVES\n#define DRIVERS_ALLOW_DYNAMIC_BRANCHES\n#define ACCOMODATE_POSSIBLE_DYNAMIC_LOOPS #define DRIVERS_ALLOW_TEX2DLOD\n#define DRIVERS_ALLOW_TEX2DBIAS\n</code></pre> <p>A few of these warrant some elaboration. First, derivatives:</p> <ul> <li> <p>Derivatives allow the shader to cheaply calculate a tangent-space matrix for correct antialiasing when curvature or overscan are used. Without them, there are two options:</p> <ul> <li>Cheat, and there will be artifacts with strong cylindrical curvature</li> <li>Compute the correct tangent-space matrix analytically. This is used by default, and it's controlled by this option near the bottom: geom_force_correct_tangent_matrix = true</li> </ul> </li> <li> <p>Dynamic branches:</p> </li> </ul> <p>Dynamic branches allow the shader to avoid performing computations that it doesn't need (but might have, given different runtime options). Without them, the shader has to either let the GPU evaluate every possible codepath and select a result, or make a \"best guess\" ahead of time. The full phosphor bloom suffers most from not having dynamic branches, because the shader doesn't know how big of a blur to use until it knows your phosphor mask dot pitch...which you set at runtime if shader parameters are enabled.</p> <p>If RUNTIME_PHOSPHOR_BLOOM_SIGMA is commented out (faster), this won't matter: The shader will just select the blur size and standard deviation suitable for the mask_triad_size_desired_static setting in user-settings.cgp. It will be fast, but larger triads won't blur enough, and smaller triads will blur more than they need to. However, if RUNTIME_PHOSPHOR_BLOOM_SIGMA is enabled, the shader will calculate an optimal standard deviation and try to use the right blur size for it...but using an \"if standard deviation is such and such\" condition would be prohibitively slow without dynamic branches. Instead, the shader uses the largest and slowest blur the user lets it use (to cover the widest range of triad sizes and standard deviations), according to these macros:</p> <pre><code>#define PHOSPHOR_BLOOM_TRIADS_LARGER_THAN_3_PIXELS\n//#define PHOSPHOR_BLOOM_TRIADS_LARGER_THAN_6_PIXELS\n//#define PHOSPHOR_BLOOM_TRIADS_LARGER_THAN_9_PIXELS\n//#define PHOSPHOR_BLOOM_TRIADS_LARGER_THAN_12_PIXELS\n</code></pre> <p>The more you have uncommented, the larger the triads you can blur, but the slower runtime sigmas will be if your GPU can't use dynamic branches. By default, triads up to 6 pixels wide will be bloomed perfectly, and a little beyond that (8 should be fine), but going too far beyond that will create blocking artifacts in the blur due to an insufficient support size.</p> <ul> <li>tex2Dlod:</li> </ul> <p>The tex2Dlod function allows the shader to disables anisotropic filtering, which can get confused when we're manually tiling the texture coordinates for a small resized phosphor mask tile (it creates nasty seam artifacts). There are several ways the shader can deal with this: The cheapest is to use tex2Dlod to tile the output of MASK_RESIZE across the screen...and the slower alternatives either require derivatives or force the shader to draw 2 tiles to MASK_RESIZE in each direction, thereby reducing your maximum allowed dot pitch by half.</p> <ul> <li>tex2Dbias:</li> </ul> <p>According to nVidia's Cg language standard library page, tex2Dbias requires the fp30 profile, which doesn't work on ATI/AMD cards...but you might actually have mixed results. This can be used as a substitute for tex2Dlod at times, so it's worth trying even on ATI.</p>"},{"location":"shader/crt_royale/#why-is-everything-still-so-slow","title":"#Why is everything still so slow?!?","text":"<p>For maximum quality and configurability out of the box, almost all shader parameters are enabled by default (except for the disproportionately expensive runtime subpixel offsets). Some are more expensive than others. Commenting the following macro disables all shader parameters:</p> <pre><code>#define RUNTIME_SHADER_PARAMS_ENABLE\n</code></pre> <p>Commenting these macros disables selective shader parameters:</p> <pre><code>#define RUNTIME_PHOSPHOR_BLOOM_SIGMA\n#define RUNTIME_ANTIALIAS_WEIGHTS\n//#define RUNTIME_ANTIALIAS_SUBPIXEL_OFFSETS\n#define RUNTIME_SCANLINES_HORIZ_FILTER_COLORSPACE\n#define RUNTIME_GEOMETRY_TILT\n#define RUNTIME_GEOMETRY_MODE\n#define FORCE_RUNTIME_PHOSPHOR_MASK_MODE_TYPE_SELECT\n</code></pre> <p>Note that all shader parameters will still show up in your GUI list, and the disabled ones simply won't work.</p> <p>Finally, there are a lot of other options enabled by default that carry serious performance penalties. For instance, the default antialiasing filter is a cubic filter, because it's the most configurable, but it's also quite slow if RUNTIME_ANTIALIAS_WEIGHTS is #defined. A lot of the static true/false options have a significant influence, and the shader is faster if the red subpixel offset (from which the blue one is calculated as well) is zero...even if it's a static value, because RUNTIME_ANTIALIAS_SUBPIXEL_OFFSETS is commented out. To avoid any confusion, I should also clarify now that subpixel offsets are separate from scanline beam convergence offsets.</p> <p>To quickly see how much performance you can get from other settings, you can temporarily replace your user-settings.h with one of:</p> <ul> <li>crt-royale-settings-files/user-settings-fast-static-ati.h</li> <li>crt-royale-settings-files/user-settings-fast-static-nvidia.h, then load crt-royale-fake-bloom.cgp. It should be far more playable.</li> </ul>"},{"location":"shader/crt_royale/#why-wont-my-shader-bloom-my-phosphors-enough","title":"Why won't my shader bloom my phosphors enough?","text":"<p>First, see the discussion about dynamic branching above, in 1. If you don't have dynamic branches, you can either uncomment the lines that let the shader pessimistically use larger blurs than it's guaranteed to need (which is slow), or...you can just use crt-royale-fake-bloom.cgp, which doesn't have this problem. :)</p>"},{"location":"shader/crt_royale/#why-cant-i-make-my-phosphors-any-bigger","title":"Why can't I make my phosphors any bigger?","text":"<p>By default, the phosphor mask is Lanczos-resized in earlier passes to your specified dot pitch (mask_sample_mode = 0). This gives a much sharper result than mipmapped hardware sampling (mask_sample_mode = 1), but it can be much slower without taking proper care: If the input mask tile (containing 8 phosphor triads by default) is large, like 512x512, and you try to resize it to 24x24 for 3x3 pixel triads, the resizer has to take 128 samples in each pass/direction (the max allowed) for a 3-lobe Lanczos filter. This can be very slow, so I made the output of MASK_RESIZE very small by default: Just 1/16<sup>th</sup> of the viewport size in each direction. The exact limit scales with your viewport size, and it should be reasonable, but the restrictions can get tighter if we can't use tex2Dlod and have to fit two whole tiles (16 phosphor triads with default 8-triad tiles) into the MASK_RESIZE pass for compatibility with anisotropic filtering (long story).</p> <p>If you want bigger phosphor triads, you have two options:</p> <ul> <li>Set mask_sample_mode to 1 in your shader params (if enabled) or set mask_sample_mode_static to 1 in your user-settings.h file. This will use hardware sampling, which is softer but has no limitations.</li> <li>To increase the limit with manual mask-resizing (best quality), you need to do five things:<ul> <li>Go into your .cgp file and find the MASK_RESIZE pass (the horizontal mask resizing pass) and the one before it (the vertical mask resizing pass). Find the viewport-relative scales, which should say 0.0625, and change them to 0.125 or even 0.25.</li> <li>Still in your .cgp file, also make sure your mask_*_texture_small filenames point to LUT textures that are larger than your final desired onscreen size (upsizing is not currently permitted).</li> <li>Go into user-cgp-constants.h and change mask_resize_viewport_scale from 0.0625 to the new value you changed it to in step 1. This is necessary, because we can't pass that value from the .cgp file to the shader, and the shader can't compute the viewport size (necessary) without it.</li> <li>Still in user-cgp-constants.h, update mask_texture_small_size and mask_triads_per_tile appropriately if you changed your LUT texture in step 2.</li> <li>Reload your .cgp file. I REALLY wish there was an easier way to do that, but my hands are tied until</li> </ul> </li> </ul> <p>.cgp files are allowed to pass more information to .cg shaders (which would require major updates to the cg2glsl script).</p>"},{"location":"shader/crt_royale/#why-cant-i-make-my-phosphors-any-smaller-than-2-pixels-per-triad","title":"Why can't I make my phosphors any smaller than 2 pixels per triad?","text":"<p>This is controlled by mask_min_allowed_triad_size in your user-settings.h file. Set it to 1.0 instead of 2.0 (anything lower than 1 is pointless), and you're set. It defaults to 2.0 to make mask resizing twice as fast when dynamic branches aren't allowed. Some people may want to be able to fade the phosphors away entirely to get a more PVM-like scanlined image though, so change it to 1.0 for that (or get a higher-resolution display ;)).</p> <p>Note: This setting should be obsolete soon. I have some ideas for more sophisticated mask resampling that I just don't have a spare few hours to implement yet.</p>"},{"location":"shader/crt_royale/#i-am-not-running-integrated-graphics-why-am-i-getting-errors","title":"I am not running integrated graphics. Why am I getting errors?","text":"<p>First recheck the top of your user-settings.h to make sure incompatible driver options are commented out (disabled). If they're all disabled and you're still having problems, you've probably found a bug. There are bound to be a number of them with certain setting combinations, and there might even be a few individual settings I broke more recently than I tested them. My contact information is up top, so let me know!</p>"},{"location":"shader/crt_royale/#why-am-i-getting-banding-in-dark-colors-or-why-wont-mipmapping-work","title":"Why am I getting banding in dark colors? Or, why won't mipmapping work?","text":"<p>crt-royale uses features like sRGB and mipmapping, which are not available in the latest Retroarch release (1.0.0.2) at the time of this writing.</p> <p>You may get banding in dark colors if your platform or Retroarch version doesn't support sRGB FBO's, and mask_sample_mode 1 will look awful without mipmapping. I expect most platforms capable of running this shader at full speed will support sRGB FBO's, but if yours doesn't, please let me know, and I'll include a note about it.</p> <p>Alternately, setting levels_autodim_temp too low will cause precision loss and banding.</p>"},{"location":"shader/crt_royale/#how-do-i-set-geometrycurvatureetc","title":"How do I set geometry/curvature/etc.?","text":"<p>If RUNTIME_SHADER_PARAMS_ENABLE and RUNTIME_GEOMETRY_MODE are both #defined (not commented out) in user-settings.cgp, you can find these options in your shader parameters (in Retroarch's RGUI for instance) under e.g. geom_mode. Otherwise, you can set the corresponding e.g. geom_mode_static options in user-settings.h.</p>"},{"location":"shader/crt_royale/#why-dont-my-shader-parameters-stick","title":"Why don't my shader parameters stick?","text":"<p>This is a bit confusing, at least in the version of Retroarch I'm using. In the Shader Options menu, Parameters (Current) controls what's on your screen right now, whereas Parameters (RGUI) seems to control what gets saved to a shader preset (in your base shaders directory) with Save As Shader Preset.</p>"},{"location":"shader/crt_royale/#why-did-you-slow-the-shader-down-with-all-of-these-features-i-dont-want-why-didnt-you-make-the-defaults-more-to-my-liking","title":"Why did you slow the shader down with all of these features I don't want? Why didn't you make the defaults more to my liking?","text":"<p>The default settings tend to best match flat ~13\" slot mask TV's with sharp scanlines. Real CRT's however vary a lot in their characteristics (and many are softer in more ways than one), so it's impossible to make the default settings look like everyone's favorite CRT. Moreover, it's impossible to decide which of the slower features and options are superfluous:</p> <p>Some people love curvature, and some people hate it. Some people love scanlines, and some people hate them. Some people love phosphors, and some people hate them. Some people love interlacing support, and some people hate it. Some people love sharpness, and some people hate it. Some people love convergence error, and some people hate it. The one thing you hate the most is probably someone else's most critical feature. This is why there are so many options, why the shader is so complicated, and why it's impossible to please everyone out of the box...unfortunately.</p> <p>That said, if you spend some time tweaking the settings, you're bound to get a picture you like. Once you've made up your mind, you can save the settings to a user-settings.h file and disable shader parameters and other slow options to get the kind of performance you want.</p>"},{"location":"shader/crt_royale/#why-didnt-you-include-a-shader-preset-with-ntsc-support-why-didnt-you-include-more-canned-presets-with-different-options-why-cant-i-select-from-one-of-several-user-settings-files-without-manual-file-renaming","title":"Why didn't you include a shader preset with NTSC support? Why didnt' you include more canned presets with different options? Why can't I select from one of several user settings files without manual file renaming?","text":"<p>I do plan on adding a version that uses the NTSC shader for the first two passes, but it will take a bit of work, because there are several NTSC shader versions as it is. It's easy enough to combine the HALATION_BLUR passes into a one-pass blur from blurs/blur9x9fast.cg, but I'm not sure yet just how much modification the NTSC shader passes themselves might need for best results.</p> <p>I originally wanted NTSC support to be included out-of-the-box, but I'd also like to release the shader ASAP, so it'll have to wait.</p> <p>As for other canned presets, that's a little more complicated: I DO intend on creating more canned presets, but the combinatorial explosion of major codepath options in this shader is too overwhelming to be as exhaustive as I'd like. When I get the time, I'll add what I can to make this more user-friendly. In the meantime, I'll start adding a few different default versions of the user settings file and put them in a subdirectory for people to manually place in the main directory and rename to \"user-settings.h.\"</p> <p>However, the libretro Cg shader specification (and the Cg to GLSL compiler) does not currently allow .cgp files to pass any static settings to the source files. This presents a huge problem, because it means that in order to create a new preset with different options, I also have to create duplicate files for EVERY single .cg pass for every permutation, not just the .cgp. I plan on creating a number of skeleton wrapper .cg files in a subdirectory (which set a few options and then include the main .cg file for the pass), but it'll be a while yet. In the meantime, I'd rather let people play with what's already done than keep it hidden on my hard drive.</p>"},{"location":"shader/crt_royale/#why-do-so-many-values-in-user_settingsh-have-a-_static-suffix","title":"Why do so many values in user_settings.h have a _static suffix?","text":"<p>The \"_static\" suffix is there to prevent naming conflicts with runtime shader parameters: The shader usually uses a version without the suffix, which is assigned either the value of the \"_static\" version or the runtime shader parameter version. If a value in user-settings.h doesn't have a \"_static\" suffix, it's usually because it's a static compile-time option only, with no corresponding runtime version. Basically, you can ignore the suffix. :)</p>"},{"location":"shader/crt_royale/#are-there-any-broken-settings-i-should-be-aware-of-what-if-i-want-to-change-settings-in-the-cgp-file","title":"Are there any broken settings I should be aware of? What if I want to change settings in the .cgp file?","text":"<p>As far as I know, all of the options in user-settings.h and the runtime shader parameters are pretty robust, with a few caveats:</p> <ul> <li>As noted above, there are some tradeoffs between runtime and compile-time options. If runtime blur sigmas are disabled for instance, the phosphor bloom (and to a lesser extent, the fake bloom) may not blur the right amount.</li> <li>If you set your aspect ratio incorrectly, and mask_specify_num_triads == 1.0 (i.e. true, as opposed to 0.0, which is false), the shader will misinterpret the number of triads you want by the same proportion.</li> <li>Disabled shader parameters will do nothing, including either:<ul> <li>mask_triad_size_desired</li> <li>mask_num_triads_desired, depending on the value of mask_specify_num_triads.</li> </ul> </li> </ul> <p>There is a broken and unimplemented option in derived-settings-and-constants.h, but users shouldn't need to mess around in there anyway. (It's related to the more efficient phosphor mask resampling I want to implement.)</p> <p>However, the .cgp files are another story: They are pretty brittle, especially when it comes to their interaction with user-cgp-constants.h. Be aware that the shader passes rely on scale types and sizes in your .cgp file being exactly what they expect. Do not change any scale types from the defaults, or you'll get artifacts under certain conditions. You can change the BLOOM_APPROX and MASK_RESIZE scale values (not scale types), but you must update the associated constant in user-cgp-constants.h to let the .cg shader files know about it, and the implications may reach farther than you expect. Similarly, if you plan on changing an LUT texture, make sure you update the associated constants in user-cgp-constants.h. In short, if you plan on changing anything in a .cgp file, you'll want to read it thoroughly first, especially the \"IMPORTANT\" section at the top.</p>"},{"location":"shader/crt_royale/#what-are-the-most-common-dot-pitches-for-crt-televisions-what-kind-of-resolution-would-i-need-for-a-real-shadow-mask","title":"What are the most common dot pitches for CRT televisions? What kind of resolution would I need for a real shadow mask?","text":"<p>The most demanding CRT we're ever likely to emulate is a Sony PVM-20M4U:</p> <ul> <li>Width: 450mm</li> <li>Aperture Grille Pitch: 0.31mm</li> <li>Triads in 4:3 frame: 1451, assuming little to no overscan</li> </ul> <p>For 3-pixel triads, we would need about 6k UHD resolution. A BVM-20F1U has similar requirements.</p> <p>However, common slot masks are far more similar to the kind of image this shader will produce at 900p, 1080p, 1200p, and 1440p:</p> <ul> <li>A typical 13\" diagonal CRT might have a 0.60mm slot pitch, for a total of 440.26666666666665 or so phosphor triads horizontally.</li> <li>A typical 19\" diagonal CRT might have a 0.75mm slot pitch, for a total of 514.7733333333333 or so phosphor triads horizontally.</li> <li>According to http://repairfaq.ece.drexel.edu/REPAIR/F_crtfaq.html, a typical 25\" diagonal CRT might have a 0.9mm slot pitch, for a total of 564.4444444444445 or so phosphor triads horizontally.</li> <li>A 21\" Samsung SMC210N CCTV monitor (450 TV lines) has a 0.7mm stripe pitch, for a total of 609.6 or so phosphor triads horizontally.</li> </ul> <p>The included EDP shadow mask starts looking very good with ~6-pixel triads, so it may take nearly 4k resolution to make it a particularly compelling option. However, it's possible to make smaller shadow masks on a pixel-by-pixel basis and tile them at a 1:1 ratio (mask_sample_mode = 2). I may include a mask like this in a future update.</p>"},{"location":"shader/crt_royale/#is-this-phosphor-bloom-realistic","title":"Is this phosphor bloom realistic?","text":"<p>Probably not:</p> <p>Realistically, the \"phosphor bloom\" blurs bright phosphors significantly more than your eyes would bloom the brighter phosphors on a real CRT. This extra blurring however is necessary to distribute enough brightness to nearby pixels that we can amplify the overall brightness to that of the original source after applying the phosphor mask. If you're interested, there are more comments on the subject at the top of the fragment shader in crt-royale-bloom-approx.cg.</p> <p>On the subject of the phosphor bloom: I intended to include some exposition about the math behind the brightpass calculation (and the much more complex and thorough calculation I originally used to blur the minimal amount necessary, which turned out to be inferior in practice), but that document isn't release-ready at the moment. Sorry Hyllian. ;) So what do you plan on adding in the future?</p> <p>I'd like to add these relatively soon:</p> <ul> <li>A combined ntsc-crt-royale.cgp and ntsc-crt-royale-fake-bloom.cgp.</li> <li>More presets, especially if maister or squarepusher find a way to make the Cg to GLSL compiler process .cgp files (which will allows .cgp's to pass arbitrary #defines to the .cg shader passes).</li> <li>More efficient and flexible phosphor mask resampling. Hopefully, this will make it possible to manually resize the mask on Intel HD Graphics as well.</li> <li>Make it more easy and convenient to use and experiment with mask_sample_mode 2 (direct 1:1 tiling of an input texture) by using a separate LUT texture with its own parameters in user-cgp-constants.h, etc. I haven't done this yet because it requires yet another texture sample that could hurt other codepaths, and I'm waiting until I have time to optimize it.</li> <li>Refine the runtime shader parameters: Some of them are probably too fine-grained and slow to change.</li> </ul> <p>Maybe's:</p> <ul> <li>I've had trouble getting LUT's from subdirectories to work consistently across platforms, but I'd like to get around that and include more mask textures I've made.</li> <li>If you're using spherical curvature with a small radius, the edges of the sphere are blocky due to the pixel discards being done in 2x2 fragment blocks. I'd like to fix this if it can be done without a performance hit.</li> <li>I have some ideas for procedural mask generation with a fast, closed-form low-pass filter, but I don't know if I'll ever get around to it.</li> </ul>"},{"location":"shader/cubic/","title":"cubic","text":""},{"location":"shader/cubic/#background","title":"Background","text":""},{"location":"shader/cubic/#preview-image","title":"Preview Image","text":"<ul> <li>cubic-gamma-correct</li> </ul> <ul> <li>cubic</li> </ul>"},{"location":"shader/cubic/#comments","title":"Comments","text":""},{"location":"shader/cubic/#external-links","title":"External Links","text":"<ul> <li>Slang Shaders</li> <li>GLSL Shaders</li> <li>CG Shaders</li> </ul>"},{"location":"shader/ddt/","title":"ddt","text":""},{"location":"shader/ddt/#background","title":"Background","text":""},{"location":"shader/ddt/#preview-image","title":"Preview Image","text":"<ul> <li>ddt</li> </ul>"},{"location":"shader/ddt/#comments","title":"Comments","text":""},{"location":"shader/ddt/#external-links","title":"External Links","text":"<ul> <li>Slang Shaders</li> <li>GLSL Shaders</li> <li>CG Shaders</li> </ul>"},{"location":"shader/dithering/","title":"dithering","text":""},{"location":"shader/dithering/#background","title":"Background","text":""},{"location":"shader/dithering/#preview-image","title":"Preview Image","text":"<ul> <li>bayer-matrix-dithering</li> </ul> <ul> <li>cbod-v1</li> </ul> <ul> <li>gdapt</li> </ul> <ul> <li>gdapt+xbr-hybrid+aa</li> </ul> <ul> <li>gdapt+xbr-hybrid+ddt</li> </ul> <ul> <li>gendither</li> </ul> <ul> <li>mdapt</li> </ul> <ul> <li>mdapt+xbr-hybrid+aa</li> </ul> <ul> <li>mdapt+xbr-hybrid+ddt</li> </ul>"},{"location":"shader/dithering/#comments","title":"Comments","text":""},{"location":"shader/dithering/#external-links","title":"External Links","text":"<ul> <li>Slang Shaders</li> <li>GLSL Shaders</li> <li>CG Shaders</li> </ul>"},{"location":"shader/eagle/","title":"eagle","text":""},{"location":"shader/eagle/#background","title":"Background","text":""},{"location":"shader/eagle/#preview-image","title":"Preview Image","text":"<ul> <li>supereagle</li> </ul>"},{"location":"shader/eagle/#comments","title":"Comments","text":""},{"location":"shader/eagle/#external-links","title":"External Links","text":"<ul> <li>Slang Shaders</li> <li>GLSL Shaders</li> <li>CG Shaders</li> </ul>"},{"location":"shader/handheld-border/","title":"handheld console borders","text":""},{"location":"shader/handheld-border/#description","title":"Description","text":"<p>Shaders that apply a handheld console border image, at different scale factors, for various handheld consoles.</p>"},{"location":"shader/handheld-border/#preview-image","title":"Preview Image","text":"<ul> <li>dmg-2x</li> </ul> <ul> <li>dmg-3x</li> </ul> <ul> <li>dmg-4x</li> </ul> <ul> <li>dmg-5x</li> </ul> <ul> <li>dmg-5x</li> </ul> <ul> <li>gb-pocket-2x</li> </ul> <ul> <li>gb-pocket-3x</li> </ul> <ul> <li>gb-pocket-4x</li> </ul> <ul> <li>gb-pocket-5x</li> </ul> <ul> <li>gb-pocket-6x</li> </ul> <ul> <li>gb-pocket-6x</li> </ul> <ul> <li>gba-3x</li> </ul> <ul> <li>gba-4x</li> </ul> <ul> <li>gba-5x</li> </ul> <ul> <li>gba-6x</li> </ul> <ul> <li>gbc-2x</li> </ul> <ul> <li>gbc-3x</li> </ul> <ul> <li>gbc-4x</li> </ul> <ul> <li>gb-pocket-5x</li> </ul> <ul> <li>gb-pocket-6x</li> </ul> <ul> <li>gba-2x</li> </ul> <ul> <li>gba-3x</li> </ul> <ul> <li>gba-4x</li> </ul> <ul> <li>gba-5x</li> </ul> <ul> <li>gba-6x</li> </ul> <ul> <li>gbc-2x</li> </ul> <ul> <li>gbc-3x</li> </ul> <ul> <li>gbc-4x</li> </ul> <ul> <li>gbc-5x</li> </ul> <ul> <li>gbc-6x</li> </ul> <ul> <li>gg-2x</li> </ul> <ul> <li>gg-3x</li> </ul> <ul> <li>gg-4x</li> </ul> <ul> <li>gg-5x</li> </ul> <ul> <li>gg-6x</li> </ul> <ul> <li>ngp-2x</li> </ul> <ul> <li>ngp-3x</li> </ul> <ul> <li>ngp-4x</li> </ul> <ul> <li>ngp-5x</li> </ul> <ul> <li>ngp-6x</li> </ul>"},{"location":"shader/handheld-border/#comments","title":"Comments","text":""},{"location":"shader/handheld-border/#external-links","title":"External Links","text":"<ul> <li>Slang Shaders</li> <li>GLSL Shaders</li> <li>CG Shaders</li> </ul>"},{"location":"shader/handheld/","title":"handheld","text":""},{"location":"shader/handheld/#description","title":"Description","text":"<p>Collection of handheld specific shaders.</p>"},{"location":"shader/handheld/#preview-image","title":"Preview Image","text":"<ul> <li>dot</li> </ul> <ul> <li>gameboy-light</li> </ul> <ul> <li>gameboy-pocket</li> </ul> <ul> <li>gameboy</li> </ul> <ul> <li>gba-color</li> </ul> <ul> <li>lcd-3x</li> </ul> <ul> <li>lcd-grid-v2-gba-color-motionblur</li> </ul> <ul> <li>lcd-grid-v2</li> </ul> <ul> <li>lcd-grid-v2</li> </ul> <ul> <li>nds-color</li> </ul> <ul> <li>psp-color</li> </ul> <ul> <li>vba-color</li> </ul> <ul> <li>zfast-lcd</li> </ul>"},{"location":"shader/handheld/#comments","title":"Comments","text":""},{"location":"shader/handheld/#external-links","title":"External Links","text":"<ul> <li>Slang Shaders</li> <li>GLSL Shaders</li> <li>CG Shaders</li> </ul>"},{"location":"shader/hqx/","title":"hqx","text":""},{"location":"shader/hqx/#background","title":"Background","text":""},{"location":"shader/hqx/#preview-image","title":"Preview Image","text":"<ul> <li>hq2x</li> </ul> <ul> <li>hq3x</li> </ul> <ul> <li>hq4x</li> </ul>"},{"location":"shader/hqx/#comments","title":"Comments","text":""},{"location":"shader/hqx/#external-links","title":"External Links","text":"<ul> <li>Slang Shaders</li> <li>GLSL Shaders</li> <li>CG Shaders</li> </ul>"},{"location":"shader/introduction/","title":"Shaders","text":"<p>Shaders are efficient graphics filters that can greatly improve the rendering of old games. They can also be used to replicate the look and feel of old CRT monitors. You can even stack them to create your own effect. The possibilities are infinite.</p> <p>RetroArch is shipped with a lot of shaders. There is an overwhelming array of them and we can't show all of them on this page.</p> <p>Here are a few common examples:</p> <p></p> <p>Shaders can also be used to display the handheld border:</p> <p></p>"},{"location":"shader/introduction/#shader-languages-and-shader-presets","title":"Shader languages and shader presets","text":"<p>Shaders are small programs, and they are written in specific programming languages. RetroArch supports 3 of these languages:</p> <ul> <li>CG: Old, deprecated format. Might not be available if RetroArch is built without Cg runtime support.</li> <li>GLSL: Shader format available to OpenGL. Wide range of platforms including phones and tablets.</li> <li>Slang: New and recommended shader format, when available. Compatible with Vulkan, Direct3D 10/11/12, OpenGL Core, WiiU and Metal renderers.</li> <li>Depending on your platform and the way you have configured RetroArch, you need to use one of these shader types.</li> </ul> <p>RetroArch is also able to stack these shaders to create a combined effect. These complex effects are saved with a special extension:</p> <ul> <li>.cpg for CG</li> <li>.glslp for GLSL</li> <li>.slangp for Slang</li> </ul> <p>The shader presets can also have parameters. This means that you can tweak them to fit your needs.</p>"},{"location":"shader/introduction/#downloading-and-upgrading-shaders","title":"Downloading and upgrading shaders","text":"<p>You can download or upgrade the shader packs for the 3 types in Main Menu -&gt; Online Updater.</p>"},{"location":"shader/introduction/#loading-a-shader-preset","title":"Loading a shader preset","text":"<p>To enable a shader preset, you need to have a game running.</p> <p>You then trigger the menu and you should see a Shaders entry in the Quick Menu.</p> <p>Go to Load Shader Preset and choose a preset file.</p> <p>For this example, we used shaders_glsl/crt/crt-geom.glslp.</p> <p></p>"},{"location":"shader/introduction/#configuring-a-shader","title":"Configuring a shader","text":"<p>In this example, we have set the Menu Shader pipeline to OFF and the Background Opacity to 0 in the Settings-&gt;User Interface-&gt;Menu to be able to preview the parameter changes in live.</p> <p>Load a game and apply a shader preset that supports parameters like shaders_glsl/crt/crt-geom.glslp.</p> <p>You then trigger the menu and you should see a Shaders entry in the Quick Menu.</p> <p>Go to Preview Shader Parameters and start playing with the values.</p> <p>When you are happy with your changes, you can save them under a new preset file.</p> <p></p>"},{"location":"shader/introduction/#background","title":"Background","text":"<p>A section to display thumbnail previews for RetroArch's many shaders.</p> <p>Its structured to reflect the common-shaders and slang-shaders repos and it includes previews of the shader presets (i.e., not individual shaders unless they have an accompanying preset).</p> <p>When possible, preview shots were created by opening the upscale-test image in RetroArch's built-in image-viewer core at 8x scale. Some shaders require additional settings or images to capture their effects and those are handled on a case-by-case basis. When additional settings are required, notes should be added to the preview comments.</p>"},{"location":"shader/introduction/#upscale-test-image","title":"Upscale Test Image","text":""},{"location":"shader/introduction/#external-links","title":"External Links","text":"<ul> <li>Slang Shaders</li> <li>GLSL Shaders</li> <li>CG Shaders</li> </ul>"},{"location":"shader/linear/","title":"linear","text":""},{"location":"shader/linear/#background","title":"Background","text":""},{"location":"shader/linear/#preview-image","title":"Preview Image","text":""},{"location":"shader/linear/#comments","title":"Comments","text":""},{"location":"shader/linear/#external-links","title":"External Links","text":"<ul> <li>Slang Shaders</li> <li>GLSL Shaders</li> <li>CG Shaders</li> </ul>"},{"location":"shader/motionblur/","title":"motionblur","text":""},{"location":"shader/motionblur/#background","title":"Background","text":""},{"location":"shader/motionblur/#preview-image","title":"Preview Image","text":"<ul> <li>feedback</li> </ul> <ul> <li>motionblur-simple</li> </ul>"},{"location":"shader/motionblur/#comments","title":"Comments","text":""},{"location":"shader/motionblur/#external-links","title":"External Links","text":"<ul> <li>Slang Shaders</li> <li>GLSL Shaders</li> <li>CG Shaders</li> </ul>"},{"location":"shader/mudlord/","title":"mudlord","text":""},{"location":"shader/mudlord/#description","title":"Description","text":"<p>A collection of shader presets by community member Mudlord.</p>"},{"location":"shader/mudlord/#preview-image","title":"Preview Image","text":"<ul> <li>bloom</li> </ul> <ul> <li>blur</li> </ul> <ul> <li>emboss</li> </ul> <ul> <li>oldtv</li> </ul> <ul> <li>toon</li> </ul> <ul> <li>waterpaint-mudlord</li> </ul>"},{"location":"shader/mudlord/#comments","title":"Comments","text":""},{"location":"shader/mudlord/#external-links","title":"External Links","text":"<ul> <li>Slang Shaders</li> <li>GLSL Shaders</li> <li>CG Shaders</li> </ul>"},{"location":"shader/nedi/","title":"nedi","text":""},{"location":"shader/nedi/#background","title":"Background","text":""},{"location":"shader/nedi/#preview-image","title":"Preview Image","text":"<ul> <li>fast-bilateral-nedi</li> </ul> <ul> <li>nedi</li> </ul>"},{"location":"shader/nedi/#comments","title":"Comments","text":""},{"location":"shader/nedi/#external-links","title":"External Links","text":"<ul> <li>Slang Shaders</li> <li>GLSL Shaders</li> <li>CG Shaders</li> </ul>"},{"location":"shader/nnedi3/","title":"nnedi3","text":""},{"location":"shader/nnedi3/#background","title":"Background","text":""},{"location":"shader/nnedi3/#preview-image","title":"Preview Image","text":"<ul> <li>nnedi3-nns16-2x-luma</li> </ul> <ul> <li>nnedi3-nns16-2x-rgb</li> </ul> <ul> <li>nnedi3-nns16-4x-luma</li> </ul> <ul> <li>nnedi3-nns32-2x-rgb-nns32-4x-luma</li> </ul> <ul> <li>nnedi3-nns32-4x-rgb</li> </ul> <ul> <li>nnedi3-nns64-2x-nns32-4x-nns16-8x-rgb</li> </ul> <ul> <li>nnedi3-nns64-2x-nns32-4x-rgb</li> </ul>"},{"location":"shader/nnedi3/#comments","title":"Comments","text":""},{"location":"shader/nnedi3/#external-links","title":"External Links","text":"<ul> <li>Slang Shaders</li> <li>GLSL Shaders</li> <li>CG Shaders</li> </ul>"},{"location":"shader/ntsc/","title":"ntsc","text":""},{"location":"shader/ntsc/#background","title":"Background","text":""},{"location":"shader/ntsc/#preview-image","title":"Preview Image","text":"<ul> <li>ntsc</li> </ul> <ul> <li>mame-ntsc</li> </ul> <ul> <li>ntsc-256px-gauss-scanline</li> </ul> <ul> <li>ntsc-256px-svideo-gauss-scanline</li> </ul> <ul> <li>ntsc-256px-svideo</li> </ul> <ul> <li>ntsc-256px</li> </ul> <ul> <li>ntsc-320px-gauss-scanline</li> </ul> <ul> <li>ntsc-320px-svideo-gauss-scanline</li> </ul> <ul> <li>ntsc-320px-svideo</li> </ul> <ul> <li>ntsc-320px</li> </ul> <ul> <li>ntsc-svideo</li> </ul> <ul> <li>ntsc-vcr</li> </ul>"},{"location":"shader/ntsc/#comments","title":"Comments","text":""},{"location":"shader/ntsc/#external-links","title":"External Links","text":"<ul> <li>Slang Shaders</li> <li>GLSL Shaders</li> <li>CG Shaders</li> </ul>"},{"location":"shader/presets/","title":"presets","text":""},{"location":"shader/presets/#background","title":"Background","text":""},{"location":"shader/presets/#preview-image","title":"Preview Image","text":"<ul> <li>crt-royale-kurozumi</li> </ul> <ul> <li>ntsc-phosphorlut</li> </ul> <ul> <li>scalefx9-aa-blur-hazy-ntsc-sh1nra358</li> </ul> <ul> <li>scalefx9-aa-blur-hazy-vibrance-sh1nra358</li> </ul>"},{"location":"shader/presets/#comments","title":"Comments","text":""},{"location":"shader/presets/#external-links","title":"External Links","text":"<ul> <li>Slang Shaders</li> <li>GLSL Shaders</li> <li>CG Shaders</li> </ul>"},{"location":"shader/retro/","title":"retro","text":""},{"location":"shader/retro/#background","title":"Background","text":""},{"location":"shader/retro/#preview-image","title":"Preview Image","text":"<ul> <li>aann</li> </ul> <ul> <li>ascii</li> </ul> <ul> <li>bead</li> </ul> <ul> <li>bevel</li> </ul> <ul> <li>pixellate</li> </ul> <ul> <li>retro-v2</li> </ul> <ul> <li>sharp-bilinear</li> </ul> <ul> <li>smootheststep</li> </ul>"},{"location":"shader/retro/#comments","title":"Comments","text":""},{"location":"shader/retro/#external-links","title":"External Links","text":"<ul> <li>Slang Shaders</li> <li>GLSL Shaders</li> <li>CG Shaders</li> </ul>"},{"location":"shader/sabr/","title":"sabr","text":""},{"location":"shader/sabr/#background","title":"Background","text":""},{"location":"shader/sabr/#preview-image","title":"Preview Image","text":"<ul> <li>sabr-hybrid-deposterize</li> </ul> <ul> <li>sabr-v1.1</li> </ul> <ul> <li>sabr-v3.0</li> </ul> <ul> <li>sabr</li> </ul>"},{"location":"shader/sabr/#comments","title":"Comments","text":""},{"location":"shader/sabr/#external-links","title":"External Links","text":"<ul> <li>Slang Shaders</li> <li>GLSL Shaders</li> <li>CG Shaders</li> </ul>"},{"location":"shader/scalefx-old-shaders/","title":"Old scalefx shaders","text":""},{"location":"shader/scalefx-old-shaders/#background","title":"Background","text":""},{"location":"shader/scalefx-old-shaders/#preview-image","title":"Preview Image","text":"<ul> <li>scalefx_hybrid</li> </ul> <ul> <li>scalefx-9x</li> </ul> <ul> <li>scalefx</li> </ul> <ul> <li>scalefx9</li> </ul> <ul> <li>xsoft+scalefx_hybrid</li> </ul> <ul> <li>xsoft+scalefx</li> </ul> <ul> <li>xsoft+scalefx+sharpsmoother</li> </ul> <ul> <li>xsofter+scalefx_hybrid</li> </ul> <ul> <li>xsofter+scalefx</li> </ul>"},{"location":"shader/scalefx-old-shaders/#comments","title":"Comments","text":""},{"location":"shader/scalefx-old-shaders/#external-links","title":"External Links","text":"<ul> <li>Slang Shaders</li> <li>GLSL Shaders</li> <li>CG Shaders</li> </ul>"},{"location":"shader/scalefx/","title":"scalefx","text":""},{"location":"shader/scalefx/#background","title":"Background","text":""},{"location":"shader/scalefx/#preview-image","title":"Preview Image","text":"<ul> <li>scalefx</li> </ul> <ul> <li>scalefx-hybrid</li> </ul>"},{"location":"shader/scalefx/#comments","title":"Comments","text":""},{"location":"shader/scalefx/#external-links","title":"External Links","text":"<ul> <li>Slang Shaders</li> <li>GLSL Shaders</li> <li>CG Shaders</li> </ul>"},{"location":"shader/scalehq/","title":"scalehq","text":""},{"location":"shader/scalehq/#background","title":"Background","text":""},{"location":"shader/scalehq/#preview-image","title":"Preview Image","text":"<ul> <li>2x-scalehq</li> </ul> <ul> <li>2xScaleHQ</li> </ul> <ul> <li>4x-scalehq</li> </ul> <ul> <li>4xScaleHQ</li> </ul>"},{"location":"shader/scalehq/#comments","title":"Comments","text":""},{"location":"shader/scalehq/#external-links","title":"External Links","text":"<ul> <li>Slang Shaders</li> <li>GLSL Shaders</li> <li>CG Shaders</li> </ul>"},{"location":"shader/scalenx/","title":"scalenx","text":""},{"location":"shader/scalenx/#background","title":"Background","text":""},{"location":"shader/scalenx/#preview-image","title":"Preview Image","text":"<ul> <li>scale2x</li> </ul> <ul> <li>scale2xplus</li> </ul> <ul> <li>scale2xSFX</li> </ul> <ul> <li>scale3x</li> </ul>"},{"location":"shader/scalenx/#comments","title":"Comments","text":""},{"location":"shader/scalenx/#external-links","title":"External Links","text":"<ul> <li>Slang Shaders</li> <li>GLSL Shaders</li> <li>CG Shaders</li> </ul>"},{"location":"shader/sharpen/","title":"sharpen","text":""},{"location":"shader/sharpen/#background","title":"Background","text":""},{"location":"shader/sharpen/#preview-image","title":"Preview Image","text":"<ul> <li>adaptive-sharpen</li> </ul>"},{"location":"shader/sharpen/#comments","title":"Comments","text":""},{"location":"shader/sharpen/#external-links","title":"External Links","text":"<ul> <li>Slang Shaders</li> <li>GLSL Shaders</li> <li>CG Shaders</li> </ul>"},{"location":"shader/windowed/","title":"windowed","text":""},{"location":"shader/windowed/#background","title":"Background","text":""},{"location":"shader/windowed/#preview-image","title":"Preview Image","text":"<ul> <li>jinc2-sharp</li> </ul> <ul> <li>jinc2-sharper</li> </ul> <ul> <li>jinc2</li> </ul> <ul> <li>lanczos16</li> </ul>"},{"location":"shader/windowed/#comments","title":"Comments","text":""},{"location":"shader/windowed/#external-links","title":"External Links","text":"<ul> <li>Slang Shaders</li> <li>GLSL Shaders</li> <li>CG Shaders</li> </ul>"},{"location":"shader/xbr/","title":"xbr","text":""},{"location":"shader/xbr/#background","title":"Background","text":""},{"location":"shader/xbr/#preview-image","title":"Preview Image","text":"<ul> <li>2xbr-lv1-multipass</li> </ul> <ul> <li>super-xbr-2p</li> </ul> <ul> <li>super-xbr-3p-smoother</li> </ul> <ul> <li>super-xbr-6p</li> </ul> <ul> <li>super-xbr-fast-3p</li> </ul> <ul> <li>super-xbr-fast-6p</li> </ul> <ul> <li>xbr-hybrid</li> </ul> <ul> <li>xbr-lv1-noblend</li> </ul> <ul> <li>xbr-lv2-fast</li> </ul> <ul> <li>xbr-lv2-multipass</li> </ul> <ul> <li>xbr-lv2-noblend</li> </ul> <ul> <li>xbr-lv2</li> </ul> <ul> <li>xbr-lv3-multipass</li> </ul> <ul> <li>xbr-lv3-noblend</li> </ul> <ul> <li>xbr-lv3</li> </ul> <ul> <li>xbr-mlv4-dilation</li> </ul> <ul> <li>xbr-mlv4-multipass</li> </ul>"},{"location":"shader/xbr/#comments","title":"Comments","text":""},{"location":"shader/xbr/#external-links","title":"External Links","text":"<ul> <li>Slang Shaders</li> <li>GLSL Shaders</li> <li>CG Shaders</li> </ul>"},{"location":"shader/xbrz/","title":"xbrz","text":""},{"location":"shader/xbrz/#background","title":"Background","text":""},{"location":"shader/xbrz/#preview-image","title":"Preview Image","text":"<ul> <li>4xbrz</li> </ul> <ul> <li>5xbrz</li> </ul> <ul> <li>6xbrz</li> </ul>"},{"location":"shader/xbrz/#comments","title":"Comments","text":""},{"location":"shader/xbrz/#external-links","title":"External Links","text":"<ul> <li>Slang Shaders</li> <li>GLSL Shaders</li> <li>CG Shaders</li> </ul>"},{"location":"shader/xsal/","title":"xsal","text":""},{"location":"shader/xsal/#background","title":"Background","text":""},{"location":"shader/xsal/#preview-image","title":"Preview Image","text":"<ul> <li>2xsal-level2-crt</li> </ul> <ul> <li>2xsal</li> </ul> <ul> <li>4xsal-level2-crt</li> </ul> <ul> <li>4xsal-level2-hq</li> </ul> <ul> <li>4xsal-level2</li> </ul>"},{"location":"shader/xsal/#comments","title":"Comments","text":""},{"location":"shader/xsal/#external-links","title":"External Links","text":"<ul> <li>Slang Shaders</li> <li>GLSL Shaders</li> <li>CG Shaders</li> </ul>"},{"location":"shader/xsoft/","title":"xsoft","text":""},{"location":"shader/xsoft/#background","title":"Background","text":""},{"location":"shader/xsoft/#preview-image","title":"Preview Image","text":"<ul> <li>4xsoft</li> </ul> <ul> <li>4xsoftSdB</li> </ul>"},{"location":"shader/xsoft/#comments","title":"Comments","text":""},{"location":"shader/xsoft/#external-links","title":"External Links","text":"<ul> <li>Slang Shaders</li> <li>GLSL Shaders</li> <li>CG Shaders</li> </ul>"},{"location":"start/installation/","title":"Start Point","text":"<p>RetroArch is a versatile emulator that has been successfully ported to a wide range of platforms. With its ability to run on numerous PC operating systems such as Windows, macOS, and Linux, as well as home consoles like PlayStation 3, Xbox 360, and Wii U, RetroArch offers a comprehensive gaming experience to its users. It is also compatible with handheld consoles like PlayStation Vita and Nintendo 3DS, as well as smartphones running on Android and iOS. </p> <p>In addition to these platforms, RetroArch can also be run on single-board computers such as Raspberry Pi and ODROID. Moreover, with the use of the Emscripten compiler, RetroArch can even be accessed through web browsers. The latest stable version of RetroArch is 1.21.0, and it is regularly updated throughout the month to ensure optimal performance and compatibility. Whether you're a gaming enthusiast or a software developer, RetroArch is an excellent choice for emulating retro games and enjoying a nostalgic gaming experience.</p>"},{"location":"start/installation/#downloading","title":"Downloading","text":"<p>To get started with RetroArch, the first step is to download the application. While some systems may have RetroArch available in their official store or an alternative store, it's also possible to download it directly from the RetroArch website. When downloading, be sure to choose a trusted source that has been approved by LibRetro or is LibRetro itself to ensure a safe and reliable download. Don't hesitate to download from these sources as they are verified by the RetroArch community.</p> <p>Example</p> WindowsAndroid <p>Store:</p> <ul> <li>Steam</li> <li>Itch.io</li> </ul> <p>Main:</p> <ul> <li>Buildbot</li> </ul> <p>Store:</p> <ul> <li>Google Play</li> <li>Amazon</li> </ul> <p>Main:</p> <ul> <li>Buildbot</li> </ul> <p>As you can see here, Google Play installation and distribution was made by LibRetro, while Amazon was done by Gadsby. This is a rare event. In some cases, we may need to perform the distribution outside of our original account. The reasons for this can be technical as well as bureaucratic. We report these situations and external uploads made on the link that we did not report or share do not belong to us.</p> <p>Now that we've talked about our download sources, we can come to the download stages. You can use one of the two channels for this. One of them is our original website and the other is the buildbot where our application is produced. It downloads from the same source on both links, so you can use both.</p> <p>After entering the website, you will encounter the situation where you can use one of the two download options. This applies for most platforms. These options are divided into two as Stable and Nightly. Let's get to know these options closely:</p> StableNightly <p>The stable version is our first priority and the main distribution version. Since it is the major release, it comes out periodically. Stable releases take more time to manufacture, but new features become available in the next version. For example: A version can have a new theme and feature, and in the next version, this theme and feature can be removed, improved or changed. As can be understood from the name of Stable, this version is more stable because it is controlled accordingly to make it work better on the platform it is suitable for.</p> <p>This version contains the latest commits available on GitHub, and the latest enhancements and features are added daily. This version may not be as stable as Stable version because it is build daily, but this does not mean that it is not stable.</p> <p>So how do you decide which of these options is right for you? This is hidden in the answer to one of the two questions below.  <p> </p> <p>After you decide which version to install, you can go to the appropriate installation steps for your platform. </p> <p>If the installation is finished, you can continue with the love at first sight page.</p>"},{"location":"start/last-station/","title":"Last Station","text":"<p>Here we will touch on some critical topics and run our first content.</p>  WARNING RetroArch and LibRetro do not illegally share copyrighted content. There is no support for the reproduction or distribution of copyrighted content."},{"location":"start/last-station/#cores","title":"Cores","text":"<p>RetroArch requires cores to run any content. A core is a program that has been ported to the libretro API and runs inside a libretro frontend. You can download cores directly from RetroArch's interface by following this procedure:</p> <p></p> <ul> <li>Navigate to Online Updater</li> <li>Navigate to Select Core Downloader</li> <li>Select the core you want to download</li> </ul>  TIP The online updater option may be hidden in some cases and there may be several reasons for this, for example, the distribution of Cores in the Steam version depends on permissions and licenses."},{"location":"start/last-station/#running-content","title":"Running Content","text":"<p>After you have installed one or more cores you can run your content following this procedure:</p> <ul> <li>Navigate to Load Content</li> <li>Browse to the folder that contains the content you want to run</li> <li>Select the content that you want to run</li> <li>If you have more than one compatible core you will be asked to select the core you want to use for that purpose</li> </ul> <p></p> <p>And here is the fancy diagram down below:</p> <p> <p> </p>"},{"location":"start/love-at-first-sight/","title":"Love at first sight","text":"<p>When you first start the application, you will see a menu like the one below. Don't let this scare you, we feel cold when we first enter the water. You can see the menu blocks by hovering your pointer over the image. RetroArch's menu is called Ozone and its goal is a being modern and fast menu experience. Ozone's simple user interface shows you everything you have access to. Note the way the interface appears on the screen: the main categories are on the left, subcategories are in the middle, and the selections are on the right.</p> <p> </p> RedGreenOrangeBlue <p>This is your sidebar and navigating this menu will also change the main menu in the middle of the screen. Except for Main Menu and Settings, most options are playlists and can be changed, but those two options are built into the application.</p> <p>This is your main screen and the screen will not change unless you confirm the selection. For example, when you go to Settings in your Sidebar, it will change. When you select any option in Settings, the relevant menu will appear.</p> <p>This is the notification tab connected to your system, where you can see the time and date. You can hide it or change the clock type.</p> <p>This is the part that shows your selection values. You can see the version on the left.</p> <p>You can find more information for Ozone at this page.</p>"},{"location":"start/love-at-first-sight/#controls","title":"Controls","text":"<p>RetroArch is intended to be easily controlled with a controller. RetroArch uses the overall term controller which encompasses all input hardware that could be described by the terms joypad, gamepad, joystick, and others.</p> <p>RetroArch works on many platforms. Each of these platforms has one or more input systems. These input systems in turn differ widely in the way they enumerate the pad buttons. For this reason, your joypad buttons may be mapped differently depending on if you are using Windows, Mac, or Linux.</p> <p>Navigating on RetroArch is as easy as you can imagine. Depending on the device you have, the control scheme is determined automatically. For example, if you are going to use it on a computer, the basic key combinations of the keyboard will apply. You move with the arrow keys and select with the Enter key, and you return with the Backspace key. If you plug in a controller, you can also move with the D-Pad keys.  <p></p> <p></p> See the keys User 1 Keyboard Default RetroPad Mapping <p>In the example below, we can navigate the menus with the arrow keys of the keyboard. If I had installed it on Vita, I would still navigate the menu with the arrow keys. </p> <p> <p> You can find more information for keys at this page. </p> <p>If we feel more comfortable with the menu and navigation, we can move on to the last station.</p>"},{"location":"start/understanding/","title":"Understanding Basics","text":"<p>RetroArch is a frontend for emulators, game engines and media players.</p>"},{"location":"start/understanding/#what-retroarch-is","title":"What RetroArch is","text":"<p>It runs programs converted into dynamic libraries called libretro cores, using several user interfaces such as command-line interface, a few graphical user interfaces optimized for gamepads, several input, audio and video drivers, plus other sophisticated features like dynamic rate control, audio filters, multi-pass shaders, netplay, gameplay rewinding, cheats, etc. Settings are also unified so configuration is done once and for all.</p> <p>In addition to this, you are able to run original game discs (CDs) from RetroArch.</p>"},{"location":"start/understanding/#what-retroarch-is-not","title":"What RetroArch is not","text":"<p>RetroArch is not a computer program that includes all consoles and games. It is not a service that allows you to download copyrighted games or content. It is not an application that will cause you to modify the application to the platform on which you will install it, but in order to run unsigned applications on some platforms, the default firmware needs to be modified.</p>"},{"location":"start/understanding/#what-is-libretro","title":"What is LibRetro","text":"<p>Libretro is a simple API that allows for the creation of games and emulators. It is very simple in nature, yet very powerful. The simplicity of it all requires some explanation in order to truly grasp how useful it can be to your own projects.</p> <p>While the libretro API is simple in nature, it is also incredibly powerful. By using the libretro API, your program becomes a single library file, known as a 'libretro core', that can be loaded by any frontend that supports the libretro API. </p> <p>The beauty of this approach is that the frontend is responsible for providing all the implementation-specific details, such as video/audio/input drivers. This means that as a developer, you don't have to worry about writing different video drivers for Direct3D or OpenGL, or supporting all known joypads or input/sound APIs. All of these details are handled by the frontend, which frees up your time and energy to focus solely on creating the main program.</p> <p>Additionally, the libretro API allows for cross-platform compatibility, meaning that a libretro core can be used on multiple platforms with minimal effort. This makes it an ideal choice for developers who want to create games or emulators that can be easily ported to different platforms.</p> <p>In summary, the libretro API offers a simple yet powerful way to create games and emulators. By separating the implementation-specific details from the main program, the libretro API allows developers to focus on creating high-quality content without worrying about the underlying technical details.</p>"},{"location":"start/understanding/#logomascot","title":"Logo/Mascot","text":"<p> We call them Invader but you can call it Nice Little Pixel, it was drawn from scratch by talented Runar Heyer and it has a completely different visual style.</p> <p>Let's continue if we understood LibRetro and RetroArch. Click here to get started.</p>"},{"location":"support/privacy-policy/","title":"Privacy Policy","text":"<p>This privacy policy has been compiled to better serve those who are concerned with how their \u2018Personally identifiable information\u2019 (PII) is being used online. PII, as used in US privacy law and information security, is information that can be used on its own or with other information to identify, contact, or locate a single person, or to identify an individual in context. Please read our privacy policy carefully to get a clear understanding of how we collect, use, protect or otherwise handle your Personally Identifiable Information in accordance with our website..</p>"},{"location":"support/privacy-policy/#google-adsense","title":"Google Adsense","text":"<p>On some of our websites, third party vendors, including Google, use cookies to serve ads based on your previous visit(s) to our website and/or other websites.</p> <p>Google\u2019s use of advertising cookies enables it and its partners to serve ads to you based on your visit(s) to our site(s) and/or other sites on the Internet.</p> <p>Opting out: Users can set preferences for how Google advertises to you using the Google Ad Settings page. Alternatively, you can opt out by visiting the Network Advertising initiative opt out page or permanently using the Google Analytics Opt Out Browser add on.</p>"},{"location":"support/privacy-policy/#google-analytics","title":"Google Analytics","text":"<p>This site uses Google Analytics which is one of the most widespread and trusted analytics solution on the web for helping us to understand how you use the site and ways that we can improve your experience. These cookies may track things such as how long you spend on the site and the pages that you visit so we can continue to produce engaging content.</p> <p>For more information on Google cookies, see the official Google page.</p>"},{"location":"support/quick-informations/","title":"Quick informations","text":""},{"location":"support/quick-informations/#what-is-the-latest-version-of-retroarch","title":"What is the latest version of RetroArch","text":"<p>It is 1.21.0. You can find it here here.</p>"},{"location":"support/quick-informations/#what-are-the-official-links","title":"What are the official links","text":"MainHelpSupportVideoStorefronts <ul> <li>Website</li> <li>Twitter </li> <li>Facebook</li> <li>Forum</li> <li>Discord</li> <li>YouTube</li> <li>Lakka's Website</li> <li>Github Repository</li> <li>Lakka's Twitter</li> </ul> <ul> <li>F.A.Q</li> <li>Libretro Documentation</li> <li>Lakka Doc</li> <li>Facebook Group</li> <li>Steam Group</li> </ul> <ul> <li>Teespring</li> <li>Patreon</li> <li>YouTube Membership</li> <li>Liberapay</li> <li>BountySource</li> <li>Service status</li> </ul> <ul> <li>LibRetro</li> <li>RetroArch Gameplays</li> <li>Dailymotion[^3]</li> <li>Facebook Watch</li> <li>Facebook Gaming</li> <li>Lakka's YouTube</li> </ul> <ul> <li>Steam</li> <li>Itch.io</li> <li>Amazon</li> <li>HUAWEI AppGallery</li> </ul>"},{"location":"support/quick-informations/#which-platforms-is-retroarch-available-for","title":"Which platforms is RetroArch available for?","text":"<p>RetroArch runs and is supported on GNU/Linux, BSD, Windows, Mac OSX (PPC/Intel), Haiku, PlayStation Classic, PlayStation 2, PlayStation 3, Playstation Vita, Playstation Portable, Xbox 360, Xbox One, Raspberry Pi, Nintendo GameCube, Nintendo Wii, Nintendo Wii U, Nintendo 3DS &amp; 2DS Family, Nintendo Switch, Steam Link, Android, iOS, Apple TV, Open Pandora, Blackberry and even on web browsers by using the Emscripten compiler.</p>"},{"location":"support/quick-informations/#what-is-the-license-for-this","title":"What is the license for this?","text":"<p>libretro is released under the MIT license. RetroArch is released under the GNU GPLv3. The cores are usually released with the same license as the originating projects.</p>"},{"location":"support/quick-informations/#gameplay-videos","title":"Gameplay videos","text":"<p>We regularly post videos on our second channel to show the performance of RetroArch running on devices. This may differ from device to device as well as be effective in versions. We try to highlight this in the video descriptions and the cards shown in the video. On the cards in the video, the year the content was released, the core used in the content, the video driver, etc. you can see such informations. Below are the types of devices and their distinctive features.</p> XBOX Series SXBOX One SNintendo SwitchNintendo 3DSAmazon Fire TVNintendo WiiSteam LinkSony PS VitaWindows PCLinux PCWindows LaptopRaspberry Pi 4 <ul> <li>First release serie(November 10, 2020).</li> <li>Always latest OFW(Non-insider).</li> <li>Self publish and dev mode.</li> <li>Latest RetroArch version.</li> </ul> <ul> <li>First release serie(August 2, 2016).</li> <li>Always latest OFW(Non-insider).</li> <li>Self publish instead dev mode.</li> <li>Latest RetroArch version.</li> </ul> <p>Neither RetroArch nor LibRetro recommend hacking the device or use CFW.</p> <ul> <li>First release serie(March 3, 2017).</li> <li>OFW and CFW isn't latest.</li> <li>Title takeover instead applet mode.</li> <li>Nightly RetroArch version.</li> <li>SDCARD isn't formatted as exFAT. </li> </ul> <p>Neither RetroArch nor LibRetro recommend hacking the device or use CFW.</p> <ul> <li>SNES edition release (November 27, 2017).</li> <li>OFW and CFW is latest.</li> <li>CIA installation.</li> <li>Latest stable RetroArch version and cores. </li> </ul> <ul> <li>FireTV Stick 4K</li> <li>Release version October 31, 2018.</li> <li>Latest OFW.</li> <li>Store version instead sideload.</li> </ul> <p>Neither RetroArch nor LibRetro recommend hacking the device or use CFW.</p> <ul> <li>First release version (November 19, 2006).</li> <li>OFW and CFW is latest.</li> <li>Latest stable RetroArch version and cores.</li> <li>MicroSD</li> </ul> <ul> <li>First release version (November 10, 2015).</li> <li>Steam Link HW version instead phone application.</li> <li>Always BETA OFW.</li> <li>RetroArch 1.8.7 and Cores from 2018/2019 commits</li> <li>Internal storage  </li> </ul> <p>Neither RetroArch nor LibRetro recommend hacking the device or use CFW.</p> <ul> <li>First release version (February 22, 2012).</li> <li>OLED version.</li> <li>OFW and CFW is latest.</li> <li>SD2VITA</li> <li>Latest stable RetroArch version and cores. </li> </ul> <ul> <li>Windows 11 with latest updates.</li> <li>Hardware  <ul> <li>CPU: Ryzen 7 1800x</li> <li>GPU: Zotac GTX 1080</li> <li>Memory: 32GB 2933Mhz</li> <li>Monitor: 144hz 1ms</li> </ul> </li> <li>Portable version.</li> <li>Latest stable RetroArch version and cores.</li> <li>Retroarch on SSD and contents are located in NVME.</li> <li>Game Bar: Off</li> <li>Game DVR: Off</li> <li>Game DVR Background Recording: Off</li> <li>Game Mode: On</li> <li>Hardware GPU Scheduler: On</li> </ul> <ul> <li>POP!_OS 21.04 Nvidia.</li> <li>Hardware  <ul> <li>CPU: Ryzen 7 1800x</li> <li>GPU: Zotac GTX 1080</li> <li>Memory: 32GB 2933Mhz</li> </ul> </li> <li>Flatpak version.</li> <li>Latest stable RetroArch version and cores.</li> <li>Retroarch on HDD and contents are located in HDD.</li> </ul> <ul> <li>Windows 10.</li> <li>HP EliteBook 840 G7</li> <li>Portable version.</li> <li>Latest stable RetroArch version and cores.</li> <li>Retroarch on SSD and contents are located in SSD.</li> </ul> <ul> <li>Lakka.</li> <li>4GB version.</li> <li>Latest stable RetroArch version and cores.</li> <li>FAT32 microsd.</li> </ul> <p>We provide these details for information purposes only and we cannot guarantee that they will perform as well. You can find full list in here.</p>"},{"location":"support/quick-informations/#recording","title":"Recording","text":"<p>We use Razer Ripsaw for video transmission and stable version of OBS for video recording. Sometimes we use original parts, and sometimes we use fastest HDMI possible. Here is you can find recording settings:</p> Settings Encoder NVIDIA NVENC H.264(NEW) Rate Control CBR Bitrate 16000 Kbps Keyframe Interval 2 Preset Max Quality Profile High Look-ahead and Psycho VT Max B-frames 2 <pre><code>    video settings reset:\n       base resolution:   1920x1080\n       output resolution: 1920x1080\n       downscale filter:  Lanczos\n       fps:               60/1\n       format:            NV12\n       YUV mode:          709/Full\n    NV12 texture support enabled\n\n   audio settings reset:\n    samples per sec: 48000\n</code></pre>"},{"location":"support/quick-informations/#editing","title":"Editing","text":"<p>We use Adobe Premiere Pro CC 2019 to edit videos and Media Encoder CC 2019 to render. You can see our render settings below.</p> <pre><code> Video: 2720x1530 (1,0), 60 fps, Progressive, Software Encoding\n Audio: AAC, 320 kbps, 48 kHz, Stereo\n Bitrate: VBR, 1 pass, Target 40,00 Mbps, Max 40,00 Mbps\n</code></pre>"},{"location":"tech/developing-cores/","title":"Developing Cores","text":"<p>Libretro API- An Introduction (YouTube)</p> <p>The Libretro API is a lightweight C-based Application Programming Interface (API) that exposes generic audio, video, and input callbacks. Developers of \"cores\" such as standalone games, game emulators, media players, and other applications don\u2019t have to worry about writing different video drivers for Direct3D, OpenGL or worrying about catering to all possible input APIs, sound APIs, gamepads, etc.</p> <p>When you choose to use the libretro API, your program gets turned into a single library file (called a \u2018libretro core\u2019). A frontend that supports the libretro API can then load that library file and run the app. The frontend\u2019s responsibility is to provide all the implementation-specific details. The libretro core\u2019s responsibility is solely to provide the main program.</p> <p>Any project that is ported to work with this API can be made to run on ANY libretro frontend \u2013 now and forever. You maintain a single codebase that only deals with the main program, and you then target one single API (libretro) in order to port your program over to multiple platforms at once. A libretro core written in portable C or C++ can run seamlessly on many platforms with very little or no porting effort. Libretro bindings for other languages are growing increasingly common and comprehensive as well.</p>"}]}